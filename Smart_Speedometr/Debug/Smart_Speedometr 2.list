
Smart_Speedometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f50  08006f50  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006f50  08006f50  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006f50  08006f50  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f50  08006f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f54  08006f54  00007f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006f58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000068  08006fc0  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08006fc0  0000874c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125df  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd1  00000000  00000000  0001a66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017d91  00000000  00000000  0001e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016368  00000000  00000000  000364e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00097d59  00000000  00000000  0004c851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e45aa  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ec4  00000000  00000000  000e45ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bd0  00000000  00000000  000e54b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ea084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006684 	.word	0x08006684

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08006684 	.word	0x08006684

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			@ (mov r8, r8)

0800022c <__aeabi_f2uiz>:
 800022c:	219e      	movs	r1, #158	@ 0x9e
 800022e:	b510      	push	{r4, lr}
 8000230:	05c9      	lsls	r1, r1, #23
 8000232:	1c04      	adds	r4, r0, #0
 8000234:	f000 fdcc 	bl	8000dd0 <__aeabi_fcmpge>
 8000238:	2800      	cmp	r0, #0
 800023a:	d103      	bne.n	8000244 <__aeabi_f2uiz+0x18>
 800023c:	1c20      	adds	r0, r4, #0
 800023e:	f000 fce1 	bl	8000c04 <__aeabi_f2iz>
 8000242:	bd10      	pop	{r4, pc}
 8000244:	219e      	movs	r1, #158	@ 0x9e
 8000246:	1c20      	adds	r0, r4, #0
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	f000 fa77 	bl	800073c <__aeabi_fsub>
 800024e:	f000 fcd9 	bl	8000c04 <__aeabi_f2iz>
 8000252:	2380      	movs	r3, #128	@ 0x80
 8000254:	061b      	lsls	r3, r3, #24
 8000256:	469c      	mov	ip, r3
 8000258:	4460      	add	r0, ip
 800025a:	e7f2      	b.n	8000242 <__aeabi_f2uiz+0x16>

0800025c <__aeabi_fdiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4646      	mov	r6, r8
 8000260:	464f      	mov	r7, r9
 8000262:	46d6      	mov	lr, sl
 8000264:	0245      	lsls	r5, r0, #9
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0fc3      	lsrs	r3, r0, #31
 800026a:	0047      	lsls	r7, r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	1c0e      	adds	r6, r1, #0
 8000270:	0a6d      	lsrs	r5, r5, #9
 8000272:	0e3f      	lsrs	r7, r7, #24
 8000274:	d05b      	beq.n	800032e <__aeabi_fdiv+0xd2>
 8000276:	2fff      	cmp	r7, #255	@ 0xff
 8000278:	d021      	beq.n	80002be <__aeabi_fdiv+0x62>
 800027a:	2380      	movs	r3, #128	@ 0x80
 800027c:	00ed      	lsls	r5, r5, #3
 800027e:	04db      	lsls	r3, r3, #19
 8000280:	431d      	orrs	r5, r3
 8000282:	2300      	movs	r3, #0
 8000284:	4699      	mov	r9, r3
 8000286:	469a      	mov	sl, r3
 8000288:	3f7f      	subs	r7, #127	@ 0x7f
 800028a:	0274      	lsls	r4, r6, #9
 800028c:	0073      	lsls	r3, r6, #1
 800028e:	0a64      	lsrs	r4, r4, #9
 8000290:	0e1b      	lsrs	r3, r3, #24
 8000292:	0ff6      	lsrs	r6, r6, #31
 8000294:	2b00      	cmp	r3, #0
 8000296:	d020      	beq.n	80002da <__aeabi_fdiv+0x7e>
 8000298:	2bff      	cmp	r3, #255	@ 0xff
 800029a:	d043      	beq.n	8000324 <__aeabi_fdiv+0xc8>
 800029c:	2280      	movs	r2, #128	@ 0x80
 800029e:	2000      	movs	r0, #0
 80002a0:	00e4      	lsls	r4, r4, #3
 80002a2:	04d2      	lsls	r2, r2, #19
 80002a4:	4314      	orrs	r4, r2
 80002a6:	3b7f      	subs	r3, #127	@ 0x7f
 80002a8:	4642      	mov	r2, r8
 80002aa:	1aff      	subs	r7, r7, r3
 80002ac:	464b      	mov	r3, r9
 80002ae:	4072      	eors	r2, r6
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d900      	bls.n	80002b6 <__aeabi_fdiv+0x5a>
 80002b4:	e09d      	b.n	80003f2 <__aeabi_fdiv+0x196>
 80002b6:	4971      	ldr	r1, [pc, #452]	@ (800047c <__aeabi_fdiv+0x220>)
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	58cb      	ldr	r3, [r1, r3]
 80002bc:	469f      	mov	pc, r3
 80002be:	2d00      	cmp	r5, #0
 80002c0:	d15a      	bne.n	8000378 <__aeabi_fdiv+0x11c>
 80002c2:	2308      	movs	r3, #8
 80002c4:	4699      	mov	r9, r3
 80002c6:	3b06      	subs	r3, #6
 80002c8:	0274      	lsls	r4, r6, #9
 80002ca:	469a      	mov	sl, r3
 80002cc:	0073      	lsls	r3, r6, #1
 80002ce:	27ff      	movs	r7, #255	@ 0xff
 80002d0:	0a64      	lsrs	r4, r4, #9
 80002d2:	0e1b      	lsrs	r3, r3, #24
 80002d4:	0ff6      	lsrs	r6, r6, #31
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1de      	bne.n	8000298 <__aeabi_fdiv+0x3c>
 80002da:	2c00      	cmp	r4, #0
 80002dc:	d13b      	bne.n	8000356 <__aeabi_fdiv+0xfa>
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4649      	mov	r1, r9
 80002e4:	4072      	eors	r2, r6
 80002e6:	4319      	orrs	r1, r3
 80002e8:	290e      	cmp	r1, #14
 80002ea:	d818      	bhi.n	800031e <__aeabi_fdiv+0xc2>
 80002ec:	4864      	ldr	r0, [pc, #400]	@ (8000480 <__aeabi_fdiv+0x224>)
 80002ee:	0089      	lsls	r1, r1, #2
 80002f0:	5841      	ldr	r1, [r0, r1]
 80002f2:	468f      	mov	pc, r1
 80002f4:	4653      	mov	r3, sl
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d100      	bne.n	80002fc <__aeabi_fdiv+0xa0>
 80002fa:	e0b8      	b.n	800046e <__aeabi_fdiv+0x212>
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d06e      	beq.n	80003de <__aeabi_fdiv+0x182>
 8000300:	4642      	mov	r2, r8
 8000302:	002c      	movs	r4, r5
 8000304:	2b01      	cmp	r3, #1
 8000306:	d140      	bne.n	800038a <__aeabi_fdiv+0x12e>
 8000308:	2000      	movs	r0, #0
 800030a:	2400      	movs	r4, #0
 800030c:	05c0      	lsls	r0, r0, #23
 800030e:	4320      	orrs	r0, r4
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4310      	orrs	r0, r2
 8000314:	bce0      	pop	{r5, r6, r7}
 8000316:	46ba      	mov	sl, r7
 8000318:	46b1      	mov	r9, r6
 800031a:	46a8      	mov	r8, r5
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	20ff      	movs	r0, #255	@ 0xff
 8000320:	2400      	movs	r4, #0
 8000322:	e7f3      	b.n	800030c <__aeabi_fdiv+0xb0>
 8000324:	2c00      	cmp	r4, #0
 8000326:	d120      	bne.n	800036a <__aeabi_fdiv+0x10e>
 8000328:	2302      	movs	r3, #2
 800032a:	3fff      	subs	r7, #255	@ 0xff
 800032c:	e7d8      	b.n	80002e0 <__aeabi_fdiv+0x84>
 800032e:	2d00      	cmp	r5, #0
 8000330:	d105      	bne.n	800033e <__aeabi_fdiv+0xe2>
 8000332:	2304      	movs	r3, #4
 8000334:	4699      	mov	r9, r3
 8000336:	3b03      	subs	r3, #3
 8000338:	2700      	movs	r7, #0
 800033a:	469a      	mov	sl, r3
 800033c:	e7a5      	b.n	800028a <__aeabi_fdiv+0x2e>
 800033e:	0028      	movs	r0, r5
 8000340:	f000 fd50 	bl	8000de4 <__clzsi2>
 8000344:	2776      	movs	r7, #118	@ 0x76
 8000346:	1f43      	subs	r3, r0, #5
 8000348:	409d      	lsls	r5, r3
 800034a:	2300      	movs	r3, #0
 800034c:	427f      	negs	r7, r7
 800034e:	4699      	mov	r9, r3
 8000350:	469a      	mov	sl, r3
 8000352:	1a3f      	subs	r7, r7, r0
 8000354:	e799      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000356:	0020      	movs	r0, r4
 8000358:	f000 fd44 	bl	8000de4 <__clzsi2>
 800035c:	1f43      	subs	r3, r0, #5
 800035e:	409c      	lsls	r4, r3
 8000360:	2376      	movs	r3, #118	@ 0x76
 8000362:	425b      	negs	r3, r3
 8000364:	1a1b      	subs	r3, r3, r0
 8000366:	2000      	movs	r0, #0
 8000368:	e79e      	b.n	80002a8 <__aeabi_fdiv+0x4c>
 800036a:	2303      	movs	r3, #3
 800036c:	464a      	mov	r2, r9
 800036e:	431a      	orrs	r2, r3
 8000370:	4691      	mov	r9, r2
 8000372:	2003      	movs	r0, #3
 8000374:	33fc      	adds	r3, #252	@ 0xfc
 8000376:	e797      	b.n	80002a8 <__aeabi_fdiv+0x4c>
 8000378:	230c      	movs	r3, #12
 800037a:	4699      	mov	r9, r3
 800037c:	3b09      	subs	r3, #9
 800037e:	27ff      	movs	r7, #255	@ 0xff
 8000380:	469a      	mov	sl, r3
 8000382:	e782      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000384:	2803      	cmp	r0, #3
 8000386:	d02c      	beq.n	80003e2 <__aeabi_fdiv+0x186>
 8000388:	0032      	movs	r2, r6
 800038a:	0038      	movs	r0, r7
 800038c:	307f      	adds	r0, #127	@ 0x7f
 800038e:	2800      	cmp	r0, #0
 8000390:	dd47      	ble.n	8000422 <__aeabi_fdiv+0x1c6>
 8000392:	0763      	lsls	r3, r4, #29
 8000394:	d004      	beq.n	80003a0 <__aeabi_fdiv+0x144>
 8000396:	230f      	movs	r3, #15
 8000398:	4023      	ands	r3, r4
 800039a:	2b04      	cmp	r3, #4
 800039c:	d000      	beq.n	80003a0 <__aeabi_fdiv+0x144>
 800039e:	3404      	adds	r4, #4
 80003a0:	0123      	lsls	r3, r4, #4
 80003a2:	d503      	bpl.n	80003ac <__aeabi_fdiv+0x150>
 80003a4:	0038      	movs	r0, r7
 80003a6:	4b37      	ldr	r3, [pc, #220]	@ (8000484 <__aeabi_fdiv+0x228>)
 80003a8:	3080      	adds	r0, #128	@ 0x80
 80003aa:	401c      	ands	r4, r3
 80003ac:	28fe      	cmp	r0, #254	@ 0xfe
 80003ae:	dcb6      	bgt.n	800031e <__aeabi_fdiv+0xc2>
 80003b0:	01a4      	lsls	r4, r4, #6
 80003b2:	0a64      	lsrs	r4, r4, #9
 80003b4:	b2c0      	uxtb	r0, r0
 80003b6:	e7a9      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003b8:	2480      	movs	r4, #128	@ 0x80
 80003ba:	2200      	movs	r2, #0
 80003bc:	20ff      	movs	r0, #255	@ 0xff
 80003be:	03e4      	lsls	r4, r4, #15
 80003c0:	e7a4      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003c2:	2380      	movs	r3, #128	@ 0x80
 80003c4:	03db      	lsls	r3, r3, #15
 80003c6:	421d      	tst	r5, r3
 80003c8:	d001      	beq.n	80003ce <__aeabi_fdiv+0x172>
 80003ca:	421c      	tst	r4, r3
 80003cc:	d00b      	beq.n	80003e6 <__aeabi_fdiv+0x18a>
 80003ce:	2480      	movs	r4, #128	@ 0x80
 80003d0:	03e4      	lsls	r4, r4, #15
 80003d2:	432c      	orrs	r4, r5
 80003d4:	0264      	lsls	r4, r4, #9
 80003d6:	4642      	mov	r2, r8
 80003d8:	20ff      	movs	r0, #255	@ 0xff
 80003da:	0a64      	lsrs	r4, r4, #9
 80003dc:	e796      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003de:	4646      	mov	r6, r8
 80003e0:	002c      	movs	r4, r5
 80003e2:	2380      	movs	r3, #128	@ 0x80
 80003e4:	03db      	lsls	r3, r3, #15
 80003e6:	431c      	orrs	r4, r3
 80003e8:	0264      	lsls	r4, r4, #9
 80003ea:	0032      	movs	r2, r6
 80003ec:	20ff      	movs	r0, #255	@ 0xff
 80003ee:	0a64      	lsrs	r4, r4, #9
 80003f0:	e78c      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003f2:	016d      	lsls	r5, r5, #5
 80003f4:	0160      	lsls	r0, r4, #5
 80003f6:	4285      	cmp	r5, r0
 80003f8:	d22d      	bcs.n	8000456 <__aeabi_fdiv+0x1fa>
 80003fa:	231b      	movs	r3, #27
 80003fc:	2400      	movs	r4, #0
 80003fe:	3f01      	subs	r7, #1
 8000400:	2601      	movs	r6, #1
 8000402:	0029      	movs	r1, r5
 8000404:	0064      	lsls	r4, r4, #1
 8000406:	006d      	lsls	r5, r5, #1
 8000408:	2900      	cmp	r1, #0
 800040a:	db01      	blt.n	8000410 <__aeabi_fdiv+0x1b4>
 800040c:	4285      	cmp	r5, r0
 800040e:	d301      	bcc.n	8000414 <__aeabi_fdiv+0x1b8>
 8000410:	1a2d      	subs	r5, r5, r0
 8000412:	4334      	orrs	r4, r6
 8000414:	3b01      	subs	r3, #1
 8000416:	2b00      	cmp	r3, #0
 8000418:	d1f3      	bne.n	8000402 <__aeabi_fdiv+0x1a6>
 800041a:	1e6b      	subs	r3, r5, #1
 800041c:	419d      	sbcs	r5, r3
 800041e:	432c      	orrs	r4, r5
 8000420:	e7b3      	b.n	800038a <__aeabi_fdiv+0x12e>
 8000422:	2301      	movs	r3, #1
 8000424:	1a1b      	subs	r3, r3, r0
 8000426:	2b1b      	cmp	r3, #27
 8000428:	dd00      	ble.n	800042c <__aeabi_fdiv+0x1d0>
 800042a:	e76d      	b.n	8000308 <__aeabi_fdiv+0xac>
 800042c:	0021      	movs	r1, r4
 800042e:	379e      	adds	r7, #158	@ 0x9e
 8000430:	40d9      	lsrs	r1, r3
 8000432:	40bc      	lsls	r4, r7
 8000434:	000b      	movs	r3, r1
 8000436:	1e61      	subs	r1, r4, #1
 8000438:	418c      	sbcs	r4, r1
 800043a:	4323      	orrs	r3, r4
 800043c:	0759      	lsls	r1, r3, #29
 800043e:	d004      	beq.n	800044a <__aeabi_fdiv+0x1ee>
 8000440:	210f      	movs	r1, #15
 8000442:	4019      	ands	r1, r3
 8000444:	2904      	cmp	r1, #4
 8000446:	d000      	beq.n	800044a <__aeabi_fdiv+0x1ee>
 8000448:	3304      	adds	r3, #4
 800044a:	0159      	lsls	r1, r3, #5
 800044c:	d413      	bmi.n	8000476 <__aeabi_fdiv+0x21a>
 800044e:	019b      	lsls	r3, r3, #6
 8000450:	2000      	movs	r0, #0
 8000452:	0a5c      	lsrs	r4, r3, #9
 8000454:	e75a      	b.n	800030c <__aeabi_fdiv+0xb0>
 8000456:	231a      	movs	r3, #26
 8000458:	2401      	movs	r4, #1
 800045a:	1a2d      	subs	r5, r5, r0
 800045c:	e7d0      	b.n	8000400 <__aeabi_fdiv+0x1a4>
 800045e:	1e98      	subs	r0, r3, #2
 8000460:	4243      	negs	r3, r0
 8000462:	4158      	adcs	r0, r3
 8000464:	4240      	negs	r0, r0
 8000466:	0032      	movs	r2, r6
 8000468:	2400      	movs	r4, #0
 800046a:	b2c0      	uxtb	r0, r0
 800046c:	e74e      	b.n	800030c <__aeabi_fdiv+0xb0>
 800046e:	4642      	mov	r2, r8
 8000470:	20ff      	movs	r0, #255	@ 0xff
 8000472:	2400      	movs	r4, #0
 8000474:	e74a      	b.n	800030c <__aeabi_fdiv+0xb0>
 8000476:	2001      	movs	r0, #1
 8000478:	2400      	movs	r4, #0
 800047a:	e747      	b.n	800030c <__aeabi_fdiv+0xb0>
 800047c:	080066f4 	.word	0x080066f4
 8000480:	08006734 	.word	0x08006734
 8000484:	f7ffffff 	.word	0xf7ffffff

08000488 <__aeabi_fmul>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	464f      	mov	r7, r9
 800048c:	4646      	mov	r6, r8
 800048e:	46d6      	mov	lr, sl
 8000490:	0044      	lsls	r4, r0, #1
 8000492:	b5c0      	push	{r6, r7, lr}
 8000494:	0246      	lsls	r6, r0, #9
 8000496:	1c0f      	adds	r7, r1, #0
 8000498:	0a76      	lsrs	r6, r6, #9
 800049a:	0e24      	lsrs	r4, r4, #24
 800049c:	0fc5      	lsrs	r5, r0, #31
 800049e:	2c00      	cmp	r4, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fmul+0x1c>
 80004a2:	e0da      	b.n	800065a <__aeabi_fmul+0x1d2>
 80004a4:	2cff      	cmp	r4, #255	@ 0xff
 80004a6:	d074      	beq.n	8000592 <__aeabi_fmul+0x10a>
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	00f6      	lsls	r6, r6, #3
 80004ac:	04db      	lsls	r3, r3, #19
 80004ae:	431e      	orrs	r6, r3
 80004b0:	2300      	movs	r3, #0
 80004b2:	4699      	mov	r9, r3
 80004b4:	469a      	mov	sl, r3
 80004b6:	3c7f      	subs	r4, #127	@ 0x7f
 80004b8:	027b      	lsls	r3, r7, #9
 80004ba:	0a5b      	lsrs	r3, r3, #9
 80004bc:	4698      	mov	r8, r3
 80004be:	007b      	lsls	r3, r7, #1
 80004c0:	0e1b      	lsrs	r3, r3, #24
 80004c2:	0fff      	lsrs	r7, r7, #31
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d074      	beq.n	80005b2 <__aeabi_fmul+0x12a>
 80004c8:	2bff      	cmp	r3, #255	@ 0xff
 80004ca:	d100      	bne.n	80004ce <__aeabi_fmul+0x46>
 80004cc:	e08e      	b.n	80005ec <__aeabi_fmul+0x164>
 80004ce:	4642      	mov	r2, r8
 80004d0:	2180      	movs	r1, #128	@ 0x80
 80004d2:	00d2      	lsls	r2, r2, #3
 80004d4:	04c9      	lsls	r1, r1, #19
 80004d6:	4311      	orrs	r1, r2
 80004d8:	3b7f      	subs	r3, #127	@ 0x7f
 80004da:	002a      	movs	r2, r5
 80004dc:	18e4      	adds	r4, r4, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	407a      	eors	r2, r7
 80004e2:	4688      	mov	r8, r1
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	2b0a      	cmp	r3, #10
 80004e8:	dc75      	bgt.n	80005d6 <__aeabi_fmul+0x14e>
 80004ea:	464b      	mov	r3, r9
 80004ec:	2000      	movs	r0, #0
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	dd0f      	ble.n	8000512 <__aeabi_fmul+0x8a>
 80004f2:	4649      	mov	r1, r9
 80004f4:	2301      	movs	r3, #1
 80004f6:	408b      	lsls	r3, r1
 80004f8:	21a6      	movs	r1, #166	@ 0xa6
 80004fa:	00c9      	lsls	r1, r1, #3
 80004fc:	420b      	tst	r3, r1
 80004fe:	d169      	bne.n	80005d4 <__aeabi_fmul+0x14c>
 8000500:	2190      	movs	r1, #144	@ 0x90
 8000502:	0089      	lsls	r1, r1, #2
 8000504:	420b      	tst	r3, r1
 8000506:	d000      	beq.n	800050a <__aeabi_fmul+0x82>
 8000508:	e100      	b.n	800070c <__aeabi_fmul+0x284>
 800050a:	2188      	movs	r1, #136	@ 0x88
 800050c:	4219      	tst	r1, r3
 800050e:	d000      	beq.n	8000512 <__aeabi_fmul+0x8a>
 8000510:	e0f5      	b.n	80006fe <__aeabi_fmul+0x276>
 8000512:	4641      	mov	r1, r8
 8000514:	0409      	lsls	r1, r1, #16
 8000516:	0c09      	lsrs	r1, r1, #16
 8000518:	4643      	mov	r3, r8
 800051a:	0008      	movs	r0, r1
 800051c:	0c35      	lsrs	r5, r6, #16
 800051e:	0436      	lsls	r6, r6, #16
 8000520:	0c1b      	lsrs	r3, r3, #16
 8000522:	0c36      	lsrs	r6, r6, #16
 8000524:	4370      	muls	r0, r6
 8000526:	4369      	muls	r1, r5
 8000528:	435e      	muls	r6, r3
 800052a:	435d      	muls	r5, r3
 800052c:	1876      	adds	r6, r6, r1
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	199b      	adds	r3, r3, r6
 8000532:	4299      	cmp	r1, r3
 8000534:	d903      	bls.n	800053e <__aeabi_fmul+0xb6>
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	0249      	lsls	r1, r1, #9
 800053a:	468c      	mov	ip, r1
 800053c:	4465      	add	r5, ip
 800053e:	0400      	lsls	r0, r0, #16
 8000540:	0419      	lsls	r1, r3, #16
 8000542:	0c00      	lsrs	r0, r0, #16
 8000544:	1809      	adds	r1, r1, r0
 8000546:	018e      	lsls	r6, r1, #6
 8000548:	1e70      	subs	r0, r6, #1
 800054a:	4186      	sbcs	r6, r0
 800054c:	0c1b      	lsrs	r3, r3, #16
 800054e:	0e89      	lsrs	r1, r1, #26
 8000550:	195b      	adds	r3, r3, r5
 8000552:	430e      	orrs	r6, r1
 8000554:	019b      	lsls	r3, r3, #6
 8000556:	431e      	orrs	r6, r3
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	d46c      	bmi.n	8000636 <__aeabi_fmul+0x1ae>
 800055c:	0023      	movs	r3, r4
 800055e:	337f      	adds	r3, #127	@ 0x7f
 8000560:	2b00      	cmp	r3, #0
 8000562:	dc00      	bgt.n	8000566 <__aeabi_fmul+0xde>
 8000564:	e0b1      	b.n	80006ca <__aeabi_fmul+0x242>
 8000566:	0015      	movs	r5, r2
 8000568:	0771      	lsls	r1, r6, #29
 800056a:	d00b      	beq.n	8000584 <__aeabi_fmul+0xfc>
 800056c:	200f      	movs	r0, #15
 800056e:	0021      	movs	r1, r4
 8000570:	4030      	ands	r0, r6
 8000572:	2804      	cmp	r0, #4
 8000574:	d006      	beq.n	8000584 <__aeabi_fmul+0xfc>
 8000576:	3604      	adds	r6, #4
 8000578:	0132      	lsls	r2, r6, #4
 800057a:	d503      	bpl.n	8000584 <__aeabi_fmul+0xfc>
 800057c:	4b6e      	ldr	r3, [pc, #440]	@ (8000738 <__aeabi_fmul+0x2b0>)
 800057e:	401e      	ands	r6, r3
 8000580:	000b      	movs	r3, r1
 8000582:	3380      	adds	r3, #128	@ 0x80
 8000584:	2bfe      	cmp	r3, #254	@ 0xfe
 8000586:	dd00      	ble.n	800058a <__aeabi_fmul+0x102>
 8000588:	e0bd      	b.n	8000706 <__aeabi_fmul+0x27e>
 800058a:	01b2      	lsls	r2, r6, #6
 800058c:	0a52      	lsrs	r2, r2, #9
 800058e:	b2db      	uxtb	r3, r3
 8000590:	e048      	b.n	8000624 <__aeabi_fmul+0x19c>
 8000592:	2e00      	cmp	r6, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fmul+0x110>
 8000596:	e092      	b.n	80006be <__aeabi_fmul+0x236>
 8000598:	2308      	movs	r3, #8
 800059a:	4699      	mov	r9, r3
 800059c:	3b06      	subs	r3, #6
 800059e:	469a      	mov	sl, r3
 80005a0:	027b      	lsls	r3, r7, #9
 80005a2:	0a5b      	lsrs	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	007b      	lsls	r3, r7, #1
 80005a8:	24ff      	movs	r4, #255	@ 0xff
 80005aa:	0e1b      	lsrs	r3, r3, #24
 80005ac:	0fff      	lsrs	r7, r7, #31
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d18a      	bne.n	80004c8 <__aeabi_fmul+0x40>
 80005b2:	4642      	mov	r2, r8
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	d164      	bne.n	8000682 <__aeabi_fmul+0x1fa>
 80005b8:	4649      	mov	r1, r9
 80005ba:	3201      	adds	r2, #1
 80005bc:	4311      	orrs	r1, r2
 80005be:	4689      	mov	r9, r1
 80005c0:	290a      	cmp	r1, #10
 80005c2:	dc08      	bgt.n	80005d6 <__aeabi_fmul+0x14e>
 80005c4:	407d      	eors	r5, r7
 80005c6:	2001      	movs	r0, #1
 80005c8:	b2ea      	uxtb	r2, r5
 80005ca:	2902      	cmp	r1, #2
 80005cc:	dc91      	bgt.n	80004f2 <__aeabi_fmul+0x6a>
 80005ce:	0015      	movs	r5, r2
 80005d0:	2200      	movs	r2, #0
 80005d2:	e027      	b.n	8000624 <__aeabi_fmul+0x19c>
 80005d4:	0015      	movs	r5, r2
 80005d6:	4653      	mov	r3, sl
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d100      	bne.n	80005de <__aeabi_fmul+0x156>
 80005dc:	e093      	b.n	8000706 <__aeabi_fmul+0x27e>
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d01a      	beq.n	8000618 <__aeabi_fmul+0x190>
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d12c      	bne.n	8000640 <__aeabi_fmul+0x1b8>
 80005e6:	2300      	movs	r3, #0
 80005e8:	2200      	movs	r2, #0
 80005ea:	e01b      	b.n	8000624 <__aeabi_fmul+0x19c>
 80005ec:	4643      	mov	r3, r8
 80005ee:	34ff      	adds	r4, #255	@ 0xff
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d055      	beq.n	80006a0 <__aeabi_fmul+0x218>
 80005f4:	2103      	movs	r1, #3
 80005f6:	464b      	mov	r3, r9
 80005f8:	430b      	orrs	r3, r1
 80005fa:	0019      	movs	r1, r3
 80005fc:	2b0a      	cmp	r3, #10
 80005fe:	dc00      	bgt.n	8000602 <__aeabi_fmul+0x17a>
 8000600:	e092      	b.n	8000728 <__aeabi_fmul+0x2a0>
 8000602:	2b0f      	cmp	r3, #15
 8000604:	d000      	beq.n	8000608 <__aeabi_fmul+0x180>
 8000606:	e08c      	b.n	8000722 <__aeabi_fmul+0x29a>
 8000608:	2280      	movs	r2, #128	@ 0x80
 800060a:	03d2      	lsls	r2, r2, #15
 800060c:	4216      	tst	r6, r2
 800060e:	d003      	beq.n	8000618 <__aeabi_fmul+0x190>
 8000610:	4643      	mov	r3, r8
 8000612:	4213      	tst	r3, r2
 8000614:	d100      	bne.n	8000618 <__aeabi_fmul+0x190>
 8000616:	e07d      	b.n	8000714 <__aeabi_fmul+0x28c>
 8000618:	2280      	movs	r2, #128	@ 0x80
 800061a:	03d2      	lsls	r2, r2, #15
 800061c:	4332      	orrs	r2, r6
 800061e:	0252      	lsls	r2, r2, #9
 8000620:	0a52      	lsrs	r2, r2, #9
 8000622:	23ff      	movs	r3, #255	@ 0xff
 8000624:	05d8      	lsls	r0, r3, #23
 8000626:	07ed      	lsls	r5, r5, #31
 8000628:	4310      	orrs	r0, r2
 800062a:	4328      	orrs	r0, r5
 800062c:	bce0      	pop	{r5, r6, r7}
 800062e:	46ba      	mov	sl, r7
 8000630:	46b1      	mov	r9, r6
 8000632:	46a8      	mov	r8, r5
 8000634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000636:	2301      	movs	r3, #1
 8000638:	0015      	movs	r5, r2
 800063a:	0871      	lsrs	r1, r6, #1
 800063c:	401e      	ands	r6, r3
 800063e:	430e      	orrs	r6, r1
 8000640:	0023      	movs	r3, r4
 8000642:	3380      	adds	r3, #128	@ 0x80
 8000644:	1c61      	adds	r1, r4, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	dd41      	ble.n	80006ce <__aeabi_fmul+0x246>
 800064a:	0772      	lsls	r2, r6, #29
 800064c:	d094      	beq.n	8000578 <__aeabi_fmul+0xf0>
 800064e:	220f      	movs	r2, #15
 8000650:	4032      	ands	r2, r6
 8000652:	2a04      	cmp	r2, #4
 8000654:	d000      	beq.n	8000658 <__aeabi_fmul+0x1d0>
 8000656:	e78e      	b.n	8000576 <__aeabi_fmul+0xee>
 8000658:	e78e      	b.n	8000578 <__aeabi_fmul+0xf0>
 800065a:	2e00      	cmp	r6, #0
 800065c:	d105      	bne.n	800066a <__aeabi_fmul+0x1e2>
 800065e:	2304      	movs	r3, #4
 8000660:	4699      	mov	r9, r3
 8000662:	3b03      	subs	r3, #3
 8000664:	2400      	movs	r4, #0
 8000666:	469a      	mov	sl, r3
 8000668:	e726      	b.n	80004b8 <__aeabi_fmul+0x30>
 800066a:	0030      	movs	r0, r6
 800066c:	f000 fbba 	bl	8000de4 <__clzsi2>
 8000670:	2476      	movs	r4, #118	@ 0x76
 8000672:	1f43      	subs	r3, r0, #5
 8000674:	409e      	lsls	r6, r3
 8000676:	2300      	movs	r3, #0
 8000678:	4264      	negs	r4, r4
 800067a:	4699      	mov	r9, r3
 800067c:	469a      	mov	sl, r3
 800067e:	1a24      	subs	r4, r4, r0
 8000680:	e71a      	b.n	80004b8 <__aeabi_fmul+0x30>
 8000682:	4640      	mov	r0, r8
 8000684:	f000 fbae 	bl	8000de4 <__clzsi2>
 8000688:	464b      	mov	r3, r9
 800068a:	1a24      	subs	r4, r4, r0
 800068c:	3c76      	subs	r4, #118	@ 0x76
 800068e:	2b0a      	cmp	r3, #10
 8000690:	dca1      	bgt.n	80005d6 <__aeabi_fmul+0x14e>
 8000692:	4643      	mov	r3, r8
 8000694:	3805      	subs	r0, #5
 8000696:	4083      	lsls	r3, r0
 8000698:	407d      	eors	r5, r7
 800069a:	4698      	mov	r8, r3
 800069c:	b2ea      	uxtb	r2, r5
 800069e:	e724      	b.n	80004ea <__aeabi_fmul+0x62>
 80006a0:	464a      	mov	r2, r9
 80006a2:	3302      	adds	r3, #2
 80006a4:	4313      	orrs	r3, r2
 80006a6:	002a      	movs	r2, r5
 80006a8:	407a      	eors	r2, r7
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	2b0a      	cmp	r3, #10
 80006ae:	dc92      	bgt.n	80005d6 <__aeabi_fmul+0x14e>
 80006b0:	4649      	mov	r1, r9
 80006b2:	0015      	movs	r5, r2
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d026      	beq.n	8000706 <__aeabi_fmul+0x27e>
 80006b8:	4699      	mov	r9, r3
 80006ba:	2002      	movs	r0, #2
 80006bc:	e719      	b.n	80004f2 <__aeabi_fmul+0x6a>
 80006be:	230c      	movs	r3, #12
 80006c0:	4699      	mov	r9, r3
 80006c2:	3b09      	subs	r3, #9
 80006c4:	24ff      	movs	r4, #255	@ 0xff
 80006c6:	469a      	mov	sl, r3
 80006c8:	e6f6      	b.n	80004b8 <__aeabi_fmul+0x30>
 80006ca:	0015      	movs	r5, r2
 80006cc:	0021      	movs	r1, r4
 80006ce:	2201      	movs	r2, #1
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	2b1b      	cmp	r3, #27
 80006d4:	dd00      	ble.n	80006d8 <__aeabi_fmul+0x250>
 80006d6:	e786      	b.n	80005e6 <__aeabi_fmul+0x15e>
 80006d8:	319e      	adds	r1, #158	@ 0x9e
 80006da:	0032      	movs	r2, r6
 80006dc:	408e      	lsls	r6, r1
 80006de:	40da      	lsrs	r2, r3
 80006e0:	1e73      	subs	r3, r6, #1
 80006e2:	419e      	sbcs	r6, r3
 80006e4:	4332      	orrs	r2, r6
 80006e6:	0753      	lsls	r3, r2, #29
 80006e8:	d004      	beq.n	80006f4 <__aeabi_fmul+0x26c>
 80006ea:	230f      	movs	r3, #15
 80006ec:	4013      	ands	r3, r2
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fmul+0x26c>
 80006f2:	3204      	adds	r2, #4
 80006f4:	0153      	lsls	r3, r2, #5
 80006f6:	d510      	bpl.n	800071a <__aeabi_fmul+0x292>
 80006f8:	2301      	movs	r3, #1
 80006fa:	2200      	movs	r2, #0
 80006fc:	e792      	b.n	8000624 <__aeabi_fmul+0x19c>
 80006fe:	003d      	movs	r5, r7
 8000700:	4646      	mov	r6, r8
 8000702:	4682      	mov	sl, r0
 8000704:	e767      	b.n	80005d6 <__aeabi_fmul+0x14e>
 8000706:	23ff      	movs	r3, #255	@ 0xff
 8000708:	2200      	movs	r2, #0
 800070a:	e78b      	b.n	8000624 <__aeabi_fmul+0x19c>
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	2500      	movs	r5, #0
 8000710:	03d2      	lsls	r2, r2, #15
 8000712:	e786      	b.n	8000622 <__aeabi_fmul+0x19a>
 8000714:	003d      	movs	r5, r7
 8000716:	431a      	orrs	r2, r3
 8000718:	e783      	b.n	8000622 <__aeabi_fmul+0x19a>
 800071a:	0192      	lsls	r2, r2, #6
 800071c:	2300      	movs	r3, #0
 800071e:	0a52      	lsrs	r2, r2, #9
 8000720:	e780      	b.n	8000624 <__aeabi_fmul+0x19c>
 8000722:	003d      	movs	r5, r7
 8000724:	4646      	mov	r6, r8
 8000726:	e777      	b.n	8000618 <__aeabi_fmul+0x190>
 8000728:	002a      	movs	r2, r5
 800072a:	2301      	movs	r3, #1
 800072c:	407a      	eors	r2, r7
 800072e:	408b      	lsls	r3, r1
 8000730:	2003      	movs	r0, #3
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	e6e9      	b.n	800050a <__aeabi_fmul+0x82>
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	f7ffffff 	.word	0xf7ffffff

0800073c <__aeabi_fsub>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	4647      	mov	r7, r8
 8000740:	46ce      	mov	lr, r9
 8000742:	0243      	lsls	r3, r0, #9
 8000744:	b580      	push	{r7, lr}
 8000746:	0a5f      	lsrs	r7, r3, #9
 8000748:	099b      	lsrs	r3, r3, #6
 800074a:	0045      	lsls	r5, r0, #1
 800074c:	004a      	lsls	r2, r1, #1
 800074e:	469c      	mov	ip, r3
 8000750:	024b      	lsls	r3, r1, #9
 8000752:	0fc4      	lsrs	r4, r0, #31
 8000754:	0fce      	lsrs	r6, r1, #31
 8000756:	0e2d      	lsrs	r5, r5, #24
 8000758:	0a58      	lsrs	r0, r3, #9
 800075a:	0e12      	lsrs	r2, r2, #24
 800075c:	0999      	lsrs	r1, r3, #6
 800075e:	2aff      	cmp	r2, #255	@ 0xff
 8000760:	d06b      	beq.n	800083a <__aeabi_fsub+0xfe>
 8000762:	2301      	movs	r3, #1
 8000764:	405e      	eors	r6, r3
 8000766:	1aab      	subs	r3, r5, r2
 8000768:	42b4      	cmp	r4, r6
 800076a:	d04b      	beq.n	8000804 <__aeabi_fsub+0xc8>
 800076c:	2b00      	cmp	r3, #0
 800076e:	dc00      	bgt.n	8000772 <__aeabi_fsub+0x36>
 8000770:	e0ff      	b.n	8000972 <__aeabi_fsub+0x236>
 8000772:	2a00      	cmp	r2, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fsub+0x3c>
 8000776:	e088      	b.n	800088a <__aeabi_fsub+0x14e>
 8000778:	2dff      	cmp	r5, #255	@ 0xff
 800077a:	d100      	bne.n	800077e <__aeabi_fsub+0x42>
 800077c:	e0ef      	b.n	800095e <__aeabi_fsub+0x222>
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	04d2      	lsls	r2, r2, #19
 8000782:	4311      	orrs	r1, r2
 8000784:	2001      	movs	r0, #1
 8000786:	2b1b      	cmp	r3, #27
 8000788:	dc08      	bgt.n	800079c <__aeabi_fsub+0x60>
 800078a:	0008      	movs	r0, r1
 800078c:	2220      	movs	r2, #32
 800078e:	40d8      	lsrs	r0, r3
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	4099      	lsls	r1, r3
 8000794:	000b      	movs	r3, r1
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	4193      	sbcs	r3, r2
 800079a:	4318      	orrs	r0, r3
 800079c:	4663      	mov	r3, ip
 800079e:	1a1b      	subs	r3, r3, r0
 80007a0:	469c      	mov	ip, r3
 80007a2:	4663      	mov	r3, ip
 80007a4:	015b      	lsls	r3, r3, #5
 80007a6:	d400      	bmi.n	80007aa <__aeabi_fsub+0x6e>
 80007a8:	e0cd      	b.n	8000946 <__aeabi_fsub+0x20a>
 80007aa:	4663      	mov	r3, ip
 80007ac:	019f      	lsls	r7, r3, #6
 80007ae:	09bf      	lsrs	r7, r7, #6
 80007b0:	0038      	movs	r0, r7
 80007b2:	f000 fb17 	bl	8000de4 <__clzsi2>
 80007b6:	003b      	movs	r3, r7
 80007b8:	3805      	subs	r0, #5
 80007ba:	4083      	lsls	r3, r0
 80007bc:	4285      	cmp	r5, r0
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fsub+0x86>
 80007c0:	e0a2      	b.n	8000908 <__aeabi_fsub+0x1cc>
 80007c2:	4ab7      	ldr	r2, [pc, #732]	@ (8000aa0 <__aeabi_fsub+0x364>)
 80007c4:	1a2d      	subs	r5, r5, r0
 80007c6:	401a      	ands	r2, r3
 80007c8:	4694      	mov	ip, r2
 80007ca:	075a      	lsls	r2, r3, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fsub+0x94>
 80007ce:	e0c3      	b.n	8000958 <__aeabi_fsub+0x21c>
 80007d0:	220f      	movs	r2, #15
 80007d2:	4013      	ands	r3, r2
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d100      	bne.n	80007da <__aeabi_fsub+0x9e>
 80007d8:	e0be      	b.n	8000958 <__aeabi_fsub+0x21c>
 80007da:	2304      	movs	r3, #4
 80007dc:	4698      	mov	r8, r3
 80007de:	44c4      	add	ip, r8
 80007e0:	4663      	mov	r3, ip
 80007e2:	015b      	lsls	r3, r3, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fsub+0xac>
 80007e6:	e0b7      	b.n	8000958 <__aeabi_fsub+0x21c>
 80007e8:	1c68      	adds	r0, r5, #1
 80007ea:	2dfe      	cmp	r5, #254	@ 0xfe
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fsub+0xb4>
 80007ee:	e0a5      	b.n	800093c <__aeabi_fsub+0x200>
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	4310      	orrs	r0, r2
 80007f8:	07e4      	lsls	r4, r4, #31
 80007fa:	4320      	orrs	r0, r4
 80007fc:	bcc0      	pop	{r6, r7}
 80007fe:	46b9      	mov	r9, r7
 8000800:	46b0      	mov	r8, r6
 8000802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000804:	2b00      	cmp	r3, #0
 8000806:	dc00      	bgt.n	800080a <__aeabi_fsub+0xce>
 8000808:	e1eb      	b.n	8000be2 <__aeabi_fsub+0x4a6>
 800080a:	2a00      	cmp	r2, #0
 800080c:	d046      	beq.n	800089c <__aeabi_fsub+0x160>
 800080e:	2dff      	cmp	r5, #255	@ 0xff
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0xd8>
 8000812:	e0a4      	b.n	800095e <__aeabi_fsub+0x222>
 8000814:	2280      	movs	r2, #128	@ 0x80
 8000816:	04d2      	lsls	r2, r2, #19
 8000818:	4311      	orrs	r1, r2
 800081a:	2b1b      	cmp	r3, #27
 800081c:	dc00      	bgt.n	8000820 <__aeabi_fsub+0xe4>
 800081e:	e0fb      	b.n	8000a18 <__aeabi_fsub+0x2dc>
 8000820:	2305      	movs	r3, #5
 8000822:	4698      	mov	r8, r3
 8000824:	002b      	movs	r3, r5
 8000826:	44c4      	add	ip, r8
 8000828:	4662      	mov	r2, ip
 800082a:	08d7      	lsrs	r7, r2, #3
 800082c:	2bff      	cmp	r3, #255	@ 0xff
 800082e:	d100      	bne.n	8000832 <__aeabi_fsub+0xf6>
 8000830:	e095      	b.n	800095e <__aeabi_fsub+0x222>
 8000832:	027a      	lsls	r2, r7, #9
 8000834:	0a52      	lsrs	r2, r2, #9
 8000836:	b2d8      	uxtb	r0, r3
 8000838:	e7dc      	b.n	80007f4 <__aeabi_fsub+0xb8>
 800083a:	002b      	movs	r3, r5
 800083c:	3bff      	subs	r3, #255	@ 0xff
 800083e:	4699      	mov	r9, r3
 8000840:	2900      	cmp	r1, #0
 8000842:	d118      	bne.n	8000876 <__aeabi_fsub+0x13a>
 8000844:	2301      	movs	r3, #1
 8000846:	405e      	eors	r6, r3
 8000848:	42b4      	cmp	r4, r6
 800084a:	d100      	bne.n	800084e <__aeabi_fsub+0x112>
 800084c:	e0ca      	b.n	80009e4 <__aeabi_fsub+0x2a8>
 800084e:	464b      	mov	r3, r9
 8000850:	2b00      	cmp	r3, #0
 8000852:	d02d      	beq.n	80008b0 <__aeabi_fsub+0x174>
 8000854:	2d00      	cmp	r5, #0
 8000856:	d000      	beq.n	800085a <__aeabi_fsub+0x11e>
 8000858:	e13c      	b.n	8000ad4 <__aeabi_fsub+0x398>
 800085a:	23ff      	movs	r3, #255	@ 0xff
 800085c:	4664      	mov	r4, ip
 800085e:	2c00      	cmp	r4, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x128>
 8000862:	e15f      	b.n	8000b24 <__aeabi_fsub+0x3e8>
 8000864:	1e5d      	subs	r5, r3, #1
 8000866:	2b01      	cmp	r3, #1
 8000868:	d100      	bne.n	800086c <__aeabi_fsub+0x130>
 800086a:	e174      	b.n	8000b56 <__aeabi_fsub+0x41a>
 800086c:	0034      	movs	r4, r6
 800086e:	2bff      	cmp	r3, #255	@ 0xff
 8000870:	d074      	beq.n	800095c <__aeabi_fsub+0x220>
 8000872:	002b      	movs	r3, r5
 8000874:	e103      	b.n	8000a7e <__aeabi_fsub+0x342>
 8000876:	42b4      	cmp	r4, r6
 8000878:	d100      	bne.n	800087c <__aeabi_fsub+0x140>
 800087a:	e09c      	b.n	80009b6 <__aeabi_fsub+0x27a>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d017      	beq.n	80008b0 <__aeabi_fsub+0x174>
 8000880:	2d00      	cmp	r5, #0
 8000882:	d0ea      	beq.n	800085a <__aeabi_fsub+0x11e>
 8000884:	0007      	movs	r7, r0
 8000886:	0034      	movs	r4, r6
 8000888:	e06c      	b.n	8000964 <__aeabi_fsub+0x228>
 800088a:	2900      	cmp	r1, #0
 800088c:	d0cc      	beq.n	8000828 <__aeabi_fsub+0xec>
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	2b01      	cmp	r3, #1
 8000892:	d02b      	beq.n	80008ec <__aeabi_fsub+0x1b0>
 8000894:	2bff      	cmp	r3, #255	@ 0xff
 8000896:	d062      	beq.n	800095e <__aeabi_fsub+0x222>
 8000898:	0013      	movs	r3, r2
 800089a:	e773      	b.n	8000784 <__aeabi_fsub+0x48>
 800089c:	2900      	cmp	r1, #0
 800089e:	d0c3      	beq.n	8000828 <__aeabi_fsub+0xec>
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fsub+0x16c>
 80008a6:	e11e      	b.n	8000ae6 <__aeabi_fsub+0x3aa>
 80008a8:	2bff      	cmp	r3, #255	@ 0xff
 80008aa:	d058      	beq.n	800095e <__aeabi_fsub+0x222>
 80008ac:	0013      	movs	r3, r2
 80008ae:	e7b4      	b.n	800081a <__aeabi_fsub+0xde>
 80008b0:	22fe      	movs	r2, #254	@ 0xfe
 80008b2:	1c6b      	adds	r3, r5, #1
 80008b4:	421a      	tst	r2, r3
 80008b6:	d10d      	bne.n	80008d4 <__aeabi_fsub+0x198>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d060      	beq.n	800097e <__aeabi_fsub+0x242>
 80008bc:	4663      	mov	r3, ip
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fsub+0x188>
 80008c2:	e120      	b.n	8000b06 <__aeabi_fsub+0x3ca>
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_fsub+0x18e>
 80008c8:	e128      	b.n	8000b1c <__aeabi_fsub+0x3e0>
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	2400      	movs	r4, #0
 80008ce:	20ff      	movs	r0, #255	@ 0xff
 80008d0:	03d2      	lsls	r2, r2, #15
 80008d2:	e78f      	b.n	80007f4 <__aeabi_fsub+0xb8>
 80008d4:	4663      	mov	r3, ip
 80008d6:	1a5f      	subs	r7, r3, r1
 80008d8:	017b      	lsls	r3, r7, #5
 80008da:	d500      	bpl.n	80008de <__aeabi_fsub+0x1a2>
 80008dc:	e0fe      	b.n	8000adc <__aeabi_fsub+0x3a0>
 80008de:	2f00      	cmp	r7, #0
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fsub+0x1a8>
 80008e2:	e765      	b.n	80007b0 <__aeabi_fsub+0x74>
 80008e4:	2400      	movs	r4, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	e783      	b.n	80007f4 <__aeabi_fsub+0xb8>
 80008ec:	4663      	mov	r3, ip
 80008ee:	1a59      	subs	r1, r3, r1
 80008f0:	014b      	lsls	r3, r1, #5
 80008f2:	d400      	bmi.n	80008f6 <__aeabi_fsub+0x1ba>
 80008f4:	e119      	b.n	8000b2a <__aeabi_fsub+0x3ee>
 80008f6:	018f      	lsls	r7, r1, #6
 80008f8:	09bf      	lsrs	r7, r7, #6
 80008fa:	0038      	movs	r0, r7
 80008fc:	f000 fa72 	bl	8000de4 <__clzsi2>
 8000900:	003b      	movs	r3, r7
 8000902:	3805      	subs	r0, #5
 8000904:	4083      	lsls	r3, r0
 8000906:	2501      	movs	r5, #1
 8000908:	2220      	movs	r2, #32
 800090a:	1b40      	subs	r0, r0, r5
 800090c:	3001      	adds	r0, #1
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	0019      	movs	r1, r3
 8000912:	4093      	lsls	r3, r2
 8000914:	40c1      	lsrs	r1, r0
 8000916:	1e5a      	subs	r2, r3, #1
 8000918:	4193      	sbcs	r3, r2
 800091a:	4319      	orrs	r1, r3
 800091c:	468c      	mov	ip, r1
 800091e:	1e0b      	subs	r3, r1, #0
 8000920:	d0e1      	beq.n	80008e6 <__aeabi_fsub+0x1aa>
 8000922:	075b      	lsls	r3, r3, #29
 8000924:	d100      	bne.n	8000928 <__aeabi_fsub+0x1ec>
 8000926:	e152      	b.n	8000bce <__aeabi_fsub+0x492>
 8000928:	230f      	movs	r3, #15
 800092a:	2500      	movs	r5, #0
 800092c:	400b      	ands	r3, r1
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_fsub+0x1f8>
 8000932:	e752      	b.n	80007da <__aeabi_fsub+0x9e>
 8000934:	2001      	movs	r0, #1
 8000936:	014a      	lsls	r2, r1, #5
 8000938:	d400      	bmi.n	800093c <__aeabi_fsub+0x200>
 800093a:	e092      	b.n	8000a62 <__aeabi_fsub+0x326>
 800093c:	b2c0      	uxtb	r0, r0
 800093e:	4663      	mov	r3, ip
 8000940:	019a      	lsls	r2, r3, #6
 8000942:	0a52      	lsrs	r2, r2, #9
 8000944:	e756      	b.n	80007f4 <__aeabi_fsub+0xb8>
 8000946:	4663      	mov	r3, ip
 8000948:	075b      	lsls	r3, r3, #29
 800094a:	d005      	beq.n	8000958 <__aeabi_fsub+0x21c>
 800094c:	230f      	movs	r3, #15
 800094e:	4662      	mov	r2, ip
 8000950:	4013      	ands	r3, r2
 8000952:	2b04      	cmp	r3, #4
 8000954:	d000      	beq.n	8000958 <__aeabi_fsub+0x21c>
 8000956:	e740      	b.n	80007da <__aeabi_fsub+0x9e>
 8000958:	002b      	movs	r3, r5
 800095a:	e765      	b.n	8000828 <__aeabi_fsub+0xec>
 800095c:	0007      	movs	r7, r0
 800095e:	2f00      	cmp	r7, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x228>
 8000962:	e745      	b.n	80007f0 <__aeabi_fsub+0xb4>
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	03d2      	lsls	r2, r2, #15
 8000968:	433a      	orrs	r2, r7
 800096a:	0252      	lsls	r2, r2, #9
 800096c:	20ff      	movs	r0, #255	@ 0xff
 800096e:	0a52      	lsrs	r2, r2, #9
 8000970:	e740      	b.n	80007f4 <__aeabi_fsub+0xb8>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d179      	bne.n	8000a6a <__aeabi_fsub+0x32e>
 8000976:	22fe      	movs	r2, #254	@ 0xfe
 8000978:	1c6b      	adds	r3, r5, #1
 800097a:	421a      	tst	r2, r3
 800097c:	d1aa      	bne.n	80008d4 <__aeabi_fsub+0x198>
 800097e:	4663      	mov	r3, ip
 8000980:	2b00      	cmp	r3, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_fsub+0x24a>
 8000984:	e0f5      	b.n	8000b72 <__aeabi_fsub+0x436>
 8000986:	2900      	cmp	r1, #0
 8000988:	d100      	bne.n	800098c <__aeabi_fsub+0x250>
 800098a:	e0d1      	b.n	8000b30 <__aeabi_fsub+0x3f4>
 800098c:	1a5f      	subs	r7, r3, r1
 800098e:	2380      	movs	r3, #128	@ 0x80
 8000990:	04db      	lsls	r3, r3, #19
 8000992:	421f      	tst	r7, r3
 8000994:	d100      	bne.n	8000998 <__aeabi_fsub+0x25c>
 8000996:	e10e      	b.n	8000bb6 <__aeabi_fsub+0x47a>
 8000998:	4662      	mov	r2, ip
 800099a:	2401      	movs	r4, #1
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	4694      	mov	ip, r2
 80009a0:	2000      	movs	r0, #0
 80009a2:	4034      	ands	r4, r6
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x26e>
 80009a8:	e724      	b.n	80007f4 <__aeabi_fsub+0xb8>
 80009aa:	2001      	movs	r0, #1
 80009ac:	421a      	tst	r2, r3
 80009ae:	d1c6      	bne.n	800093e <__aeabi_fsub+0x202>
 80009b0:	2300      	movs	r3, #0
 80009b2:	08d7      	lsrs	r7, r2, #3
 80009b4:	e73d      	b.n	8000832 <__aeabi_fsub+0xf6>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d017      	beq.n	80009ea <__aeabi_fsub+0x2ae>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x284>
 80009be:	e0af      	b.n	8000b20 <__aeabi_fsub+0x3e4>
 80009c0:	23ff      	movs	r3, #255	@ 0xff
 80009c2:	4665      	mov	r5, ip
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fsub+0x28e>
 80009c8:	e0ad      	b.n	8000b26 <__aeabi_fsub+0x3ea>
 80009ca:	1e5e      	subs	r6, r3, #1
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x296>
 80009d0:	e089      	b.n	8000ae6 <__aeabi_fsub+0x3aa>
 80009d2:	2bff      	cmp	r3, #255	@ 0xff
 80009d4:	d0c2      	beq.n	800095c <__aeabi_fsub+0x220>
 80009d6:	2e1b      	cmp	r6, #27
 80009d8:	dc00      	bgt.n	80009dc <__aeabi_fsub+0x2a0>
 80009da:	e0ab      	b.n	8000b34 <__aeabi_fsub+0x3f8>
 80009dc:	1d4b      	adds	r3, r1, #5
 80009de:	469c      	mov	ip, r3
 80009e0:	0013      	movs	r3, r2
 80009e2:	e721      	b.n	8000828 <__aeabi_fsub+0xec>
 80009e4:	464b      	mov	r3, r9
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d170      	bne.n	8000acc <__aeabi_fsub+0x390>
 80009ea:	22fe      	movs	r2, #254	@ 0xfe
 80009ec:	1c6b      	adds	r3, r5, #1
 80009ee:	421a      	tst	r2, r3
 80009f0:	d15e      	bne.n	8000ab0 <__aeabi_fsub+0x374>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fsub+0x2bc>
 80009f6:	e0c3      	b.n	8000b80 <__aeabi_fsub+0x444>
 80009f8:	4663      	mov	r3, ip
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fsub+0x2c4>
 80009fe:	e0d0      	b.n	8000ba2 <__aeabi_fsub+0x466>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fsub+0x2ca>
 8000a04:	e094      	b.n	8000b30 <__aeabi_fsub+0x3f4>
 8000a06:	000a      	movs	r2, r1
 8000a08:	4462      	add	r2, ip
 8000a0a:	0153      	lsls	r3, r2, #5
 8000a0c:	d400      	bmi.n	8000a10 <__aeabi_fsub+0x2d4>
 8000a0e:	e0d8      	b.n	8000bc2 <__aeabi_fsub+0x486>
 8000a10:	0192      	lsls	r2, r2, #6
 8000a12:	2001      	movs	r0, #1
 8000a14:	0a52      	lsrs	r2, r2, #9
 8000a16:	e6ed      	b.n	80007f4 <__aeabi_fsub+0xb8>
 8000a18:	0008      	movs	r0, r1
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	40d8      	lsrs	r0, r3
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	4099      	lsls	r1, r3
 8000a22:	000b      	movs	r3, r1
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	4193      	sbcs	r3, r2
 8000a28:	4303      	orrs	r3, r0
 8000a2a:	449c      	add	ip, r3
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	015b      	lsls	r3, r3, #5
 8000a30:	d589      	bpl.n	8000946 <__aeabi_fsub+0x20a>
 8000a32:	3501      	adds	r5, #1
 8000a34:	2dff      	cmp	r5, #255	@ 0xff
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x2fe>
 8000a38:	e6da      	b.n	80007f0 <__aeabi_fsub+0xb4>
 8000a3a:	4662      	mov	r2, ip
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4919      	ldr	r1, [pc, #100]	@ (8000aa4 <__aeabi_fsub+0x368>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	0852      	lsrs	r2, r2, #1
 8000a44:	400a      	ands	r2, r1
 8000a46:	431a      	orrs	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	4694      	mov	ip, r2
 8000a4c:	075b      	lsls	r3, r3, #29
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fsub+0x31e>
 8000a50:	230f      	movs	r3, #15
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d000      	beq.n	8000a5a <__aeabi_fsub+0x31e>
 8000a58:	e6bf      	b.n	80007da <__aeabi_fsub+0x9e>
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	015b      	lsls	r3, r3, #5
 8000a5e:	d500      	bpl.n	8000a62 <__aeabi_fsub+0x326>
 8000a60:	e6c2      	b.n	80007e8 <__aeabi_fsub+0xac>
 8000a62:	4663      	mov	r3, ip
 8000a64:	08df      	lsrs	r7, r3, #3
 8000a66:	002b      	movs	r3, r5
 8000a68:	e6e3      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000a6a:	1b53      	subs	r3, r2, r5
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_fsub+0x336>
 8000a70:	e6f4      	b.n	800085c <__aeabi_fsub+0x120>
 8000a72:	2080      	movs	r0, #128	@ 0x80
 8000a74:	4664      	mov	r4, ip
 8000a76:	04c0      	lsls	r0, r0, #19
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	46a4      	mov	ip, r4
 8000a7c:	0034      	movs	r4, r6
 8000a7e:	2001      	movs	r0, #1
 8000a80:	2b1b      	cmp	r3, #27
 8000a82:	dc09      	bgt.n	8000a98 <__aeabi_fsub+0x35c>
 8000a84:	2520      	movs	r5, #32
 8000a86:	4660      	mov	r0, ip
 8000a88:	40d8      	lsrs	r0, r3
 8000a8a:	1aeb      	subs	r3, r5, r3
 8000a8c:	4665      	mov	r5, ip
 8000a8e:	409d      	lsls	r5, r3
 8000a90:	002b      	movs	r3, r5
 8000a92:	1e5d      	subs	r5, r3, #1
 8000a94:	41ab      	sbcs	r3, r5
 8000a96:	4318      	orrs	r0, r3
 8000a98:	1a0b      	subs	r3, r1, r0
 8000a9a:	469c      	mov	ip, r3
 8000a9c:	0015      	movs	r5, r2
 8000a9e:	e680      	b.n	80007a2 <__aeabi_fsub+0x66>
 8000aa0:	fbffffff 	.word	0xfbffffff
 8000aa4:	7dffffff 	.word	0x7dffffff
 8000aa8:	22fe      	movs	r2, #254	@ 0xfe
 8000aaa:	1c6b      	adds	r3, r5, #1
 8000aac:	4213      	tst	r3, r2
 8000aae:	d0a3      	beq.n	80009f8 <__aeabi_fsub+0x2bc>
 8000ab0:	2bff      	cmp	r3, #255	@ 0xff
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x37a>
 8000ab4:	e69c      	b.n	80007f0 <__aeabi_fsub+0xb4>
 8000ab6:	4461      	add	r1, ip
 8000ab8:	0849      	lsrs	r1, r1, #1
 8000aba:	074a      	lsls	r2, r1, #29
 8000abc:	d049      	beq.n	8000b52 <__aeabi_fsub+0x416>
 8000abe:	220f      	movs	r2, #15
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	2a04      	cmp	r2, #4
 8000ac4:	d045      	beq.n	8000b52 <__aeabi_fsub+0x416>
 8000ac6:	1d0a      	adds	r2, r1, #4
 8000ac8:	4694      	mov	ip, r2
 8000aca:	e6ad      	b.n	8000828 <__aeabi_fsub+0xec>
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_fsub+0x396>
 8000ad0:	e776      	b.n	80009c0 <__aeabi_fsub+0x284>
 8000ad2:	e68d      	b.n	80007f0 <__aeabi_fsub+0xb4>
 8000ad4:	0034      	movs	r4, r6
 8000ad6:	20ff      	movs	r0, #255	@ 0xff
 8000ad8:	2200      	movs	r2, #0
 8000ada:	e68b      	b.n	80007f4 <__aeabi_fsub+0xb8>
 8000adc:	4663      	mov	r3, ip
 8000ade:	2401      	movs	r4, #1
 8000ae0:	1acf      	subs	r7, r1, r3
 8000ae2:	4034      	ands	r4, r6
 8000ae4:	e664      	b.n	80007b0 <__aeabi_fsub+0x74>
 8000ae6:	4461      	add	r1, ip
 8000ae8:	014b      	lsls	r3, r1, #5
 8000aea:	d56d      	bpl.n	8000bc8 <__aeabi_fsub+0x48c>
 8000aec:	0848      	lsrs	r0, r1, #1
 8000aee:	4944      	ldr	r1, [pc, #272]	@ (8000c00 <__aeabi_fsub+0x4c4>)
 8000af0:	4001      	ands	r1, r0
 8000af2:	0743      	lsls	r3, r0, #29
 8000af4:	d02c      	beq.n	8000b50 <__aeabi_fsub+0x414>
 8000af6:	230f      	movs	r3, #15
 8000af8:	4003      	ands	r3, r0
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d028      	beq.n	8000b50 <__aeabi_fsub+0x414>
 8000afe:	1d0b      	adds	r3, r1, #4
 8000b00:	469c      	mov	ip, r3
 8000b02:	2302      	movs	r3, #2
 8000b04:	e690      	b.n	8000828 <__aeabi_fsub+0xec>
 8000b06:	2900      	cmp	r1, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x3d0>
 8000b0a:	e72b      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	03db      	lsls	r3, r3, #15
 8000b10:	429f      	cmp	r7, r3
 8000b12:	d200      	bcs.n	8000b16 <__aeabi_fsub+0x3da>
 8000b14:	e726      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b16:	4298      	cmp	r0, r3
 8000b18:	d300      	bcc.n	8000b1c <__aeabi_fsub+0x3e0>
 8000b1a:	e723      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b1c:	2401      	movs	r4, #1
 8000b1e:	4034      	ands	r4, r6
 8000b20:	0007      	movs	r7, r0
 8000b22:	e71f      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b24:	0034      	movs	r4, r6
 8000b26:	468c      	mov	ip, r1
 8000b28:	e67e      	b.n	8000828 <__aeabi_fsub+0xec>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	08cf      	lsrs	r7, r1, #3
 8000b2e:	e680      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000b30:	2300      	movs	r3, #0
 8000b32:	e67e      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000b34:	2020      	movs	r0, #32
 8000b36:	4665      	mov	r5, ip
 8000b38:	1b80      	subs	r0, r0, r6
 8000b3a:	4085      	lsls	r5, r0
 8000b3c:	4663      	mov	r3, ip
 8000b3e:	0028      	movs	r0, r5
 8000b40:	40f3      	lsrs	r3, r6
 8000b42:	1e45      	subs	r5, r0, #1
 8000b44:	41a8      	sbcs	r0, r5
 8000b46:	4303      	orrs	r3, r0
 8000b48:	469c      	mov	ip, r3
 8000b4a:	0015      	movs	r5, r2
 8000b4c:	448c      	add	ip, r1
 8000b4e:	e76d      	b.n	8000a2c <__aeabi_fsub+0x2f0>
 8000b50:	2302      	movs	r3, #2
 8000b52:	08cf      	lsrs	r7, r1, #3
 8000b54:	e66d      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000b56:	1b0f      	subs	r7, r1, r4
 8000b58:	017b      	lsls	r3, r7, #5
 8000b5a:	d528      	bpl.n	8000bae <__aeabi_fsub+0x472>
 8000b5c:	01bf      	lsls	r7, r7, #6
 8000b5e:	09bf      	lsrs	r7, r7, #6
 8000b60:	0038      	movs	r0, r7
 8000b62:	f000 f93f 	bl	8000de4 <__clzsi2>
 8000b66:	003b      	movs	r3, r7
 8000b68:	3805      	subs	r0, #5
 8000b6a:	4083      	lsls	r3, r0
 8000b6c:	0034      	movs	r4, r6
 8000b6e:	2501      	movs	r5, #1
 8000b70:	e6ca      	b.n	8000908 <__aeabi_fsub+0x1cc>
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x43c>
 8000b76:	e6b5      	b.n	80008e4 <__aeabi_fsub+0x1a8>
 8000b78:	2401      	movs	r4, #1
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	4034      	ands	r4, r6
 8000b7e:	e658      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000b80:	4663      	mov	r3, ip
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x44c>
 8000b86:	e6e9      	b.n	800095c <__aeabi_fsub+0x220>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x452>
 8000b8c:	e6ea      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	03db      	lsls	r3, r3, #15
 8000b92:	429f      	cmp	r7, r3
 8000b94:	d200      	bcs.n	8000b98 <__aeabi_fsub+0x45c>
 8000b96:	e6e5      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	d300      	bcc.n	8000b9e <__aeabi_fsub+0x462>
 8000b9c:	e6e2      	b.n	8000964 <__aeabi_fsub+0x228>
 8000b9e:	0007      	movs	r7, r0
 8000ba0:	e6e0      	b.n	8000964 <__aeabi_fsub+0x228>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fsub+0x46c>
 8000ba6:	e69e      	b.n	80008e6 <__aeabi_fsub+0x1aa>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	08cf      	lsrs	r7, r1, #3
 8000bac:	e641      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000bae:	0034      	movs	r4, r6
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e63d      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0x480>
 8000bba:	e693      	b.n	80008e4 <__aeabi_fsub+0x1a8>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	08ff      	lsrs	r7, r7, #3
 8000bc0:	e637      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	08d7      	lsrs	r7, r2, #3
 8000bc6:	e634      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	08cf      	lsrs	r7, r1, #3
 8000bcc:	e631      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	000b      	movs	r3, r1
 8000bd2:	04d2      	lsls	r2, r2, #19
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	4211      	tst	r1, r2
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x4a2>
 8000bdc:	e6ae      	b.n	800093c <__aeabi_fsub+0x200>
 8000bde:	08cf      	lsrs	r7, r1, #3
 8000be0:	e627      	b.n	8000832 <__aeabi_fsub+0xf6>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x4ac>
 8000be6:	e75f      	b.n	8000aa8 <__aeabi_fsub+0x36c>
 8000be8:	1b56      	subs	r6, r2, r5
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d101      	bne.n	8000bf2 <__aeabi_fsub+0x4b6>
 8000bee:	0033      	movs	r3, r6
 8000bf0:	e6e7      	b.n	80009c2 <__aeabi_fsub+0x286>
 8000bf2:	2380      	movs	r3, #128	@ 0x80
 8000bf4:	4660      	mov	r0, ip
 8000bf6:	04db      	lsls	r3, r3, #19
 8000bf8:	4318      	orrs	r0, r3
 8000bfa:	4684      	mov	ip, r0
 8000bfc:	e6eb      	b.n	80009d6 <__aeabi_fsub+0x29a>
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	7dffffff 	.word	0x7dffffff

08000c04 <__aeabi_f2iz>:
 8000c04:	0241      	lsls	r1, r0, #9
 8000c06:	0042      	lsls	r2, r0, #1
 8000c08:	0fc3      	lsrs	r3, r0, #31
 8000c0a:	0a49      	lsrs	r1, r1, #9
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	0e12      	lsrs	r2, r2, #24
 8000c10:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c12:	dd03      	ble.n	8000c1c <__aeabi_f2iz+0x18>
 8000c14:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c16:	dd02      	ble.n	8000c1e <__aeabi_f2iz+0x1a>
 8000c18:	4a09      	ldr	r2, [pc, #36]	@ (8000c40 <__aeabi_f2iz+0x3c>)
 8000c1a:	1898      	adds	r0, r3, r2
 8000c1c:	4770      	bx	lr
 8000c1e:	2080      	movs	r0, #128	@ 0x80
 8000c20:	0400      	lsls	r0, r0, #16
 8000c22:	4301      	orrs	r1, r0
 8000c24:	2a95      	cmp	r2, #149	@ 0x95
 8000c26:	dc07      	bgt.n	8000c38 <__aeabi_f2iz+0x34>
 8000c28:	2096      	movs	r0, #150	@ 0x96
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	40d1      	lsrs	r1, r2
 8000c2e:	4248      	negs	r0, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f3      	bne.n	8000c1c <__aeabi_f2iz+0x18>
 8000c34:	0008      	movs	r0, r1
 8000c36:	e7f1      	b.n	8000c1c <__aeabi_f2iz+0x18>
 8000c38:	3a96      	subs	r2, #150	@ 0x96
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	e7f7      	b.n	8000c2e <__aeabi_f2iz+0x2a>
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	7fffffff 	.word	0x7fffffff

08000c44 <__aeabi_i2f>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d012      	beq.n	8000c70 <__aeabi_i2f+0x2c>
 8000c4a:	17c3      	asrs	r3, r0, #31
 8000c4c:	18c5      	adds	r5, r0, r3
 8000c4e:	405d      	eors	r5, r3
 8000c50:	0fc4      	lsrs	r4, r0, #31
 8000c52:	0028      	movs	r0, r5
 8000c54:	f000 f8c6 	bl	8000de4 <__clzsi2>
 8000c58:	239e      	movs	r3, #158	@ 0x9e
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	2b96      	cmp	r3, #150	@ 0x96
 8000c5e:	dc0f      	bgt.n	8000c80 <__aeabi_i2f+0x3c>
 8000c60:	2808      	cmp	r0, #8
 8000c62:	d038      	beq.n	8000cd6 <__aeabi_i2f+0x92>
 8000c64:	3808      	subs	r0, #8
 8000c66:	4085      	lsls	r5, r0
 8000c68:	026d      	lsls	r5, r5, #9
 8000c6a:	0a6d      	lsrs	r5, r5, #9
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	e002      	b.n	8000c76 <__aeabi_i2f+0x32>
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	2500      	movs	r5, #0
 8000c76:	05c0      	lsls	r0, r0, #23
 8000c78:	4328      	orrs	r0, r5
 8000c7a:	07e4      	lsls	r4, r4, #31
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
 8000c80:	2b99      	cmp	r3, #153	@ 0x99
 8000c82:	dc14      	bgt.n	8000cae <__aeabi_i2f+0x6a>
 8000c84:	1f42      	subs	r2, r0, #5
 8000c86:	4095      	lsls	r5, r2
 8000c88:	002a      	movs	r2, r5
 8000c8a:	4915      	ldr	r1, [pc, #84]	@ (8000ce0 <__aeabi_i2f+0x9c>)
 8000c8c:	4011      	ands	r1, r2
 8000c8e:	0755      	lsls	r5, r2, #29
 8000c90:	d01c      	beq.n	8000ccc <__aeabi_i2f+0x88>
 8000c92:	250f      	movs	r5, #15
 8000c94:	402a      	ands	r2, r5
 8000c96:	2a04      	cmp	r2, #4
 8000c98:	d018      	beq.n	8000ccc <__aeabi_i2f+0x88>
 8000c9a:	3104      	adds	r1, #4
 8000c9c:	08ca      	lsrs	r2, r1, #3
 8000c9e:	0149      	lsls	r1, r1, #5
 8000ca0:	d515      	bpl.n	8000cce <__aeabi_i2f+0x8a>
 8000ca2:	239f      	movs	r3, #159	@ 0x9f
 8000ca4:	0252      	lsls	r2, r2, #9
 8000ca6:	1a18      	subs	r0, r3, r0
 8000ca8:	0a55      	lsrs	r5, r2, #9
 8000caa:	b2c0      	uxtb	r0, r0
 8000cac:	e7e3      	b.n	8000c76 <__aeabi_i2f+0x32>
 8000cae:	2205      	movs	r2, #5
 8000cb0:	0029      	movs	r1, r5
 8000cb2:	1a12      	subs	r2, r2, r0
 8000cb4:	40d1      	lsrs	r1, r2
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	321b      	adds	r2, #27
 8000cba:	4095      	lsls	r5, r2
 8000cbc:	002a      	movs	r2, r5
 8000cbe:	1e55      	subs	r5, r2, #1
 8000cc0:	41aa      	sbcs	r2, r5
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <__aeabi_i2f+0x9c>)
 8000cc6:	4011      	ands	r1, r2
 8000cc8:	0755      	lsls	r5, r2, #29
 8000cca:	d1e2      	bne.n	8000c92 <__aeabi_i2f+0x4e>
 8000ccc:	08ca      	lsrs	r2, r1, #3
 8000cce:	0252      	lsls	r2, r2, #9
 8000cd0:	0a55      	lsrs	r5, r2, #9
 8000cd2:	b2d8      	uxtb	r0, r3
 8000cd4:	e7cf      	b.n	8000c76 <__aeabi_i2f+0x32>
 8000cd6:	026d      	lsls	r5, r5, #9
 8000cd8:	0a6d      	lsrs	r5, r5, #9
 8000cda:	308e      	adds	r0, #142	@ 0x8e
 8000cdc:	e7cb      	b.n	8000c76 <__aeabi_i2f+0x32>
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	fbffffff 	.word	0xfbffffff

08000ce4 <__aeabi_ui2f>:
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	1e04      	subs	r4, r0, #0
 8000ce8:	d00d      	beq.n	8000d06 <__aeabi_ui2f+0x22>
 8000cea:	f000 f87b 	bl	8000de4 <__clzsi2>
 8000cee:	239e      	movs	r3, #158	@ 0x9e
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	2b96      	cmp	r3, #150	@ 0x96
 8000cf4:	dc0c      	bgt.n	8000d10 <__aeabi_ui2f+0x2c>
 8000cf6:	2808      	cmp	r0, #8
 8000cf8:	d034      	beq.n	8000d64 <__aeabi_ui2f+0x80>
 8000cfa:	3808      	subs	r0, #8
 8000cfc:	4084      	lsls	r4, r0
 8000cfe:	0264      	lsls	r4, r4, #9
 8000d00:	0a64      	lsrs	r4, r4, #9
 8000d02:	b2d8      	uxtb	r0, r3
 8000d04:	e001      	b.n	8000d0a <__aeabi_ui2f+0x26>
 8000d06:	2000      	movs	r0, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	05c0      	lsls	r0, r0, #23
 8000d0c:	4320      	orrs	r0, r4
 8000d0e:	bd10      	pop	{r4, pc}
 8000d10:	2b99      	cmp	r3, #153	@ 0x99
 8000d12:	dc13      	bgt.n	8000d3c <__aeabi_ui2f+0x58>
 8000d14:	1f42      	subs	r2, r0, #5
 8000d16:	4094      	lsls	r4, r2
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <__aeabi_ui2f+0x88>)
 8000d1a:	4022      	ands	r2, r4
 8000d1c:	0761      	lsls	r1, r4, #29
 8000d1e:	d01c      	beq.n	8000d5a <__aeabi_ui2f+0x76>
 8000d20:	210f      	movs	r1, #15
 8000d22:	4021      	ands	r1, r4
 8000d24:	2904      	cmp	r1, #4
 8000d26:	d018      	beq.n	8000d5a <__aeabi_ui2f+0x76>
 8000d28:	3204      	adds	r2, #4
 8000d2a:	08d4      	lsrs	r4, r2, #3
 8000d2c:	0152      	lsls	r2, r2, #5
 8000d2e:	d515      	bpl.n	8000d5c <__aeabi_ui2f+0x78>
 8000d30:	239f      	movs	r3, #159	@ 0x9f
 8000d32:	0264      	lsls	r4, r4, #9
 8000d34:	1a18      	subs	r0, r3, r0
 8000d36:	0a64      	lsrs	r4, r4, #9
 8000d38:	b2c0      	uxtb	r0, r0
 8000d3a:	e7e6      	b.n	8000d0a <__aeabi_ui2f+0x26>
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	0021      	movs	r1, r4
 8000d40:	321b      	adds	r2, #27
 8000d42:	4091      	lsls	r1, r2
 8000d44:	000a      	movs	r2, r1
 8000d46:	1e51      	subs	r1, r2, #1
 8000d48:	418a      	sbcs	r2, r1
 8000d4a:	2105      	movs	r1, #5
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	40cc      	lsrs	r4, r1
 8000d50:	4314      	orrs	r4, r2
 8000d52:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <__aeabi_ui2f+0x88>)
 8000d54:	4022      	ands	r2, r4
 8000d56:	0761      	lsls	r1, r4, #29
 8000d58:	d1e2      	bne.n	8000d20 <__aeabi_ui2f+0x3c>
 8000d5a:	08d4      	lsrs	r4, r2, #3
 8000d5c:	0264      	lsls	r4, r4, #9
 8000d5e:	0a64      	lsrs	r4, r4, #9
 8000d60:	b2d8      	uxtb	r0, r3
 8000d62:	e7d2      	b.n	8000d0a <__aeabi_ui2f+0x26>
 8000d64:	0264      	lsls	r4, r4, #9
 8000d66:	0a64      	lsrs	r4, r4, #9
 8000d68:	308e      	adds	r0, #142	@ 0x8e
 8000d6a:	e7ce      	b.n	8000d0a <__aeabi_ui2f+0x26>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_cfrcmple>:
 8000d70:	4684      	mov	ip, r0
 8000d72:	0008      	movs	r0, r1
 8000d74:	4661      	mov	r1, ip
 8000d76:	e7ff      	b.n	8000d78 <__aeabi_cfcmpeq>

08000d78 <__aeabi_cfcmpeq>:
 8000d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d7a:	f000 f8c1 	bl	8000f00 <__lesf2>
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d401      	bmi.n	8000d86 <__aeabi_cfcmpeq+0xe>
 8000d82:	2100      	movs	r1, #0
 8000d84:	42c8      	cmn	r0, r1
 8000d86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d88 <__aeabi_fcmpeq>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f849 	bl	8000e20 <__eqsf2>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	3001      	adds	r0, #1
 8000d92:	bd10      	pop	{r4, pc}

08000d94 <__aeabi_fcmplt>:
 8000d94:	b510      	push	{r4, lr}
 8000d96:	f000 f8b3 	bl	8000f00 <__lesf2>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	db01      	blt.n	8000da2 <__aeabi_fcmplt+0xe>
 8000d9e:	2000      	movs	r0, #0
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	2001      	movs	r0, #1
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)

08000da8 <__aeabi_fcmple>:
 8000da8:	b510      	push	{r4, lr}
 8000daa:	f000 f8a9 	bl	8000f00 <__lesf2>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	dd01      	ble.n	8000db6 <__aeabi_fcmple+0xe>
 8000db2:	2000      	movs	r0, #0
 8000db4:	bd10      	pop	{r4, pc}
 8000db6:	2001      	movs	r0, #1
 8000db8:	bd10      	pop	{r4, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)

08000dbc <__aeabi_fcmpgt>:
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	f000 f857 	bl	8000e70 <__gesf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	dc01      	bgt.n	8000dca <__aeabi_fcmpgt+0xe>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	2001      	movs	r0, #1
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)

08000dd0 <__aeabi_fcmpge>:
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	f000 f84d 	bl	8000e70 <__gesf2>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	da01      	bge.n	8000dde <__aeabi_fcmpge+0xe>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	2001      	movs	r0, #1
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)

08000de4 <__clzsi2>:
 8000de4:	211c      	movs	r1, #28
 8000de6:	2301      	movs	r3, #1
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d301      	bcc.n	8000df2 <__clzsi2+0xe>
 8000dee:	0c00      	lsrs	r0, r0, #16
 8000df0:	3910      	subs	r1, #16
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	4298      	cmp	r0, r3
 8000df6:	d301      	bcc.n	8000dfc <__clzsi2+0x18>
 8000df8:	0a00      	lsrs	r0, r0, #8
 8000dfa:	3908      	subs	r1, #8
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d301      	bcc.n	8000e06 <__clzsi2+0x22>
 8000e02:	0900      	lsrs	r0, r0, #4
 8000e04:	3904      	subs	r1, #4
 8000e06:	a202      	add	r2, pc, #8	@ (adr r2, 8000e10 <__clzsi2+0x2c>)
 8000e08:	5c10      	ldrb	r0, [r2, r0]
 8000e0a:	1840      	adds	r0, r0, r1
 8000e0c:	4770      	bx	lr
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	02020304 	.word	0x02020304
 8000e14:	01010101 	.word	0x01010101
	...

08000e20 <__eqsf2>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	0042      	lsls	r2, r0, #1
 8000e24:	024e      	lsls	r6, r1, #9
 8000e26:	004c      	lsls	r4, r1, #1
 8000e28:	0245      	lsls	r5, r0, #9
 8000e2a:	0a6d      	lsrs	r5, r5, #9
 8000e2c:	0e12      	lsrs	r2, r2, #24
 8000e2e:	0fc3      	lsrs	r3, r0, #31
 8000e30:	0a76      	lsrs	r6, r6, #9
 8000e32:	0e24      	lsrs	r4, r4, #24
 8000e34:	0fc9      	lsrs	r1, r1, #31
 8000e36:	2aff      	cmp	r2, #255	@ 0xff
 8000e38:	d010      	beq.n	8000e5c <__eqsf2+0x3c>
 8000e3a:	2cff      	cmp	r4, #255	@ 0xff
 8000e3c:	d00c      	beq.n	8000e58 <__eqsf2+0x38>
 8000e3e:	2001      	movs	r0, #1
 8000e40:	42a2      	cmp	r2, r4
 8000e42:	d10a      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e44:	42b5      	cmp	r5, r6
 8000e46:	d108      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d00f      	beq.n	8000e6c <__eqsf2+0x4c>
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d104      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e50:	0028      	movs	r0, r5
 8000e52:	1e43      	subs	r3, r0, #1
 8000e54:	4198      	sbcs	r0, r3
 8000e56:	e000      	b.n	8000e5a <__eqsf2+0x3a>
 8000e58:	2001      	movs	r0, #1
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	2cff      	cmp	r4, #255	@ 0xff
 8000e60:	d1fb      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e62:	4335      	orrs	r5, r6
 8000e64:	d1f9      	bne.n	8000e5a <__eqsf2+0x3a>
 8000e66:	404b      	eors	r3, r1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	e7f6      	b.n	8000e5a <__eqsf2+0x3a>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e7f4      	b.n	8000e5a <__eqsf2+0x3a>

08000e70 <__gesf2>:
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	0042      	lsls	r2, r0, #1
 8000e74:	0244      	lsls	r4, r0, #9
 8000e76:	024d      	lsls	r5, r1, #9
 8000e78:	0fc3      	lsrs	r3, r0, #31
 8000e7a:	0048      	lsls	r0, r1, #1
 8000e7c:	0a64      	lsrs	r4, r4, #9
 8000e7e:	0e12      	lsrs	r2, r2, #24
 8000e80:	0a6d      	lsrs	r5, r5, #9
 8000e82:	0e00      	lsrs	r0, r0, #24
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	2aff      	cmp	r2, #255	@ 0xff
 8000e88:	d018      	beq.n	8000ebc <__gesf2+0x4c>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d00a      	beq.n	8000ea4 <__gesf2+0x34>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d11e      	bne.n	8000ed0 <__gesf2+0x60>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d10a      	bne.n	8000eac <__gesf2+0x3c>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d029      	beq.n	8000eee <__gesf2+0x7e>
 8000e9a:	2c00      	cmp	r4, #0
 8000e9c:	d12d      	bne.n	8000efa <__gesf2+0x8a>
 8000e9e:	0048      	lsls	r0, r1, #1
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	bd30      	pop	{r4, r5, pc}
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d125      	bne.n	8000ef4 <__gesf2+0x84>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d101      	bne.n	8000eb0 <__gesf2+0x40>
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0f6      	beq.n	8000e9e <__gesf2+0x2e>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d019      	beq.n	8000ee8 <__gesf2+0x78>
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	4318      	orrs	r0, r3
 8000eba:	e7f2      	b.n	8000ea2 <__gesf2+0x32>
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d119      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec0:	28ff      	cmp	r0, #255	@ 0xff
 8000ec2:	d1f7      	bne.n	8000eb4 <__gesf2+0x44>
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d115      	bne.n	8000ef4 <__gesf2+0x84>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d1f2      	bne.n	8000eb4 <__gesf2+0x44>
 8000ece:	e7e8      	b.n	8000ea2 <__gesf2+0x32>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d0ef      	beq.n	8000eb4 <__gesf2+0x44>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d1ed      	bne.n	8000eb4 <__gesf2+0x44>
 8000ed8:	4282      	cmp	r2, r0
 8000eda:	dceb      	bgt.n	8000eb4 <__gesf2+0x44>
 8000edc:	db04      	blt.n	8000ee8 <__gesf2+0x78>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d8e8      	bhi.n	8000eb4 <__gesf2+0x44>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	42ac      	cmp	r4, r5
 8000ee6:	d2dc      	bcs.n	8000ea2 <__gesf2+0x32>
 8000ee8:	0058      	lsls	r0, r3, #1
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7d9      	b.n	8000ea2 <__gesf2+0x32>
 8000eee:	2c00      	cmp	r4, #0
 8000ef0:	d0d7      	beq.n	8000ea2 <__gesf2+0x32>
 8000ef2:	e7df      	b.n	8000eb4 <__gesf2+0x44>
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	e7d3      	b.n	8000ea2 <__gesf2+0x32>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d1da      	bne.n	8000eb4 <__gesf2+0x44>
 8000efe:	e7ee      	b.n	8000ede <__gesf2+0x6e>

08000f00 <__lesf2>:
 8000f00:	b530      	push	{r4, r5, lr}
 8000f02:	0042      	lsls	r2, r0, #1
 8000f04:	0244      	lsls	r4, r0, #9
 8000f06:	024d      	lsls	r5, r1, #9
 8000f08:	0fc3      	lsrs	r3, r0, #31
 8000f0a:	0048      	lsls	r0, r1, #1
 8000f0c:	0a64      	lsrs	r4, r4, #9
 8000f0e:	0e12      	lsrs	r2, r2, #24
 8000f10:	0a6d      	lsrs	r5, r5, #9
 8000f12:	0e00      	lsrs	r0, r0, #24
 8000f14:	0fc9      	lsrs	r1, r1, #31
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d017      	beq.n	8000f4a <__lesf2+0x4a>
 8000f1a:	28ff      	cmp	r0, #255	@ 0xff
 8000f1c:	d00a      	beq.n	8000f34 <__lesf2+0x34>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d11b      	bne.n	8000f5a <__lesf2+0x5a>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d10a      	bne.n	8000f3c <__lesf2+0x3c>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d01d      	beq.n	8000f66 <__lesf2+0x66>
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	d12d      	bne.n	8000f8a <__lesf2+0x8a>
 8000f2e:	0048      	lsls	r0, r1, #1
 8000f30:	3801      	subs	r0, #1
 8000f32:	e011      	b.n	8000f58 <__lesf2+0x58>
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	d10e      	bne.n	8000f56 <__lesf2+0x56>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d101      	bne.n	8000f40 <__lesf2+0x40>
 8000f3c:	2c00      	cmp	r4, #0
 8000f3e:	d0f6      	beq.n	8000f2e <__lesf2+0x2e>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d10c      	bne.n	8000f5e <__lesf2+0x5e>
 8000f44:	0058      	lsls	r0, r3, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	e006      	b.n	8000f58 <__lesf2+0x58>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d103      	bne.n	8000f56 <__lesf2+0x56>
 8000f4e:	28ff      	cmp	r0, #255	@ 0xff
 8000f50:	d105      	bne.n	8000f5e <__lesf2+0x5e>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d015      	beq.n	8000f82 <__lesf2+0x82>
 8000f56:	2002      	movs	r0, #2
 8000f58:	bd30      	pop	{r4, r5, pc}
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d106      	bne.n	8000f6c <__lesf2+0x6c>
 8000f5e:	2001      	movs	r0, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	4318      	orrs	r0, r3
 8000f64:	e7f8      	b.n	8000f58 <__lesf2+0x58>
 8000f66:	2c00      	cmp	r4, #0
 8000f68:	d0f6      	beq.n	8000f58 <__lesf2+0x58>
 8000f6a:	e7f8      	b.n	8000f5e <__lesf2+0x5e>
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d1f6      	bne.n	8000f5e <__lesf2+0x5e>
 8000f70:	4282      	cmp	r2, r0
 8000f72:	dcf4      	bgt.n	8000f5e <__lesf2+0x5e>
 8000f74:	dbe6      	blt.n	8000f44 <__lesf2+0x44>
 8000f76:	42ac      	cmp	r4, r5
 8000f78:	d8f1      	bhi.n	8000f5e <__lesf2+0x5e>
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	42ac      	cmp	r4, r5
 8000f7e:	d2eb      	bcs.n	8000f58 <__lesf2+0x58>
 8000f80:	e7e0      	b.n	8000f44 <__lesf2+0x44>
 8000f82:	2000      	movs	r0, #0
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ea      	bne.n	8000f5e <__lesf2+0x5e>
 8000f88:	e7e6      	b.n	8000f58 <__lesf2+0x58>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1e7      	bne.n	8000f5e <__lesf2+0x5e>
 8000f8e:	e7f2      	b.n	8000f76 <__lesf2+0x76>

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f001 f915 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f8d3 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fa77 	bl	8001490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fa2:	f000 f99f 	bl	80012e4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fa6:	f000 f935 	bl	8001214 <MX_ADC1_Init>
  MX_RTC_Init();
 8000faa:	f000 f9db 	bl	8001364 <MX_RTC_Init>
  MX_TIM17_Init();
 8000fae:	f000 fa45 	bl	800143c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000fb2:	f000 fcb7 	bl	8001924 <ssd1306_Init>
    ssd1306_FlipScreenVertically();
 8000fb6:	f000 fed3 	bl	8001d60 <ssd1306_FlipScreenVertically>
    ssd1306_Clear();
 8000fba:	f000 fedd 	bl	8001d78 <ssd1306_Clear>
    ssd1306_SetColor(White);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fca0 	bl	8001904 <ssd1306_SetColor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

uint16_t vrefint = *ADDR_CALIBR_VREF;
 8000fc4:	4a54      	ldr	r2, [pc, #336]	@ (8001118 <main+0x188>)
 8000fc6:	1cbb      	adds	r3, r7, #2
 8000fc8:	8812      	ldrh	r2, [r2, #0]
 8000fca:	801a      	strh	r2, [r3, #0]
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000fcc:	4b53      	ldr	r3, [pc, #332]	@ (800111c <main+0x18c>)
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f002 f950 	bl	8003274 <HAL_ADCEx_Calibration_Start>

	 sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000fd4:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <main+0x190>)
 8000fd6:	4a53      	ldr	r2, [pc, #332]	@ (8001124 <main+0x194>)
 8000fd8:	601a      	str	r2, [r3, #0]
		 sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fda:	4b51      	ldr	r3, [pc, #324]	@ (8001120 <main+0x190>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
		 sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <main+0x190>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	609a      	str	r2, [r3, #8]
		 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	4a4e      	ldr	r2, [pc, #312]	@ (8001120 <main+0x190>)
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800111c <main+0x18c>)
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f001 fdab 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d001      	beq.n	8000ffa <main+0x6a>
		 {
		 	Error_Handler();
 8000ff6:	f000 fc67 	bl	80018c8 <Error_Handler>
		 }
		 HAL_ADC_Start(&hadc1);
 8000ffa:	4b48      	ldr	r3, [pc, #288]	@ (800111c <main+0x18c>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f001 fc79 	bl	80028f4 <HAL_ADC_Start>
		 float vref;
		 	 if( HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8001002:	4b46      	ldr	r3, [pc, #280]	@ (800111c <main+0x18c>)
 8001004:	2105      	movs	r1, #5
 8001006:	0018      	movs	r0, r3
 8001008:	f001 fcfe 	bl	8002a08 <HAL_ADC_PollForConversion>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d109      	bne.n	8001024 <main+0x94>
		 	 vref = HAL_ADC_GetValue(&hadc1);
 8001010:	4b42      	ldr	r3, [pc, #264]	@ (800111c <main+0x18c>)
 8001012:	0018      	movs	r0, r3
 8001014:	f001 fd8c 	bl	8002b30 <HAL_ADC_GetValue>
 8001018:	0003      	movs	r3, r0
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fe62 	bl	8000ce4 <__aeabi_ui2f>
 8001020:	1c03      	adds	r3, r0, #0
 8001022:	607b      	str	r3, [r7, #4]
		 	 HAL_ADC_Stop(&hadc1);
 8001024:	4b3d      	ldr	r3, [pc, #244]	@ (800111c <main+0x18c>)
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fcb2 	bl	8002990 <HAL_ADC_Stop>
		 	 //vref = (vrefint/ vref)*3.0f;
		 	vref = (vrefint/ vref);
 800102c:	1cbb      	adds	r3, r7, #2
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fe07 	bl	8000c44 <__aeabi_i2f>
 8001036:	1c03      	adds	r3, r0, #0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	1c18      	adds	r0, r3, #0
 800103c:	f7ff f90e 	bl	800025c <__aeabi_fdiv>
 8001040:	1c03      	adds	r3, r0, #0
 8001042:	607b      	str	r3, [r7, #4]

uint8_t i = 1, sec = 0;
 8001044:	1c7b      	adds	r3, r7, #1
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	003b      	movs	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
float bat;

sTime.Hours = 0;
 8001050:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <main+0x198>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 11;
 8001056:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <main+0x198>)
 8001058:	220b      	movs	r2, #11
 800105a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <main+0x198>)
 800105e:	2200      	movs	r2, #0
 8001060:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8001062:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <main+0x198>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <main+0x198>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800106e:	4b2e      	ldr	r3, [pc, #184]	@ (8001128 <main+0x198>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001074:	492c      	ldr	r1, [pc, #176]	@ (8001128 <main+0x198>)
 8001076:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <main+0x19c>)
 8001078:	2200      	movs	r2, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f004 f928 	bl	80052d0 <HAL_RTC_SetTime>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <main+0xf8>
  {
    Error_Handler();
 8001084:	f000 fc20 	bl	80018c8 <Error_Handler>
  }

HAL_TIM_Base_Start_IT(&htim17);
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <main+0x1a0>)
 800108a:	0018      	movs	r0, r3
 800108c:	f004 fc4e 	bl	800592c <HAL_TIM_Base_Start_IT>



  while (1)
  {
	  WriteTime();
 8001090:	f000 faba 	bl	8001608 <WriteTime>

adc[0] = BatteryCharge(adc[0]);
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <main+0x1a4>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fb89 	bl	80017b0 <BatteryCharge>
 800109e:	0003      	movs	r3, r0
 80010a0:	001a      	movs	r2, r3
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <main+0x1a4>)
 80010a4:	801a      	strh	r2, [r3, #0]

WriteBatteryCharge();
 80010a6:	f000 fbe3 	bl	8001870 <WriteBatteryCharge>

	 ADC_Select_CH5();
 80010aa:	f000 fa8d 	bl	80015c8 <ADC_Select_CH5>
	 HAL_ADC_Start(&hadc1);
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <main+0x18c>)
 80010b0:	0018      	movs	r0, r3
 80010b2:	f001 fc1f 	bl	80028f4 <HAL_ADC_Start>
	 if( HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <main+0x18c>)
 80010b8:	2105      	movs	r1, #5
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 fca4 	bl	8002a08 <HAL_ADC_PollForConversion>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d107      	bne.n	80010d4 <main+0x144>
	 adc[1] = HAL_ADC_GetValue(&hadc1);
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <main+0x18c>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fd32 	bl	8002b30 <HAL_ADC_GetValue>
 80010cc:	0003      	movs	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <main+0x1a4>)
 80010d2:	805a      	strh	r2, [r3, #2]
	 HAL_ADC_Stop(&hadc1);
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <main+0x18c>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fc5a 	bl	8002990 <HAL_ADC_Stop>



	 ssd1306_SetCursor(0, 40);
 80010dc:	2128      	movs	r1, #40	@ 0x28
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fe24 	bl	8001d2c <ssd1306_SetCursor>
	 sprintf(buf, "%d", adc[1]);
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <main+0x1a4>)
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	001a      	movs	r2, r3
 80010ea:	4913      	ldr	r1, [pc, #76]	@ (8001138 <main+0x1a8>)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <main+0x1ac>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f004 fe2c 	bl	8005d4c <siprintf>
	 ssd1306_WriteString(buf, Font_7x10);
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <main+0x1b0>)
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <main+0x1ac>)
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	f000 fdf0 	bl	8001ce0 <ssd1306_WriteString>
	 memset(buf, 0, sizeof(buf));
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <main+0x1ac>)
 8001102:	2214      	movs	r2, #20
 8001104:	2100      	movs	r1, #0
 8001106:	0018      	movs	r0, r3
 8001108:	f004 fe42 	bl	8005d90 <memset>

	 ssd1306_UpdateScreen();
 800110c:	f000 fca0 	bl	8001a50 <ssd1306_UpdateScreen>
	 ssd1306_Clear();
 8001110:	f000 fe32 	bl	8001d78 <ssd1306_Clear>
  {
 8001114:	e7bc      	b.n	8001090 <main+0x100>
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	1fff75aa 	.word	0x1fff75aa
 800111c:	20000084 	.word	0x20000084
 8001120:	200001cc 	.word	0x200001cc
 8001124:	b4002000 	.word	0xb4002000
 8001128:	200001b4 	.word	0x200001b4
 800112c:	2000013c 	.word	0x2000013c
 8001130:	20000168 	.word	0x20000168
 8001134:	200001ec 	.word	0x200001ec
 8001138:	0800669c 	.word	0x0800669c
 800113c:	200001d8 	.word	0x200001d8
 8001140:	20000000 	.word	0x20000000

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b093      	sub	sp, #76	@ 0x4c
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	2414      	movs	r4, #20
 800114c:	193b      	adds	r3, r7, r4
 800114e:	0018      	movs	r0, r3
 8001150:	2334      	movs	r3, #52	@ 0x34
 8001152:	001a      	movs	r2, r3
 8001154:	2100      	movs	r1, #0
 8001156:	f004 fe1b 	bl	8005d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	0018      	movs	r0, r3
 800115e:	2310      	movs	r3, #16
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f004 fe14 	bl	8005d90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	0018      	movs	r0, r3
 800116e:	f003 fa0d 	bl	800458c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001172:	f003 f9fd 	bl	8004570 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <SystemClock_Config+0xcc>)
 8001178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800117a:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <SystemClock_Config+0xcc>)
 800117c:	2118      	movs	r1, #24
 800117e:	438a      	bics	r2, r1
 8001180:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2206      	movs	r2, #6
 8001186:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001188:	193b      	adds	r3, r7, r4
 800118a:	2201      	movs	r2, #1
 800118c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118e:	193b      	adds	r3, r7, r4
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	0052      	lsls	r2, r2, #1
 8001194:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001196:	0021      	movs	r1, r4
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2240      	movs	r2, #64	@ 0x40
 80011a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2202      	movs	r2, #2
 80011a8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2202      	movs	r2, #2
 80011ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2208      	movs	r2, #8
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2280      	movs	r2, #128	@ 0x80
 80011c0:	0292      	lsls	r2, r2, #10
 80011c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	22e0      	movs	r2, #224	@ 0xe0
 80011c8:	0612      	lsls	r2, r2, #24
 80011ca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	0018      	movs	r0, r3
 80011d0:	f003 fa1c 	bl	800460c <HAL_RCC_OscConfig>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011d8:	f000 fb76 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2207      	movs	r2, #7
 80011e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2202      	movs	r2, #2
 80011e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2100      	movs	r1, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f003 fd17 	bl	8004c2c <HAL_RCC_ClockConfig>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001202:	f000 fb61 	bl	80018c8 <Error_Handler>
  }
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b013      	add	sp, #76	@ 0x4c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	40021000 	.word	0x40021000

08001214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	0018      	movs	r0, r3
 800121e:	230c      	movs	r3, #12
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f004 fdb4 	bl	8005d90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800122a:	4a2c      	ldr	r2, [pc, #176]	@ (80012dc <MX_ADC1_Init+0xc8>)
 800122c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800122e:	4b2a      	ldr	r3, [pc, #168]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	05d2      	lsls	r2, r2, #23
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001236:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123c:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800124a:	2204      	movs	r2, #4
 800124c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001250:	2200      	movs	r2, #0
 8001252:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001254:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001256:	2200      	movs	r2, #0
 8001258:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800125c:	2201      	movs	r2, #1
 800125e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001262:	2201      	movs	r2, #1
 8001264:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001274:	222c      	movs	r2, #44	@ 0x2c
 8001276:	2100      	movs	r1, #0
 8001278:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001282:	2207      	movs	r2, #7
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_3CYCLES_5;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001288:	2201      	movs	r2, #1
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800128e:	223c      	movs	r2, #60	@ 0x3c
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 8001296:	2200      	movs	r2, #0
 8001298:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 800129c:	0018      	movs	r0, r3
 800129e:	f001 f981 	bl	80025a4 <HAL_ADC_Init>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80012a6:	f000 fb0f 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4a0c      	ldr	r2, [pc, #48]	@ (80012e0 <MX_ADC1_Init+0xcc>)
 80012ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	1d3a      	adds	r2, r7, #4
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_ADC1_Init+0xc4>)
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 fc40 	bl	8002b48 <HAL_ADC_ConfigChannel>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80012cc:	f000 fafc 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b004      	add	sp, #16
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000084 	.word	0x20000084
 80012dc:	40012400 	.word	0x40012400
 80012e0:	0c000008 	.word	0x0c000008

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <MX_I2C1_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <MX_I2C1_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <MX_I2C1_Init+0x74>)
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <MX_I2C1_Init+0x7c>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <MX_I2C1_Init+0x74>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_I2C1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_I2C1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_I2C1_Init+0x74>)
 8001320:	0018      	movs	r0, r3
 8001322:	f002 fb23 	bl	800396c <HAL_I2C_Init>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800132a:	f000 facd 	bl	80018c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <MX_I2C1_Init+0x74>)
 8001330:	2100      	movs	r1, #0
 8001332:	0018      	movs	r0, r3
 8001334:	f003 f884 	bl	8004440 <HAL_I2CEx_ConfigAnalogFilter>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 fac4 	bl	80018c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <MX_I2C1_Init+0x74>)
 8001342:	2100      	movs	r1, #0
 8001344:	0018      	movs	r0, r3
 8001346:	f003 f8c7 	bl	80044d8 <HAL_I2CEx_ConfigDigitalFilter>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800134e:	f000 fabb 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200000e8 	.word	0x200000e8
 800135c:	40005400 	.word	0x40005400
 8001360:	00503d58 	.word	0x00503d58

08001364 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	0018      	movs	r0, r3
 800136e:	2314      	movs	r3, #20
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f004 fd0c 	bl	8005d90 <memset>
  RTC_DateTypeDef sDate = {0};
 8001378:	003b      	movs	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <MX_RTC_Init+0xd0>)
 8001380:	4a2d      	ldr	r2, [pc, #180]	@ (8001438 <MX_RTC_Init+0xd4>)
 8001382:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <MX_RTC_Init+0xd0>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <MX_RTC_Init+0xd0>)
 800138c:	227f      	movs	r2, #127	@ 0x7f
 800138e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001390:	4b28      	ldr	r3, [pc, #160]	@ (8001434 <MX_RTC_Init+0xd0>)
 8001392:	22ff      	movs	r2, #255	@ 0xff
 8001394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001396:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <MX_RTC_Init+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800139c:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <MX_RTC_Init+0xd0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <MX_RTC_Init+0xd0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_RTC_Init+0xd0>)
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	05d2      	lsls	r2, r2, #23
 80013ae:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <MX_RTC_Init+0xd0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_RTC_Init+0xd0>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f003 fee7 	bl	800518c <HAL_RTC_Init>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80013c2:	f000 fa81 	bl	80018c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80013ea:	1d39      	adds	r1, r7, #4
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_RTC_Init+0xd0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	0018      	movs	r0, r3
 80013f2:	f003 ff6d 	bl	80052d0 <HAL_RTC_SetTime>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d001      	beq.n	80013fe <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80013fa:	f000 fa65 	bl	80018c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80013fe:	003b      	movs	r3, r7
 8001400:	2206      	movs	r2, #6
 8001402:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8001404:	003b      	movs	r3, r7
 8001406:	2204      	movs	r2, #4
 8001408:	705a      	strb	r2, [r3, #1]
  sDate.Date = 24;
 800140a:	003b      	movs	r3, r7
 800140c:	2218      	movs	r2, #24
 800140e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 25;
 8001410:	003b      	movs	r3, r7
 8001412:	2219      	movs	r2, #25
 8001414:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001416:	0039      	movs	r1, r7
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_RTC_Init+0xd0>)
 800141a:	2200      	movs	r2, #0
 800141c:	0018      	movs	r0, r3
 800141e:	f004 f85b 	bl	80054d8 <HAL_RTC_SetDate>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001426:	f000 fa4f 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b006      	add	sp, #24
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	2000013c 	.word	0x2000013c
 8001438:	40002800 	.word	0x40002800

0800143c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_TIM17_Init+0x44>)
 8001442:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <MX_TIM17_Init+0x48>)
 8001444:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3999;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_TIM17_Init+0x44>)
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <MX_TIM17_Init+0x4c>)
 800144a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_TIM17_Init+0x44>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1999;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_TIM17_Init+0x44>)
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <MX_TIM17_Init+0x50>)
 8001456:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_TIM17_Init+0x44>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <MX_TIM17_Init+0x44>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_TIM17_Init+0x44>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <MX_TIM17_Init+0x44>)
 800146c:	0018      	movs	r0, r3
 800146e:	f004 fa04 	bl	800587a <HAL_TIM_Base_Init>
 8001472:	1e03      	subs	r3, r0, #0
 8001474:	d001      	beq.n	800147a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001476:	f000 fa27 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000168 	.word	0x20000168
 8001484:	40014800 	.word	0x40014800
 8001488:	00000f9f 	.word	0x00000f9f
 800148c:	000007cf 	.word	0x000007cf

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	240c      	movs	r4, #12
 8001498:	193b      	adds	r3, r7, r4
 800149a:	0018      	movs	r0, r3
 800149c:	2314      	movs	r3, #20
 800149e:	001a      	movs	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	f004 fc75 	bl	8005d90 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b37      	ldr	r3, [pc, #220]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014aa:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014ac:	2102      	movs	r1, #2
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014c2:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014c4:	2104      	movs	r1, #4
 80014c6:	430a      	orrs	r2, r1
 80014c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014e2:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <MX_GPIO_Init+0xf4>)
 80014e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e6:	2201      	movs	r2, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Sw1_Pin Sw2_Pin */
  GPIO_InitStruct.Pin = Sw1_Pin|Sw2_Pin;
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	22c0      	movs	r2, #192	@ 0xc0
 80014f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	2284      	movs	r2, #132	@ 0x84
 80014f8:	0392      	lsls	r2, r2, #14
 80014fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2201      	movs	r2, #1
 8001500:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	193a      	adds	r2, r7, r4
 8001504:	23a0      	movs	r3, #160	@ 0xa0
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f002 f88c 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sw3_Pin */
  GPIO_InitStruct.Pin = Sw3_Pin;
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2284      	movs	r2, #132	@ 0x84
 800151c:	0392      	lsls	r2, r2, #14
 800151e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2201      	movs	r2, #1
 8001524:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sw3_GPIO_Port, &GPIO_InitStruct);
 8001526:	000c      	movs	r4, r1
 8001528:	187b      	adds	r3, r7, r1
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <MX_GPIO_Init+0xf8>)
 800152c:	0019      	movs	r1, r3
 800152e:	0010      	movs	r0, r2
 8001530:	f002 f87a 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pins : STDBY_BAT_Pin CHRG_BAT_Pin */
  GPIO_InitStruct.Pin = STDBY_BAT_Pin|CHRG_BAT_Pin;
 8001534:	0021      	movs	r1, r4
 8001536:	187b      	adds	r3, r7, r1
 8001538:	22c0      	movs	r2, #192	@ 0xc0
 800153a:	0152      	lsls	r2, r2, #5
 800153c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	22c4      	movs	r2, #196	@ 0xc4
 8001542:	0392      	lsls	r2, r2, #14
 8001544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2201      	movs	r2, #1
 800154a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	187a      	adds	r2, r7, r1
 800154e:	23a0      	movs	r3, #160	@ 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f002 f867 	bl	8003628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2005      	movs	r0, #5
 8001560:	f002 f830 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001564:	2005      	movs	r0, #5
 8001566:	f002 f842 	bl	80035ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2007      	movs	r0, #7
 8001570:	f002 f828 	bl	80035c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001574:	2007      	movs	r0, #7
 8001576:	f002 f83a 	bl	80035ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b009      	add	sp, #36	@ 0x24
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	40021000 	.word	0x40021000
 8001588:	50000400 	.word	0x50000400

0800158c <ADC_Select_CH3>:

/* USER CODE BEGIN 4 */
void ADC_Select_CH3(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_3;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <ADC_Select_CH3+0x30>)
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <ADC_Select_CH3+0x34>)
 8001594:	601a      	str	r2, [r3, #0]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <ADC_Select_CH3+0x30>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
	 sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <ADC_Select_CH3+0x30>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <ADC_Select_CH3+0x30>)
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <ADC_Select_CH3+0x38>)
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f001 facd 	bl	8002b48 <HAL_ADC_ConfigChannel>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <ADC_Select_CH3+0x2a>
	 {
	 	Error_Handler();
 80015b2:	f000 f989 	bl	80018c8 <Error_Handler>
	 }
}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200001cc 	.word	0x200001cc
 80015c0:	0c000008 	.word	0x0c000008
 80015c4:	20000084 	.word	0x20000084

080015c8 <ADC_Select_CH5>:
void ADC_Select_CH5(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_5;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <ADC_Select_CH5+0x30>)
 80015ce:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <ADC_Select_CH5+0x34>)
 80015d0:	601a      	str	r2, [r3, #0]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <ADC_Select_CH5+0x30>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
	 sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <ADC_Select_CH5+0x30>)
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <ADC_Select_CH5+0x38>)
 80015dc:	609a      	str	r2, [r3, #8]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015de:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <ADC_Select_CH5+0x30>)
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <ADC_Select_CH5+0x3c>)
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f001 faaf 	bl	8002b48 <HAL_ADC_ConfigChannel>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <ADC_Select_CH5+0x2a>
	 {
	 	Error_Handler();
 80015ee:	f000 f96b 	bl	80018c8 <Error_Handler>
	 }

}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200001cc 	.word	0x200001cc
 80015fc:	14000020 	.word	0x14000020
 8001600:	07ffff04 	.word	0x07ffff04
 8001604:	20000084 	.word	0x20000084

08001608 <WriteTime>:

void WriteTime(){
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800160e:	495c      	ldr	r1, [pc, #368]	@ (8001780 <WriteTime+0x178>)
 8001610:	4b5c      	ldr	r3, [pc, #368]	@ (8001784 <WriteTime+0x17c>)
 8001612:	2200      	movs	r2, #0
 8001614:	0018      	movs	r0, r3
 8001616:	f003 ff03 	bl	8005420 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800161a:	495b      	ldr	r1, [pc, #364]	@ (8001788 <WriteTime+0x180>)
 800161c:	4b59      	ldr	r3, [pc, #356]	@ (8001784 <WriteTime+0x17c>)
 800161e:	2200      	movs	r2, #0
 8001620:	0018      	movs	r0, r3
 8001622:	f003 ffeb 	bl	80055fc <HAL_RTC_GetDate>

		  if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
 8001626:	4b56      	ldr	r3, [pc, #344]	@ (8001780 <WriteTime+0x178>)
 8001628:	789b      	ldrb	r3, [r3, #2]
 800162a:	2b09      	cmp	r3, #9
 800162c:	d816      	bhi.n	800165c <WriteTime+0x54>
 800162e:	4b54      	ldr	r3, [pc, #336]	@ (8001780 <WriteTime+0x178>)
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	2b09      	cmp	r3, #9
 8001634:	d812      	bhi.n	800165c <WriteTime+0x54>
 8001636:	4b52      	ldr	r3, [pc, #328]	@ (8001780 <WriteTime+0x178>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b09      	cmp	r3, #9
 800163c:	d80e      	bhi.n	800165c <WriteTime+0x54>
			  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800163e:	4b50      	ldr	r3, [pc, #320]	@ (8001780 <WriteTime+0x178>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001a      	movs	r2, r3
 8001644:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <WriteTime+0x178>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	001c      	movs	r4, r3
 800164a:	4b4d      	ldr	r3, [pc, #308]	@ (8001780 <WriteTime+0x178>)
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	494f      	ldr	r1, [pc, #316]	@ (800178c <WriteTime+0x184>)
 8001650:	484f      	ldr	r0, [pc, #316]	@ (8001790 <WriteTime+0x188>)
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	0023      	movs	r3, r4
 8001656:	f004 fb79 	bl	8005d4c <siprintf>
 800165a:	e07c      	b.n	8001756 <WriteTime+0x14e>

		  else if(sTime.Seconds < 10 && sTime.Minutes < 10)
 800165c:	4b48      	ldr	r3, [pc, #288]	@ (8001780 <WriteTime+0x178>)
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	2b09      	cmp	r3, #9
 8001662:	d812      	bhi.n	800168a <WriteTime+0x82>
 8001664:	4b46      	ldr	r3, [pc, #280]	@ (8001780 <WriteTime+0x178>)
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d80e      	bhi.n	800168a <WriteTime+0x82>
			  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800166c:	4b44      	ldr	r3, [pc, #272]	@ (8001780 <WriteTime+0x178>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	001a      	movs	r2, r3
 8001672:	4b43      	ldr	r3, [pc, #268]	@ (8001780 <WriteTime+0x178>)
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	001c      	movs	r4, r3
 8001678:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <WriteTime+0x178>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	4945      	ldr	r1, [pc, #276]	@ (8001794 <WriteTime+0x18c>)
 800167e:	4844      	ldr	r0, [pc, #272]	@ (8001790 <WriteTime+0x188>)
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	0023      	movs	r3, r4
 8001684:	f004 fb62 	bl	8005d4c <siprintf>
 8001688:	e065      	b.n	8001756 <WriteTime+0x14e>

		  else if(sTime.Seconds < 10 && sTime.Hours < 10)
 800168a:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <WriteTime+0x178>)
 800168c:	789b      	ldrb	r3, [r3, #2]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d812      	bhi.n	80016b8 <WriteTime+0xb0>
 8001692:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <WriteTime+0x178>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b09      	cmp	r3, #9
 8001698:	d80e      	bhi.n	80016b8 <WriteTime+0xb0>
			  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800169a:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <WriteTime+0x178>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	001a      	movs	r2, r3
 80016a0:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <WriteTime+0x178>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	001c      	movs	r4, r3
 80016a6:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <WriteTime+0x178>)
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	493b      	ldr	r1, [pc, #236]	@ (8001798 <WriteTime+0x190>)
 80016ac:	4838      	ldr	r0, [pc, #224]	@ (8001790 <WriteTime+0x188>)
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	0023      	movs	r3, r4
 80016b2:	f004 fb4b 	bl	8005d4c <siprintf>
 80016b6:	e04e      	b.n	8001756 <WriteTime+0x14e>

		  else if(sTime.Hours < 10 && sTime.Minutes < 10)
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <WriteTime+0x178>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d812      	bhi.n	80016e6 <WriteTime+0xde>
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <WriteTime+0x178>)
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d80e      	bhi.n	80016e6 <WriteTime+0xde>
			  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <WriteTime+0x178>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	001a      	movs	r2, r3
 80016ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <WriteTime+0x178>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	001c      	movs	r4, r3
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <WriteTime+0x178>)
 80016d6:	789b      	ldrb	r3, [r3, #2]
 80016d8:	4930      	ldr	r1, [pc, #192]	@ (800179c <WriteTime+0x194>)
 80016da:	482d      	ldr	r0, [pc, #180]	@ (8001790 <WriteTime+0x188>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	0023      	movs	r3, r4
 80016e0:	f004 fb34 	bl	8005d4c <siprintf>
 80016e4:	e037      	b.n	8001756 <WriteTime+0x14e>

		  else if(sTime.Seconds < 10)
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <WriteTime+0x178>)
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	2b09      	cmp	r3, #9
 80016ec:	d80e      	bhi.n	800170c <WriteTime+0x104>
			  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <WriteTime+0x178>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	001a      	movs	r2, r3
 80016f4:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <WriteTime+0x178>)
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	001c      	movs	r4, r3
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <WriteTime+0x178>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	4928      	ldr	r1, [pc, #160]	@ (80017a0 <WriteTime+0x198>)
 8001700:	4823      	ldr	r0, [pc, #140]	@ (8001790 <WriteTime+0x188>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	0023      	movs	r3, r4
 8001706:	f004 fb21 	bl	8005d4c <siprintf>
 800170a:	e024      	b.n	8001756 <WriteTime+0x14e>

		  else if(sTime.Minutes < 10)
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <WriteTime+0x178>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	2b09      	cmp	r3, #9
 8001712:	d80e      	bhi.n	8001732 <WriteTime+0x12a>
			  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <WriteTime+0x178>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	001a      	movs	r2, r3
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <WriteTime+0x178>)
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	001c      	movs	r4, r3
 8001720:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <WriteTime+0x178>)
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	491f      	ldr	r1, [pc, #124]	@ (80017a4 <WriteTime+0x19c>)
 8001726:	481a      	ldr	r0, [pc, #104]	@ (8001790 <WriteTime+0x188>)
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	0023      	movs	r3, r4
 800172c:	f004 fb0e 	bl	8005d4c <siprintf>
 8001730:	e011      	b.n	8001756 <WriteTime+0x14e>

		  else if(sTime.Hours < 10)
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <WriteTime+0x178>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b09      	cmp	r3, #9
 8001738:	d80d      	bhi.n	8001756 <WriteTime+0x14e>
			  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <WriteTime+0x178>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001a      	movs	r2, r3
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <WriteTime+0x178>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	001c      	movs	r4, r3
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <WriteTime+0x178>)
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	4917      	ldr	r1, [pc, #92]	@ (80017a8 <WriteTime+0x1a0>)
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <WriteTime+0x188>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	0023      	movs	r3, r4
 8001752:	f004 fafb 	bl	8005d4c <siprintf>

		  	  	ssd1306_SetCursor(28, 0);
 8001756:	2100      	movs	r1, #0
 8001758:	201c      	movs	r0, #28
 800175a:	f000 fae7 	bl	8001d2c <ssd1306_SetCursor>
		        ssd1306_WriteString(buf, Font_7x10);
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <WriteTime+0x1a4>)
 8001760:	480b      	ldr	r0, [pc, #44]	@ (8001790 <WriteTime+0x188>)
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	f000 fabb 	bl	8001ce0 <ssd1306_WriteString>
		        memset(buf, 0, sizeof(buf));
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <WriteTime+0x188>)
 800176c:	2214      	movs	r2, #20
 800176e:	2100      	movs	r1, #0
 8001770:	0018      	movs	r0, r3
 8001772:	f004 fb0d 	bl	8005d90 <memset>
}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b001      	add	sp, #4
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	200001b4 	.word	0x200001b4
 8001784:	2000013c 	.word	0x2000013c
 8001788:	200001c8 	.word	0x200001c8
 800178c:	080066a0 	.word	0x080066a0
 8001790:	200001d8 	.word	0x200001d8
 8001794:	080066ac 	.word	0x080066ac
 8001798:	080066b8 	.word	0x080066b8
 800179c:	080066c4 	.word	0x080066c4
 80017a0:	080066d0 	.word	0x080066d0
 80017a4:	080066dc 	.word	0x080066dc
 80017a8:	080066e8 	.word	0x080066e8
 80017ac:	20000000 	.word	0x20000000

080017b0 <BatteryCharge>:

uint16_t BatteryCharge(uint16_t adc0){
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	0002      	movs	r2, r0
 80017b8:	1dbb      	adds	r3, r7, #6
 80017ba:	801a      	strh	r2, [r3, #0]
	uint16_t adc;
	if(tim17 % 2 == 0){
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <BatteryCharge+0xac>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4013      	ands	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d142      	bne.n	8001850 <BatteryCharge+0xa0>

		 ADC_Select_CH3();
 80017ca:	f7ff fedf 	bl	800158c <ADC_Select_CH3>
		 HAL_ADC_Start(&hadc1);
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <BatteryCharge+0xb0>)
 80017d0:	0018      	movs	r0, r3
 80017d2:	f001 f88f 	bl	80028f4 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, 100);
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <BatteryCharge+0xb0>)
 80017d8:	2164      	movs	r1, #100	@ 0x64
 80017da:	0018      	movs	r0, r3
 80017dc:	f001 f914 	bl	8002a08 <HAL_ADC_PollForConversion>
		 adc = HAL_ADC_GetValue(&hadc1);
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <BatteryCharge+0xb0>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f001 f9a4 	bl	8002b30 <HAL_ADC_GetValue>
 80017e8:	0002      	movs	r2, r0
 80017ea:	240e      	movs	r4, #14
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	801a      	strh	r2, [r3, #0]
		 if(adc > 2050){
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <BatteryCharge+0xb4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d918      	bls.n	800182c <BatteryCharge+0x7c>
		 adc -= 2050;
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	193a      	adds	r2, r7, r4
 80017fe:	8812      	ldrh	r2, [r2, #0]
 8001800:	4919      	ldr	r1, [pc, #100]	@ (8001868 <BatteryCharge+0xb8>)
 8001802:	468c      	mov	ip, r1
 8001804:	4462      	add	r2, ip
 8001806:	801a      	strh	r2, [r3, #0]
		 adc *= 0.175f;
 8001808:	193b      	adds	r3, r7, r4
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff fa19 	bl	8000c44 <__aeabi_i2f>
 8001812:	1c03      	adds	r3, r0, #0
 8001814:	4915      	ldr	r1, [pc, #84]	@ (800186c <BatteryCharge+0xbc>)
 8001816:	1c18      	adds	r0, r3, #0
 8001818:	f7fe fe36 	bl	8000488 <__aeabi_fmul>
 800181c:	1c03      	adds	r3, r0, #0
 800181e:	193c      	adds	r4, r7, r4
 8001820:	1c18      	adds	r0, r3, #0
 8001822:	f7fe fd03 	bl	800022c <__aeabi_f2uiz>
 8001826:	0003      	movs	r3, r0
 8001828:	8023      	strh	r3, [r4, #0]
 800182a:	e003      	b.n	8001834 <BatteryCharge+0x84>
		 }
		 else
		adc = 0;
 800182c:	230e      	movs	r3, #14
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	2200      	movs	r2, #0
 8001832:	801a      	strh	r2, [r3, #0]

		 HAL_ADC_Stop(&hadc1);
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <BatteryCharge+0xb0>)
 8001836:	0018      	movs	r0, r3
 8001838:	f001 f8aa 	bl	8002990 <HAL_ADC_Stop>
	tim17++;
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <BatteryCharge+0xac>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <BatteryCharge+0xac>)
 8001846:	701a      	strb	r2, [r3, #0]
		}
	else{
		return adc0;
	}
	return adc;
 8001848:	230e      	movs	r3, #14
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	e001      	b.n	8001854 <BatteryCharge+0xa4>
		return adc0;
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	881b      	ldrh	r3, [r3, #0]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b005      	add	sp, #20
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	20000008 	.word	0x20000008
 8001860:	20000084 	.word	0x20000084
 8001864:	00000802 	.word	0x00000802
 8001868:	fffff7fe 	.word	0xfffff7fe
 800186c:	3e333333 	.word	0x3e333333

08001870 <WriteBatteryCharge>:


void WriteBatteryCharge(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	ssd1306_SetCursor(100, 0);
 8001874:	2100      	movs	r1, #0
 8001876:	2064      	movs	r0, #100	@ 0x64
 8001878:	f000 fa58 	bl	8001d2c <ssd1306_SetCursor>
		 sprintf(buf, "%d", adc[0]);
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <WriteBatteryCharge+0x48>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	001a      	movs	r2, r3
 8001882:	490e      	ldr	r1, [pc, #56]	@ (80018bc <WriteBatteryCharge+0x4c>)
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <WriteBatteryCharge+0x50>)
 8001886:	0018      	movs	r0, r3
 8001888:	f004 fa60 	bl	8005d4c <siprintf>
		 ssd1306_WriteString(buf, Font_7x10);
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <WriteBatteryCharge+0x54>)
 800188e:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <WriteBatteryCharge+0x50>)
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	f000 fa24 	bl	8001ce0 <ssd1306_WriteString>
		 ssd1306_WriteChar('%', Font_7x10);
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <WriteBatteryCharge+0x54>)
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2025      	movs	r0, #37	@ 0x25
 80018a0:	f000 f986 	bl	8001bb0 <ssd1306_WriteChar>
		 memset(buf, 0, sizeof(buf));
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <WriteBatteryCharge+0x50>)
 80018a6:	2214      	movs	r2, #20
 80018a8:	2100      	movs	r1, #0
 80018aa:	0018      	movs	r0, r3
 80018ac:	f004 fa70 	bl	8005d90 <memset>
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	200001ec 	.word	0x200001ec
 80018bc:	0800669c 	.word	0x0800669c
 80018c0:	200001d8 	.word	0x200001d8
 80018c4:	20000000 	.word	0x20000000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	2340      	movs	r3, #64	@ 0x40
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 80018f0:	2380      	movs	r3, #128	@ 0x80
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 80018fc:	2340      	movs	r3, #64	@ 0x40
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	0002      	movs	r2, r0
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	701a      	strb	r2, [r3, #0]
	SSD1306.Color = color;
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <ssd1306_SetColor+0x1c>)
 8001912:	1dfa      	adds	r2, r7, #7
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	715a      	strb	r2, [r3, #5]
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200001f0 	.word	0x200001f0

08001924 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001928:	23fa      	movs	r3, #250	@ 0xfa
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4845      	ldr	r0, [pc, #276]	@ (8001a44 <ssd1306_Init+0x120>)
 800192e:	2205      	movs	r2, #5
 8001930:	2178      	movs	r1, #120	@ 0x78
 8001932:	f002 f9ef 	bl	8003d14 <HAL_I2C_IsDeviceReady>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d004      	beq.n	8001944 <ssd1306_Init+0x20>
	{
		SSD1306.Initialized = 0;
 800193a:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <ssd1306_Init+0x124>)
 800193c:	2200      	movs	r2, #0
 800193e:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8001940:	2300      	movs	r3, #0
 8001942:	e07c      	b.n	8001a3e <ssd1306_Init+0x11a>
	// Wait for the screen to boot
	//HAL_Delay(100);


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8001944:	20ae      	movs	r0, #174	@ 0xae
 8001946:	f000 fa25 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800194a:	20d5      	movs	r0, #213	@ 0xd5
 800194c:	f000 fa22 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001950:	20f0      	movs	r0, #240	@ 0xf0
 8001952:	f000 fa1f 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001956:	20a8      	movs	r0, #168	@ 0xa8
 8001958:	f000 fa1c 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 800195c:	f7ff ffc0 	bl	80018e0 <height>
 8001960:	0003      	movs	r3, r0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	0018      	movs	r0, r3
 800196a:	f000 fa13 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 800196e:	20d3      	movs	r0, #211	@ 0xd3
 8001970:	f000 fa10 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001974:	2000      	movs	r0, #0
 8001976:	f000 fa0d 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 800197a:	2040      	movs	r0, #64	@ 0x40
 800197c:	f000 fa0a 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001980:	208d      	movs	r0, #141	@ 0x8d
 8001982:	f000 fa07 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8001986:	2014      	movs	r0, #20
 8001988:	f000 fa04 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 800198c:	2020      	movs	r0, #32
 800198e:	f000 fa01 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f9fe 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8001998:	20a0      	movs	r0, #160	@ 0xa0
 800199a:	f000 f9fb 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 800199e:	20c0      	movs	r0, #192	@ 0xc0
 80019a0:	f000 f9f8 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80019a4:	20da      	movs	r0, #218	@ 0xda
 80019a6:	f000 f9f5 	bl	8001d94 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80019aa:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <ssd1306_Init+0x128>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <ssd1306_Init+0x96>
	{
	  ssd1306_WriteCommand(0x12);
 80019b2:	2012      	movs	r0, #18
 80019b4:	f000 f9ee 	bl	8001d94 <ssd1306_WriteCommand>
 80019b8:	e006      	b.n	80019c8 <ssd1306_Init+0xa4>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <ssd1306_Init+0x128>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <ssd1306_Init+0xa4>
	{
	  ssd1306_WriteCommand(0x02);
 80019c2:	2002      	movs	r0, #2
 80019c4:	f000 f9e6 	bl	8001d94 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 80019c8:	2081      	movs	r0, #129	@ 0x81
 80019ca:	f000 f9e3 	bl	8001d94 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <ssd1306_Init+0x128>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <ssd1306_Init+0xba>
	{
	  ssd1306_WriteCommand(0xCF);
 80019d6:	20cf      	movs	r0, #207	@ 0xcf
 80019d8:	f000 f9dc 	bl	8001d94 <ssd1306_WriteCommand>
 80019dc:	e006      	b.n	80019ec <ssd1306_Init+0xc8>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80019de:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <ssd1306_Init+0x128>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <ssd1306_Init+0xc8>
	{
	  ssd1306_WriteCommand(0x8F);
 80019e6:	208f      	movs	r0, #143	@ 0x8f
 80019e8:	f000 f9d4 	bl	8001d94 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 80019ec:	20d9      	movs	r0, #217	@ 0xd9
 80019ee:	f000 f9d1 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 80019f2:	20f1      	movs	r0, #241	@ 0xf1
 80019f4:	f000 f9ce 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 80019f8:	20db      	movs	r0, #219	@ 0xdb
 80019fa:	f000 f9cb 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 80019fe:	2040      	movs	r0, #64	@ 0x40
 8001a00:	f000 f9c8 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001a04:	20a4      	movs	r0, #164	@ 0xa4
 8001a06:	f000 f9c5 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8001a0a:	20a6      	movs	r0, #166	@ 0xa6
 8001a0c:	f000 f9c2 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001a10:	202e      	movs	r0, #46	@ 0x2e
 8001a12:	f000 f9bf 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8001a16:	20af      	movs	r0, #175	@ 0xaf
 8001a18:	f000 f9bc 	bl	8001d94 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <ssd1306_Init+0x124>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <ssd1306_Init+0x124>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <ssd1306_Init+0x124>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 8001a2e:	f000 f9a3 	bl	8001d78 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001a32:	f000 f80d 	bl	8001a50 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <ssd1306_Init+0x124>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200000e8 	.word	0x200000e8
 8001a48:	200001f0 	.word	0x200001f0
 8001a4c:	200005f8 	.word	0x200005f8

08001a50 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e01d      	b.n	8001a9a <ssd1306_UpdateScreen+0x4a>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	3b50      	subs	r3, #80	@ 0x50
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f994 	bl	8001d94 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f000 f991 	bl	8001d94 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001a72:	2010      	movs	r0, #16
 8001a74:	f000 f98e 	bl	8001d94 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	01da      	lsls	r2, r3, #7
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <ssd1306_UpdateScreen+0x5c>)
 8001a80:	18d4      	adds	r4, r2, r3
 8001a82:	f7ff ff27 	bl	80018d4 <width>
 8001a86:	0003      	movs	r3, r0
 8001a88:	0019      	movs	r1, r3
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f000 f99a 	bl	8001dc4 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	3201      	adds	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b07      	cmp	r3, #7
 8001aa0:	d9dd      	bls.n	8001a5e <ssd1306_UpdateScreen+0xe>
	}
}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b003      	add	sp, #12
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	200001f8 	.word	0x200001f8

08001ab0 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	1dfb      	adds	r3, r7, #7
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	1c0a      	adds	r2, r1, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	SSD1306_COLOR color = SSD1306.Color;
 8001ac2:	250f      	movs	r5, #15
 8001ac4:	197b      	adds	r3, r7, r5
 8001ac6:	4a38      	ldr	r2, [pc, #224]	@ (8001ba8 <ssd1306_DrawPixel+0xf8>)
 8001ac8:	7952      	ldrb	r2, [r2, #5]
 8001aca:	701a      	strb	r2, [r3, #0]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b29c      	uxth	r4, r3
 8001ad2:	f7ff ff0b 	bl	80018ec <ssd1306_GetWidth>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	429c      	cmp	r4, r3
 8001ada:	d261      	bcs.n	8001ba0 <ssd1306_DrawPixel+0xf0>
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b29c      	uxth	r4, r3
 8001ae2:	f7ff ff09 	bl	80018f8 <ssd1306_GetHeight>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	429c      	cmp	r4, r3
 8001aea:	d259      	bcs.n	8001ba0 <ssd1306_DrawPixel+0xf0>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <ssd1306_DrawPixel+0xf8>)
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <ssd1306_DrawPixel+0x52>
	{
		color = (SSD1306_COLOR) !color;
 8001af4:	197b      	adds	r3, r7, r5
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	425a      	negs	r2, r3
 8001afa:	4153      	adcs	r3, r2
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	197b      	adds	r3, r7, r5
 8001b00:	701a      	strb	r2, [r3, #0]
	}


	// Draw in the right color
	if (color == White)
 8001b02:	230f      	movs	r3, #15
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d123      	bne.n	8001b54 <ssd1306_DrawPixel+0xa4>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781c      	ldrb	r4, [r3, #0]
 8001b10:	1dbb      	adds	r3, r7, #6
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	08db      	lsrs	r3, r3, #3
 8001b16:	b2dd      	uxtb	r5, r3
 8001b18:	002e      	movs	r6, r5
 8001b1a:	f7ff fedb 	bl	80018d4 <width>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	0018      	movs	r0, r3
 8001b22:	0003      	movs	r3, r0
 8001b24:	4373      	muls	r3, r6
 8001b26:	18e3      	adds	r3, r4, r3
 8001b28:	4a20      	ldr	r2, [pc, #128]	@ (8001bac <ssd1306_DrawPixel+0xfc>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	b25a      	sxtb	r2, r3
 8001b2e:	1dbb      	adds	r3, r7, #6
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2107      	movs	r1, #7
 8001b34:	400b      	ands	r3, r1
 8001b36:	2101      	movs	r1, #1
 8001b38:	4099      	lsls	r1, r3
 8001b3a:	000b      	movs	r3, r1
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b259      	sxtb	r1, r3
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	002b      	movs	r3, r5
 8001b48:	4343      	muls	r3, r0
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	b2c9      	uxtb	r1, r1
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <ssd1306_DrawPixel+0xfc>)
 8001b50:	54d1      	strb	r1, [r2, r3]
 8001b52:	e026      	b.n	8001ba2 <ssd1306_DrawPixel+0xf2>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781c      	ldrb	r4, [r3, #0]
 8001b58:	1dbb      	adds	r3, r7, #6
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	b2dd      	uxtb	r5, r3
 8001b60:	002e      	movs	r6, r5
 8001b62:	f7ff feb7 	bl	80018d4 <width>
 8001b66:	0003      	movs	r3, r0
 8001b68:	0018      	movs	r0, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	4373      	muls	r3, r6
 8001b6e:	18e3      	adds	r3, r4, r3
 8001b70:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <ssd1306_DrawPixel+0xfc>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	1dba      	adds	r2, r7, #6
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	2107      	movs	r1, #7
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4091      	lsls	r1, r2
 8001b82:	000a      	movs	r2, r1
 8001b84:	b252      	sxtb	r2, r2
 8001b86:	43d2      	mvns	r2, r2
 8001b88:	b252      	sxtb	r2, r2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	b259      	sxtb	r1, r3
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	002b      	movs	r3, r5
 8001b94:	4343      	muls	r3, r0
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	b2c9      	uxtb	r1, r1
 8001b9a:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <ssd1306_DrawPixel+0xfc>)
 8001b9c:	54d1      	strb	r1, [r2, r3]
 8001b9e:	e000      	b.n	8001ba2 <ssd1306_DrawPixel+0xf2>
		return;
 8001ba0:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b005      	add	sp, #20
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	200001f0 	.word	0x200001f0
 8001bac:	200001f8 	.word	0x200001f8

08001bb0 <ssd1306_WriteChar>:
	}
}


char ssd1306_WriteChar(char ch, FontDef Font)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	6019      	str	r1, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	1c02      	adds	r2, r0, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;


	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001bc4:	f7ff fe86 	bl	80018d4 <width>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	001a      	movs	r2, r3
 8001bcc:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	18cb      	adds	r3, r1, r3
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dd0b      	ble.n	8001bf4 <ssd1306_WriteChar+0x44>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001bdc:	f7ff fe80 	bl	80018e0 <height>
 8001be0:	0003      	movs	r3, r0
 8001be2:	001a      	movs	r2, r3
 8001be4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001be6:	885b      	ldrh	r3, [r3, #2]
 8001be8:	0019      	movs	r1, r3
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	18cb      	adds	r3, r1, r3
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dc01      	bgt.n	8001bf8 <ssd1306_WriteChar+0x48>
	{
		// Not enough space on current line
		return 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e06c      	b.n	8001cd2 <ssd1306_WriteChar+0x122>
	}


	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	e058      	b.n	8001cb0 <ssd1306_WriteChar+0x100>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	230f      	movs	r3, #15
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	3b20      	subs	r3, #32
 8001c0a:	1d39      	adds	r1, r7, #4
 8001c0c:	7849      	ldrb	r1, [r1, #1]
 8001c0e:	434b      	muls	r3, r1
 8001c10:	0019      	movs	r1, r3
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	18cb      	adds	r3, r1, r3
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	e03c      	b.n	8001c9e <ssd1306_WriteChar+0xee>
		{
			if ((b << j) & 0x8000)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d011      	beq.n	8001c56 <ssd1306_WriteChar+0xa6>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001c32:	4b2a      	ldr	r3, [pc, #168]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	18d3      	adds	r3, r2, r3
 8001c3e:	b2d8      	uxtb	r0, r3
 8001c40:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c42:	885b      	ldrh	r3, [r3, #2]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	18d3      	adds	r3, r2, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	0019      	movs	r1, r3
 8001c50:	f7ff ff2e 	bl	8001ab0 <ssd1306_DrawPixel>
 8001c54:	e020      	b.n	8001c98 <ssd1306_WriteChar+0xe8>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c58:	795b      	ldrb	r3, [r3, #5]
 8001c5a:	425a      	negs	r2, r3
 8001c5c:	4153      	adcs	r3, r2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	001a      	movs	r2, r3
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c64:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	b2d8      	uxtb	r0, r3
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c76:	885b      	ldrh	r3, [r3, #2]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	18d3      	adds	r3, r2, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	0019      	movs	r1, r3
 8001c84:	f7ff ff14 	bl	8001ab0 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	425a      	negs	r2, r3
 8001c8e:	4153      	adcs	r3, r2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	001a      	movs	r2, r3
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001c96:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d3bc      	bcc.n	8001c24 <ssd1306_WriteChar+0x74>
	for (i = 0; i < Font.FontHeight; i++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d3a0      	bcc.n	8001bfe <ssd1306_WriteChar+0x4e>
		}
	}


	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	1d3a      	adds	r2, r7, #4
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <ssd1306_WriteChar+0x12c>)
 8001cca:	801a      	strh	r2, [r3, #0]


	// Return written char for validation
	return ch;
 8001ccc:	230f      	movs	r3, #15
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b008      	add	sp, #32
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	200001f0 	.word	0x200001f0

08001ce0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	6019      	str	r1, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
	// Write until null-byte
	while (*str)
 8001cee:	e012      	b.n	8001d16 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	7818      	ldrb	r0, [r3, #0]
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	f7ff ff59 	bl	8001bb0 <ssd1306_WriteChar>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	001a      	movs	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d002      	beq.n	8001d10 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	e008      	b.n	8001d22 <ssd1306_WriteString+0x42>
		}


		// Next char
		str++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1e8      	bne.n	8001cf0 <ssd1306_WriteString+0x10>
	}


	// Everything ok
	return *str;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	781b      	ldrb	r3, [r3, #0]
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b004      	add	sp, #16
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	0002      	movs	r2, r0
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	1dbb      	adds	r3, r7, #6
 8001d3a:	1c0a      	adds	r2, r1, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
	SSD1306.CurrentX = x;
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <ssd1306_SetCursor+0x30>)
 8001d46:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <ssd1306_SetCursor+0x30>)
 8001d50:	805a      	strh	r2, [r3, #2]
}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	200001f0 	.word	0x200001f0

08001d60 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8001d64:	20a1      	movs	r0, #161	@ 0xa1
 8001d66:	f000 f815 	bl	8001d94 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8001d6a:	20c8      	movs	r0, #200	@ 0xc8
 8001d6c:	f000 f812 	bl	8001d94 <ssd1306_WriteCommand>
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	00da      	lsls	r2, r3, #3
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <ssd1306_Clear+0x18>)
 8001d82:	2100      	movs	r1, #0
 8001d84:	0018      	movs	r0, r3
 8001d86:	f004 f803 	bl	8005d90 <memset>
}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200001f8 	.word	0x200001f8

08001d94 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	701a      	strb	r2, [r3, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001da0:	4807      	ldr	r0, [pc, #28]	@ (8001dc0 <ssd1306_WriteCommand+0x2c>)
 8001da2:	230a      	movs	r3, #10
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	2301      	movs	r3, #1
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2301      	movs	r3, #1
 8001db0:	2200      	movs	r2, #0
 8001db2:	2178      	movs	r1, #120	@ 0x78
 8001db4:	f001 fe80 	bl	8003ab8 <HAL_I2C_Mem_Write>
#endif
}
 8001db8:	46c0      	nop			@ (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200000e8 	.word	0x200000e8

08001dc4 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af04      	add	r7, sp, #16
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	000a      	movs	r2, r1
 8001dce:	1cbb      	adds	r3, r7, #2
 8001dd0:	801a      	strh	r2, [r3, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8001dd2:	4808      	ldr	r0, [pc, #32]	@ (8001df4 <ssd1306_WriteData+0x30>)
 8001dd4:	2364      	movs	r3, #100	@ 0x64
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	1cbb      	adds	r3, r7, #2
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	2178      	movs	r1, #120	@ 0x78
 8001de8:	f001 fe66 	bl	8003ab8 <HAL_I2C_Mem_Write>
#endif
}
 8001dec:	46c0      	nop			@ (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200000e8 	.word	0x200000e8

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	430a      	orrs	r2, r1
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4013      	ands	r3, r2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	0549      	lsls	r1, r1, #21
 8001e20:	430a      	orrs	r2, r1
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_MspInit+0x44>)
 8001e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b08b      	sub	sp, #44	@ 0x2c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	2414      	movs	r4, #20
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	2314      	movs	r3, #20
 8001e50:	001a      	movs	r2, r3
 8001e52:	2100      	movs	r1, #0
 8001e54:	f003 ff9c 	bl	8005d90 <memset>
  if(hadc->Instance==ADC1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_ADC_MspInit+0x80>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d129      	bne.n	8001eb6 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	0349      	lsls	r1, r1, #13
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	035b      	lsls	r3, r3, #13
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_ADC_MspInit+0x84>)
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BAT_Pin|HALL_Pin;
 8001e96:	193b      	adds	r3, r7, r4
 8001e98:	2228      	movs	r2, #40	@ 0x28
 8001e9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9c:	193b      	adds	r3, r7, r4
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	193b      	adds	r3, r7, r4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	193a      	adds	r2, r7, r4
 8001eaa:	23a0      	movs	r3, #160	@ 0xa0
 8001eac:	05db      	lsls	r3, r3, #23
 8001eae:	0011      	movs	r1, r2
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f001 fbb9 	bl	8003628 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b00b      	add	sp, #44	@ 0x2c
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	40012400 	.word	0x40012400
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b091      	sub	sp, #68	@ 0x44
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	232c      	movs	r3, #44	@ 0x2c
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	2314      	movs	r3, #20
 8001ed8:	001a      	movs	r2, r3
 8001eda:	2100      	movs	r1, #0
 8001edc:	f003 ff58 	bl	8005d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	2414      	movs	r4, #20
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	2318      	movs	r3, #24
 8001ee8:	001a      	movs	r2, r3
 8001eea:	2100      	movs	r1, #0
 8001eec:	f003 ff50 	bl	8005d90 <memset>
  if(hi2c->Instance==I2C1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <HAL_I2C_MspInit+0xb8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d13d      	bne.n	8001f76 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001efa:	193b      	adds	r3, r7, r4
 8001efc:	2220      	movs	r2, #32
 8001efe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f003 f819 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f12:	f7ff fcd9 	bl	80018c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_I2C_MspInit+0xbc>)
 8001f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_I2C_MspInit+0xbc>)
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_I2C_MspInit+0xbc>)
 8001f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001f2e:	212c      	movs	r1, #44	@ 0x2c
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	22c0      	movs	r2, #192	@ 0xc0
 8001f34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	2212      	movs	r2, #18
 8001f3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <HAL_I2C_MspInit+0xc0>)
 8001f52:	0019      	movs	r1, r3
 8001f54:	0010      	movs	r0, r2
 8001f56:	f001 fb67 	bl	8003628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_I2C_MspInit+0xbc>)
 8001f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_I2C_MspInit+0xbc>)
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	0389      	lsls	r1, r1, #14
 8001f64:	430a      	orrs	r2, r1
 8001f66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_I2C_MspInit+0xbc>)
 8001f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	039b      	lsls	r3, r3, #14
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b011      	add	sp, #68	@ 0x44
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	40005400 	.word	0x40005400
 8001f84:	40021000 	.word	0x40021000
 8001f88:	50000400 	.word	0x50000400

08001f8c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b08b      	sub	sp, #44	@ 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	2410      	movs	r4, #16
 8001f96:	193b      	adds	r3, r7, r4
 8001f98:	0018      	movs	r0, r3
 8001f9a:	2318      	movs	r3, #24
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	f003 fef6 	bl	8005d90 <memset>
  if(hrtc->Instance==RTC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	@ (8002000 <HAL_RTC_MspInit+0x74>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d124      	bne.n	8001ff8 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	0292      	lsls	r2, r2, #10
 8001fb4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	2280      	movs	r2, #128	@ 0x80
 8001fba:	0052      	lsls	r2, r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f002 ffbd 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fca:	f7ff fc7d 	bl	80018c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <HAL_RTC_MspInit+0x78>)
 8001fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_RTC_MspInit+0x78>)
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	0209      	lsls	r1, r1, #8
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RTC_MspInit+0x78>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_RTC_MspInit+0x78>)
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	00c9      	lsls	r1, r1, #3
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_RTC_MspInit+0x78>)
 8001fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b00b      	add	sp, #44	@ 0x2c
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	40002800 	.word	0x40002800
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0e      	ldr	r2, [pc, #56]	@ (8002050 <HAL_TIM_Base_MspInit+0x48>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d115      	bne.n	8002046 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_TIM_Base_MspInit+0x4c>)
 800201c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_TIM_Base_MspInit+0x4c>)
 8002020:	2180      	movs	r1, #128	@ 0x80
 8002022:	02c9      	lsls	r1, r1, #11
 8002024:	430a      	orrs	r2, r1
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <HAL_TIM_Base_MspInit+0x4c>)
 800202a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	02db      	lsls	r3, r3, #11
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2016      	movs	r0, #22
 800203c:	f001 fac2 	bl	80035c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002040:	2016      	movs	r0, #22
 8002042:	f001 fad4 	bl	80035ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40014800 	.word	0x40014800
 8002054:	40021000 	.word	0x40021000

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	46c0      	nop			@ (mov r8, r8)
 800205e:	e7fd      	b.n	800205c <NMI_Handler+0x4>

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	e7fd      	b.n	8002064 <HardFault_Handler+0x4>

08002068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f90a 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sw3_Pin);
 800208e:	2001      	movs	r0, #1
 8002090:	f001 fc2e 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sw1_Pin);
 800209e:	2040      	movs	r0, #64	@ 0x40
 80020a0:	f001 fc26 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sw2_Pin);
 80020a4:	2080      	movs	r0, #128	@ 0x80
 80020a6:	f001 fc23 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STDBY_BAT_Pin);
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	0018      	movs	r0, r3
 80020b0:	f001 fc1e 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHRG_BAT_Pin);
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	0018      	movs	r0, r3
 80020ba:	f001 fc19 	bl	80038f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	if(tim17 >= 10)
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <TIM17_IRQHandler+0x2c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d902      	bls.n	80020d6 <TIM17_IRQHandler+0x12>
		tim17 = 1;
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <TIM17_IRQHandler+0x2c>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
	tim17++;
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <TIM17_IRQHandler+0x2c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <TIM17_IRQHandler+0x2c>)
 80020e0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020e2:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <TIM17_IRQHandler+0x30>)
 80020e4:	0018      	movs	r0, r3
 80020e6:	f003 fc6f 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000168 	.word	0x20000168

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	18d3      	adds	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f003 fe3a 	bl	8005da0 <__errno>
 800212c:	0003      	movs	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	2301      	movs	r3, #1
 8002134:	425b      	negs	r3, r3
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	18d2      	adds	r2, r2, r3
 8002146:	4b05      	ldr	r3, [pc, #20]	@ (800215c <_sbrk+0x64>)
 8002148:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b006      	add	sp, #24
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20002000 	.word	0x20002000
 8002158:	00000400 	.word	0x00000400
 800215c:	200005fc 	.word	0x200005fc
 8002160:	20000750 	.word	0x20000750

08002164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002170:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002172:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002174:	f7ff fff6 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopForever+0x6>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopForever+0xe>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopForever+0x16>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800219e:	f003 fe05 	bl	8005dac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021a2:	f7fe fef5 	bl	8000f90 <main>

080021a6 <LoopForever>:

LoopForever:
  b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   r0, =_estack
 80021a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80021b4:	08006f58 	.word	0x08006f58
  ldr r2, =_sbss
 80021b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80021bc:	2000074c 	.word	0x2000074c

080021c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_Init+0x3c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_Init+0x3c>)
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	0049      	lsls	r1, r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021de:	2003      	movs	r0, #3
 80021e0:	f000 f810 	bl	8002204 <HAL_InitTick>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e001      	b.n	80021f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021f0:	f7ff fe02 	bl	8001df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781b      	ldrb	r3, [r3, #0]
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000

08002204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002214:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <HAL_InitTick+0x88>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02b      	beq.n	8002274 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800221c:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <HAL_InitTick+0x8c>)
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_InitTick+0x88>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	0019      	movs	r1, r3
 8002226:	23fa      	movs	r3, #250	@ 0xfa
 8002228:	0098      	lsls	r0, r3, #2
 800222a:	f7fd ff73 	bl	8000114 <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	0019      	movs	r1, r3
 8002232:	0020      	movs	r0, r4
 8002234:	f7fd ff6e 	bl	8000114 <__udivsi3>
 8002238:	0003      	movs	r3, r0
 800223a:	0018      	movs	r0, r3
 800223c:	f001 f9e7 	bl	800360e <HAL_SYSTICK_Config>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d112      	bne.n	800226a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d80a      	bhi.n	8002260 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	2301      	movs	r3, #1
 800224e:	425b      	negs	r3, r3
 8002250:	2200      	movs	r2, #0
 8002252:	0018      	movs	r0, r3
 8002254:	f001 f9b6 	bl	80035c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <HAL_InitTick+0x90>)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e00d      	b.n	800227c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002260:	230f      	movs	r3, #15
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e008      	b.n	800227c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800226a:	230f      	movs	r3, #15
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e003      	b.n	800227c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800227c:	230f      	movs	r3, #15
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b005      	add	sp, #20
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	20000014 	.word	0x20000014
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000010 	.word	0x20000010

08002298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <HAL_IncTick+0x1c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	001a      	movs	r2, r3
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_IncTick+0x20>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	18d2      	adds	r2, r2, r3
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_IncTick+0x20>)
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	20000014 	.word	0x20000014
 80022b8:	20000600 	.word	0x20000600

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b02      	ldr	r3, [pc, #8]	@ (80022cc <HAL_GetTick+0x10>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	20000600 	.word	0x20000600

080022d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80022e0:	401a      	ands	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b002      	add	sp, #8
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	fe3fffff 	.word	0xfe3fffff

080022f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	23e0      	movs	r3, #224	@ 0xe0
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	4013      	ands	r3, r2
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}

08002312 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	2104      	movs	r1, #4
 8002326:	400a      	ands	r2, r1
 8002328:	2107      	movs	r1, #7
 800232a:	4091      	lsls	r1, r2
 800232c:	000a      	movs	r2, r1
 800232e:	43d2      	mvns	r2, r2
 8002330:	401a      	ands	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2104      	movs	r1, #4
 8002336:	400b      	ands	r3, r1
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4099      	lsls	r1, r3
 800233c:	000b      	movs	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002344:	46c0      	nop			@ (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}

0800234c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	2104      	movs	r1, #4
 800235e:	400a      	ands	r2, r1
 8002360:	2107      	movs	r1, #7
 8002362:	4091      	lsls	r1, r2
 8002364:	000a      	movs	r2, r1
 8002366:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2104      	movs	r1, #4
 800236c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800236e:	40da      	lsrs	r2, r3
 8002370:	0013      	movs	r3, r2
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}

0800237a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	23c0      	movs	r3, #192	@ 0xc0
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	4013      	ands	r3, r2
 800238c:	d101      	bne.n	8002392 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	211f      	movs	r1, #31
 80023b0:	400a      	ands	r2, r1
 80023b2:	210f      	movs	r1, #15
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	43d2      	mvns	r2, r2
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	210f      	movs	r1, #15
 80023c2:	4019      	ands	r1, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	201f      	movs	r0, #31
 80023c8:	4003      	ands	r3, r0
 80023ca:	4099      	lsls	r1, r3
 80023cc:	000b      	movs	r3, r1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}

080023dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	035b      	lsls	r3, r3, #13
 80023ee:	0b5b      	lsrs	r3, r3, #13
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bd80      	pop	{r7, pc}

080023fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	0352      	lsls	r2, r2, #13
 8002410:	0b52      	lsrs	r2, r2, #13
 8002412:	43d2      	mvns	r2, r2
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	0212      	lsls	r2, r2, #8
 8002438:	43d2      	mvns	r2, r2
 800243a:	401a      	ands	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	400b      	ands	r3, r1
 8002444:	4904      	ldr	r1, [pc, #16]	@ (8002458 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002446:	400b      	ands	r3, r1
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b004      	add	sp, #16
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	07ffff00 	.word	0x07ffff00

0800245c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <LL_ADC_EnableInternalRegulator+0x24>)
 800246a:	4013      	ands	r3, r2
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	0552      	lsls	r2, r2, #21
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	6fffffe8 	.word	0x6fffffe8

08002484 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	055b      	lsls	r3, r3, #21
 8002494:	401a      	ands	r2, r3
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	055b      	lsls	r3, r3, #21
 800249a:	429a      	cmp	r2, r3
 800249c:	d101      	bne.n	80024a2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <LL_ADC_Enable+0x20>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	2201      	movs	r2, #1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	7fffffe8 	.word	0x7fffffe8

080024d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <LL_ADC_Disable+0x20>)
 80024de:	4013      	ands	r3, r2
 80024e0:	2202      	movs	r2, #2
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	7fffffe8 	.word	0x7fffffe8

080024f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <LL_ADC_IsEnabled+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_IsEnabled+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}

08002516 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	2b02      	cmp	r3, #2
 8002528:	d101      	bne.n	800252e <LL_ADC_IsDisableOngoing+0x18>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_ADC_IsDisableOngoing+0x1a>
 800252e:	2300      	movs	r3, #0
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <LL_ADC_REG_StartConversion+0x20>)
 8002546:	4013      	ands	r3, r2
 8002548:	2204      	movs	r2, #4
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002550:	46c0      	nop			@ (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}
 8002558:	7fffffe8 	.word	0x7fffffe8

0800255c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <LL_ADC_REG_StopConversion+0x20>)
 800256a:	4013      	ands	r3, r2
 800256c:	2210      	movs	r2, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	7fffffe8 	.word	0x7fffffe8

08002580 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2204      	movs	r2, #4
 800258e:	4013      	ands	r3, r2
 8002590:	2b04      	cmp	r3, #4
 8002592:	d101      	bne.n	8002598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	231f      	movs	r3, #31
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e17f      	b.n	80028ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff fc33 	bl	8001e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2254      	movs	r2, #84	@ 0x54
 80025e4:	2100      	movs	r1, #0
 80025e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff ff49 	bl	8002484 <LL_ADC_IsInternalRegulatorEnabled>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d115      	bne.n	8002622 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff2e 	bl	800245c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002600:	4bb4      	ldr	r3, [pc, #720]	@ (80028d4 <HAL_ADC_Init+0x330>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	49b4      	ldr	r1, [pc, #720]	@ (80028d8 <HAL_ADC_Init+0x334>)
 8002606:	0018      	movs	r0, r3
 8002608:	f7fd fd84 	bl	8000114 <__udivsi3>
 800260c:	0003      	movs	r3, r0
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002614:	e002      	b.n	800261c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0018      	movs	r0, r3
 8002628:	f7ff ff2c 	bl	8002484 <LL_ADC_IsInternalRegulatorEnabled>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d10f      	bne.n	8002650 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	2210      	movs	r2, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2201      	movs	r2, #1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002648:	231f      	movs	r3, #31
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff93 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 800265a:	0003      	movs	r3, r0
 800265c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	2210      	movs	r2, #16
 8002664:	4013      	ands	r3, r2
 8002666:	d000      	beq.n	800266a <HAL_ADC_Init+0xc6>
 8002668:	e122      	b.n	80028b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d000      	beq.n	8002672 <HAL_ADC_Init+0xce>
 8002670:	e11e      	b.n	80028b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a99      	ldr	r2, [pc, #612]	@ (80028dc <HAL_ADC_Init+0x338>)
 8002678:	4013      	ands	r3, r2
 800267a:	2202      	movs	r2, #2
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff34 	bl	80024f4 <LL_ADC_IsEnabled>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d000      	beq.n	8002692 <HAL_ADC_Init+0xee>
 8002690:	e0ad      	b.n	80027ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7e1b      	ldrb	r3, [r3, #24]
 800269a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800269c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e5b      	ldrb	r3, [r3, #25]
 80026a2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7e9b      	ldrb	r3, [r3, #26]
 80026aa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80026ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_ADC_Init+0x118>
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	e000      	b.n	80026be <HAL_ADC_Init+0x11a>
 80026bc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80026be:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80026c4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da04      	bge.n	80026d8 <HAL_ADC_Init+0x134>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	e001      	b.n	80026dc <HAL_ADC_Init+0x138>
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80026dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	212c      	movs	r1, #44	@ 0x2c
 80026e2:	5c5b      	ldrb	r3, [r3, r1]
 80026e4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80026e6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	5c9b      	ldrb	r3, [r3, r2]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d115      	bne.n	8002724 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e9b      	ldrb	r3, [r3, #26]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2280      	movs	r2, #128	@ 0x80
 8002704:	0252      	lsls	r2, r2, #9
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e00b      	b.n	8002724 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002710:	2220      	movs	r2, #32
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	2201      	movs	r2, #1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002730:	23e0      	movs	r3, #224	@ 0xe0
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800273a:	4313      	orrs	r3, r2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_ADC_Init+0x33c>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0f9b      	lsrs	r3, r3, #30
 800275e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002764:	4313      	orrs	r3, r2
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	223c      	movs	r2, #60	@ 0x3c
 8002770:	5c9b      	ldrb	r3, [r3, r2]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d111      	bne.n	800279a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0f9b      	lsrs	r3, r3, #30
 800277c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002782:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002788:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800278e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	2201      	movs	r2, #1
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	4a50      	ldr	r2, [pc, #320]	@ (80028e4 <HAL_ADC_Init+0x340>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	23c0      	movs	r3, #192	@ 0xc0
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d018      	beq.n	80027ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	05db      	lsls	r3, r3, #23
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d012      	beq.n	80027ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	061b      	lsls	r3, r3, #24
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d00c      	beq.n	80027ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80027d4:	4b44      	ldr	r3, [pc, #272]	@ (80028e8 <HAL_ADC_Init+0x344>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a44      	ldr	r2, [pc, #272]	@ (80028ec <HAL_ADC_Init+0x348>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	23f0      	movs	r3, #240	@ 0xf0
 80027e4:	039b      	lsls	r3, r3, #14
 80027e6:	401a      	ands	r2, r3
 80027e8:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_ADC_Init+0x344>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	001a      	movs	r2, r3
 80027f8:	2100      	movs	r1, #0
 80027fa:	f7ff fd8a 	bl	8002312 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	493a      	ldr	r1, [pc, #232]	@ (80028f0 <HAL_ADC_Init+0x34c>)
 8002808:	001a      	movs	r2, r3
 800280a:	f7ff fd82 	bl	8002312 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2110      	movs	r1, #16
 8002822:	4249      	negs	r1, r1
 8002824:	430a      	orrs	r2, r1
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
 8002828:	e018      	b.n	800285c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	039b      	lsls	r3, r3, #14
 8002832:	429a      	cmp	r2, r3
 8002834:	d112      	bne.n	800285c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	3b01      	subs	r3, #1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	221c      	movs	r2, #28
 8002846:	4013      	ands	r3, r2
 8002848:	2210      	movs	r2, #16
 800284a:	4252      	negs	r2, r2
 800284c:	409a      	lsls	r2, r3
 800284e:	0011      	movs	r1, r2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2100      	movs	r1, #0
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff fd72 	bl	800234c <LL_ADC_GetSamplingTimeCommonChannels>
 8002868:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800286e:	429a      	cmp	r2, r3
 8002870:	d10b      	bne.n	800288a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	2203      	movs	r2, #3
 800287e:	4393      	bics	r3, r2
 8002880:	2201      	movs	r2, #1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002888:	e01c      	b.n	80028c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	2212      	movs	r2, #18
 8002890:	4393      	bics	r3, r2
 8002892:	2210      	movs	r2, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028ae:	e009      	b.n	80028c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	2210      	movs	r2, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028bc:	231f      	movs	r3, #31
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	781b      	ldrb	r3, [r3, #0]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b008      	add	sp, #32
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	00030d40 	.word	0x00030d40
 80028dc:	fffffefd 	.word	0xfffffefd
 80028e0:	ffde0201 	.word	0xffde0201
 80028e4:	1ffffc02 	.word	0x1ffffc02
 80028e8:	40012708 	.word	0x40012708
 80028ec:	ffc3ffff 	.word	0xffc3ffff
 80028f0:	07ffff04 	.word	0x07ffff04

080028f4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0018      	movs	r0, r3
 8002902:	f7ff fe3d 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d135      	bne.n	8002976 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2254      	movs	r2, #84	@ 0x54
 800290e:	5c9b      	ldrb	r3, [r3, r2]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_ADC_Start+0x24>
 8002914:	2302      	movs	r3, #2
 8002916:	e035      	b.n	8002984 <HAL_ADC_Start+0x90>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2254      	movs	r2, #84	@ 0x54
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002920:	250f      	movs	r5, #15
 8002922:	197c      	adds	r4, r7, r5
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 fb28 	bl	8002f7c <ADC_Enable>
 800292c:	0003      	movs	r3, r0
 800292e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002930:	197b      	adds	r3, r7, r5
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d119      	bne.n	800296c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	4a13      	ldr	r2, [pc, #76]	@ (800298c <HAL_ADC_Start+0x98>)
 800293e:	4013      	ands	r3, r2
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	0052      	lsls	r2, r2, #1
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	221c      	movs	r2, #28
 8002956:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2254      	movs	r2, #84	@ 0x54
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff fde7 	bl	8002538 <LL_ADC_REG_StartConversion>
 800296a:	e008      	b.n	800297e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2254      	movs	r2, #84	@ 0x54
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]
 8002974:	e003      	b.n	800297e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002976:	230f      	movs	r3, #15
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	2202      	movs	r2, #2
 800297c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b004      	add	sp, #16
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	fffff0fe 	.word	0xfffff0fe

08002990 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2254      	movs	r2, #84	@ 0x54
 800299c:	5c9b      	ldrb	r3, [r3, r2]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_Stop+0x16>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e029      	b.n	80029fa <HAL_ADC_Stop+0x6a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2254      	movs	r2, #84	@ 0x54
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80029ae:	250f      	movs	r5, #15
 80029b0:	197c      	adds	r4, r7, r5
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 fa9f 	bl	8002ef8 <ADC_ConversionStop>
 80029ba:	0003      	movs	r3, r0
 80029bc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80029be:	197b      	adds	r3, r7, r5
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d112      	bne.n	80029ec <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80029c6:	197c      	adds	r4, r7, r5
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fb5c 	bl	8003088 <ADC_Disable>
 80029d0:	0003      	movs	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029d4:	197b      	adds	r3, r7, r5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d107      	bne.n	80029ec <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_ADC_Stop+0x74>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	2201      	movs	r2, #1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2254      	movs	r2, #84	@ 0x54
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bdb0      	pop	{r4, r5, r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	fffffefe 	.word	0xfffffefe

08002a08 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d102      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e00f      	b.n	8002a40 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	2220      	movs	r2, #32
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e072      	b.n	8002b22 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a40:	f7ff fc3c 	bl	80022bc <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a48:	e01f      	b.n	8002a8a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	d01c      	beq.n	8002a8a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a50:	f7ff fc34 	bl	80022bc <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <HAL_ADC_PollForConversion+0x5e>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d111      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d10b      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	2204      	movs	r2, #4
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2254      	movs	r2, #84	@ 0x54
 8002a82:	2100      	movs	r1, #0
 8002a84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e04b      	b.n	8002b22 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	d0d9      	beq.n	8002a4a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	2280      	movs	r2, #128	@ 0x80
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fc66 	bl	800237a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d02e      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7e9b      	ldrb	r3, [r3, #26]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d12a      	bne.n	8002b10 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d123      	bne.n	8002b10 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff fd57 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d110      	bne.n	8002af8 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	210c      	movs	r1, #12
 8002ae2:	438a      	bics	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <HAL_ADC_PollForConversion+0x124>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	2201      	movs	r2, #1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002af6:	e00b      	b.n	8002b10 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	2220      	movs	r2, #32
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	2201      	movs	r2, #1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e1b      	ldrb	r3, [r3, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	220c      	movs	r2, #12
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	fffffefe 	.word	0xfffffefe

08002b30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b52:	2317      	movs	r3, #23
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2254      	movs	r2, #84	@ 0x54
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x24>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e1c0      	b.n	8002eee <HAL_ADC_ConfigChannel+0x3a6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2254      	movs	r2, #84	@ 0x54
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fd01 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x3c>
 8002b82:	e1a3      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d100      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x46>
 8002b8c:	e143      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d004      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b9e:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x35c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d108      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0019      	movs	r1, r3
 8002bae:	0010      	movs	r0, r2
 8002bb0:	f7ff fc14 	bl	80023dc <LL_ADC_REG_SetSequencerChAdd>
 8002bb4:	e0c9      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	211f      	movs	r1, #31
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	4099      	lsls	r1, r3
 8002bc6:	000b      	movs	r3, r1
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	035b      	lsls	r3, r3, #13
 8002bd4:	0b5b      	lsrs	r3, r3, #13
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x9c>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	221f      	movs	r2, #31
 8002be0:	4013      	ands	r3, r2
 8002be2:	e098      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	d000      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0xa8>
 8002bee:	e091      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1cc>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d000      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0xb4>
 8002bfa:	e089      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1c8>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d000      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0xc0>
 8002c06:	e081      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x1c4>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d000      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0xcc>
 8002c12:	e079      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x1c0>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d000      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0xd8>
 8002c1e:	e071      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x1bc>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	d000      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0xe4>
 8002c2a:	e069      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x1b8>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2240      	movs	r2, #64	@ 0x40
 8002c32:	4013      	ands	r3, r2
 8002c34:	d000      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0xf0>
 8002c36:	e061      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x1b4>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d000      	beq.n	8002c44 <HAL_ADC_ConfigChannel+0xfc>
 8002c42:	e059      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x1b0>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d151      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1ac>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d149      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1a8>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4013      	ands	r3, r2
 8002c66:	d141      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1a4>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4013      	ands	r3, r2
 8002c72:	d139      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x1a0>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	015b      	lsls	r3, r3, #5
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d131      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x19c>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	@ 0x80
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d129      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x198>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	01db      	lsls	r3, r3, #7
 8002c94:	4013      	ands	r3, r2
 8002c96:	d121      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x194>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d119      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x190>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	4013      	ands	r3, r2
 8002cae:	d111      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x18c>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	@ 0x80
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d109      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x188>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	02db      	lsls	r3, r3, #11
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d001      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x184>
 8002cc8:	2312      	movs	r3, #18
 8002cca:	e024      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e022      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd0:	2311      	movs	r3, #17
 8002cd2:	e020      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	e01e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cd8:	230f      	movs	r3, #15
 8002cda:	e01c      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cdc:	230e      	movs	r3, #14
 8002cde:	e01a      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce0:	230d      	movs	r3, #13
 8002ce2:	e018      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	e016      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ce8:	230b      	movs	r3, #11
 8002cea:	e014      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cec:	230a      	movs	r3, #10
 8002cee:	e012      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf0:	2309      	movs	r3, #9
 8002cf2:	e010      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	e00e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	e00c      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002cfc:	2306      	movs	r3, #6
 8002cfe:	e00a      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e006      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e004      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x1ce>
 8002d14:	2300      	movs	r3, #0
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	6852      	ldr	r2, [r2, #4]
 8002d1a:	201f      	movs	r0, #31
 8002d1c:	4002      	ands	r2, r0
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	000a      	movs	r2, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d808      	bhi.n	8002d4a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	f7ff fb29 	bl	800239c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	001a      	movs	r2, r3
 8002d58:	f7ff fb64 	bl	8002424 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db00      	blt.n	8002d66 <HAL_ADC_ConfigChannel+0x21e>
 8002d64:	e0bc      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d66:	4b50      	ldr	r3, [pc, #320]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff fac5 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <HAL_ADC_ConfigChannel+0x364>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d122      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d84:	d11d      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2280      	movs	r2, #128	@ 0x80
 8002d8a:	0412      	lsls	r2, r2, #16
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	4a46      	ldr	r2, [pc, #280]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002d90:	0019      	movs	r1, r3
 8002d92:	0010      	movs	r0, r2
 8002d94:	f7ff fa9c 	bl	80022d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d98:	4b45      	ldr	r3, [pc, #276]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x368>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4945      	ldr	r1, [pc, #276]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x36c>)
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7fd f9b8 	bl	8000114 <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	0013      	movs	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002db2:	e002      	b.n	8002dba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dc0:	e08e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x370>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10e      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	045b      	lsls	r3, r3, #17
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d109      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2280      	movs	r2, #128	@ 0x80
 8002dda:	0452      	lsls	r2, r2, #17
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	4a32      	ldr	r2, [pc, #200]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002de0:	0019      	movs	r1, r3
 8002de2:	0010      	movs	r0, r2
 8002de4:	f7ff fa74 	bl	80022d0 <LL_ADC_SetCommonPathInternalCh>
 8002de8:	e07a      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a33      	ldr	r2, [pc, #204]	@ (8002ebc <HAL_ADC_ConfigChannel+0x374>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d000      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x2ae>
 8002df4:	e074      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	03db      	lsls	r3, r3, #15
 8002dfc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dfe:	d000      	beq.n	8002e02 <HAL_ADC_ConfigChannel+0x2ba>
 8002e00:	e06e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	03d2      	lsls	r2, r2, #15
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	4a27      	ldr	r2, [pc, #156]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f7ff fa5e 	bl	80022d0 <LL_ADC_SetCommonPathInternalCh>
 8002e14:	e064      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x35c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d107      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f7ff fae1 	bl	80023fe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	da4d      	bge.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e44:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff fa56 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a15      	ldr	r2, [pc, #84]	@ (8002eac <HAL_ADC_ConfigChannel+0x364>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x378>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	4a11      	ldr	r2, [pc, #68]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e62:	0019      	movs	r1, r3
 8002e64:	0010      	movs	r0, r2
 8002e66:	f7ff fa33 	bl	80022d0 <LL_ADC_SetCommonPathInternalCh>
 8002e6a:	e039      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a11      	ldr	r2, [pc, #68]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x370>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x37c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f7ff fa25 	bl	80022d0 <LL_ADC_SetCommonPathInternalCh>
 8002e86:	e02b      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ebc <HAL_ADC_ConfigChannel+0x374>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d126      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x380>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	4a03      	ldr	r2, [pc, #12]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x360>)
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	0010      	movs	r0, r2
 8002e9e:	f7ff fa17 	bl	80022d0 <LL_ADC_SetCommonPathInternalCh>
 8002ea2:	e01d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x398>
 8002ea4:	80000004 	.word	0x80000004
 8002ea8:	40012708 	.word	0x40012708
 8002eac:	b0001000 	.word	0xb0001000
 8002eb0:	2000000c 	.word	0x2000000c
 8002eb4:	00030d40 	.word	0x00030d40
 8002eb8:	b8004000 	.word	0xb8004000
 8002ebc:	b4002000 	.word	0xb4002000
 8002ec0:	ff7fffff 	.word	0xff7fffff
 8002ec4:	feffffff 	.word	0xfeffffff
 8002ec8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ed8:	2317      	movs	r3, #23
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2254      	movs	r2, #84	@ 0x54
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ee8:	2317      	movs	r3, #23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b006      	add	sp, #24
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)

08002ef8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff fb3b 	bl	8002580 <LL_ADC_REG_IsConversionOngoing>
 8002f0a:	1e03      	subs	r3, r0, #0
 8002f0c:	d031      	beq.n	8002f72 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7ff faff 	bl	8002516 <LL_ADC_IsDisableOngoing>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d104      	bne.n	8002f26 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff fb1b 	bl	800255c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f26:	f7ff f9c9 	bl	80022bc <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002f2e:	e01a      	b.n	8002f66 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f30:	f7ff f9c4 	bl	80022bc <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d913      	bls.n	8002f66 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2204      	movs	r2, #4
 8002f46:	4013      	ands	r3, r2
 8002f48:	d00d      	beq.n	8002f66 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	2210      	movs	r2, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e006      	b.n	8002f74 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d1de      	bne.n	8002f30 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fab1 	bl	80024f4 <LL_ADC_IsEnabled>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d000      	beq.n	8002f98 <ADC_Enable+0x1c>
 8002f96:	e069      	b.n	800306c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a36      	ldr	r2, [pc, #216]	@ (8003078 <ADC_Enable+0xfc>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00d      	beq.n	8002fc0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	2210      	movs	r2, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e056      	b.n	800306e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fa71 	bl	80024ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002fca:	4b2c      	ldr	r3, [pc, #176]	@ (800307c <ADC_Enable+0x100>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff f993 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	2380      	movs	r3, #128	@ 0x80
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d00f      	beq.n	8002ffc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fdc:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <ADC_Enable+0x104>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4928      	ldr	r1, [pc, #160]	@ (8003084 <ADC_Enable+0x108>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd f896 	bl	8000114 <__udivsi3>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002fec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fee:	e002      	b.n	8002ff6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7e5b      	ldrb	r3, [r3, #25]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d033      	beq.n	800306c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003004:	f7ff f95a 	bl	80022bc <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800300c:	e027      	b.n	800305e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff fa6e 	bl	80024f4 <LL_ADC_IsEnabled>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d104      	bne.n	8003026 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff fa43 	bl	80024ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003026:	f7ff f949 	bl	80022bc <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d914      	bls.n	800305e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2201      	movs	r2, #1
 800303c:	4013      	ands	r3, r2
 800303e:	2b01      	cmp	r3, #1
 8003040:	d00d      	beq.n	800305e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	2210      	movs	r2, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003052:	2201      	movs	r2, #1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	2b01      	cmp	r3, #1
 800306a:	d1d0      	bne.n	800300e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	80000017 	.word	0x80000017
 800307c:	40012708 	.word	0x40012708
 8003080:	2000000c 	.word	0x2000000c
 8003084:	00030d40 	.word	0x00030d40

08003088 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fa3e 	bl	8002516 <LL_ADC_IsDisableOngoing>
 800309a:	0003      	movs	r3, r0
 800309c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff fa26 	bl	80024f4 <LL_ADC_IsEnabled>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d046      	beq.n	800313a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d143      	bne.n	800313a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2205      	movs	r2, #5
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff fa03 	bl	80024d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2203      	movs	r2, #3
 80030d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030d2:	f7ff f8f3 	bl	80022bc <HAL_GetTick>
 80030d6:	0003      	movs	r3, r0
 80030d8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030da:	e028      	b.n	800312e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	2210      	movs	r2, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	2201      	movs	r2, #1
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e021      	b.n	800313c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030f8:	f7ff f8e0 	bl	80022bc <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d913      	bls.n	800312e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2201      	movs	r2, #1
 800310e:	4013      	ands	r3, r2
 8003110:	d00d      	beq.n	800312e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003116:	2210      	movs	r2, #16
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	2201      	movs	r2, #1
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e006      	b.n	800313c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d1de      	bne.n	80030f8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bd80      	pop	{r7, pc}

08003144 <LL_ADC_GetCommonClock>:
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	23f0      	movs	r3, #240	@ 0xf0
 8003152:	039b      	lsls	r3, r3, #14
 8003154:	4013      	ands	r3, r2
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b002      	add	sp, #8
 800315c:	bd80      	pop	{r7, pc}

0800315e <LL_ADC_GetClock>:
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	0f9b      	lsrs	r3, r3, #30
 800316c:	079b      	lsls	r3, r3, #30
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b002      	add	sp, #8
 8003174:	bd80      	pop	{r7, pc}

08003176 <LL_ADC_SetCalibrationFactor>:
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	22b4      	movs	r2, #180	@ 0xb4
 8003184:	589b      	ldr	r3, [r3, r2]
 8003186:	227f      	movs	r2, #127	@ 0x7f
 8003188:	4393      	bics	r3, r2
 800318a:	001a      	movs	r2, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	21b4      	movs	r1, #180	@ 0xb4
 8003194:	505a      	str	r2, [r3, r1]
}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}

0800319e <LL_ADC_GetCalibrationFactor>:
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	22b4      	movs	r2, #180	@ 0xb4
 80031aa:	589b      	ldr	r3, [r3, r2]
 80031ac:	227f      	movs	r2, #127	@ 0x7f
 80031ae:	4013      	ands	r3, r2
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <LL_ADC_Enable>:
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <LL_ADC_Enable+0x20>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	2201      	movs	r2, #1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	7fffffe8 	.word	0x7fffffe8

080031dc <LL_ADC_Disable>:
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <LL_ADC_Disable+0x20>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	2202      	movs	r2, #2
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	46c0      	nop			@ (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	7fffffe8 	.word	0x7fffffe8

08003200 <LL_ADC_IsEnabled>:
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2201      	movs	r2, #1
 800320e:	4013      	ands	r3, r2
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <LL_ADC_IsEnabled+0x18>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_ADC_IsEnabled+0x1a>
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <LL_ADC_StartCalibration>:
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a05      	ldr	r2, [pc, #20]	@ (8003248 <LL_ADC_StartCalibration+0x24>)
 8003232:	4013      	ands	r3, r2
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	0612      	lsls	r2, r2, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b002      	add	sp, #8
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	7fffffe8 	.word	0x7fffffe8

0800324c <LL_ADC_IsCalibrationOnGoing>:
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	0fdb      	lsrs	r3, r3, #31
 800325a:	07da      	lsls	r2, r3, #31
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	061b      	lsls	r3, r3, #24
 8003260:	429a      	cmp	r2, r3
 8003262:	d101      	bne.n	8003268 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003268:	2300      	movs	r3, #0
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b002      	add	sp, #8
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b08b      	sub	sp, #44	@ 0x2c
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2254      	movs	r2, #84	@ 0x54
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADCEx_Calibration_Start+0x1e>
 800328e:	2302      	movs	r3, #2
 8003290:	e0dd      	b.n	800344e <HAL_ADCEx_Calibration_Start+0x1da>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2254      	movs	r2, #84	@ 0x54
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800329a:	231f      	movs	r3, #31
 800329c:	18fc      	adds	r4, r7, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff fef1 	bl	8003088 <ADC_Disable>
 80032a6:	0003      	movs	r3, r0
 80032a8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff ffa6 	bl	8003200 <LL_ADC_IsEnabled>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d000      	beq.n	80032ba <HAL_ADCEx_Calibration_Start+0x46>
 80032b8:	e0bc      	b.n	8003434 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	4a66      	ldr	r2, [pc, #408]	@ (8003458 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	2202      	movs	r2, #2
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a62      	ldr	r2, [pc, #392]	@ (800345c <HAL_ADCEx_Calibration_Start+0x1e8>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	495f      	ldr	r1, [pc, #380]	@ (8003460 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80032e2:	400a      	ands	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ea:	e02d      	b.n	8003348 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff ff97 	bl	8003224 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032f6:	e014      	b.n	8003322 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a58      	ldr	r2, [pc, #352]	@ (8003464 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d90d      	bls.n	8003322 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330a:	2212      	movs	r2, #18
 800330c:	4393      	bics	r3, r2
 800330e:	2210      	movs	r2, #16
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2254      	movs	r2, #84	@ 0x54
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e095      	b.n	800344e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0018      	movs	r0, r3
 8003328:	f7ff ff90 	bl	800324c <LL_ADC_IsCalibrationOnGoing>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d1e3      	bne.n	80032f8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff ff32 	bl	800319e <LL_ADC_GetCalibrationFactor>
 800333a:	0002      	movs	r2, r0
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	189b      	adds	r3, r3, r2
 8003340:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	3301      	adds	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	2b07      	cmp	r3, #7
 800334c:	d9ce      	bls.n	80032ec <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800334e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003350:	6a38      	ldr	r0, [r7, #32]
 8003352:	f7fc fedf 	bl	8000114 <__udivsi3>
 8003356:	0003      	movs	r3, r0
 8003358:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0018      	movs	r0, r3
 8003360:	f7ff ff2a 	bl	80031b8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0018      	movs	r0, r3
 800336a:	f7ff fef8 	bl	800315e <LL_ADC_GetClock>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d11b      	bne.n	80033aa <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003372:	4b3d      	ldr	r3, [pc, #244]	@ (8003468 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003374:	0018      	movs	r0, r3
 8003376:	f7ff fee5 	bl	8003144 <LL_ADC_GetCommonClock>
 800337a:	0003      	movs	r3, r0
 800337c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	23e0      	movs	r3, #224	@ 0xe0
 8003382:	035b      	lsls	r3, r3, #13
 8003384:	429a      	cmp	r2, r3
 8003386:	d310      	bcc.n	80033aa <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	3b03      	subs	r3, #3
 800338e:	2201      	movs	r2, #1
 8003390:	409a      	lsls	r2, r3
 8003392:	0013      	movs	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800339c:	e002      	b.n	80033a4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f9      	bne.n	800339e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7ff fedf 	bl	8003176 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff ff0d 	bl	80031dc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033c2:	f7fe ff7b 	bl	80022bc <HAL_GetTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033ca:	e01b      	b.n	8003404 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033cc:	f7fe ff76 	bl	80022bc <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d914      	bls.n	8003404 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	0018      	movs	r0, r3
 80033e0:	f7ff ff0e 	bl	8003200 <LL_ADC_IsEnabled>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	2210      	movs	r2, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	2201      	movs	r2, #1
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e024      	b.n	800344e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0018      	movs	r0, r3
 800340a:	f7ff fef9 	bl	8003200 <LL_ADC_IsEnabled>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d1dc      	bne.n	80033cc <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	430a      	orrs	r2, r1
 8003420:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	2203      	movs	r2, #3
 8003428:	4393      	bics	r3, r2
 800342a:	2201      	movs	r2, #1
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	@ 0x58
 8003432:	e005      	b.n	8003440 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	2210      	movs	r2, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2254      	movs	r2, #84	@ 0x54
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003448:	231f      	movs	r3, #31
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b00b      	add	sp, #44	@ 0x2c
 8003454:	bd90      	pop	{r4, r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	fffffefd 	.word	0xfffffefd
 800345c:	00008003 	.word	0x00008003
 8003460:	ffff7ffc 	.word	0xffff7ffc
 8003464:	0002f1ff 	.word	0x0002f1ff
 8003468:	40012708 	.word	0x40012708

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	0002      	movs	r2, r0
 8003474:	1dfb      	adds	r3, r7, #7
 8003476:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b7f      	cmp	r3, #127	@ 0x7f
 800347e:	d809      	bhi.n	8003494 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003480:	1dfb      	adds	r3, r7, #7
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	001a      	movs	r2, r3
 8003486:	231f      	movs	r3, #31
 8003488:	401a      	ands	r2, r3
 800348a:	4b04      	ldr	r3, [pc, #16]	@ (800349c <__NVIC_EnableIRQ+0x30>)
 800348c:	2101      	movs	r1, #1
 800348e:	4091      	lsls	r1, r2
 8003490:	000a      	movs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}
 800349c:	e000e100 	.word	0xe000e100

080034a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	0002      	movs	r2, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ae:	1dfb      	adds	r3, r7, #7
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80034b4:	d828      	bhi.n	8003508 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <__NVIC_SetPriority+0xd4>)
 80034b8:	1dfb      	adds	r3, r7, #7
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	33c0      	adds	r3, #192	@ 0xc0
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	589b      	ldr	r3, [r3, r2]
 80034c6:	1dfa      	adds	r2, r7, #7
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	0011      	movs	r1, r2
 80034cc:	2203      	movs	r2, #3
 80034ce:	400a      	ands	r2, r1
 80034d0:	00d2      	lsls	r2, r2, #3
 80034d2:	21ff      	movs	r1, #255	@ 0xff
 80034d4:	4091      	lsls	r1, r2
 80034d6:	000a      	movs	r2, r1
 80034d8:	43d2      	mvns	r2, r2
 80034da:	401a      	ands	r2, r3
 80034dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	22ff      	movs	r2, #255	@ 0xff
 80034e4:	401a      	ands	r2, r3
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	0018      	movs	r0, r3
 80034ec:	2303      	movs	r3, #3
 80034ee:	4003      	ands	r3, r0
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034f4:	481f      	ldr	r0, [pc, #124]	@ (8003574 <__NVIC_SetPriority+0xd4>)
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	430a      	orrs	r2, r1
 8003500:	33c0      	adds	r3, #192	@ 0xc0
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003506:	e031      	b.n	800356c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003508:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <__NVIC_SetPriority+0xd8>)
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	0019      	movs	r1, r3
 8003510:	230f      	movs	r3, #15
 8003512:	400b      	ands	r3, r1
 8003514:	3b08      	subs	r3, #8
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	3306      	adds	r3, #6
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	18d3      	adds	r3, r2, r3
 800351e:	3304      	adds	r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1dfa      	adds	r2, r7, #7
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	0011      	movs	r1, r2
 8003528:	2203      	movs	r2, #3
 800352a:	400a      	ands	r2, r1
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	21ff      	movs	r1, #255	@ 0xff
 8003530:	4091      	lsls	r1, r2
 8003532:	000a      	movs	r2, r1
 8003534:	43d2      	mvns	r2, r2
 8003536:	401a      	ands	r2, r3
 8003538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	22ff      	movs	r2, #255	@ 0xff
 8003540:	401a      	ands	r2, r3
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	0018      	movs	r0, r3
 8003548:	2303      	movs	r3, #3
 800354a:	4003      	ands	r3, r0
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003550:	4809      	ldr	r0, [pc, #36]	@ (8003578 <__NVIC_SetPriority+0xd8>)
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	001c      	movs	r4, r3
 8003558:	230f      	movs	r3, #15
 800355a:	4023      	ands	r3, r4
 800355c:	3b08      	subs	r3, #8
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	430a      	orrs	r2, r1
 8003562:	3306      	adds	r3, #6
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	18c3      	adds	r3, r0, r3
 8003568:	3304      	adds	r3, #4
 800356a:	601a      	str	r2, [r3, #0]
}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b003      	add	sp, #12
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	045b      	lsls	r3, r3, #17
 800358c:	429a      	cmp	r2, r3
 800358e:	d301      	bcc.n	8003594 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003590:	2301      	movs	r3, #1
 8003592:	e010      	b.n	80035b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003594:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <SysTick_Config+0x44>)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	3a01      	subs	r2, #1
 800359a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359c:	2301      	movs	r3, #1
 800359e:	425b      	negs	r3, r3
 80035a0:	2103      	movs	r1, #3
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7ff ff7c 	bl	80034a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <SysTick_Config+0x44>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <SysTick_Config+0x44>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	210f      	movs	r1, #15
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	1c02      	adds	r2, r0, #0
 80035d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff ff5d 	bl	80034a0 <__NVIC_SetPriority>
}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	0002      	movs	r2, r0
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fa:	1dfb      	adds	r3, r7, #7
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff ff33 	bl	800346c <__NVIC_EnableIRQ>
}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff ffaf 	bl	800357c <SysTick_Config>
 800361e:	0003      	movs	r3, r0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003636:	e147      	b.n	80038c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4091      	lsls	r1, r2
 8003642:	000a      	movs	r2, r1
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d100      	bne.n	8003650 <HAL_GPIO_Init+0x28>
 800364e:	e138      	b.n	80038c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2203      	movs	r2, #3
 8003656:	4013      	ands	r3, r2
 8003658:	2b01      	cmp	r3, #1
 800365a:	d005      	beq.n	8003668 <HAL_GPIO_Init+0x40>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	4013      	ands	r3, r2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d130      	bne.n	80036ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	409a      	lsls	r2, r3
 8003676:	0013      	movs	r3, r2
 8003678:	43da      	mvns	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	409a      	lsls	r2, r3
 800368a:	0013      	movs	r3, r2
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369e:	2201      	movs	r2, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
 80036a4:	0013      	movs	r3, r2
 80036a6:	43da      	mvns	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	2201      	movs	r2, #1
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
 80036bc:	0013      	movs	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2203      	movs	r2, #3
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d017      	beq.n	8003706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	43da      	mvns	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	0013      	movs	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	4013      	ands	r3, r2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d123      	bne.n	800375a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	08da      	lsrs	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3208      	adds	r2, #8
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	58d3      	ldr	r3, [r2, r3]
 800371e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2207      	movs	r2, #7
 8003724:	4013      	ands	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	409a      	lsls	r2, r3
 800372c:	0013      	movs	r3, r2
 800372e:	43da      	mvns	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2107      	movs	r1, #7
 800373e:	400b      	ands	r3, r1
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	409a      	lsls	r2, r3
 8003744:	0013      	movs	r3, r2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	0092      	lsls	r2, r2, #2
 8003756:	6939      	ldr	r1, [r7, #16]
 8003758:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	409a      	lsls	r2, r3
 8003768:	0013      	movs	r3, r2
 800376a:	43da      	mvns	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2203      	movs	r2, #3
 8003778:	401a      	ands	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	0013      	movs	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	23c0      	movs	r3, #192	@ 0xc0
 8003794:	029b      	lsls	r3, r3, #10
 8003796:	4013      	ands	r3, r2
 8003798:	d100      	bne.n	800379c <HAL_GPIO_Init+0x174>
 800379a:	e092      	b.n	80038c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800379c:	4a50      	ldr	r2, [pc, #320]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3318      	adds	r3, #24
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	589b      	ldr	r3, [r3, r2]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2203      	movs	r2, #3
 80037ae:	4013      	ands	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	220f      	movs	r2, #15
 80037b4:	409a      	lsls	r2, r3
 80037b6:	0013      	movs	r3, r2
 80037b8:	43da      	mvns	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	23a0      	movs	r3, #160	@ 0xa0
 80037c4:	05db      	lsls	r3, r3, #23
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d013      	beq.n	80037f2 <HAL_GPIO_Init+0x1ca>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a45      	ldr	r2, [pc, #276]	@ (80038e4 <HAL_GPIO_Init+0x2bc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00d      	beq.n	80037ee <HAL_GPIO_Init+0x1c6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a44      	ldr	r2, [pc, #272]	@ (80038e8 <HAL_GPIO_Init+0x2c0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d007      	beq.n	80037ea <HAL_GPIO_Init+0x1c2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a43      	ldr	r2, [pc, #268]	@ (80038ec <HAL_GPIO_Init+0x2c4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_GPIO_Init+0x1be>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e006      	b.n	80037f4 <HAL_GPIO_Init+0x1cc>
 80037e6:	2305      	movs	r3, #5
 80037e8:	e004      	b.n	80037f4 <HAL_GPIO_Init+0x1cc>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e002      	b.n	80037f4 <HAL_GPIO_Init+0x1cc>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_GPIO_Init+0x1cc>
 80037f2:	2300      	movs	r3, #0
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	2103      	movs	r1, #3
 80037f8:	400a      	ands	r2, r1
 80037fa:	00d2      	lsls	r2, r2, #3
 80037fc:	4093      	lsls	r3, r2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003804:	4936      	ldr	r1, [pc, #216]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	3318      	adds	r3, #24
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003812:	4b33      	ldr	r3, [pc, #204]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43da      	mvns	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	035b      	lsls	r3, r3, #13
 800382a:	4013      	ands	r3, r2
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003836:	4b2a      	ldr	r3, [pc, #168]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800383c:	4b28      	ldr	r3, [pc, #160]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43da      	mvns	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	2380      	movs	r3, #128	@ 0x80
 8003852:	039b      	lsls	r3, r3, #14
 8003854:	4013      	ands	r3, r2
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003860:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003866:	4a1e      	ldr	r2, [pc, #120]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 8003868:	2384      	movs	r3, #132	@ 0x84
 800386a:	58d3      	ldr	r3, [r2, r3]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	43da      	mvns	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	029b      	lsls	r3, r3, #10
 8003880:	4013      	ands	r3, r2
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800388c:	4914      	ldr	r1, [pc, #80]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 800388e:	2284      	movs	r2, #132	@ 0x84
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003894:	4a12      	ldr	r2, [pc, #72]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	58d3      	ldr	r3, [r2, r3]
 800389a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	43da      	mvns	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	025b      	lsls	r3, r3, #9
 80038ae:	4013      	ands	r3, r2
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038ba:	4909      	ldr	r1, [pc, #36]	@ (80038e0 <HAL_GPIO_Init+0x2b8>)
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	40da      	lsrs	r2, r3
 80038d0:	1e13      	subs	r3, r2, #0
 80038d2:	d000      	beq.n	80038d6 <HAL_GPIO_Init+0x2ae>
 80038d4:	e6b0      	b.n	8003638 <HAL_GPIO_Init+0x10>
  }
}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021800 	.word	0x40021800
 80038e4:	50000400 	.word	0x50000400
 80038e8:	50000800 	.word	0x50000800
 80038ec:	50000c00 	.word	0x50000c00

080038f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	0002      	movs	r2, r0
 80038f8:	1dbb      	adds	r3, r7, #6
 80038fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80038fc:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	1dba      	adds	r2, r7, #6
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	4013      	ands	r3, r2
 8003906:	d008      	beq.n	800391a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003908:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800390a:	1dba      	adds	r2, r7, #6
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003910:	1dbb      	adds	r3, r7, #6
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	0018      	movs	r0, r3
 8003916:	f000 f815 	bl	8003944 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	1dba      	adds	r2, r7, #6
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	4013      	ands	r3, r2
 8003924:	d008      	beq.n	8003938 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003928:	1dba      	adds	r2, r7, #6
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800392e:	1dbb      	adds	r3, r7, #6
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 f810 	bl	8003958 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021800 	.word	0x40021800

08003944 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	0002      	movs	r2, r0
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	0002      	movs	r2, r0
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e08f      	b.n	8003a9e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2241      	movs	r2, #65	@ 0x41
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2240      	movs	r2, #64	@ 0x40
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f7fe fa97 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2241      	movs	r2, #65	@ 0x41
 800399e:	2124      	movs	r1, #36	@ 0x24
 80039a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	438a      	bics	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	493b      	ldr	r1, [pc, #236]	@ (8003aa8 <HAL_I2C_Init+0x13c>)
 80039bc:	400a      	ands	r2, r1
 80039be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4938      	ldr	r1, [pc, #224]	@ (8003aac <HAL_I2C_Init+0x140>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d108      	bne.n	80039ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2180      	movs	r1, #128	@ 0x80
 80039e2:	0209      	lsls	r1, r1, #8
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e007      	b.n	80039fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2184      	movs	r1, #132	@ 0x84
 80039f4:	0209      	lsls	r1, r1, #8
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d109      	bne.n	8003a16 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2180      	movs	r1, #128	@ 0x80
 8003a0e:	0109      	lsls	r1, r1, #4
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	e007      	b.n	8003a26 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4923      	ldr	r1, [pc, #140]	@ (8003ab0 <HAL_I2C_Init+0x144>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4920      	ldr	r1, [pc, #128]	@ (8003ab4 <HAL_I2C_Init+0x148>)
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	491a      	ldr	r1, [pc, #104]	@ (8003aac <HAL_I2C_Init+0x140>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1a      	ldr	r2, [r3, #32]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2241      	movs	r2, #65	@ 0x41
 8003a8a:	2120      	movs	r1, #32
 8003a8c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2242      	movs	r2, #66	@ 0x42
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	f0ffffff 	.word	0xf0ffffff
 8003aac:	ffff7fff 	.word	0xffff7fff
 8003ab0:	fffff7ff 	.word	0xfffff7ff
 8003ab4:	02008000 	.word	0x02008000

08003ab8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b089      	sub	sp, #36	@ 0x24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	000c      	movs	r4, r1
 8003ac2:	0010      	movs	r0, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	230a      	movs	r3, #10
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	1c22      	adds	r2, r4, #0
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	2308      	movs	r3, #8
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	1c02      	adds	r2, r0, #0
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	1dbb      	adds	r3, r7, #6
 8003ad8:	1c0a      	adds	r2, r1, #0
 8003ada:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2241      	movs	r2, #65	@ 0x41
 8003ae0:	5c9b      	ldrb	r3, [r3, r2]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d000      	beq.n	8003aea <HAL_I2C_Mem_Write+0x32>
 8003ae8:	e10c      	b.n	8003d04 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_I2C_Mem_Write+0x42>
 8003af0:	232c      	movs	r3, #44	@ 0x2c
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	0092      	lsls	r2, r2, #2
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0ff      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2240      	movs	r2, #64	@ 0x40
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2C_Mem_Write+0x5c>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e0f8      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2240      	movs	r2, #64	@ 0x40
 8003b18:	2101      	movs	r1, #1
 8003b1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fbce 	bl	80022bc <HAL_GetTick>
 8003b20:	0003      	movs	r3, r0
 8003b22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	0219      	lsls	r1, r3, #8
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2319      	movs	r3, #25
 8003b30:	2201      	movs	r2, #1
 8003b32:	f000 fa71 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0e3      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2241      	movs	r2, #65	@ 0x41
 8003b42:	2121      	movs	r1, #33	@ 0x21
 8003b44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2242      	movs	r2, #66	@ 0x42
 8003b4a:	2140      	movs	r1, #64	@ 0x40
 8003b4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	222c      	movs	r2, #44	@ 0x2c
 8003b5e:	18ba      	adds	r2, r7, r2
 8003b60:	8812      	ldrh	r2, [r2, #0]
 8003b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6a:	1dbb      	adds	r3, r7, #6
 8003b6c:	881c      	ldrh	r4, [r3, #0]
 8003b6e:	2308      	movs	r3, #8
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	230a      	movs	r3, #10
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	8819      	ldrh	r1, [r3, #0]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	0023      	movs	r3, r4
 8003b86:	f000 f9c1 	bl	8003f0c <I2C_RequestMemoryWrite>
 8003b8a:	1e03      	subs	r3, r0, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0b5      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2bff      	cmp	r3, #255	@ 0xff
 8003ba2:	d911      	bls.n	8003bc8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	22ff      	movs	r2, #255	@ 0xff
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	045c      	lsls	r4, r3, #17
 8003bb4:	230a      	movs	r3, #10
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	8819      	ldrh	r1, [r3, #0]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	0023      	movs	r3, r4
 8003bc2:	f000 fc03 	bl	80043cc <I2C_TransferConfig>
 8003bc6:	e012      	b.n	8003bee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	049c      	lsls	r4, r3, #18
 8003bdc:	230a      	movs	r3, #10
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	8819      	ldrh	r1, [r3, #0]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	2300      	movs	r3, #0
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	0023      	movs	r3, r4
 8003bea:	f000 fbef 	bl	80043cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fa67 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e081      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d03a      	beq.n	8003cb2 <HAL_I2C_Mem_Write+0x1fa>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d136      	bne.n	8003cb2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	0013      	movs	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2180      	movs	r1, #128	@ 0x80
 8003c52:	f000 f9e1 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e053      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2bff      	cmp	r3, #255	@ 0xff
 8003c66:	d911      	bls.n	8003c8c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	22ff      	movs	r2, #255	@ 0xff
 8003c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	2380      	movs	r3, #128	@ 0x80
 8003c76:	045c      	lsls	r4, r3, #17
 8003c78:	230a      	movs	r3, #10
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	8819      	ldrh	r1, [r3, #0]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	2300      	movs	r3, #0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	0023      	movs	r3, r4
 8003c86:	f000 fba1 	bl	80043cc <I2C_TransferConfig>
 8003c8a:	e012      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	049c      	lsls	r4, r3, #18
 8003ca0:	230a      	movs	r3, #10
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	8819      	ldrh	r1, [r3, #0]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	0023      	movs	r3, r4
 8003cae:	f000 fb8d 	bl	80043cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d198      	bne.n	8003bee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fa46 	bl	8004154 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e01a      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	490b      	ldr	r1, [pc, #44]	@ (8003d10 <HAL_I2C_Mem_Write+0x258>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2241      	movs	r2, #65	@ 0x41
 8003cec:	2120      	movs	r1, #32
 8003cee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2242      	movs	r2, #66	@ 0x42
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2240      	movs	r2, #64	@ 0x40
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b007      	add	sp, #28
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	fe00e800 	.word	0xfe00e800

08003d14 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	230a      	movs	r3, #10
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	1c0a      	adds	r2, r1, #0
 8003d26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2241      	movs	r2, #65	@ 0x41
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d000      	beq.n	8003d3a <HAL_I2C_IsDeviceReady+0x26>
 8003d38:	e0df      	b.n	8003efa <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	2380      	movs	r3, #128	@ 0x80
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	401a      	ands	r2, r3
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0d4      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2240      	movs	r2, #64	@ 0x40
 8003d56:	5c9b      	ldrb	r3, [r3, r2]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2C_IsDeviceReady+0x4c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e0cd      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	2101      	movs	r1, #1
 8003d66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2241      	movs	r2, #65	@ 0x41
 8003d6c:	2124      	movs	r1, #36	@ 0x24
 8003d6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_I2C_IsDeviceReady+0x7a>
 8003d7e:	230a      	movs	r3, #10
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	059b      	lsls	r3, r3, #22
 8003d86:	0d9b      	lsrs	r3, r3, #22
 8003d88:	4a5e      	ldr	r2, [pc, #376]	@ (8003f04 <HAL_I2C_IsDeviceReady+0x1f0>)
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	e006      	b.n	8003d9c <HAL_I2C_IsDeviceReady+0x88>
 8003d8e:	230a      	movs	r3, #10
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	059b      	lsls	r3, r3, #22
 8003d96:	0d9b      	lsrs	r3, r3, #22
 8003d98:	4a5b      	ldr	r2, [pc, #364]	@ (8003f08 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003da2:	f7fe fa8b 	bl	80022bc <HAL_GetTick>
 8003da6:	0003      	movs	r3, r0
 8003da8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2220      	movs	r2, #32
 8003db2:	4013      	ands	r3, r2
 8003db4:	3b20      	subs	r3, #32
 8003db6:	425a      	negs	r2, r3
 8003db8:	4153      	adcs	r3, r2
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	231f      	movs	r3, #31
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	4013      	ands	r3, r2
 8003dcc:	3b10      	subs	r3, #16
 8003dce:	425a      	negs	r2, r3
 8003dd0:	4153      	adcs	r3, r2
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	231e      	movs	r3, #30
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003dda:	e035      	b.n	8003e48 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	d01a      	beq.n	8003e18 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fa6b 	bl	80022bc <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <HAL_I2C_IsDeviceReady+0xe4>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10f      	bne.n	8003e18 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2241      	movs	r2, #65	@ 0x41
 8003dfc:	2120      	movs	r1, #32
 8003dfe:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e04:	2220      	movs	r2, #32
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e071      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	4013      	ands	r3, r2
 8003e22:	3b20      	subs	r3, #32
 8003e24:	425a      	negs	r2, r3
 8003e26:	4153      	adcs	r3, r2
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2210      	movs	r2, #16
 8003e38:	4013      	ands	r3, r2
 8003e3a:	3b10      	subs	r3, #16
 8003e3c:	425a      	negs	r2, r3
 8003e3e:	4153      	adcs	r3, r2
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	231e      	movs	r3, #30
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003e48:	231f      	movs	r3, #31
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d104      	bne.n	8003e5c <HAL_I2C_IsDeviceReady+0x148>
 8003e52:	231e      	movs	r3, #30
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0bf      	beq.n	8003ddc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2210      	movs	r2, #16
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d01a      	beq.n	8003ea0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	0013      	movs	r3, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	2120      	movs	r1, #32
 8003e78:	f000 f8ce 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	1e03      	subs	r3, r0, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e03b      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2241      	movs	r2, #65	@ 0x41
 8003e90:	2120      	movs	r1, #32
 8003e92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2240      	movs	r2, #64	@ 0x40
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e02d      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2120      	movs	r1, #32
 8003eae:	f000 f8b3 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	1e03      	subs	r3, r0, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e020      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d900      	bls.n	8003eda <HAL_I2C_IsDeviceReady+0x1c6>
 8003ed8:	e74d      	b.n	8003d76 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2241      	movs	r2, #65	@ 0x41
 8003ede:	2120      	movs	r1, #32
 8003ee0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2240      	movs	r2, #64	@ 0x40
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b008      	add	sp, #32
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	02002000 	.word	0x02002000
 8003f08:	02002800 	.word	0x02002800

08003f0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f0c:	b5b0      	push	{r4, r5, r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	000c      	movs	r4, r1
 8003f16:	0010      	movs	r0, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	250a      	movs	r5, #10
 8003f1c:	197b      	adds	r3, r7, r5
 8003f1e:	1c22      	adds	r2, r4, #0
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	2308      	movs	r3, #8
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	1c02      	adds	r2, r0, #0
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	1c0a      	adds	r2, r1, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f30:	1dbb      	adds	r3, r7, #6
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	045c      	lsls	r4, r3, #17
 8003f3a:	197b      	adds	r3, r7, r5
 8003f3c:	8819      	ldrh	r1, [r3, #0]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	4b23      	ldr	r3, [pc, #140]	@ (8003fd0 <I2C_RequestMemoryWrite+0xc4>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	0023      	movs	r3, r4
 8003f46:	f000 fa41 	bl	80043cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4c:	6a39      	ldr	r1, [r7, #32]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f8b9 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f56:	1e03      	subs	r3, r0, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e033      	b.n	8003fc6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f66:	2308      	movs	r3, #8
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f74:	e019      	b.n	8003faa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f76:	2308      	movs	r3, #8
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	6a39      	ldr	r1, [r7, #32]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 f89a 	bl	80040c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f94:	1e03      	subs	r3, r0, #0
 8003f96:	d001      	beq.n	8003f9c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e014      	b.n	8003fc6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	0013      	movs	r3, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2180      	movs	r1, #128	@ 0x80
 8003fb8:	f000 f82e 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	80002000 	.word	0x80002000

08003fd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d103      	bne.n	8003ff2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d007      	beq.n	8004010 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	619a      	str	r2, [r3, #24]
  }
}
 8004010:	46c0      	nop			@ (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	1dfb      	adds	r3, r7, #7
 8004026:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004028:	e03a      	b.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 f8d3 	bl	80041dc <I2C_IsErrorOccurred>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e040      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	d02d      	beq.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004044:	f7fe f93a 	bl	80022bc <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d122      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	4013      	ands	r3, r2
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	425a      	negs	r2, r3
 800406a:	4153      	adcs	r3, r2
 800406c:	b2db      	uxtb	r3, r3
 800406e:	001a      	movs	r2, r3
 8004070:	1dfb      	adds	r3, r7, #7
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d113      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	2220      	movs	r2, #32
 800407e:	431a      	orrs	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2241      	movs	r2, #65	@ 0x41
 8004088:	2120      	movs	r1, #32
 800408a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2242      	movs	r2, #66	@ 0x42
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	@ 0x40
 8004098:	2100      	movs	r1, #0
 800409a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e00f      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	425a      	negs	r2, r3
 80040b0:	4153      	adcs	r3, r2
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	001a      	movs	r2, r3
 80040b6:	1dfb      	adds	r3, r7, #7
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d0b5      	beq.n	800402a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040d4:	e032      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 f87d 	bl	80041dc <I2C_IsErrorOccurred>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e030      	b.n	800414c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	d025      	beq.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f0:	f7fe f8e4 	bl	80022bc <HAL_GetTick>
 80040f4:	0002      	movs	r2, r0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11a      	bne.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d013      	beq.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	2220      	movs	r2, #32
 800411a:	431a      	orrs	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2241      	movs	r2, #65	@ 0x41
 8004124:	2120      	movs	r1, #32
 8004126:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2242      	movs	r2, #66	@ 0x42
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2240      	movs	r2, #64	@ 0x40
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e007      	b.n	800414c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d1c5      	bne.n	80040d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b004      	add	sp, #16
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004160:	e02f      	b.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	0018      	movs	r0, r3
 800416a:	f000 f837 	bl	80041dc <I2C_IsErrorOccurred>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e02d      	b.n	80041d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7fe f8a1 	bl	80022bc <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11a      	bne.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2220      	movs	r2, #32
 8004194:	4013      	ands	r3, r2
 8004196:	2b20      	cmp	r3, #32
 8004198:	d013      	beq.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	2220      	movs	r2, #32
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2241      	movs	r2, #65	@ 0x41
 80041aa:	2120      	movs	r1, #32
 80041ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2242      	movs	r2, #66	@ 0x42
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2240      	movs	r2, #64	@ 0x40
 80041ba:	2100      	movs	r1, #0
 80041bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e007      	b.n	80041d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2220      	movs	r2, #32
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d1c8      	bne.n	8004162 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b004      	add	sp, #16
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2327      	movs	r3, #39	@ 0x27
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2210      	movs	r2, #16
 8004204:	4013      	ands	r3, r2
 8004206:	d100      	bne.n	800420a <I2C_IsErrorOccurred+0x2e>
 8004208:	e079      	b.n	80042fe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2210      	movs	r2, #16
 8004210:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004212:	e057      	b.n	80042c4 <I2C_IsErrorOccurred+0xe8>
 8004214:	2227      	movs	r2, #39	@ 0x27
 8004216:	18bb      	adds	r3, r7, r2
 8004218:	18ba      	adds	r2, r7, r2
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3301      	adds	r3, #1
 8004222:	d04f      	beq.n	80042c4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7fe f84a 	bl	80022bc <HAL_GetTick>
 8004228:	0002      	movs	r2, r0
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <I2C_IsErrorOccurred+0x5e>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d144      	bne.n	80042c4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	01db      	lsls	r3, r3, #7
 8004244:	4013      	ands	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004248:	2013      	movs	r0, #19
 800424a:	183b      	adds	r3, r7, r0
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	2142      	movs	r1, #66	@ 0x42
 8004250:	5c52      	ldrb	r2, [r2, r1]
 8004252:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	401a      	ands	r2, r3
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	429a      	cmp	r2, r3
 8004266:	d126      	bne.n	80042b6 <I2C_IsErrorOccurred+0xda>
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	01db      	lsls	r3, r3, #7
 800426e:	429a      	cmp	r2, r3
 8004270:	d021      	beq.n	80042b6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004272:	183b      	adds	r3, r7, r0
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b20      	cmp	r3, #32
 8004278:	d01d      	beq.n	80042b6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2180      	movs	r1, #128	@ 0x80
 8004286:	01c9      	lsls	r1, r1, #7
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800428c:	f7fe f816 	bl	80022bc <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004294:	e00f      	b.n	80042b6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004296:	f7fe f811 	bl	80022bc <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b19      	cmp	r3, #25
 80042a2:	d908      	bls.n	80042b6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2220      	movs	r2, #32
 80042a8:	4313      	orrs	r3, r2
 80042aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042ac:	2327      	movs	r3, #39	@ 0x27
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]

              break;
 80042b4:	e006      	b.n	80042c4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2220      	movs	r2, #32
 80042be:	4013      	ands	r3, r2
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d1e8      	bne.n	8004296 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2220      	movs	r2, #32
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d004      	beq.n	80042dc <I2C_IsErrorOccurred+0x100>
 80042d2:	2327      	movs	r3, #39	@ 0x27
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d09b      	beq.n	8004214 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042dc:	2327      	movs	r3, #39	@ 0x27
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2220      	movs	r2, #32
 80042ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	2204      	movs	r2, #4
 80042f2:	4313      	orrs	r3, r2
 80042f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042f6:	2327      	movs	r3, #39	@ 0x27
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4013      	ands	r3, r2
 800430e:	d00c      	beq.n	800432a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2201      	movs	r2, #1
 8004314:	4313      	orrs	r3, r2
 8004316:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2280      	movs	r2, #128	@ 0x80
 800431e:	0052      	lsls	r2, r2, #1
 8004320:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004322:	2327      	movs	r3, #39	@ 0x27
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4013      	ands	r3, r2
 8004332:	d00c      	beq.n	800434e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2208      	movs	r2, #8
 8004338:	4313      	orrs	r3, r2
 800433a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	00d2      	lsls	r2, r2, #3
 8004344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004346:	2327      	movs	r3, #39	@ 0x27
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d00c      	beq.n	8004372 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2202      	movs	r2, #2
 800435c:	4313      	orrs	r3, r2
 800435e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2280      	movs	r2, #128	@ 0x80
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800436a:	2327      	movs	r3, #39	@ 0x27
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004372:	2327      	movs	r3, #39	@ 0x27
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01d      	beq.n	80043b8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	0018      	movs	r0, r3
 8004380:	f7ff fe28 	bl	8003fd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	490e      	ldr	r1, [pc, #56]	@ (80043c8 <I2C_IsErrorOccurred+0x1ec>)
 8004390:	400a      	ands	r2, r1
 8004392:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	431a      	orrs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2241      	movs	r2, #65	@ 0x41
 80043a4:	2120      	movs	r1, #32
 80043a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2242      	movs	r2, #66	@ 0x42
 80043ac:	2100      	movs	r1, #0
 80043ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2240      	movs	r2, #64	@ 0x40
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80043b8:	2327      	movs	r3, #39	@ 0x27
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b00a      	add	sp, #40	@ 0x28
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	fe00e800 	.word	0xfe00e800

080043cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	0008      	movs	r0, r1
 80043d6:	0011      	movs	r1, r2
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	240a      	movs	r4, #10
 80043dc:	193b      	adds	r3, r7, r4
 80043de:	1c02      	adds	r2, r0, #0
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	2009      	movs	r0, #9
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	1c0a      	adds	r2, r1, #0
 80043e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ea:	193b      	adds	r3, r7, r4
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	059b      	lsls	r3, r3, #22
 80043f0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	0419      	lsls	r1, r3, #16
 80043f8:	23ff      	movs	r3, #255	@ 0xff
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	4313      	orrs	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004416:	0d51      	lsrs	r1, r2, #21
 8004418:	2280      	movs	r2, #128	@ 0x80
 800441a:	00d2      	lsls	r2, r2, #3
 800441c:	400a      	ands	r2, r1
 800441e:	4907      	ldr	r1, [pc, #28]	@ (800443c <I2C_TransferConfig+0x70>)
 8004420:	430a      	orrs	r2, r1
 8004422:	43d2      	mvns	r2, r2
 8004424:	401a      	ands	r2, r3
 8004426:	0011      	movs	r1, r2
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b007      	add	sp, #28
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	03ff63ff 	.word	0x03ff63ff

08004440 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2241      	movs	r2, #65	@ 0x41
 800444e:	5c9b      	ldrb	r3, [r3, r2]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	d138      	bne.n	80044c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2240      	movs	r2, #64	@ 0x40
 800445a:	5c9b      	ldrb	r3, [r3, r2]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004460:	2302      	movs	r3, #2
 8004462:	e032      	b.n	80044ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2240      	movs	r2, #64	@ 0x40
 8004468:	2101      	movs	r1, #1
 800446a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2241      	movs	r2, #65	@ 0x41
 8004470:	2124      	movs	r1, #36	@ 0x24
 8004472:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4911      	ldr	r1, [pc, #68]	@ (80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004490:	400a      	ands	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2241      	movs	r2, #65	@ 0x41
 80044b8:	2120      	movs	r1, #32
 80044ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2240      	movs	r2, #64	@ 0x40
 80044c0:	2100      	movs	r1, #0
 80044c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b002      	add	sp, #8
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	ffffefff 	.word	0xffffefff

080044d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2241      	movs	r2, #65	@ 0x41
 80044e6:	5c9b      	ldrb	r3, [r3, r2]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d139      	bne.n	8004562 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2240      	movs	r2, #64	@ 0x40
 80044f2:	5c9b      	ldrb	r3, [r3, r2]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e033      	b.n	8004564 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2240      	movs	r2, #64	@ 0x40
 8004500:	2101      	movs	r1, #1
 8004502:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2241      	movs	r2, #65	@ 0x41
 8004508:	2124      	movs	r1, #36	@ 0x24
 800450a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a11      	ldr	r2, [pc, #68]	@ (800456c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	430a      	orrs	r2, r1
 800454c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2241      	movs	r2, #65	@ 0x41
 8004552:	2120      	movs	r1, #32
 8004554:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2240      	movs	r2, #64	@ 0x40
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	0018      	movs	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	b004      	add	sp, #16
 800456a:	bd80      	pop	{r7, pc}
 800456c:	fffff0ff 	.word	0xfffff0ff

08004570 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004574:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b03      	ldr	r3, [pc, #12]	@ (8004588 <HAL_PWR_EnableBkUpAccess+0x18>)
 800457a:	2180      	movs	r1, #128	@ 0x80
 800457c:	0049      	lsls	r1, r1, #1
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40007000 	.word	0x40007000

0800458c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004594:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d11f      	bne.n	80045f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80045b0:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	0013      	movs	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4912      	ldr	r1, [pc, #72]	@ (8004608 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80045be:	0018      	movs	r0, r3
 80045c0:	f7fb fda8 	bl	8000114 <__udivsi3>
 80045c4:	0003      	movs	r3, r0
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045ca:	e008      	b.n	80045de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e001      	b.n	80045de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e009      	b.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	401a      	ands	r2, r3
 80045e8:	2380      	movs	r3, #128	@ 0x80
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d0ed      	beq.n	80045cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b004      	add	sp, #16
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	40007000 	.word	0x40007000
 8004600:	fffff9ff 	.word	0xfffff9ff
 8004604:	2000000c 	.word	0x2000000c
 8004608:	000f4240 	.word	0x000f4240

0800460c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e2f3      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	4013      	ands	r3, r2
 8004626:	d100      	bne.n	800462a <HAL_RCC_OscConfig+0x1e>
 8004628:	e07c      	b.n	8004724 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462a:	4bc3      	ldr	r3, [pc, #780]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2238      	movs	r2, #56	@ 0x38
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004634:	4bc0      	ldr	r3, [pc, #768]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2203      	movs	r2, #3
 800463a:	4013      	ands	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b10      	cmp	r3, #16
 8004642:	d102      	bne.n	800464a <HAL_RCC_OscConfig+0x3e>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d002      	beq.n	8004650 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d10b      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4bb9      	ldr	r3, [pc, #740]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2380      	movs	r3, #128	@ 0x80
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	4013      	ands	r3, r2
 800465a:	d062      	beq.n	8004722 <HAL_RCC_OscConfig+0x116>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d15e      	bne.n	8004722 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e2ce      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	025b      	lsls	r3, r3, #9
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x78>
 8004674:	4bb0      	ldr	r3, [pc, #704]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4baf      	ldr	r3, [pc, #700]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800467a:	2180      	movs	r1, #128	@ 0x80
 800467c:	0249      	lsls	r1, r1, #9
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e020      	b.n	80046c6 <HAL_RCC_OscConfig+0xba>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	23a0      	movs	r3, #160	@ 0xa0
 800468a:	02db      	lsls	r3, r3, #11
 800468c:	429a      	cmp	r2, r3
 800468e:	d10e      	bne.n	80046ae <HAL_RCC_OscConfig+0xa2>
 8004690:	4ba9      	ldr	r3, [pc, #676]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4ba8      	ldr	r3, [pc, #672]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004696:	2180      	movs	r1, #128	@ 0x80
 8004698:	02c9      	lsls	r1, r1, #11
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	4ba6      	ldr	r3, [pc, #664]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4ba5      	ldr	r3, [pc, #660]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046a4:	2180      	movs	r1, #128	@ 0x80
 80046a6:	0249      	lsls	r1, r1, #9
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e00b      	b.n	80046c6 <HAL_RCC_OscConfig+0xba>
 80046ae:	4ba2      	ldr	r3, [pc, #648]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046b4:	49a1      	ldr	r1, [pc, #644]	@ (800493c <HAL_RCC_OscConfig+0x330>)
 80046b6:	400a      	ands	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	4b9f      	ldr	r3, [pc, #636]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b9e      	ldr	r3, [pc, #632]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046c0:	499f      	ldr	r1, [pc, #636]	@ (8004940 <HAL_RCC_OscConfig+0x334>)
 80046c2:	400a      	ands	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd fdf5 	bl	80022bc <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fd fdf0 	bl	80022bc <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	@ 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e28d      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ea:	4b93      	ldr	r3, [pc, #588]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	4013      	ands	r3, r2
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0xcc>
 80046f6:	e015      	b.n	8004724 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd fde0 	bl	80022bc <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004702:	f7fd fddb 	bl	80022bc <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b64      	cmp	r3, #100	@ 0x64
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e278      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004714:	4b88      	ldr	r3, [pc, #544]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	4013      	ands	r3, r2
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0xf6>
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004722:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d100      	bne.n	8004730 <HAL_RCC_OscConfig+0x124>
 800472e:	e099      	b.n	8004864 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004730:	4b81      	ldr	r3, [pc, #516]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2238      	movs	r2, #56	@ 0x38
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800473a:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2203      	movs	r2, #3
 8004740:	4013      	ands	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b10      	cmp	r3, #16
 8004748:	d102      	bne.n	8004750 <HAL_RCC_OscConfig+0x144>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d002      	beq.n	8004756 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d135      	bne.n	80047c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004756:	4b78      	ldr	r3, [pc, #480]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4013      	ands	r3, r2
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x162>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e24b      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b72      	ldr	r3, [pc, #456]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4a74      	ldr	r2, [pc, #464]	@ (8004944 <HAL_RCC_OscConfig+0x338>)
 8004774:	4013      	ands	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	021a      	lsls	r2, r3, #8
 800477e:	4b6e      	ldr	r3, [pc, #440]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d112      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800478a:	4b6b      	ldr	r3, [pc, #428]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6e      	ldr	r2, [pc, #440]	@ (8004948 <HAL_RCC_OscConfig+0x33c>)
 8004790:	4013      	ands	r3, r2
 8004792:	0019      	movs	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800479e:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0adb      	lsrs	r3, r3, #11
 80047a4:	2207      	movs	r2, #7
 80047a6:	4013      	ands	r3, r2
 80047a8:	4a68      	ldr	r2, [pc, #416]	@ (800494c <HAL_RCC_OscConfig+0x340>)
 80047aa:	40da      	lsrs	r2, r3
 80047ac:	4b68      	ldr	r3, [pc, #416]	@ (8004950 <HAL_RCC_OscConfig+0x344>)
 80047ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047b0:	4b68      	ldr	r3, [pc, #416]	@ (8004954 <HAL_RCC_OscConfig+0x348>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fd fd25 	bl	8002204 <HAL_InitTick>
 80047ba:	1e03      	subs	r3, r0, #0
 80047bc:	d051      	beq.n	8004862 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e221      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d030      	beq.n	800482c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004948 <HAL_RCC_OscConfig+0x33c>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	4b57      	ldr	r3, [pc, #348]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80047de:	4b56      	ldr	r3, [pc, #344]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b55      	ldr	r3, [pc, #340]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80047e4:	2180      	movs	r1, #128	@ 0x80
 80047e6:	0049      	lsls	r1, r1, #1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fd fd66 	bl	80022bc <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fd fd61 	bl	80022bc <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1fe      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004808:	4b4b      	ldr	r3, [pc, #300]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	@ 0x80
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4013      	ands	r3, r2
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b48      	ldr	r3, [pc, #288]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a4a      	ldr	r2, [pc, #296]	@ (8004944 <HAL_RCC_OscConfig+0x338>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	4b44      	ldr	r3, [pc, #272]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e01b      	b.n	8004864 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800482c:	4b42      	ldr	r3, [pc, #264]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b41      	ldr	r3, [pc, #260]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004832:	4949      	ldr	r1, [pc, #292]	@ (8004958 <HAL_RCC_OscConfig+0x34c>)
 8004834:	400a      	ands	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd fd40 	bl	80022bc <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd fd3b 	bl	80022bc <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1d8      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004854:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4013      	ands	r3, r2
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x236>
 8004860:	e000      	b.n	8004864 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004862:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2208      	movs	r2, #8
 800486a:	4013      	ands	r3, r2
 800486c:	d047      	beq.n	80048fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800486e:	4b32      	ldr	r3, [pc, #200]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2238      	movs	r2, #56	@ 0x38
 8004874:	4013      	ands	r3, r2
 8004876:	2b18      	cmp	r3, #24
 8004878:	d10a      	bne.n	8004890 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800487a:	4b2f      	ldr	r3, [pc, #188]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800487c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487e:	2202      	movs	r2, #2
 8004880:	4013      	ands	r3, r2
 8004882:	d03c      	beq.n	80048fe <HAL_RCC_OscConfig+0x2f2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d138      	bne.n	80048fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e1ba      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d019      	beq.n	80048cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004898:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800489a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800489c:	4b26      	ldr	r3, [pc, #152]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 800489e:	2101      	movs	r1, #1
 80048a0:	430a      	orrs	r2, r1
 80048a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd fd0a 	bl	80022bc <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ae:	f7fd fd05 	bl	80022bc <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1a2      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80048c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c4:	2202      	movs	r2, #2
 80048c6:	4013      	ands	r3, r2
 80048c8:	d0f1      	beq.n	80048ae <HAL_RCC_OscConfig+0x2a2>
 80048ca:	e018      	b.n	80048fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80048cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80048ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fd fcf0 	bl	80022bc <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fd fceb 	bl	80022bc <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e188      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f4:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 80048f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f8:	2202      	movs	r2, #2
 80048fa:	4013      	ands	r3, r2
 80048fc:	d1f1      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2204      	movs	r2, #4
 8004904:	4013      	ands	r3, r2
 8004906:	d100      	bne.n	800490a <HAL_RCC_OscConfig+0x2fe>
 8004908:	e0c6      	b.n	8004a98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	231f      	movs	r3, #31
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2238      	movs	r2, #56	@ 0x38
 8004918:	4013      	ands	r3, r2
 800491a:	2b20      	cmp	r3, #32
 800491c:	d11e      	bne.n	800495c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_RCC_OscConfig+0x32c>)
 8004920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004922:	2202      	movs	r2, #2
 8004924:	4013      	ands	r3, r2
 8004926:	d100      	bne.n	800492a <HAL_RCC_OscConfig+0x31e>
 8004928:	e0b6      	b.n	8004a98 <HAL_RCC_OscConfig+0x48c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d000      	beq.n	8004934 <HAL_RCC_OscConfig+0x328>
 8004932:	e0b1      	b.n	8004a98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e166      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
 8004938:	40021000 	.word	0x40021000
 800493c:	fffeffff 	.word	0xfffeffff
 8004940:	fffbffff 	.word	0xfffbffff
 8004944:	ffff80ff 	.word	0xffff80ff
 8004948:	ffffc7ff 	.word	0xffffc7ff
 800494c:	00f42400 	.word	0x00f42400
 8004950:	2000000c 	.word	0x2000000c
 8004954:	20000010 	.word	0x20000010
 8004958:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800495c:	4bac      	ldr	r3, [pc, #688]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 800495e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004960:	2380      	movs	r3, #128	@ 0x80
 8004962:	055b      	lsls	r3, r3, #21
 8004964:	4013      	ands	r3, r2
 8004966:	d101      	bne.n	800496c <HAL_RCC_OscConfig+0x360>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x362>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4ba7      	ldr	r3, [pc, #668]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004976:	4ba6      	ldr	r3, [pc, #664]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004978:	2180      	movs	r1, #128	@ 0x80
 800497a:	0549      	lsls	r1, r1, #21
 800497c:	430a      	orrs	r2, r1
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004980:	4ba3      	ldr	r3, [pc, #652]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004984:	2380      	movs	r3, #128	@ 0x80
 8004986:	055b      	lsls	r3, r3, #21
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800498e:	231f      	movs	r3, #31
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004996:	4b9f      	ldr	r3, [pc, #636]	@ (8004c14 <HAL_RCC_OscConfig+0x608>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4013      	ands	r3, r2
 80049a0:	d11a      	bne.n	80049d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c14 <HAL_RCC_OscConfig+0x608>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b9b      	ldr	r3, [pc, #620]	@ (8004c14 <HAL_RCC_OscConfig+0x608>)
 80049a8:	2180      	movs	r1, #128	@ 0x80
 80049aa:	0049      	lsls	r1, r1, #1
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80049b0:	f7fd fc84 	bl	80022bc <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fd fc7f 	bl	80022bc <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e11c      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049cc:	4b91      	ldr	r3, [pc, #580]	@ (8004c14 <HAL_RCC_OscConfig+0x608>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4013      	ands	r3, r2
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x3e2>
 80049e0:	4b8b      	ldr	r3, [pc, #556]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 80049e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 80049e6:	2101      	movs	r1, #1
 80049e8:	430a      	orrs	r2, r1
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049ec:	e01c      	b.n	8004a28 <HAL_RCC_OscConfig+0x41c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x404>
 80049f6:	4b86      	ldr	r3, [pc, #536]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 80049f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049fa:	4b85      	ldr	r3, [pc, #532]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 80049fc:	2104      	movs	r1, #4
 80049fe:	430a      	orrs	r2, r1
 8004a00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a02:	4b83      	ldr	r3, [pc, #524]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a06:	4b82      	ldr	r3, [pc, #520]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a08:	2101      	movs	r1, #1
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0x41c>
 8004a10:	4b7f      	ldr	r3, [pc, #508]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a14:	4b7e      	ldr	r3, [pc, #504]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a16:	2101      	movs	r1, #1
 8004a18:	438a      	bics	r2, r1
 8004a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a20:	4b7b      	ldr	r3, [pc, #492]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a22:	2104      	movs	r1, #4
 8004a24:	438a      	bics	r2, r1
 8004a26:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d014      	beq.n	8004a5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd fc44 	bl	80022bc <HAL_GetTick>
 8004a34:	0003      	movs	r3, r0
 8004a36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a38:	e009      	b.n	8004a4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fc3f 	bl	80022bc <HAL_GetTick>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	4a74      	ldr	r2, [pc, #464]	@ (8004c18 <HAL_RCC_OscConfig+0x60c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0db      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	4b70      	ldr	r3, [pc, #448]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	2202      	movs	r2, #2
 8004a54:	4013      	ands	r3, r2
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x42e>
 8004a58:	e013      	b.n	8004a82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5a:	f7fd fc2f 	bl	80022bc <HAL_GetTick>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a62:	e009      	b.n	8004a78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fd fc2a 	bl	80022bc <HAL_GetTick>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004c18 <HAL_RCC_OscConfig+0x60c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0c6      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a78:	4b65      	ldr	r3, [pc, #404]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a82:	231f      	movs	r3, #31
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a8c:	4b60      	ldr	r3, [pc, #384]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a90:	4b5f      	ldr	r3, [pc, #380]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004a92:	4962      	ldr	r1, [pc, #392]	@ (8004c1c <HAL_RCC_OscConfig+0x610>)
 8004a94:	400a      	ands	r2, r1
 8004a96:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d100      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x496>
 8004aa0:	e0b0      	b.n	8004c04 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2238      	movs	r2, #56	@ 0x38
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d100      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4a4>
 8004aae:	e078      	b.n	8004ba2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d153      	bne.n	8004b60 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab8:	4b55      	ldr	r3, [pc, #340]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004abe:	4958      	ldr	r1, [pc, #352]	@ (8004c20 <HAL_RCC_OscConfig+0x614>)
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fbfa 	bl	80022bc <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fd fbf5 	bl	80022bc <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e092      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	@ 0x80
 8004ae6:	049b      	lsls	r3, r3, #18
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aec:	4b48      	ldr	r3, [pc, #288]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a4c      	ldr	r2, [pc, #304]	@ (8004c24 <HAL_RCC_OscConfig+0x618>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1a      	ldr	r2, [r3, #32]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	431a      	orrs	r2, r3
 8004b14:	4b3e      	ldr	r3, [pc, #248]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b20:	2180      	movs	r1, #128	@ 0x80
 8004b22:	0449      	lsls	r1, r1, #17
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004b28:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	4b38      	ldr	r3, [pc, #224]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	0549      	lsls	r1, r1, #21
 8004b32:	430a      	orrs	r2, r1
 8004b34:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b36:	f7fd fbc1 	bl	80022bc <HAL_GetTick>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd fbbc 	bl	80022bc <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e059      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b52:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	049b      	lsls	r3, r3, #18
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x534>
 8004b5e:	e051      	b.n	8004c04 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b60:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b2a      	ldr	r3, [pc, #168]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b66:	492e      	ldr	r1, [pc, #184]	@ (8004c20 <HAL_RCC_OscConfig+0x614>)
 8004b68:	400a      	ands	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fd fba6 	bl	80022bc <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fd fba1 	bl	80022bc <HAL_GetTick>
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e03e      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b88:	4b21      	ldr	r3, [pc, #132]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2380      	movs	r3, #128	@ 0x80
 8004b8e:	049b      	lsls	r3, r3, #18
 8004b90:	4013      	ands	r3, r2
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004b94:	4b1e      	ldr	r3, [pc, #120]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	4b1d      	ldr	r3, [pc, #116]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004b9a:	4923      	ldr	r1, [pc, #140]	@ (8004c28 <HAL_RCC_OscConfig+0x61c>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e030      	b.n	8004c04 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e02b      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004bae:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <HAL_RCC_OscConfig+0x604>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	401a      	ands	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11e      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2270      	movs	r2, #112	@ 0x70
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d117      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	23fe      	movs	r3, #254	@ 0xfe
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bdc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d10e      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	23f8      	movs	r3, #248	@ 0xf8
 8004be6:	039b      	lsls	r3, r3, #14
 8004be8:	401a      	ands	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	0f5b      	lsrs	r3, r3, #29
 8004bf6:	075a      	lsls	r2, r3, #29
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b008      	add	sp, #32
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40007000 	.word	0x40007000
 8004c18:	00001388 	.word	0x00001388
 8004c1c:	efffffff 	.word	0xefffffff
 8004c20:	feffffff 	.word	0xfeffffff
 8004c24:	1fc1808c 	.word	0x1fc1808c
 8004c28:	effefffc 	.word	0xeffefffc

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0e9      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b76      	ldr	r3, [pc, #472]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2207      	movs	r2, #7
 8004c46:	4013      	ands	r3, r2
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d91e      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b73      	ldr	r3, [pc, #460]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2207      	movs	r2, #7
 8004c54:	4393      	bics	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	4b70      	ldr	r3, [pc, #448]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c60:	f7fd fb2c 	bl	80022bc <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c68:	e009      	b.n	8004c7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fd fb27 	bl	80022bc <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	4a6a      	ldr	r2, [pc, #424]	@ (8004e20 <HAL_RCC_ClockConfig+0x1f4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0ca      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c7e:	4b67      	ldr	r3, [pc, #412]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2207      	movs	r2, #7
 8004c84:	4013      	ands	r3, r2
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1ee      	bne.n	8004c6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2202      	movs	r2, #2
 8004c92:	4013      	ands	r3, r2
 8004c94:	d015      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d006      	beq.n	8004cae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ca0:	4b60      	ldr	r3, [pc, #384]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	4b5f      	ldr	r3, [pc, #380]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ca6:	21e0      	movs	r1, #224	@ 0xe0
 8004ca8:	01c9      	lsls	r1, r1, #7
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cae:	4b5d      	ldr	r3, [pc, #372]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4a5d      	ldr	r2, [pc, #372]	@ (8004e28 <HAL_RCC_ClockConfig+0x1fc>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b59      	ldr	r3, [pc, #356]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d057      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cd4:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	2380      	movs	r3, #128	@ 0x80
 8004cda:	029b      	lsls	r3, r3, #10
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d12b      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e097      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cec:	4b4d      	ldr	r3, [pc, #308]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	049b      	lsls	r3, r3, #18
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d11f      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e08b      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d04:	4b47      	ldr	r3, [pc, #284]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	2380      	movs	r3, #128	@ 0x80
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d113      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e07f      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d106      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1c:	4b41      	ldr	r3, [pc, #260]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d20:	2202      	movs	r2, #2
 8004d22:	4013      	ands	r3, r2
 8004d24:	d108      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e074      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2e:	2202      	movs	r2, #2
 8004d30:	4013      	ands	r3, r2
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e06d      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d38:	4b3a      	ldr	r3, [pc, #232]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2207      	movs	r2, #7
 8004d3e:	4393      	bics	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	4b37      	ldr	r3, [pc, #220]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fd fab6 	bl	80022bc <HAL_GetTick>
 8004d50:	0003      	movs	r3, r0
 8004d52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d54:	e009      	b.n	8004d6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d56:	f7fd fab1 	bl	80022bc <HAL_GetTick>
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <HAL_RCC_ClockConfig+0x1f4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e054      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2238      	movs	r2, #56	@ 0x38
 8004d70:	401a      	ands	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d1ec      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2207      	movs	r2, #7
 8004d82:	4013      	ands	r3, r2
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d21e      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b24      	ldr	r3, [pc, #144]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4393      	bics	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	4b21      	ldr	r3, [pc, #132]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d9c:	f7fd fa8e 	bl	80022bc <HAL_GetTick>
 8004da0:	0003      	movs	r3, r0
 8004da2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004da4:	e009      	b.n	8004dba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fd fa89 	bl	80022bc <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <HAL_RCC_ClockConfig+0x1f4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e02c      	b.n	8004e14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dba:	4b18      	ldr	r3, [pc, #96]	@ (8004e1c <HAL_RCC_ClockConfig+0x1f0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd2:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	4a15      	ldr	r2, [pc, #84]	@ (8004e2c <HAL_RCC_ClockConfig+0x200>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004de6:	f000 f829 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004dea:	0001      	movs	r1, r0
 8004dec:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <HAL_RCC_ClockConfig+0x1f8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	220f      	movs	r2, #15
 8004df4:	401a      	ands	r2, r3
 8004df6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <HAL_RCC_ClockConfig+0x204>)
 8004df8:	0092      	lsls	r2, r2, #2
 8004dfa:	58d3      	ldr	r3, [r2, r3]
 8004dfc:	221f      	movs	r2, #31
 8004dfe:	4013      	ands	r3, r2
 8004e00:	000a      	movs	r2, r1
 8004e02:	40da      	lsrs	r2, r3
 8004e04:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <HAL_RCC_ClockConfig+0x208>)
 8004e06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <HAL_RCC_ClockConfig+0x20c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7fd f9f9 	bl	8002204 <HAL_InitTick>
 8004e12:	0003      	movs	r3, r0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b004      	add	sp, #16
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40022000 	.word	0x40022000
 8004e20:	00001388 	.word	0x00001388
 8004e24:	40021000 	.word	0x40021000
 8004e28:	fffff0ff 	.word	0xfffff0ff
 8004e2c:	ffff8fff 	.word	0xffff8fff
 8004e30:	08006edc 	.word	0x08006edc
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	20000010 	.word	0x20000010

08004e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e42:	4b3c      	ldr	r3, [pc, #240]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2238      	movs	r2, #56	@ 0x38
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d10f      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004e4c:	4b39      	ldr	r3, [pc, #228]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	0adb      	lsrs	r3, r3, #11
 8004e52:	2207      	movs	r2, #7
 8004e54:	4013      	ands	r3, r2
 8004e56:	2201      	movs	r2, #1
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	0013      	movs	r3, r2
 8004e5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	4835      	ldr	r0, [pc, #212]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004e62:	f7fb f957 	bl	8000114 <__udivsi3>
 8004e66:	0003      	movs	r3, r0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e05d      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e6c:	4b31      	ldr	r3, [pc, #196]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2238      	movs	r2, #56	@ 0x38
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d102      	bne.n	8004e7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e78:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e054      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2238      	movs	r2, #56	@ 0x38
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d138      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e94:	4b27      	ldr	r3, [pc, #156]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	2207      	movs	r2, #7
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4824      	ldr	r0, [pc, #144]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8004eac:	f7fb f932 	bl	8000114 <__udivsi3>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	0a1b      	lsrs	r3, r3, #8
 8004eba:	227f      	movs	r2, #127	@ 0x7f
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	434b      	muls	r3, r1
 8004ec0:	617b      	str	r3, [r7, #20]
        break;
 8004ec2:	e00d      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	481c      	ldr	r0, [pc, #112]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ec8:	f7fb f924 	bl	8000114 <__udivsi3>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	0019      	movs	r1, r3
 8004ed0:	4b18      	ldr	r3, [pc, #96]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	227f      	movs	r2, #127	@ 0x7f
 8004ed8:	4013      	ands	r3, r2
 8004eda:	434b      	muls	r3, r1
 8004edc:	617b      	str	r3, [r7, #20]
        break;
 8004ede:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ee0:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	0f5b      	lsrs	r3, r3, #29
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	4013      	ands	r3, r2
 8004eea:	3301      	adds	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	6978      	ldr	r0, [r7, #20]
 8004ef2:	f7fb f90f 	bl	8000114 <__udivsi3>
 8004ef6:	0003      	movs	r3, r0
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	e015      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004efc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2238      	movs	r2, #56	@ 0x38
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d103      	bne.n	8004f10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f10:	4b08      	ldr	r3, [pc, #32]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2238      	movs	r2, #56	@ 0x38
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b18      	cmp	r3, #24
 8004f1a:	d103      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004f1c:	23fa      	movs	r3, #250	@ 0xfa
 8004f1e:	01db      	lsls	r3, r3, #7
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e001      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f28:	693b      	ldr	r3, [r7, #16]
}
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b006      	add	sp, #24
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	40021000 	.word	0x40021000
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	007a1200 	.word	0x007a1200

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004f48:	2313      	movs	r3, #19
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f50:	2312      	movs	r3, #18
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	@ 0x80
 8004f5e:	029b      	lsls	r3, r3, #10
 8004f60:	4013      	ands	r3, r2
 8004f62:	d100      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004f64:	e0a3      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2011      	movs	r0, #17
 8004f68:	183b      	adds	r3, r7, r0
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f72:	2380      	movs	r3, #128	@ 0x80
 8004f74:	055b      	lsls	r3, r3, #21
 8004f76:	4013      	ands	r3, r2
 8004f78:	d110      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f80:	2180      	movs	r1, #128	@ 0x80
 8004f82:	0549      	lsls	r1, r1, #21
 8004f84:	430a      	orrs	r2, r1
 8004f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f88:	4b78      	ldr	r3, [pc, #480]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	055b      	lsls	r3, r3, #21
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f96:	183b      	adds	r3, r7, r0
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9c:	4b74      	ldr	r3, [pc, #464]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b73      	ldr	r3, [pc, #460]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fa2:	2180      	movs	r1, #128	@ 0x80
 8004fa4:	0049      	lsls	r1, r1, #1
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004faa:	f7fd f987 	bl	80022bc <HAL_GetTick>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb4:	f7fd f982 	bl	80022bc <HAL_GetTick>
 8004fb8:	0002      	movs	r2, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d904      	bls.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004fc2:	2313      	movs	r3, #19
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	701a      	strb	r2, [r3, #0]
        break;
 8004fca:	e005      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fcc:	4b68      	ldr	r3, [pc, #416]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d0ed      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004fd8:	2313      	movs	r3, #19
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d154      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe2:	4b62      	ldr	r3, [pc, #392]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004fe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fe6:	23c0      	movs	r3, #192	@ 0xc0
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4013      	ands	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d019      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d014      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005002:	4a5c      	ldr	r2, [pc, #368]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005004:	4013      	ands	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005008:	4b58      	ldr	r3, [pc, #352]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800500a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800500c:	4b57      	ldr	r3, [pc, #348]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800500e:	2180      	movs	r1, #128	@ 0x80
 8005010:	0249      	lsls	r1, r1, #9
 8005012:	430a      	orrs	r2, r1
 8005014:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005016:	4b55      	ldr	r3, [pc, #340]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800501a:	4b54      	ldr	r3, [pc, #336]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800501c:	4956      	ldr	r1, [pc, #344]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800501e:	400a      	ands	r2, r1
 8005020:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005022:	4b52      	ldr	r3, [pc, #328]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2201      	movs	r2, #1
 800502c:	4013      	ands	r3, r2
 800502e:	d016      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd f944 	bl	80022bc <HAL_GetTick>
 8005034:	0003      	movs	r3, r0
 8005036:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005038:	e00c      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fd f93f 	bl	80022bc <HAL_GetTick>
 800503e:	0002      	movs	r2, r0
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	4a4d      	ldr	r2, [pc, #308]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d904      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800504a:	2313      	movs	r3, #19
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	2203      	movs	r2, #3
 8005050:	701a      	strb	r2, [r3, #0]
            break;
 8005052:	e004      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005054:	4b45      	ldr	r3, [pc, #276]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005058:	2202      	movs	r2, #2
 800505a:	4013      	ands	r3, r2
 800505c:	d0ed      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800505e:	2313      	movs	r3, #19
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005068:	4b40      	ldr	r3, [pc, #256]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	4a41      	ldr	r2, [pc, #260]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005078:	430a      	orrs	r2, r1
 800507a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800507c:	e00c      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800507e:	2312      	movs	r3, #18
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	2213      	movs	r2, #19
 8005084:	18ba      	adds	r2, r7, r2
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e005      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	2312      	movs	r3, #18
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	2213      	movs	r2, #19
 8005092:	18ba      	adds	r2, r7, r2
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005098:	2311      	movs	r3, #17
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a2:	4b32      	ldr	r3, [pc, #200]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a6:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050a8:	4935      	ldr	r1, [pc, #212]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050aa:	400a      	ands	r2, r1
 80050ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b8:	4b2c      	ldr	r3, [pc, #176]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050bc:	2203      	movs	r2, #3
 80050be:	4393      	bics	r3, r2
 80050c0:	0019      	movs	r1, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	4b29      	ldr	r3, [pc, #164]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050c8:	430a      	orrs	r2, r1
 80050ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2220      	movs	r2, #32
 80050d2:	4013      	ands	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050d6:	4b25      	ldr	r3, [pc, #148]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	4a2a      	ldr	r2, [pc, #168]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80050dc:	4013      	ands	r3, r2
 80050de:	0019      	movs	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	01db      	lsls	r3, r3, #7
 80050f2:	4013      	ands	r3, r2
 80050f4:	d015      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f6:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	0899      	lsrs	r1, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	4b1a      	ldr	r3, [pc, #104]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005104:	430a      	orrs	r2, r1
 8005106:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	05db      	lsls	r3, r3, #23
 8005110:	429a      	cmp	r2, r3
 8005112:	d106      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005114:	4b15      	ldr	r3, [pc, #84]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800511a:	2180      	movs	r1, #128	@ 0x80
 800511c:	0249      	lsls	r1, r1, #9
 800511e:	430a      	orrs	r2, r1
 8005120:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	2380      	movs	r3, #128	@ 0x80
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4013      	ands	r3, r2
 800512c:	d016      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800512e:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005132:	4a15      	ldr	r2, [pc, #84]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800513e:	430a      	orrs	r2, r1
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	01db      	lsls	r3, r3, #7
 800514a:	429a      	cmp	r2, r3
 800514c:	d106      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800514e:	4b07      	ldr	r3, [pc, #28]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005154:	2180      	movs	r1, #128	@ 0x80
 8005156:	0249      	lsls	r1, r1, #9
 8005158:	430a      	orrs	r2, r1
 800515a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800515c:	2312      	movs	r3, #18
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	781b      	ldrb	r3, [r3, #0]
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b006      	add	sp, #24
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	40021000 	.word	0x40021000
 8005170:	40007000 	.word	0x40007000
 8005174:	fffffcff 	.word	0xfffffcff
 8005178:	fffeffff 	.word	0xfffeffff
 800517c:	00001388 	.word	0x00001388
 8005180:	efffffff 	.word	0xefffffff
 8005184:	ffffcfff 	.word	0xffffcfff
 8005188:	ffff3fff 	.word	0xffff3fff

0800518c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800518c:	b5b0      	push	{r4, r5, r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005194:	230f      	movs	r3, #15
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d100      	bne.n	80051a4 <HAL_RTC_Init+0x18>
 80051a2:	e08c      	b.n	80052be <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2229      	movs	r2, #41	@ 0x29
 80051a8:	5c9b      	ldrb	r3, [r3, r2]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2228      	movs	r2, #40	@ 0x28
 80051b4:	2100      	movs	r1, #0
 80051b6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2288      	movs	r2, #136	@ 0x88
 80051bc:	0212      	lsls	r2, r2, #8
 80051be:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fc fee2 	bl	8001f8c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2229      	movs	r2, #41	@ 0x29
 80051cc:	2102      	movs	r1, #2
 80051ce:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2210      	movs	r2, #16
 80051d8:	4013      	ands	r3, r2
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d062      	beq.n	80052a4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	22ca      	movs	r2, #202	@ 0xca
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2253      	movs	r2, #83	@ 0x53
 80051ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80051ee:	250f      	movs	r5, #15
 80051f0:	197c      	adds	r4, r7, r5
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 fa75 	bl	80056e4 <RTC_EnterInitMode>
 80051fa:	0003      	movs	r3, r0
 80051fc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80051fe:	0028      	movs	r0, r5
 8005200:	183b      	adds	r3, r7, r0
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d12c      	bne.n	8005262 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	492e      	ldr	r1, [pc, #184]	@ (80052cc <HAL_RTC_Init+0x140>)
 8005214:	400a      	ands	r2, r1
 8005216:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6912      	ldr	r2, [r2, #16]
 800523e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6919      	ldr	r1, [r3, #16]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	041a      	lsls	r2, r3, #16
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005254:	183c      	adds	r4, r7, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 fa85 	bl	8005768 <RTC_ExitInitMode>
 800525e:	0003      	movs	r3, r0
 8005260:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005262:	230f      	movs	r3, #15
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d116      	bne.n	800529a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	00d2      	lsls	r2, r2, #3
 8005278:	08d2      	lsrs	r2, r2, #3
 800527a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6999      	ldr	r1, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	22ff      	movs	r2, #255	@ 0xff
 80052a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80052a2:	e003      	b.n	80052ac <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80052a4:	230f      	movs	r3, #15
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80052ac:	230f      	movs	r3, #15
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2229      	movs	r2, #41	@ 0x29
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80052be:	230f      	movs	r3, #15
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	781b      	ldrb	r3, [r3, #0]
}
 80052c4:	0018      	movs	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b004      	add	sp, #16
 80052ca:	bdb0      	pop	{r4, r5, r7, pc}
 80052cc:	fb8fffbf 	.word	0xfb8fffbf

080052d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052d0:	b5b0      	push	{r4, r5, r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2228      	movs	r2, #40	@ 0x28
 80052e0:	5c9b      	ldrb	r3, [r3, r2]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_RTC_SetTime+0x1a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e092      	b.n	8005410 <HAL_RTC_SetTime+0x140>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2228      	movs	r2, #40	@ 0x28
 80052ee:	2101      	movs	r1, #1
 80052f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2229      	movs	r2, #41	@ 0x29
 80052f6:	2102      	movs	r1, #2
 80052f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	22ca      	movs	r2, #202	@ 0xca
 8005300:	625a      	str	r2, [r3, #36]	@ 0x24
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2253      	movs	r2, #83	@ 0x53
 8005308:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800530a:	2513      	movs	r5, #19
 800530c:	197c      	adds	r4, r7, r5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	0018      	movs	r0, r3
 8005312:	f000 f9e7 	bl	80056e4 <RTC_EnterInitMode>
 8005316:	0003      	movs	r3, r0
 8005318:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800531a:	197b      	adds	r3, r7, r5
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d162      	bne.n	80053e8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d125      	bne.n	8005374 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2240      	movs	r2, #64	@ 0x40
 8005330:	4013      	ands	r3, r2
 8005332:	d102      	bne.n	800533a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	0018      	movs	r0, r3
 8005340:	f000 fa56 	bl	80057f0 <RTC_ByteToBcd2>
 8005344:	0003      	movs	r3, r0
 8005346:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 fa4f 	bl	80057f0 <RTC_ByteToBcd2>
 8005352:	0003      	movs	r3, r0
 8005354:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005356:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	789b      	ldrb	r3, [r3, #2]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 fa47 	bl	80057f0 <RTC_ByteToBcd2>
 8005362:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005364:	0022      	movs	r2, r4
 8005366:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	78db      	ldrb	r3, [r3, #3]
 800536c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e017      	b.n	80053a4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2240      	movs	r2, #64	@ 0x40
 800537c:	4013      	ands	r3, r2
 800537e:	d102      	bne.n	8005386 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005392:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005398:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	78db      	ldrb	r3, [r3, #3]
 800539e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	491b      	ldr	r1, [pc, #108]	@ (8005418 <HAL_RTC_SetTime+0x148>)
 80053ac:	400a      	ands	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4918      	ldr	r1, [pc, #96]	@ (800541c <HAL_RTC_SetTime+0x14c>)
 80053bc:	400a      	ands	r2, r1
 80053be:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053d8:	2313      	movs	r3, #19
 80053da:	18fc      	adds	r4, r7, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f9c2 	bl	8005768 <RTC_ExitInitMode>
 80053e4:	0003      	movs	r3, r0
 80053e6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	22ff      	movs	r2, #255	@ 0xff
 80053ee:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80053f0:	2313      	movs	r3, #19
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2229      	movs	r2, #41	@ 0x29
 80053fe:	2101      	movs	r1, #1
 8005400:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2228      	movs	r2, #40	@ 0x28
 8005406:	2100      	movs	r1, #0
 8005408:	5499      	strb	r1, [r3, r2]

  return status;
 800540a:	2313      	movs	r3, #19
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	781b      	ldrb	r3, [r3, #0]
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b006      	add	sp, #24
 8005416:	bdb0      	pop	{r4, r5, r7, pc}
 8005418:	007f7f7f 	.word	0x007f7f7f
 800541c:	fffbffff 	.word	0xfffbffff

08005420 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	045b      	lsls	r3, r3, #17
 800543e:	0c5a      	lsrs	r2, r3, #17
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a22      	ldr	r2, [pc, #136]	@ (80054d4 <HAL_RTC_GetTime+0xb4>)
 800544c:	4013      	ands	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	b2db      	uxtb	r3, r3
 8005456:	223f      	movs	r2, #63	@ 0x3f
 8005458:	4013      	ands	r3, r2
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	b2db      	uxtb	r3, r3
 8005466:	227f      	movs	r2, #127	@ 0x7f
 8005468:	4013      	ands	r3, r2
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	227f      	movs	r2, #127	@ 0x7f
 8005476:	4013      	ands	r3, r2
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	0d9b      	lsrs	r3, r3, #22
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2201      	movs	r2, #1
 8005486:	4013      	ands	r3, r2
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	0018      	movs	r0, r3
 800549a:	f000 f9d1 	bl	8005840 <RTC_Bcd2ToByte>
 800549e:	0003      	movs	r3, r0
 80054a0:	001a      	movs	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 f9c8 	bl	8005840 <RTC_Bcd2ToByte>
 80054b0:	0003      	movs	r3, r0
 80054b2:	001a      	movs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	789b      	ldrb	r3, [r3, #2]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 f9bf 	bl	8005840 <RTC_Bcd2ToByte>
 80054c2:	0003      	movs	r3, r0
 80054c4:	001a      	movs	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b006      	add	sp, #24
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	007f7f7f 	.word	0x007f7f7f

080054d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054d8:	b5b0      	push	{r4, r5, r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2228      	movs	r2, #40	@ 0x28
 80054e8:	5c9b      	ldrb	r3, [r3, r2]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_RTC_SetDate+0x1a>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e07e      	b.n	80055f0 <HAL_RTC_SetDate+0x118>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2228      	movs	r2, #40	@ 0x28
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2229      	movs	r2, #41	@ 0x29
 80054fe:	2102      	movs	r1, #2
 8005500:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10e      	bne.n	8005526 <HAL_RTC_SetDate+0x4e>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	001a      	movs	r2, r3
 800550e:	2310      	movs	r3, #16
 8005510:	4013      	ands	r3, r2
 8005512:	d008      	beq.n	8005526 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	2210      	movs	r2, #16
 800551a:	4393      	bics	r3, r2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	330a      	adds	r3, #10
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d11c      	bne.n	8005566 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	78db      	ldrb	r3, [r3, #3]
 8005530:	0018      	movs	r0, r3
 8005532:	f000 f95d 	bl	80057f0 <RTC_ByteToBcd2>
 8005536:	0003      	movs	r3, r0
 8005538:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	0018      	movs	r0, r3
 8005540:	f000 f956 	bl	80057f0 <RTC_ByteToBcd2>
 8005544:	0003      	movs	r3, r0
 8005546:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005548:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	789b      	ldrb	r3, [r3, #2]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 f94e 	bl	80057f0 <RTC_ByteToBcd2>
 8005554:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005556:	0022      	movs	r2, r4
 8005558:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e00e      	b.n	8005584 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	78db      	ldrb	r3, [r3, #3]
 800556a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005572:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005578:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	22ca      	movs	r2, #202	@ 0xca
 800558a:	625a      	str	r2, [r3, #36]	@ 0x24
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2253      	movs	r2, #83	@ 0x53
 8005592:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005594:	2513      	movs	r5, #19
 8005596:	197c      	adds	r4, r7, r5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	0018      	movs	r0, r3
 800559c:	f000 f8a2 	bl	80056e4 <RTC_EnterInitMode>
 80055a0:	0003      	movs	r3, r0
 80055a2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80055a4:	0028      	movs	r0, r5
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4910      	ldr	r1, [pc, #64]	@ (80055f8 <HAL_RTC_SetDate+0x120>)
 80055b6:	400a      	ands	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055ba:	183c      	adds	r4, r7, r0
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	0018      	movs	r0, r3
 80055c0:	f000 f8d2 	bl	8005768 <RTC_ExitInitMode>
 80055c4:	0003      	movs	r3, r0
 80055c6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	22ff      	movs	r2, #255	@ 0xff
 80055ce:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80055d0:	2313      	movs	r3, #19
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2229      	movs	r2, #41	@ 0x29
 80055de:	2101      	movs	r1, #1
 80055e0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2228      	movs	r2, #40	@ 0x28
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]

  return status;
 80055ea:	2313      	movs	r3, #19
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b006      	add	sp, #24
 80055f6:	bdb0      	pop	{r4, r5, r7, pc}
 80055f8:	00ffff3f 	.word	0x00ffff3f

080055fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4a21      	ldr	r2, [pc, #132]	@ (8005694 <HAL_RTC_GetDate+0x98>)
 8005610:	4013      	ands	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	b2db      	uxtb	r3, r3
 8005624:	221f      	movs	r2, #31
 8005626:	4013      	ands	r3, r2
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	223f      	movs	r2, #63	@ 0x3f
 8005634:	4013      	ands	r3, r2
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	0b5b      	lsrs	r3, r3, #13
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2207      	movs	r2, #7
 8005644:	4013      	ands	r3, r2
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11a      	bne.n	8005688 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	78db      	ldrb	r3, [r3, #3]
 8005656:	0018      	movs	r0, r3
 8005658:	f000 f8f2 	bl	8005840 <RTC_Bcd2ToByte>
 800565c:	0003      	movs	r3, r0
 800565e:	001a      	movs	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	0018      	movs	r0, r3
 800566a:	f000 f8e9 	bl	8005840 <RTC_Bcd2ToByte>
 800566e:	0003      	movs	r3, r0
 8005670:	001a      	movs	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f8e0 	bl	8005840 <RTC_Bcd2ToByte>
 8005680:	0003      	movs	r3, r0
 8005682:	001a      	movs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	b006      	add	sp, #24
 8005690:	bd80      	pop	{r7, pc}
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	00ffff3f 	.word	0x00ffff3f

08005698 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0e      	ldr	r2, [pc, #56]	@ (80056e0 <HAL_RTC_WaitForSynchro+0x48>)
 80056a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056a8:	f7fc fe08 	bl	80022bc <HAL_GetTick>
 80056ac:	0003      	movs	r3, r0
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80056b0:	e00a      	b.n	80056c8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80056b2:	f7fc fe03 	bl	80022bc <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	23fa      	movs	r3, #250	@ 0xfa
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d901      	bls.n	80056c8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	4013      	ands	r3, r2
 80056d2:	d0ee      	beq.n	80056b2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	b004      	add	sp, #16
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	0001005f 	.word	0x0001005f

080056e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80056ec:	230f      	movs	r3, #15
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	4013      	ands	r3, r2
 80056fe:	d12c      	bne.n	800575a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	430a      	orrs	r2, r1
 800570e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005710:	f7fc fdd4 	bl	80022bc <HAL_GetTick>
 8005714:	0003      	movs	r3, r0
 8005716:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005718:	e014      	b.n	8005744 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800571a:	f7fc fdcf 	bl	80022bc <HAL_GetTick>
 800571e:	0002      	movs	r2, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1ad2      	subs	r2, r2, r3
 8005724:	200f      	movs	r0, #15
 8005726:	183b      	adds	r3, r7, r0
 8005728:	1839      	adds	r1, r7, r0
 800572a:	7809      	ldrb	r1, [r1, #0]
 800572c:	7019      	strb	r1, [r3, #0]
 800572e:	23fa      	movs	r3, #250	@ 0xfa
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	429a      	cmp	r2, r3
 8005734:	d906      	bls.n	8005744 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005736:	183b      	adds	r3, r7, r0
 8005738:	2203      	movs	r2, #3
 800573a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2229      	movs	r2, #41	@ 0x29
 8005740:	2103      	movs	r1, #3
 8005742:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2240      	movs	r2, #64	@ 0x40
 800574c:	4013      	ands	r3, r2
 800574e:	d104      	bne.n	800575a <RTC_EnterInitMode+0x76>
 8005750:	230f      	movs	r3, #15
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d1df      	bne.n	800571a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800575a:	230f      	movs	r3, #15
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	781b      	ldrb	r3, [r3, #0]
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b004      	add	sp, #16
 8005766:	bd80      	pop	{r7, pc}

08005768 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	240f      	movs	r4, #15
 8005772:	193b      	adds	r3, r7, r4
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005778:	4b1c      	ldr	r3, [pc, #112]	@ (80057ec <RTC_ExitInitMode+0x84>)
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ec <RTC_ExitInitMode+0x84>)
 800577e:	2180      	movs	r1, #128	@ 0x80
 8005780:	438a      	bics	r2, r1
 8005782:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005784:	4b19      	ldr	r3, [pc, #100]	@ (80057ec <RTC_ExitInitMode+0x84>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2220      	movs	r2, #32
 800578a:	4013      	ands	r3, r2
 800578c:	d10d      	bne.n	80057aa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0018      	movs	r0, r3
 8005792:	f7ff ff81 	bl	8005698 <HAL_RTC_WaitForSynchro>
 8005796:	1e03      	subs	r3, r0, #0
 8005798:	d021      	beq.n	80057de <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2229      	movs	r2, #41	@ 0x29
 800579e:	2103      	movs	r1, #3
 80057a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80057a2:	193b      	adds	r3, r7, r4
 80057a4:	2203      	movs	r2, #3
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e019      	b.n	80057de <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <RTC_ExitInitMode+0x84>)
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	4b0f      	ldr	r3, [pc, #60]	@ (80057ec <RTC_ExitInitMode+0x84>)
 80057b0:	2120      	movs	r1, #32
 80057b2:	438a      	bics	r2, r1
 80057b4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7ff ff6d 	bl	8005698 <HAL_RTC_WaitForSynchro>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	d007      	beq.n	80057d2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2229      	movs	r2, #41	@ 0x29
 80057c6:	2103      	movs	r1, #3
 80057c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80057ca:	230f      	movs	r3, #15
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	2203      	movs	r2, #3
 80057d0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057d2:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <RTC_ExitInitMode+0x84>)
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <RTC_ExitInitMode+0x84>)
 80057d8:	2120      	movs	r1, #32
 80057da:	430a      	orrs	r2, r1
 80057dc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80057de:	230f      	movs	r3, #15
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	781b      	ldrb	r3, [r3, #0]
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b005      	add	sp, #20
 80057ea:	bd90      	pop	{r4, r7, pc}
 80057ec:	40002800 	.word	0x40002800

080057f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0002      	movs	r2, r0
 80057f8:	1dfb      	adds	r3, r7, #7
 80057fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005800:	230b      	movs	r3, #11
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	1dfa      	adds	r2, r7, #7
 8005806:	7812      	ldrb	r2, [r2, #0]
 8005808:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800580a:	e008      	b.n	800581e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005812:	220b      	movs	r2, #11
 8005814:	18bb      	adds	r3, r7, r2
 8005816:	18ba      	adds	r2, r7, r2
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	3a0a      	subs	r2, #10
 800581c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800581e:	210b      	movs	r1, #11
 8005820:	187b      	adds	r3, r7, r1
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b09      	cmp	r3, #9
 8005826:	d8f1      	bhi.n	800580c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	b2da      	uxtb	r2, r3
 8005830:	187b      	adds	r3, r7, r1
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	b2db      	uxtb	r3, r3
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b004      	add	sp, #16
 800583e:	bd80      	pop	{r7, pc}

08005840 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	0002      	movs	r2, r0
 8005848:	1dfb      	adds	r3, r7, #7
 800584a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	b2db      	uxtb	r3, r3
 8005854:	001a      	movs	r2, r3
 8005856:	0013      	movs	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	189b      	adds	r3, r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	1dfb      	adds	r3, r7, #7
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	210f      	movs	r1, #15
 800586a:	400b      	ands	r3, r1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	18d3      	adds	r3, r2, r3
 8005870:	b2db      	uxtb	r3, r3
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b004      	add	sp, #16
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e04a      	b.n	8005922 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	223d      	movs	r2, #61	@ 0x3d
 8005890:	5c9b      	ldrb	r3, [r3, r2]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	223c      	movs	r2, #60	@ 0x3c
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7fc fbb0 	bl	8002008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	223d      	movs	r2, #61	@ 0x3d
 80058ac:	2102      	movs	r1, #2
 80058ae:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	0019      	movs	r1, r3
 80058ba:	0010      	movs	r0, r2
 80058bc:	f000 f9b4 	bl	8005c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2248      	movs	r2, #72	@ 0x48
 80058c4:	2101      	movs	r1, #1
 80058c6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	223e      	movs	r2, #62	@ 0x3e
 80058cc:	2101      	movs	r1, #1
 80058ce:	5499      	strb	r1, [r3, r2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	223f      	movs	r2, #63	@ 0x3f
 80058d4:	2101      	movs	r1, #1
 80058d6:	5499      	strb	r1, [r3, r2]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2240      	movs	r2, #64	@ 0x40
 80058dc:	2101      	movs	r1, #1
 80058de:	5499      	strb	r1, [r3, r2]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2241      	movs	r2, #65	@ 0x41
 80058e4:	2101      	movs	r1, #1
 80058e6:	5499      	strb	r1, [r3, r2]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2242      	movs	r2, #66	@ 0x42
 80058ec:	2101      	movs	r1, #1
 80058ee:	5499      	strb	r1, [r3, r2]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2243      	movs	r2, #67	@ 0x43
 80058f4:	2101      	movs	r1, #1
 80058f6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2244      	movs	r2, #68	@ 0x44
 80058fc:	2101      	movs	r1, #1
 80058fe:	5499      	strb	r1, [r3, r2]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2245      	movs	r2, #69	@ 0x45
 8005904:	2101      	movs	r1, #1
 8005906:	5499      	strb	r1, [r3, r2]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2246      	movs	r2, #70	@ 0x46
 800590c:	2101      	movs	r1, #1
 800590e:	5499      	strb	r1, [r3, r2]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2247      	movs	r2, #71	@ 0x47
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	223d      	movs	r2, #61	@ 0x3d
 800591c:	2101      	movs	r1, #1
 800591e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b002      	add	sp, #8
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	223d      	movs	r2, #61	@ 0x3d
 8005938:	5c9b      	ldrb	r3, [r3, r2]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d001      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e037      	b.n	80059b4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	223d      	movs	r2, #61	@ 0x3d
 8005948:	2102      	movs	r1, #2
 800594a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2101      	movs	r1, #1
 8005958:	430a      	orrs	r2, r1
 800595a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <HAL_TIM_Base_Start_IT+0x90>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIM_Base_Start_IT+0x44>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <HAL_TIM_Base_Start_IT+0x94>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d116      	bne.n	800599e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <HAL_TIM_Base_Start_IT+0x98>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d016      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x84>
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	025b      	lsls	r3, r3, #9
 8005988:	429a      	cmp	r2, r3
 800598a:	d011      	beq.n	80059b0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	e008      	b.n	80059b0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2101      	movs	r1, #1
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e000      	b.n	80059b2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b004      	add	sp, #16
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	00010007 	.word	0x00010007

080059c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2202      	movs	r2, #2
 80059e4:	4013      	ands	r3, r2
 80059e6:	d021      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	4013      	ands	r3, r2
 80059ee:	d01d      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2203      	movs	r2, #3
 80059f6:	4252      	negs	r2, r2
 80059f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2203      	movs	r2, #3
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 f8f2 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e007      	b.n	8005a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 f8e5 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	0018      	movs	r0, r3
 8005a22:	f000 f8f1 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	4013      	ands	r3, r2
 8005a32:	d022      	beq.n	8005a7a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2204      	movs	r2, #4
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d01e      	beq.n	8005a7a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2205      	movs	r2, #5
 8005a42:	4252      	negs	r2, r2
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	23c0      	movs	r3, #192	@ 0xc0
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4013      	ands	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 f8cb 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 8005a62:	e007      	b.n	8005a74 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f000 f8be 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 f8ca 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d021      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2208      	movs	r2, #8
 8005a86:	4013      	ands	r3, r2
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2209      	movs	r2, #9
 8005a90:	4252      	negs	r2, r2
 8005a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2204      	movs	r2, #4
 8005a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 f8a5 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 8005aae:	e007      	b.n	8005ac0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f898 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 f8a4 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	4013      	ands	r3, r2
 8005acc:	d022      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d01e      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2211      	movs	r2, #17
 8005adc:	4252      	negs	r2, r2
 8005ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	23c0      	movs	r3, #192	@ 0xc0
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4013      	ands	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 f87e 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e007      	b.n	8005b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 f871 	bl	8005be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f87d 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2201      	movs	r2, #1
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d00c      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4013      	ands	r3, r2
 8005b22:	d008      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	4252      	negs	r2, r2
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f000 f851 	bl	8005bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2280      	movs	r2, #128	@ 0x80
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d104      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	019b      	lsls	r3, r3, #6
 8005b44:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b46:	d00b      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2280      	movs	r2, #128	@ 0x80
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd0 <HAL_TIM_IRQHandler+0x208>)
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f8e6 	bl	8005d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	2380      	movs	r3, #128	@ 0x80
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2280      	movs	r2, #128	@ 0x80
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d007      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a17      	ldr	r2, [pc, #92]	@ (8005bd4 <HAL_TIM_IRQHandler+0x20c>)
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f000 f8dd 	bl	8005d3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2240      	movs	r2, #64	@ 0x40
 8005b86:	4013      	ands	r3, r2
 8005b88:	d00c      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2240      	movs	r2, #64	@ 0x40
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d008      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2241      	movs	r2, #65	@ 0x41
 8005b98:	4252      	negs	r2, r2
 8005b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 f83a 	bl	8005c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d00c      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d008      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2221      	movs	r2, #33	@ 0x21
 8005bba:	4252      	negs	r2, r2
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 f8ab 	bl	8005d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b004      	add	sp, #16
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	ffffdf7f 	.word	0xffffdf7f
 8005bd4:	fffffeff 	.word	0xfffffeff

08005bd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005be0:	46c0      	nop			@ (mov r8, r8)
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b002      	add	sp, #8
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf0:	46c0      	nop			@ (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b002      	add	sp, #8
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c20:	46c0      	nop			@ (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b002      	add	sp, #8
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a32      	ldr	r2, [pc, #200]	@ (8005d04 <TIM_Base_SetConfig+0xdc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x20>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a31      	ldr	r2, [pc, #196]	@ (8005d08 <TIM_Base_SetConfig+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2270      	movs	r2, #112	@ 0x70
 8005c4c:	4393      	bics	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a29      	ldr	r2, [pc, #164]	@ (8005d04 <TIM_Base_SetConfig+0xdc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_Base_SetConfig+0x5a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a28      	ldr	r2, [pc, #160]	@ (8005d08 <TIM_Base_SetConfig+0xe0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_Base_SetConfig+0x5a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a27      	ldr	r2, [pc, #156]	@ (8005d0c <TIM_Base_SetConfig+0xe4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_Base_SetConfig+0x5a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a26      	ldr	r2, [pc, #152]	@ (8005d10 <TIM_Base_SetConfig+0xe8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_Base_SetConfig+0x5a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a25      	ldr	r2, [pc, #148]	@ (8005d14 <TIM_Base_SetConfig+0xec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d108      	bne.n	8005c94 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a24      	ldr	r2, [pc, #144]	@ (8005d18 <TIM_Base_SetConfig+0xf0>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2280      	movs	r2, #128	@ 0x80
 8005c98:	4393      	bics	r3, r2
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <TIM_Base_SetConfig+0xdc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_Base_SetConfig+0xaa>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a12      	ldr	r2, [pc, #72]	@ (8005d10 <TIM_Base_SetConfig+0xe8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_Base_SetConfig+0xaa>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a11      	ldr	r2, [pc, #68]	@ (8005d14 <TIM_Base_SetConfig+0xec>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d103      	bne.n	8005cda <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d106      	bne.n	8005cfa <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4393      	bics	r3, r2
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	611a      	str	r2, [r3, #16]
  }
}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b004      	add	sp, #16
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	46c0      	nop			@ (mov r8, r8)
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40002000 	.word	0x40002000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800
 8005d18:	fffffcff 	.word	0xfffffcff

08005d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d44:	46c0      	nop			@ (mov r8, r8)
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <siprintf>:
 8005d4c:	b40e      	push	{r1, r2, r3}
 8005d4e:	b510      	push	{r4, lr}
 8005d50:	2400      	movs	r4, #0
 8005d52:	490c      	ldr	r1, [pc, #48]	@ (8005d84 <siprintf+0x38>)
 8005d54:	b09d      	sub	sp, #116	@ 0x74
 8005d56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d58:	9002      	str	r0, [sp, #8]
 8005d5a:	9006      	str	r0, [sp, #24]
 8005d5c:	9107      	str	r1, [sp, #28]
 8005d5e:	9104      	str	r1, [sp, #16]
 8005d60:	4809      	ldr	r0, [pc, #36]	@ (8005d88 <siprintf+0x3c>)
 8005d62:	490a      	ldr	r1, [pc, #40]	@ (8005d8c <siprintf+0x40>)
 8005d64:	cb04      	ldmia	r3!, {r2}
 8005d66:	9105      	str	r1, [sp, #20]
 8005d68:	6800      	ldr	r0, [r0, #0]
 8005d6a:	a902      	add	r1, sp, #8
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d70:	f000 f8a2 	bl	8005eb8 <_svfiprintf_r>
 8005d74:	9b02      	ldr	r3, [sp, #8]
 8005d76:	701c      	strb	r4, [r3, #0]
 8005d78:	b01d      	add	sp, #116	@ 0x74
 8005d7a:	bc10      	pop	{r4}
 8005d7c:	bc08      	pop	{r3}
 8005d7e:	b003      	add	sp, #12
 8005d80:	4718      	bx	r3
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	7fffffff 	.word	0x7fffffff
 8005d88:	20000018 	.word	0x20000018
 8005d8c:	ffff0208 	.word	0xffff0208

08005d90 <memset>:
 8005d90:	0003      	movs	r3, r0
 8005d92:	1882      	adds	r2, r0, r2
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d100      	bne.n	8005d9a <memset+0xa>
 8005d98:	4770      	bx	lr
 8005d9a:	7019      	strb	r1, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	e7f9      	b.n	8005d94 <memset+0x4>

08005da0 <__errno>:
 8005da0:	4b01      	ldr	r3, [pc, #4]	@ (8005da8 <__errno+0x8>)
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	4770      	bx	lr
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	20000018 	.word	0x20000018

08005dac <__libc_init_array>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	2600      	movs	r6, #0
 8005db0:	4c0c      	ldr	r4, [pc, #48]	@ (8005de4 <__libc_init_array+0x38>)
 8005db2:	4d0d      	ldr	r5, [pc, #52]	@ (8005de8 <__libc_init_array+0x3c>)
 8005db4:	1b64      	subs	r4, r4, r5
 8005db6:	10a4      	asrs	r4, r4, #2
 8005db8:	42a6      	cmp	r6, r4
 8005dba:	d109      	bne.n	8005dd0 <__libc_init_array+0x24>
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	f000 fc61 	bl	8006684 <_init>
 8005dc2:	4c0a      	ldr	r4, [pc, #40]	@ (8005dec <__libc_init_array+0x40>)
 8005dc4:	4d0a      	ldr	r5, [pc, #40]	@ (8005df0 <__libc_init_array+0x44>)
 8005dc6:	1b64      	subs	r4, r4, r5
 8005dc8:	10a4      	asrs	r4, r4, #2
 8005dca:	42a6      	cmp	r6, r4
 8005dcc:	d105      	bne.n	8005dda <__libc_init_array+0x2e>
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	00b3      	lsls	r3, r6, #2
 8005dd2:	58eb      	ldr	r3, [r5, r3]
 8005dd4:	4798      	blx	r3
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7ee      	b.n	8005db8 <__libc_init_array+0xc>
 8005dda:	00b3      	lsls	r3, r6, #2
 8005ddc:	58eb      	ldr	r3, [r5, r3]
 8005dde:	4798      	blx	r3
 8005de0:	3601      	adds	r6, #1
 8005de2:	e7f2      	b.n	8005dca <__libc_init_array+0x1e>
 8005de4:	08006f50 	.word	0x08006f50
 8005de8:	08006f50 	.word	0x08006f50
 8005dec:	08006f54 	.word	0x08006f54
 8005df0:	08006f50 	.word	0x08006f50

08005df4 <__retarget_lock_acquire_recursive>:
 8005df4:	4770      	bx	lr

08005df6 <__retarget_lock_release_recursive>:
 8005df6:	4770      	bx	lr

08005df8 <__ssputs_r>:
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	688e      	ldr	r6, [r1, #8]
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	001f      	movs	r7, r3
 8005e00:	000c      	movs	r4, r1
 8005e02:	680b      	ldr	r3, [r1, #0]
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	42be      	cmp	r6, r7
 8005e0a:	d830      	bhi.n	8005e6e <__ssputs_r+0x76>
 8005e0c:	210c      	movs	r1, #12
 8005e0e:	5e62      	ldrsh	r2, [r4, r1]
 8005e10:	2190      	movs	r1, #144	@ 0x90
 8005e12:	00c9      	lsls	r1, r1, #3
 8005e14:	420a      	tst	r2, r1
 8005e16:	d028      	beq.n	8005e6a <__ssputs_r+0x72>
 8005e18:	2003      	movs	r0, #3
 8005e1a:	6921      	ldr	r1, [r4, #16]
 8005e1c:	1a5b      	subs	r3, r3, r1
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	6963      	ldr	r3, [r4, #20]
 8005e22:	4343      	muls	r3, r0
 8005e24:	9801      	ldr	r0, [sp, #4]
 8005e26:	0fdd      	lsrs	r5, r3, #31
 8005e28:	18ed      	adds	r5, r5, r3
 8005e2a:	1c7b      	adds	r3, r7, #1
 8005e2c:	181b      	adds	r3, r3, r0
 8005e2e:	106d      	asrs	r5, r5, #1
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	d900      	bls.n	8005e36 <__ssputs_r+0x3e>
 8005e34:	001d      	movs	r5, r3
 8005e36:	0552      	lsls	r2, r2, #21
 8005e38:	d528      	bpl.n	8005e8c <__ssputs_r+0x94>
 8005e3a:	0029      	movs	r1, r5
 8005e3c:	9802      	ldr	r0, [sp, #8]
 8005e3e:	f000 f95b 	bl	80060f8 <_malloc_r>
 8005e42:	1e06      	subs	r6, r0, #0
 8005e44:	d02c      	beq.n	8005ea0 <__ssputs_r+0xa8>
 8005e46:	9a01      	ldr	r2, [sp, #4]
 8005e48:	6921      	ldr	r1, [r4, #16]
 8005e4a:	f000 fbc0 	bl	80065ce <memcpy>
 8005e4e:	89a2      	ldrh	r2, [r4, #12]
 8005e50:	4b18      	ldr	r3, [pc, #96]	@ (8005eb4 <__ssputs_r+0xbc>)
 8005e52:	401a      	ands	r2, r3
 8005e54:	2380      	movs	r3, #128	@ 0x80
 8005e56:	4313      	orrs	r3, r2
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	6126      	str	r6, [r4, #16]
 8005e5e:	18f6      	adds	r6, r6, r3
 8005e60:	6026      	str	r6, [r4, #0]
 8005e62:	003e      	movs	r6, r7
 8005e64:	6165      	str	r5, [r4, #20]
 8005e66:	1aed      	subs	r5, r5, r3
 8005e68:	60a5      	str	r5, [r4, #8]
 8005e6a:	42be      	cmp	r6, r7
 8005e6c:	d900      	bls.n	8005e70 <__ssputs_r+0x78>
 8005e6e:	003e      	movs	r6, r7
 8005e70:	0032      	movs	r2, r6
 8005e72:	9903      	ldr	r1, [sp, #12]
 8005e74:	6820      	ldr	r0, [r4, #0]
 8005e76:	f000 fb7b 	bl	8006570 <memmove>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	68a3      	ldr	r3, [r4, #8]
 8005e7e:	1b9b      	subs	r3, r3, r6
 8005e80:	60a3      	str	r3, [r4, #8]
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	199b      	adds	r3, r3, r6
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	b005      	add	sp, #20
 8005e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e8c:	002a      	movs	r2, r5
 8005e8e:	9802      	ldr	r0, [sp, #8]
 8005e90:	f000 fb3e 	bl	8006510 <_realloc_r>
 8005e94:	1e06      	subs	r6, r0, #0
 8005e96:	d1e0      	bne.n	8005e5a <__ssputs_r+0x62>
 8005e98:	6921      	ldr	r1, [r4, #16]
 8005e9a:	9802      	ldr	r0, [sp, #8]
 8005e9c:	f000 fba0 	bl	80065e0 <_free_r>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	9a02      	ldr	r2, [sp, #8]
 8005ea6:	4240      	negs	r0, r0
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	89a2      	ldrh	r2, [r4, #12]
 8005eac:	3334      	adds	r3, #52	@ 0x34
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	e7e9      	b.n	8005e88 <__ssputs_r+0x90>
 8005eb4:	fffffb7f 	.word	0xfffffb7f

08005eb8 <_svfiprintf_r>:
 8005eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eba:	b0a1      	sub	sp, #132	@ 0x84
 8005ebc:	9003      	str	r0, [sp, #12]
 8005ebe:	001d      	movs	r5, r3
 8005ec0:	898b      	ldrh	r3, [r1, #12]
 8005ec2:	000f      	movs	r7, r1
 8005ec4:	0016      	movs	r6, r2
 8005ec6:	061b      	lsls	r3, r3, #24
 8005ec8:	d511      	bpl.n	8005eee <_svfiprintf_r+0x36>
 8005eca:	690b      	ldr	r3, [r1, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10e      	bne.n	8005eee <_svfiprintf_r+0x36>
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	f000 f911 	bl	80060f8 <_malloc_r>
 8005ed6:	6038      	str	r0, [r7, #0]
 8005ed8:	6138      	str	r0, [r7, #16]
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d105      	bne.n	8005eea <_svfiprintf_r+0x32>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	9a03      	ldr	r2, [sp, #12]
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	4240      	negs	r0, r0
 8005ee8:	e0cf      	b.n	800608a <_svfiprintf_r+0x1d2>
 8005eea:	2340      	movs	r3, #64	@ 0x40
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	ac08      	add	r4, sp, #32
 8005ef2:	6163      	str	r3, [r4, #20]
 8005ef4:	3320      	adds	r3, #32
 8005ef6:	7663      	strb	r3, [r4, #25]
 8005ef8:	3310      	adds	r3, #16
 8005efa:	76a3      	strb	r3, [r4, #26]
 8005efc:	9507      	str	r5, [sp, #28]
 8005efe:	0035      	movs	r5, r6
 8005f00:	782b      	ldrb	r3, [r5, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <_svfiprintf_r+0x52>
 8005f06:	2b25      	cmp	r3, #37	@ 0x25
 8005f08:	d148      	bne.n	8005f9c <_svfiprintf_r+0xe4>
 8005f0a:	1bab      	subs	r3, r5, r6
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	42b5      	cmp	r5, r6
 8005f10:	d00b      	beq.n	8005f2a <_svfiprintf_r+0x72>
 8005f12:	0032      	movs	r2, r6
 8005f14:	0039      	movs	r1, r7
 8005f16:	9803      	ldr	r0, [sp, #12]
 8005f18:	f7ff ff6e 	bl	8005df8 <__ssputs_r>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d100      	bne.n	8005f22 <_svfiprintf_r+0x6a>
 8005f20:	e0ae      	b.n	8006080 <_svfiprintf_r+0x1c8>
 8005f22:	6963      	ldr	r3, [r4, #20]
 8005f24:	9a05      	ldr	r2, [sp, #20]
 8005f26:	189b      	adds	r3, r3, r2
 8005f28:	6163      	str	r3, [r4, #20]
 8005f2a:	782b      	ldrb	r3, [r5, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d100      	bne.n	8005f32 <_svfiprintf_r+0x7a>
 8005f30:	e0a6      	b.n	8006080 <_svfiprintf_r+0x1c8>
 8005f32:	2201      	movs	r2, #1
 8005f34:	2300      	movs	r3, #0
 8005f36:	4252      	negs	r2, r2
 8005f38:	6062      	str	r2, [r4, #4]
 8005f3a:	a904      	add	r1, sp, #16
 8005f3c:	3254      	adds	r2, #84	@ 0x54
 8005f3e:	1852      	adds	r2, r2, r1
 8005f40:	1c6e      	adds	r6, r5, #1
 8005f42:	6023      	str	r3, [r4, #0]
 8005f44:	60e3      	str	r3, [r4, #12]
 8005f46:	60a3      	str	r3, [r4, #8]
 8005f48:	7013      	strb	r3, [r2, #0]
 8005f4a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005f4c:	4b54      	ldr	r3, [pc, #336]	@ (80060a0 <_svfiprintf_r+0x1e8>)
 8005f4e:	2205      	movs	r2, #5
 8005f50:	0018      	movs	r0, r3
 8005f52:	7831      	ldrb	r1, [r6, #0]
 8005f54:	9305      	str	r3, [sp, #20]
 8005f56:	f000 fb2f 	bl	80065b8 <memchr>
 8005f5a:	1c75      	adds	r5, r6, #1
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d11f      	bne.n	8005fa0 <_svfiprintf_r+0xe8>
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	06d3      	lsls	r3, r2, #27
 8005f64:	d504      	bpl.n	8005f70 <_svfiprintf_r+0xb8>
 8005f66:	2353      	movs	r3, #83	@ 0x53
 8005f68:	a904      	add	r1, sp, #16
 8005f6a:	185b      	adds	r3, r3, r1
 8005f6c:	2120      	movs	r1, #32
 8005f6e:	7019      	strb	r1, [r3, #0]
 8005f70:	0713      	lsls	r3, r2, #28
 8005f72:	d504      	bpl.n	8005f7e <_svfiprintf_r+0xc6>
 8005f74:	2353      	movs	r3, #83	@ 0x53
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	185b      	adds	r3, r3, r1
 8005f7a:	212b      	movs	r1, #43	@ 0x2b
 8005f7c:	7019      	strb	r1, [r3, #0]
 8005f7e:	7833      	ldrb	r3, [r6, #0]
 8005f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f82:	d016      	beq.n	8005fb2 <_svfiprintf_r+0xfa>
 8005f84:	0035      	movs	r5, r6
 8005f86:	2100      	movs	r1, #0
 8005f88:	200a      	movs	r0, #10
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	782a      	ldrb	r2, [r5, #0]
 8005f8e:	1c6e      	adds	r6, r5, #1
 8005f90:	3a30      	subs	r2, #48	@ 0x30
 8005f92:	2a09      	cmp	r2, #9
 8005f94:	d950      	bls.n	8006038 <_svfiprintf_r+0x180>
 8005f96:	2900      	cmp	r1, #0
 8005f98:	d111      	bne.n	8005fbe <_svfiprintf_r+0x106>
 8005f9a:	e017      	b.n	8005fcc <_svfiprintf_r+0x114>
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	e7af      	b.n	8005f00 <_svfiprintf_r+0x48>
 8005fa0:	9b05      	ldr	r3, [sp, #20]
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	1ac0      	subs	r0, r0, r3
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4083      	lsls	r3, r0
 8005faa:	4313      	orrs	r3, r2
 8005fac:	002e      	movs	r6, r5
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	e7cc      	b.n	8005f4c <_svfiprintf_r+0x94>
 8005fb2:	9b07      	ldr	r3, [sp, #28]
 8005fb4:	1d19      	adds	r1, r3, #4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	9107      	str	r1, [sp, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	db01      	blt.n	8005fc2 <_svfiprintf_r+0x10a>
 8005fbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fc0:	e004      	b.n	8005fcc <_svfiprintf_r+0x114>
 8005fc2:	425b      	negs	r3, r3
 8005fc4:	60e3      	str	r3, [r4, #12]
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	782b      	ldrb	r3, [r5, #0]
 8005fce:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fd0:	d10c      	bne.n	8005fec <_svfiprintf_r+0x134>
 8005fd2:	786b      	ldrb	r3, [r5, #1]
 8005fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fd6:	d134      	bne.n	8006042 <_svfiprintf_r+0x18a>
 8005fd8:	9b07      	ldr	r3, [sp, #28]
 8005fda:	3502      	adds	r5, #2
 8005fdc:	1d1a      	adds	r2, r3, #4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	9207      	str	r2, [sp, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da01      	bge.n	8005fea <_svfiprintf_r+0x132>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	425b      	negs	r3, r3
 8005fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fec:	4e2d      	ldr	r6, [pc, #180]	@ (80060a4 <_svfiprintf_r+0x1ec>)
 8005fee:	2203      	movs	r2, #3
 8005ff0:	0030      	movs	r0, r6
 8005ff2:	7829      	ldrb	r1, [r5, #0]
 8005ff4:	f000 fae0 	bl	80065b8 <memchr>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d006      	beq.n	800600a <_svfiprintf_r+0x152>
 8005ffc:	2340      	movs	r3, #64	@ 0x40
 8005ffe:	1b80      	subs	r0, r0, r6
 8006000:	4083      	lsls	r3, r0
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	3501      	adds	r5, #1
 8006006:	4313      	orrs	r3, r2
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	7829      	ldrb	r1, [r5, #0]
 800600c:	2206      	movs	r2, #6
 800600e:	4826      	ldr	r0, [pc, #152]	@ (80060a8 <_svfiprintf_r+0x1f0>)
 8006010:	1c6e      	adds	r6, r5, #1
 8006012:	7621      	strb	r1, [r4, #24]
 8006014:	f000 fad0 	bl	80065b8 <memchr>
 8006018:	2800      	cmp	r0, #0
 800601a:	d038      	beq.n	800608e <_svfiprintf_r+0x1d6>
 800601c:	4b23      	ldr	r3, [pc, #140]	@ (80060ac <_svfiprintf_r+0x1f4>)
 800601e:	2b00      	cmp	r3, #0
 8006020:	d122      	bne.n	8006068 <_svfiprintf_r+0x1b0>
 8006022:	2207      	movs	r2, #7
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	3307      	adds	r3, #7
 8006028:	4393      	bics	r3, r2
 800602a:	3308      	adds	r3, #8
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	6963      	ldr	r3, [r4, #20]
 8006030:	9a04      	ldr	r2, [sp, #16]
 8006032:	189b      	adds	r3, r3, r2
 8006034:	6163      	str	r3, [r4, #20]
 8006036:	e762      	b.n	8005efe <_svfiprintf_r+0x46>
 8006038:	4343      	muls	r3, r0
 800603a:	0035      	movs	r5, r6
 800603c:	2101      	movs	r1, #1
 800603e:	189b      	adds	r3, r3, r2
 8006040:	e7a4      	b.n	8005f8c <_svfiprintf_r+0xd4>
 8006042:	2300      	movs	r3, #0
 8006044:	200a      	movs	r0, #10
 8006046:	0019      	movs	r1, r3
 8006048:	3501      	adds	r5, #1
 800604a:	6063      	str	r3, [r4, #4]
 800604c:	782a      	ldrb	r2, [r5, #0]
 800604e:	1c6e      	adds	r6, r5, #1
 8006050:	3a30      	subs	r2, #48	@ 0x30
 8006052:	2a09      	cmp	r2, #9
 8006054:	d903      	bls.n	800605e <_svfiprintf_r+0x1a6>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0c8      	beq.n	8005fec <_svfiprintf_r+0x134>
 800605a:	9109      	str	r1, [sp, #36]	@ 0x24
 800605c:	e7c6      	b.n	8005fec <_svfiprintf_r+0x134>
 800605e:	4341      	muls	r1, r0
 8006060:	0035      	movs	r5, r6
 8006062:	2301      	movs	r3, #1
 8006064:	1889      	adds	r1, r1, r2
 8006066:	e7f1      	b.n	800604c <_svfiprintf_r+0x194>
 8006068:	aa07      	add	r2, sp, #28
 800606a:	9200      	str	r2, [sp, #0]
 800606c:	0021      	movs	r1, r4
 800606e:	003a      	movs	r2, r7
 8006070:	4b0f      	ldr	r3, [pc, #60]	@ (80060b0 <_svfiprintf_r+0x1f8>)
 8006072:	9803      	ldr	r0, [sp, #12]
 8006074:	e000      	b.n	8006078 <_svfiprintf_r+0x1c0>
 8006076:	bf00      	nop
 8006078:	9004      	str	r0, [sp, #16]
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	d1d6      	bne.n	800602e <_svfiprintf_r+0x176>
 8006080:	89bb      	ldrh	r3, [r7, #12]
 8006082:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006084:	065b      	lsls	r3, r3, #25
 8006086:	d500      	bpl.n	800608a <_svfiprintf_r+0x1d2>
 8006088:	e72c      	b.n	8005ee4 <_svfiprintf_r+0x2c>
 800608a:	b021      	add	sp, #132	@ 0x84
 800608c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800608e:	aa07      	add	r2, sp, #28
 8006090:	9200      	str	r2, [sp, #0]
 8006092:	0021      	movs	r1, r4
 8006094:	003a      	movs	r2, r7
 8006096:	4b06      	ldr	r3, [pc, #24]	@ (80060b0 <_svfiprintf_r+0x1f8>)
 8006098:	9803      	ldr	r0, [sp, #12]
 800609a:	f000 f91d 	bl	80062d8 <_printf_i>
 800609e:	e7eb      	b.n	8006078 <_svfiprintf_r+0x1c0>
 80060a0:	08006f1c 	.word	0x08006f1c
 80060a4:	08006f22 	.word	0x08006f22
 80060a8:	08006f26 	.word	0x08006f26
 80060ac:	00000000 	.word	0x00000000
 80060b0:	08005df9 	.word	0x08005df9

080060b4 <sbrk_aligned>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	4e0f      	ldr	r6, [pc, #60]	@ (80060f4 <sbrk_aligned+0x40>)
 80060b8:	000d      	movs	r5, r1
 80060ba:	6831      	ldr	r1, [r6, #0]
 80060bc:	0004      	movs	r4, r0
 80060be:	2900      	cmp	r1, #0
 80060c0:	d102      	bne.n	80060c8 <sbrk_aligned+0x14>
 80060c2:	f000 fa67 	bl	8006594 <_sbrk_r>
 80060c6:	6030      	str	r0, [r6, #0]
 80060c8:	0029      	movs	r1, r5
 80060ca:	0020      	movs	r0, r4
 80060cc:	f000 fa62 	bl	8006594 <_sbrk_r>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d103      	bne.n	80060dc <sbrk_aligned+0x28>
 80060d4:	2501      	movs	r5, #1
 80060d6:	426d      	negs	r5, r5
 80060d8:	0028      	movs	r0, r5
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	2303      	movs	r3, #3
 80060de:	1cc5      	adds	r5, r0, #3
 80060e0:	439d      	bics	r5, r3
 80060e2:	42a8      	cmp	r0, r5
 80060e4:	d0f8      	beq.n	80060d8 <sbrk_aligned+0x24>
 80060e6:	1a29      	subs	r1, r5, r0
 80060e8:	0020      	movs	r0, r4
 80060ea:	f000 fa53 	bl	8006594 <_sbrk_r>
 80060ee:	3001      	adds	r0, #1
 80060f0:	d1f2      	bne.n	80060d8 <sbrk_aligned+0x24>
 80060f2:	e7ef      	b.n	80060d4 <sbrk_aligned+0x20>
 80060f4:	20000740 	.word	0x20000740

080060f8 <_malloc_r>:
 80060f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060fa:	2203      	movs	r2, #3
 80060fc:	1ccb      	adds	r3, r1, #3
 80060fe:	4393      	bics	r3, r2
 8006100:	3308      	adds	r3, #8
 8006102:	0005      	movs	r5, r0
 8006104:	001f      	movs	r7, r3
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d234      	bcs.n	8006174 <_malloc_r+0x7c>
 800610a:	270c      	movs	r7, #12
 800610c:	42b9      	cmp	r1, r7
 800610e:	d833      	bhi.n	8006178 <_malloc_r+0x80>
 8006110:	0028      	movs	r0, r5
 8006112:	f000 f9ed 	bl	80064f0 <__malloc_lock>
 8006116:	4e37      	ldr	r6, [pc, #220]	@ (80061f4 <_malloc_r+0xfc>)
 8006118:	6833      	ldr	r3, [r6, #0]
 800611a:	001c      	movs	r4, r3
 800611c:	2c00      	cmp	r4, #0
 800611e:	d12f      	bne.n	8006180 <_malloc_r+0x88>
 8006120:	0039      	movs	r1, r7
 8006122:	0028      	movs	r0, r5
 8006124:	f7ff ffc6 	bl	80060b4 <sbrk_aligned>
 8006128:	0004      	movs	r4, r0
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d15f      	bne.n	80061ee <_malloc_r+0xf6>
 800612e:	6834      	ldr	r4, [r6, #0]
 8006130:	9400      	str	r4, [sp, #0]
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d14a      	bne.n	80061ce <_malloc_r+0xd6>
 8006138:	2c00      	cmp	r4, #0
 800613a:	d052      	beq.n	80061e2 <_malloc_r+0xea>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	0028      	movs	r0, r5
 8006140:	18e3      	adds	r3, r4, r3
 8006142:	9900      	ldr	r1, [sp, #0]
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	f000 fa25 	bl	8006594 <_sbrk_r>
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	4283      	cmp	r3, r0
 800614e:	d148      	bne.n	80061e2 <_malloc_r+0xea>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	0028      	movs	r0, r5
 8006154:	1aff      	subs	r7, r7, r3
 8006156:	0039      	movs	r1, r7
 8006158:	f7ff ffac 	bl	80060b4 <sbrk_aligned>
 800615c:	3001      	adds	r0, #1
 800615e:	d040      	beq.n	80061e2 <_malloc_r+0xea>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	19db      	adds	r3, r3, r7
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	2a00      	cmp	r2, #0
 800616c:	d133      	bne.n	80061d6 <_malloc_r+0xde>
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	e019      	b.n	80061a8 <_malloc_r+0xb0>
 8006174:	2b00      	cmp	r3, #0
 8006176:	dac9      	bge.n	800610c <_malloc_r+0x14>
 8006178:	230c      	movs	r3, #12
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	2000      	movs	r0, #0
 800617e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	1bc9      	subs	r1, r1, r7
 8006184:	d420      	bmi.n	80061c8 <_malloc_r+0xd0>
 8006186:	290b      	cmp	r1, #11
 8006188:	d90a      	bls.n	80061a0 <_malloc_r+0xa8>
 800618a:	19e2      	adds	r2, r4, r7
 800618c:	6027      	str	r7, [r4, #0]
 800618e:	42a3      	cmp	r3, r4
 8006190:	d104      	bne.n	800619c <_malloc_r+0xa4>
 8006192:	6032      	str	r2, [r6, #0]
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	6011      	str	r1, [r2, #0]
 8006198:	6053      	str	r3, [r2, #4]
 800619a:	e005      	b.n	80061a8 <_malloc_r+0xb0>
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	e7f9      	b.n	8006194 <_malloc_r+0x9c>
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	d10e      	bne.n	80061c4 <_malloc_r+0xcc>
 80061a6:	6032      	str	r2, [r6, #0]
 80061a8:	0028      	movs	r0, r5
 80061aa:	f000 f9a9 	bl	8006500 <__malloc_unlock>
 80061ae:	0020      	movs	r0, r4
 80061b0:	2207      	movs	r2, #7
 80061b2:	300b      	adds	r0, #11
 80061b4:	1d23      	adds	r3, r4, #4
 80061b6:	4390      	bics	r0, r2
 80061b8:	1ac2      	subs	r2, r0, r3
 80061ba:	4298      	cmp	r0, r3
 80061bc:	d0df      	beq.n	800617e <_malloc_r+0x86>
 80061be:	1a1b      	subs	r3, r3, r0
 80061c0:	50a3      	str	r3, [r4, r2]
 80061c2:	e7dc      	b.n	800617e <_malloc_r+0x86>
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	e7ef      	b.n	80061a8 <_malloc_r+0xb0>
 80061c8:	0023      	movs	r3, r4
 80061ca:	6864      	ldr	r4, [r4, #4]
 80061cc:	e7a6      	b.n	800611c <_malloc_r+0x24>
 80061ce:	9c00      	ldr	r4, [sp, #0]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	e7ad      	b.n	8006132 <_malloc_r+0x3a>
 80061d6:	001a      	movs	r2, r3
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	42a3      	cmp	r3, r4
 80061dc:	d1fb      	bne.n	80061d6 <_malloc_r+0xde>
 80061de:	2300      	movs	r3, #0
 80061e0:	e7da      	b.n	8006198 <_malloc_r+0xa0>
 80061e2:	230c      	movs	r3, #12
 80061e4:	0028      	movs	r0, r5
 80061e6:	602b      	str	r3, [r5, #0]
 80061e8:	f000 f98a 	bl	8006500 <__malloc_unlock>
 80061ec:	e7c6      	b.n	800617c <_malloc_r+0x84>
 80061ee:	6007      	str	r7, [r0, #0]
 80061f0:	e7da      	b.n	80061a8 <_malloc_r+0xb0>
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	20000744 	.word	0x20000744

080061f8 <_printf_common>:
 80061f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061fa:	0016      	movs	r6, r2
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	688a      	ldr	r2, [r1, #8]
 8006200:	690b      	ldr	r3, [r1, #16]
 8006202:	000c      	movs	r4, r1
 8006204:	9000      	str	r0, [sp, #0]
 8006206:	4293      	cmp	r3, r2
 8006208:	da00      	bge.n	800620c <_printf_common+0x14>
 800620a:	0013      	movs	r3, r2
 800620c:	0022      	movs	r2, r4
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	3243      	adds	r2, #67	@ 0x43
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	2a00      	cmp	r2, #0
 8006216:	d001      	beq.n	800621c <_printf_common+0x24>
 8006218:	3301      	adds	r3, #1
 800621a:	6033      	str	r3, [r6, #0]
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	069b      	lsls	r3, r3, #26
 8006220:	d502      	bpl.n	8006228 <_printf_common+0x30>
 8006222:	6833      	ldr	r3, [r6, #0]
 8006224:	3302      	adds	r3, #2
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	2306      	movs	r3, #6
 800622c:	0015      	movs	r5, r2
 800622e:	401d      	ands	r5, r3
 8006230:	421a      	tst	r2, r3
 8006232:	d027      	beq.n	8006284 <_printf_common+0x8c>
 8006234:	0023      	movs	r3, r4
 8006236:	3343      	adds	r3, #67	@ 0x43
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	1e5a      	subs	r2, r3, #1
 800623c:	4193      	sbcs	r3, r2
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	0692      	lsls	r2, r2, #26
 8006242:	d430      	bmi.n	80062a6 <_printf_common+0xae>
 8006244:	0022      	movs	r2, r4
 8006246:	9901      	ldr	r1, [sp, #4]
 8006248:	9800      	ldr	r0, [sp, #0]
 800624a:	9d08      	ldr	r5, [sp, #32]
 800624c:	3243      	adds	r2, #67	@ 0x43
 800624e:	47a8      	blx	r5
 8006250:	3001      	adds	r0, #1
 8006252:	d025      	beq.n	80062a0 <_printf_common+0xa8>
 8006254:	2206      	movs	r2, #6
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	2500      	movs	r5, #0
 800625a:	4013      	ands	r3, r2
 800625c:	2b04      	cmp	r3, #4
 800625e:	d105      	bne.n	800626c <_printf_common+0x74>
 8006260:	6833      	ldr	r3, [r6, #0]
 8006262:	68e5      	ldr	r5, [r4, #12]
 8006264:	1aed      	subs	r5, r5, r3
 8006266:	43eb      	mvns	r3, r5
 8006268:	17db      	asrs	r3, r3, #31
 800626a:	401d      	ands	r5, r3
 800626c:	68a3      	ldr	r3, [r4, #8]
 800626e:	6922      	ldr	r2, [r4, #16]
 8006270:	4293      	cmp	r3, r2
 8006272:	dd01      	ble.n	8006278 <_printf_common+0x80>
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	18ed      	adds	r5, r5, r3
 8006278:	2600      	movs	r6, #0
 800627a:	42b5      	cmp	r5, r6
 800627c:	d120      	bne.n	80062c0 <_printf_common+0xc8>
 800627e:	2000      	movs	r0, #0
 8006280:	e010      	b.n	80062a4 <_printf_common+0xac>
 8006282:	3501      	adds	r5, #1
 8006284:	68e3      	ldr	r3, [r4, #12]
 8006286:	6832      	ldr	r2, [r6, #0]
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	42ab      	cmp	r3, r5
 800628c:	ddd2      	ble.n	8006234 <_printf_common+0x3c>
 800628e:	0022      	movs	r2, r4
 8006290:	2301      	movs	r3, #1
 8006292:	9901      	ldr	r1, [sp, #4]
 8006294:	9800      	ldr	r0, [sp, #0]
 8006296:	9f08      	ldr	r7, [sp, #32]
 8006298:	3219      	adds	r2, #25
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	d1f0      	bne.n	8006282 <_printf_common+0x8a>
 80062a0:	2001      	movs	r0, #1
 80062a2:	4240      	negs	r0, r0
 80062a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062a6:	2030      	movs	r0, #48	@ 0x30
 80062a8:	18e1      	adds	r1, r4, r3
 80062aa:	3143      	adds	r1, #67	@ 0x43
 80062ac:	7008      	strb	r0, [r1, #0]
 80062ae:	0021      	movs	r1, r4
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	3145      	adds	r1, #69	@ 0x45
 80062b4:	7809      	ldrb	r1, [r1, #0]
 80062b6:	18a2      	adds	r2, r4, r2
 80062b8:	3243      	adds	r2, #67	@ 0x43
 80062ba:	3302      	adds	r3, #2
 80062bc:	7011      	strb	r1, [r2, #0]
 80062be:	e7c1      	b.n	8006244 <_printf_common+0x4c>
 80062c0:	0022      	movs	r2, r4
 80062c2:	2301      	movs	r3, #1
 80062c4:	9901      	ldr	r1, [sp, #4]
 80062c6:	9800      	ldr	r0, [sp, #0]
 80062c8:	9f08      	ldr	r7, [sp, #32]
 80062ca:	321a      	adds	r2, #26
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xa8>
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7d1      	b.n	800627a <_printf_common+0x82>
	...

080062d8 <_printf_i>:
 80062d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062da:	b08b      	sub	sp, #44	@ 0x2c
 80062dc:	9206      	str	r2, [sp, #24]
 80062de:	000a      	movs	r2, r1
 80062e0:	3243      	adds	r2, #67	@ 0x43
 80062e2:	9307      	str	r3, [sp, #28]
 80062e4:	9005      	str	r0, [sp, #20]
 80062e6:	9203      	str	r2, [sp, #12]
 80062e8:	7e0a      	ldrb	r2, [r1, #24]
 80062ea:	000c      	movs	r4, r1
 80062ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062ee:	2a78      	cmp	r2, #120	@ 0x78
 80062f0:	d809      	bhi.n	8006306 <_printf_i+0x2e>
 80062f2:	2a62      	cmp	r2, #98	@ 0x62
 80062f4:	d80b      	bhi.n	800630e <_printf_i+0x36>
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	d100      	bne.n	80062fc <_printf_i+0x24>
 80062fa:	e0ba      	b.n	8006472 <_printf_i+0x19a>
 80062fc:	497a      	ldr	r1, [pc, #488]	@ (80064e8 <_printf_i+0x210>)
 80062fe:	9104      	str	r1, [sp, #16]
 8006300:	2a58      	cmp	r2, #88	@ 0x58
 8006302:	d100      	bne.n	8006306 <_printf_i+0x2e>
 8006304:	e08e      	b.n	8006424 <_printf_i+0x14c>
 8006306:	0025      	movs	r5, r4
 8006308:	3542      	adds	r5, #66	@ 0x42
 800630a:	702a      	strb	r2, [r5, #0]
 800630c:	e022      	b.n	8006354 <_printf_i+0x7c>
 800630e:	0010      	movs	r0, r2
 8006310:	3863      	subs	r0, #99	@ 0x63
 8006312:	2815      	cmp	r0, #21
 8006314:	d8f7      	bhi.n	8006306 <_printf_i+0x2e>
 8006316:	f7f9 fef3 	bl	8000100 <__gnu_thumb1_case_shi>
 800631a:	0016      	.short	0x0016
 800631c:	fff6001f 	.word	0xfff6001f
 8006320:	fff6fff6 	.word	0xfff6fff6
 8006324:	001ffff6 	.word	0x001ffff6
 8006328:	fff6fff6 	.word	0xfff6fff6
 800632c:	fff6fff6 	.word	0xfff6fff6
 8006330:	0036009f 	.word	0x0036009f
 8006334:	fff6007e 	.word	0xfff6007e
 8006338:	00b0fff6 	.word	0x00b0fff6
 800633c:	0036fff6 	.word	0x0036fff6
 8006340:	fff6fff6 	.word	0xfff6fff6
 8006344:	0082      	.short	0x0082
 8006346:	0025      	movs	r5, r4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	3542      	adds	r5, #66	@ 0x42
 800634c:	1d11      	adds	r1, r2, #4
 800634e:	6019      	str	r1, [r3, #0]
 8006350:	6813      	ldr	r3, [r2, #0]
 8006352:	702b      	strb	r3, [r5, #0]
 8006354:	2301      	movs	r3, #1
 8006356:	e09e      	b.n	8006496 <_printf_i+0x1be>
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	6809      	ldr	r1, [r1, #0]
 800635c:	1d02      	adds	r2, r0, #4
 800635e:	060d      	lsls	r5, r1, #24
 8006360:	d50b      	bpl.n	800637a <_printf_i+0xa2>
 8006362:	6806      	ldr	r6, [r0, #0]
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	2e00      	cmp	r6, #0
 8006368:	da03      	bge.n	8006372 <_printf_i+0x9a>
 800636a:	232d      	movs	r3, #45	@ 0x2d
 800636c:	9a03      	ldr	r2, [sp, #12]
 800636e:	4276      	negs	r6, r6
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	4b5d      	ldr	r3, [pc, #372]	@ (80064e8 <_printf_i+0x210>)
 8006374:	270a      	movs	r7, #10
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	e018      	b.n	80063ac <_printf_i+0xd4>
 800637a:	6806      	ldr	r6, [r0, #0]
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	0649      	lsls	r1, r1, #25
 8006380:	d5f1      	bpl.n	8006366 <_printf_i+0x8e>
 8006382:	b236      	sxth	r6, r6
 8006384:	e7ef      	b.n	8006366 <_printf_i+0x8e>
 8006386:	6808      	ldr	r0, [r1, #0]
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	c940      	ldmia	r1!, {r6}
 800638c:	0605      	lsls	r5, r0, #24
 800638e:	d402      	bmi.n	8006396 <_printf_i+0xbe>
 8006390:	0640      	lsls	r0, r0, #25
 8006392:	d500      	bpl.n	8006396 <_printf_i+0xbe>
 8006394:	b2b6      	uxth	r6, r6
 8006396:	6019      	str	r1, [r3, #0]
 8006398:	4b53      	ldr	r3, [pc, #332]	@ (80064e8 <_printf_i+0x210>)
 800639a:	270a      	movs	r7, #10
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	2a6f      	cmp	r2, #111	@ 0x6f
 80063a0:	d100      	bne.n	80063a4 <_printf_i+0xcc>
 80063a2:	3f02      	subs	r7, #2
 80063a4:	0023      	movs	r3, r4
 80063a6:	2200      	movs	r2, #0
 80063a8:	3343      	adds	r3, #67	@ 0x43
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	60a3      	str	r3, [r4, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	db06      	blt.n	80063c2 <_printf_i+0xea>
 80063b4:	2104      	movs	r1, #4
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	9d03      	ldr	r5, [sp, #12]
 80063ba:	438a      	bics	r2, r1
 80063bc:	6022      	str	r2, [r4, #0]
 80063be:	4333      	orrs	r3, r6
 80063c0:	d00c      	beq.n	80063dc <_printf_i+0x104>
 80063c2:	9d03      	ldr	r5, [sp, #12]
 80063c4:	0030      	movs	r0, r6
 80063c6:	0039      	movs	r1, r7
 80063c8:	f7f9 ff2a 	bl	8000220 <__aeabi_uidivmod>
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	3d01      	subs	r5, #1
 80063d0:	5c5b      	ldrb	r3, [r3, r1]
 80063d2:	702b      	strb	r3, [r5, #0]
 80063d4:	0033      	movs	r3, r6
 80063d6:	0006      	movs	r6, r0
 80063d8:	429f      	cmp	r7, r3
 80063da:	d9f3      	bls.n	80063c4 <_printf_i+0xec>
 80063dc:	2f08      	cmp	r7, #8
 80063de:	d109      	bne.n	80063f4 <_printf_i+0x11c>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	07db      	lsls	r3, r3, #31
 80063e4:	d506      	bpl.n	80063f4 <_printf_i+0x11c>
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	dc02      	bgt.n	80063f4 <_printf_i+0x11c>
 80063ee:	2330      	movs	r3, #48	@ 0x30
 80063f0:	3d01      	subs	r5, #1
 80063f2:	702b      	strb	r3, [r5, #0]
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	1b5b      	subs	r3, r3, r5
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	9b07      	ldr	r3, [sp, #28]
 80063fc:	0021      	movs	r1, r4
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	9805      	ldr	r0, [sp, #20]
 8006402:	9b06      	ldr	r3, [sp, #24]
 8006404:	aa09      	add	r2, sp, #36	@ 0x24
 8006406:	f7ff fef7 	bl	80061f8 <_printf_common>
 800640a:	3001      	adds	r0, #1
 800640c:	d148      	bne.n	80064a0 <_printf_i+0x1c8>
 800640e:	2001      	movs	r0, #1
 8006410:	4240      	negs	r0, r0
 8006412:	b00b      	add	sp, #44	@ 0x2c
 8006414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006416:	2220      	movs	r2, #32
 8006418:	6809      	ldr	r1, [r1, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	2278      	movs	r2, #120	@ 0x78
 8006420:	4932      	ldr	r1, [pc, #200]	@ (80064ec <_printf_i+0x214>)
 8006422:	9104      	str	r1, [sp, #16]
 8006424:	0021      	movs	r1, r4
 8006426:	3145      	adds	r1, #69	@ 0x45
 8006428:	700a      	strb	r2, [r1, #0]
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	c940      	ldmia	r1!, {r6}
 8006430:	0610      	lsls	r0, r2, #24
 8006432:	d402      	bmi.n	800643a <_printf_i+0x162>
 8006434:	0650      	lsls	r0, r2, #25
 8006436:	d500      	bpl.n	800643a <_printf_i+0x162>
 8006438:	b2b6      	uxth	r6, r6
 800643a:	6019      	str	r1, [r3, #0]
 800643c:	07d3      	lsls	r3, r2, #31
 800643e:	d502      	bpl.n	8006446 <_printf_i+0x16e>
 8006440:	2320      	movs	r3, #32
 8006442:	4313      	orrs	r3, r2
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	2e00      	cmp	r6, #0
 8006448:	d001      	beq.n	800644e <_printf_i+0x176>
 800644a:	2710      	movs	r7, #16
 800644c:	e7aa      	b.n	80063a4 <_printf_i+0xcc>
 800644e:	2220      	movs	r2, #32
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	4393      	bics	r3, r2
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	e7f8      	b.n	800644a <_printf_i+0x172>
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	680d      	ldr	r5, [r1, #0]
 800645c:	1d10      	adds	r0, r2, #4
 800645e:	6949      	ldr	r1, [r1, #20]
 8006460:	6018      	str	r0, [r3, #0]
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	062e      	lsls	r6, r5, #24
 8006466:	d501      	bpl.n	800646c <_printf_i+0x194>
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	e002      	b.n	8006472 <_printf_i+0x19a>
 800646c:	066d      	lsls	r5, r5, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0x190>
 8006470:	8019      	strh	r1, [r3, #0]
 8006472:	2300      	movs	r3, #0
 8006474:	9d03      	ldr	r5, [sp, #12]
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	e7bf      	b.n	80063fa <_printf_i+0x122>
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	1d11      	adds	r1, r2, #4
 800647e:	6019      	str	r1, [r3, #0]
 8006480:	6815      	ldr	r5, [r2, #0]
 8006482:	2100      	movs	r1, #0
 8006484:	0028      	movs	r0, r5
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	f000 f896 	bl	80065b8 <memchr>
 800648c:	2800      	cmp	r0, #0
 800648e:	d001      	beq.n	8006494 <_printf_i+0x1bc>
 8006490:	1b40      	subs	r0, r0, r5
 8006492:	6060      	str	r0, [r4, #4]
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2300      	movs	r3, #0
 800649a:	9a03      	ldr	r2, [sp, #12]
 800649c:	7013      	strb	r3, [r2, #0]
 800649e:	e7ac      	b.n	80063fa <_printf_i+0x122>
 80064a0:	002a      	movs	r2, r5
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	9906      	ldr	r1, [sp, #24]
 80064a6:	9805      	ldr	r0, [sp, #20]
 80064a8:	9d07      	ldr	r5, [sp, #28]
 80064aa:	47a8      	blx	r5
 80064ac:	3001      	adds	r0, #1
 80064ae:	d0ae      	beq.n	800640e <_printf_i+0x136>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	079b      	lsls	r3, r3, #30
 80064b4:	d415      	bmi.n	80064e2 <_printf_i+0x20a>
 80064b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b8:	68e0      	ldr	r0, [r4, #12]
 80064ba:	4298      	cmp	r0, r3
 80064bc:	daa9      	bge.n	8006412 <_printf_i+0x13a>
 80064be:	0018      	movs	r0, r3
 80064c0:	e7a7      	b.n	8006412 <_printf_i+0x13a>
 80064c2:	0022      	movs	r2, r4
 80064c4:	2301      	movs	r3, #1
 80064c6:	9906      	ldr	r1, [sp, #24]
 80064c8:	9805      	ldr	r0, [sp, #20]
 80064ca:	9e07      	ldr	r6, [sp, #28]
 80064cc:	3219      	adds	r2, #25
 80064ce:	47b0      	blx	r6
 80064d0:	3001      	adds	r0, #1
 80064d2:	d09c      	beq.n	800640e <_printf_i+0x136>
 80064d4:	3501      	adds	r5, #1
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	42ab      	cmp	r3, r5
 80064de:	dcf0      	bgt.n	80064c2 <_printf_i+0x1ea>
 80064e0:	e7e9      	b.n	80064b6 <_printf_i+0x1de>
 80064e2:	2500      	movs	r5, #0
 80064e4:	e7f7      	b.n	80064d6 <_printf_i+0x1fe>
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	08006f2d 	.word	0x08006f2d
 80064ec:	08006f3e 	.word	0x08006f3e

080064f0 <__malloc_lock>:
 80064f0:	b510      	push	{r4, lr}
 80064f2:	4802      	ldr	r0, [pc, #8]	@ (80064fc <__malloc_lock+0xc>)
 80064f4:	f7ff fc7e 	bl	8005df4 <__retarget_lock_acquire_recursive>
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	2000073c 	.word	0x2000073c

08006500 <__malloc_unlock>:
 8006500:	b510      	push	{r4, lr}
 8006502:	4802      	ldr	r0, [pc, #8]	@ (800650c <__malloc_unlock+0xc>)
 8006504:	f7ff fc77 	bl	8005df6 <__retarget_lock_release_recursive>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	46c0      	nop			@ (mov r8, r8)
 800650c:	2000073c 	.word	0x2000073c

08006510 <_realloc_r>:
 8006510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006512:	0006      	movs	r6, r0
 8006514:	000c      	movs	r4, r1
 8006516:	0015      	movs	r5, r2
 8006518:	2900      	cmp	r1, #0
 800651a:	d105      	bne.n	8006528 <_realloc_r+0x18>
 800651c:	0011      	movs	r1, r2
 800651e:	f7ff fdeb 	bl	80060f8 <_malloc_r>
 8006522:	0004      	movs	r4, r0
 8006524:	0020      	movs	r0, r4
 8006526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006528:	2a00      	cmp	r2, #0
 800652a:	d103      	bne.n	8006534 <_realloc_r+0x24>
 800652c:	f000 f858 	bl	80065e0 <_free_r>
 8006530:	002c      	movs	r4, r5
 8006532:	e7f7      	b.n	8006524 <_realloc_r+0x14>
 8006534:	f000 f89e 	bl	8006674 <_malloc_usable_size_r>
 8006538:	0007      	movs	r7, r0
 800653a:	4285      	cmp	r5, r0
 800653c:	d802      	bhi.n	8006544 <_realloc_r+0x34>
 800653e:	0843      	lsrs	r3, r0, #1
 8006540:	42ab      	cmp	r3, r5
 8006542:	d3ef      	bcc.n	8006524 <_realloc_r+0x14>
 8006544:	0029      	movs	r1, r5
 8006546:	0030      	movs	r0, r6
 8006548:	f7ff fdd6 	bl	80060f8 <_malloc_r>
 800654c:	9001      	str	r0, [sp, #4]
 800654e:	2800      	cmp	r0, #0
 8006550:	d101      	bne.n	8006556 <_realloc_r+0x46>
 8006552:	9c01      	ldr	r4, [sp, #4]
 8006554:	e7e6      	b.n	8006524 <_realloc_r+0x14>
 8006556:	002a      	movs	r2, r5
 8006558:	42bd      	cmp	r5, r7
 800655a:	d900      	bls.n	800655e <_realloc_r+0x4e>
 800655c:	003a      	movs	r2, r7
 800655e:	0021      	movs	r1, r4
 8006560:	9801      	ldr	r0, [sp, #4]
 8006562:	f000 f834 	bl	80065ce <memcpy>
 8006566:	0021      	movs	r1, r4
 8006568:	0030      	movs	r0, r6
 800656a:	f000 f839 	bl	80065e0 <_free_r>
 800656e:	e7f0      	b.n	8006552 <_realloc_r+0x42>

08006570 <memmove>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4288      	cmp	r0, r1
 8006574:	d902      	bls.n	800657c <memmove+0xc>
 8006576:	188b      	adds	r3, r1, r2
 8006578:	4298      	cmp	r0, r3
 800657a:	d308      	bcc.n	800658e <memmove+0x1e>
 800657c:	2300      	movs	r3, #0
 800657e:	429a      	cmp	r2, r3
 8006580:	d007      	beq.n	8006592 <memmove+0x22>
 8006582:	5ccc      	ldrb	r4, [r1, r3]
 8006584:	54c4      	strb	r4, [r0, r3]
 8006586:	3301      	adds	r3, #1
 8006588:	e7f9      	b.n	800657e <memmove+0xe>
 800658a:	5c8b      	ldrb	r3, [r1, r2]
 800658c:	5483      	strb	r3, [r0, r2]
 800658e:	3a01      	subs	r2, #1
 8006590:	d2fb      	bcs.n	800658a <memmove+0x1a>
 8006592:	bd10      	pop	{r4, pc}

08006594 <_sbrk_r>:
 8006594:	2300      	movs	r3, #0
 8006596:	b570      	push	{r4, r5, r6, lr}
 8006598:	4d06      	ldr	r5, [pc, #24]	@ (80065b4 <_sbrk_r+0x20>)
 800659a:	0004      	movs	r4, r0
 800659c:	0008      	movs	r0, r1
 800659e:	602b      	str	r3, [r5, #0]
 80065a0:	f7fb fdaa 	bl	80020f8 <_sbrk>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d103      	bne.n	80065b0 <_sbrk_r+0x1c>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d000      	beq.n	80065b0 <_sbrk_r+0x1c>
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	20000748 	.word	0x20000748

080065b8 <memchr>:
 80065b8:	b2c9      	uxtb	r1, r1
 80065ba:	1882      	adds	r2, r0, r2
 80065bc:	4290      	cmp	r0, r2
 80065be:	d101      	bne.n	80065c4 <memchr+0xc>
 80065c0:	2000      	movs	r0, #0
 80065c2:	4770      	bx	lr
 80065c4:	7803      	ldrb	r3, [r0, #0]
 80065c6:	428b      	cmp	r3, r1
 80065c8:	d0fb      	beq.n	80065c2 <memchr+0xa>
 80065ca:	3001      	adds	r0, #1
 80065cc:	e7f6      	b.n	80065bc <memchr+0x4>

080065ce <memcpy>:
 80065ce:	2300      	movs	r3, #0
 80065d0:	b510      	push	{r4, lr}
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d100      	bne.n	80065d8 <memcpy+0xa>
 80065d6:	bd10      	pop	{r4, pc}
 80065d8:	5ccc      	ldrb	r4, [r1, r3]
 80065da:	54c4      	strb	r4, [r0, r3]
 80065dc:	3301      	adds	r3, #1
 80065de:	e7f8      	b.n	80065d2 <memcpy+0x4>

080065e0 <_free_r>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	0005      	movs	r5, r0
 80065e4:	1e0c      	subs	r4, r1, #0
 80065e6:	d010      	beq.n	800660a <_free_r+0x2a>
 80065e8:	3c04      	subs	r4, #4
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da00      	bge.n	80065f2 <_free_r+0x12>
 80065f0:	18e4      	adds	r4, r4, r3
 80065f2:	0028      	movs	r0, r5
 80065f4:	f7ff ff7c 	bl	80064f0 <__malloc_lock>
 80065f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006670 <_free_r+0x90>)
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <_free_r+0x2c>
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	6014      	str	r4, [r2, #0]
 8006604:	0028      	movs	r0, r5
 8006606:	f7ff ff7b 	bl	8006500 <__malloc_unlock>
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	42a3      	cmp	r3, r4
 800660e:	d908      	bls.n	8006622 <_free_r+0x42>
 8006610:	6820      	ldr	r0, [r4, #0]
 8006612:	1821      	adds	r1, r4, r0
 8006614:	428b      	cmp	r3, r1
 8006616:	d1f3      	bne.n	8006600 <_free_r+0x20>
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	1809      	adds	r1, r1, r0
 800661e:	6021      	str	r1, [r4, #0]
 8006620:	e7ee      	b.n	8006600 <_free_r+0x20>
 8006622:	001a      	movs	r2, r3
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <_free_r+0x4e>
 800662a:	42a3      	cmp	r3, r4
 800662c:	d9f9      	bls.n	8006622 <_free_r+0x42>
 800662e:	6811      	ldr	r1, [r2, #0]
 8006630:	1850      	adds	r0, r2, r1
 8006632:	42a0      	cmp	r0, r4
 8006634:	d10b      	bne.n	800664e <_free_r+0x6e>
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	1809      	adds	r1, r1, r0
 800663a:	1850      	adds	r0, r2, r1
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	4283      	cmp	r3, r0
 8006640:	d1e0      	bne.n	8006604 <_free_r+0x24>
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	1841      	adds	r1, r0, r1
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	6053      	str	r3, [r2, #4]
 800664c:	e7da      	b.n	8006604 <_free_r+0x24>
 800664e:	42a0      	cmp	r0, r4
 8006650:	d902      	bls.n	8006658 <_free_r+0x78>
 8006652:	230c      	movs	r3, #12
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	e7d5      	b.n	8006604 <_free_r+0x24>
 8006658:	6820      	ldr	r0, [r4, #0]
 800665a:	1821      	adds	r1, r4, r0
 800665c:	428b      	cmp	r3, r1
 800665e:	d103      	bne.n	8006668 <_free_r+0x88>
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	1809      	adds	r1, r1, r0
 8006666:	6021      	str	r1, [r4, #0]
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	6054      	str	r4, [r2, #4]
 800666c:	e7ca      	b.n	8006604 <_free_r+0x24>
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	20000744 	.word	0x20000744

08006674 <_malloc_usable_size_r>:
 8006674:	1f0b      	subs	r3, r1, #4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	1f18      	subs	r0, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	da01      	bge.n	8006682 <_malloc_usable_size_r+0xe>
 800667e:	580b      	ldr	r3, [r1, r0]
 8006680:	18c0      	adds	r0, r0, r3
 8006682:	4770      	bx	lr

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	46c0      	nop			@ (mov r8, r8)
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr
