
Smart_Speedometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001730  08006300  08006300  00007300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a30  08007a30  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007a30  08007a30  00009074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007a30  08007a30  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a30  08007a30  00008a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007a38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000074  08007aac  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08007aac  00009938  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7cc  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372d  00000000  00000000  00024868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00027f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001832e  00000000  00000000  00029160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dcf7  00000000  00000000  0004148e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00098992  00000000  00000000  0005f185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f7b17  2**0
                  CONTENTS, READONLY
 19 .debug_loclists 0000e892  00000000  00000000  000f7b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000ffe  00000000  00000000  001063ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000036f4  00000000  00000000  001073ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0010aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080062e8 	.word	0x080062e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080062e8 	.word	0x080062e8

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_f2uiz>:
 8000400:	219e      	movs	r1, #158	@ 0x9e
 8000402:	b510      	push	{r4, lr}
 8000404:	05c9      	lsls	r1, r1, #23
 8000406:	1c04      	adds	r4, r0, #0
 8000408:	f000 fc70 	bl	8000cec <__aeabi_fcmpge>
 800040c:	2800      	cmp	r0, #0
 800040e:	d103      	bne.n	8000418 <__aeabi_f2uiz+0x18>
 8000410:	1c20      	adds	r0, r4, #0
 8000412:	f000 fbcb 	bl	8000bac <__aeabi_f2iz>
 8000416:	bd10      	pop	{r4, pc}
 8000418:	219e      	movs	r1, #158	@ 0x9e
 800041a:	1c20      	adds	r0, r4, #0
 800041c:	05c9      	lsls	r1, r1, #23
 800041e:	f000 f961 	bl	80006e4 <__aeabi_fsub>
 8000422:	f000 fbc3 	bl	8000bac <__aeabi_f2iz>
 8000426:	2380      	movs	r3, #128	@ 0x80
 8000428:	061b      	lsls	r3, r3, #24
 800042a:	469c      	mov	ip, r3
 800042c:	4460      	add	r0, ip
 800042e:	e7f2      	b.n	8000416 <__aeabi_f2uiz+0x16>

08000430 <__aeabi_fmul>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	0044      	lsls	r4, r0, #1
 800043a:	b5c0      	push	{r6, r7, lr}
 800043c:	0246      	lsls	r6, r0, #9
 800043e:	1c0f      	adds	r7, r1, #0
 8000440:	0a76      	lsrs	r6, r6, #9
 8000442:	0e24      	lsrs	r4, r4, #24
 8000444:	0fc5      	lsrs	r5, r0, #31
 8000446:	2c00      	cmp	r4, #0
 8000448:	d100      	bne.n	800044c <__aeabi_fmul+0x1c>
 800044a:	e0da      	b.n	8000602 <__aeabi_fmul+0x1d2>
 800044c:	2cff      	cmp	r4, #255	@ 0xff
 800044e:	d074      	beq.n	800053a <__aeabi_fmul+0x10a>
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	00f6      	lsls	r6, r6, #3
 8000454:	04db      	lsls	r3, r3, #19
 8000456:	431e      	orrs	r6, r3
 8000458:	2300      	movs	r3, #0
 800045a:	4699      	mov	r9, r3
 800045c:	469a      	mov	sl, r3
 800045e:	3c7f      	subs	r4, #127	@ 0x7f
 8000460:	027b      	lsls	r3, r7, #9
 8000462:	0a5b      	lsrs	r3, r3, #9
 8000464:	4698      	mov	r8, r3
 8000466:	007b      	lsls	r3, r7, #1
 8000468:	0e1b      	lsrs	r3, r3, #24
 800046a:	0fff      	lsrs	r7, r7, #31
 800046c:	2b00      	cmp	r3, #0
 800046e:	d074      	beq.n	800055a <__aeabi_fmul+0x12a>
 8000470:	2bff      	cmp	r3, #255	@ 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fmul+0x46>
 8000474:	e08e      	b.n	8000594 <__aeabi_fmul+0x164>
 8000476:	4642      	mov	r2, r8
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	00d2      	lsls	r2, r2, #3
 800047c:	04c9      	lsls	r1, r1, #19
 800047e:	4311      	orrs	r1, r2
 8000480:	3b7f      	subs	r3, #127	@ 0x7f
 8000482:	002a      	movs	r2, r5
 8000484:	18e4      	adds	r4, r4, r3
 8000486:	464b      	mov	r3, r9
 8000488:	407a      	eors	r2, r7
 800048a:	4688      	mov	r8, r1
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	2b0a      	cmp	r3, #10
 8000490:	dc75      	bgt.n	800057e <__aeabi_fmul+0x14e>
 8000492:	464b      	mov	r3, r9
 8000494:	2000      	movs	r0, #0
 8000496:	2b02      	cmp	r3, #2
 8000498:	dd0f      	ble.n	80004ba <__aeabi_fmul+0x8a>
 800049a:	4649      	mov	r1, r9
 800049c:	2301      	movs	r3, #1
 800049e:	408b      	lsls	r3, r1
 80004a0:	21a6      	movs	r1, #166	@ 0xa6
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	420b      	tst	r3, r1
 80004a6:	d169      	bne.n	800057c <__aeabi_fmul+0x14c>
 80004a8:	2190      	movs	r1, #144	@ 0x90
 80004aa:	0089      	lsls	r1, r1, #2
 80004ac:	420b      	tst	r3, r1
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fmul+0x82>
 80004b0:	e100      	b.n	80006b4 <__aeabi_fmul+0x284>
 80004b2:	2188      	movs	r1, #136	@ 0x88
 80004b4:	4219      	tst	r1, r3
 80004b6:	d000      	beq.n	80004ba <__aeabi_fmul+0x8a>
 80004b8:	e0f5      	b.n	80006a6 <__aeabi_fmul+0x276>
 80004ba:	4641      	mov	r1, r8
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	0c09      	lsrs	r1, r1, #16
 80004c0:	4643      	mov	r3, r8
 80004c2:	0008      	movs	r0, r1
 80004c4:	0c35      	lsrs	r5, r6, #16
 80004c6:	0436      	lsls	r6, r6, #16
 80004c8:	0c1b      	lsrs	r3, r3, #16
 80004ca:	0c36      	lsrs	r6, r6, #16
 80004cc:	4370      	muls	r0, r6
 80004ce:	4369      	muls	r1, r5
 80004d0:	435e      	muls	r6, r3
 80004d2:	435d      	muls	r5, r3
 80004d4:	1876      	adds	r6, r6, r1
 80004d6:	0c03      	lsrs	r3, r0, #16
 80004d8:	199b      	adds	r3, r3, r6
 80004da:	4299      	cmp	r1, r3
 80004dc:	d903      	bls.n	80004e6 <__aeabi_fmul+0xb6>
 80004de:	2180      	movs	r1, #128	@ 0x80
 80004e0:	0249      	lsls	r1, r1, #9
 80004e2:	468c      	mov	ip, r1
 80004e4:	4465      	add	r5, ip
 80004e6:	0400      	lsls	r0, r0, #16
 80004e8:	0419      	lsls	r1, r3, #16
 80004ea:	0c00      	lsrs	r0, r0, #16
 80004ec:	1809      	adds	r1, r1, r0
 80004ee:	018e      	lsls	r6, r1, #6
 80004f0:	1e70      	subs	r0, r6, #1
 80004f2:	4186      	sbcs	r6, r0
 80004f4:	0c1b      	lsrs	r3, r3, #16
 80004f6:	0e89      	lsrs	r1, r1, #26
 80004f8:	195b      	adds	r3, r3, r5
 80004fa:	430e      	orrs	r6, r1
 80004fc:	019b      	lsls	r3, r3, #6
 80004fe:	431e      	orrs	r6, r3
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	d46c      	bmi.n	80005de <__aeabi_fmul+0x1ae>
 8000504:	0023      	movs	r3, r4
 8000506:	337f      	adds	r3, #127	@ 0x7f
 8000508:	2b00      	cmp	r3, #0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fmul+0xde>
 800050c:	e0b1      	b.n	8000672 <__aeabi_fmul+0x242>
 800050e:	0015      	movs	r5, r2
 8000510:	0771      	lsls	r1, r6, #29
 8000512:	d00b      	beq.n	800052c <__aeabi_fmul+0xfc>
 8000514:	200f      	movs	r0, #15
 8000516:	0021      	movs	r1, r4
 8000518:	4030      	ands	r0, r6
 800051a:	2804      	cmp	r0, #4
 800051c:	d006      	beq.n	800052c <__aeabi_fmul+0xfc>
 800051e:	3604      	adds	r6, #4
 8000520:	0132      	lsls	r2, r6, #4
 8000522:	d503      	bpl.n	800052c <__aeabi_fmul+0xfc>
 8000524:	4b6e      	ldr	r3, [pc, #440]	@ (80006e0 <__aeabi_fmul+0x2b0>)
 8000526:	401e      	ands	r6, r3
 8000528:	000b      	movs	r3, r1
 800052a:	3380      	adds	r3, #128	@ 0x80
 800052c:	2bfe      	cmp	r3, #254	@ 0xfe
 800052e:	dd00      	ble.n	8000532 <__aeabi_fmul+0x102>
 8000530:	e0bd      	b.n	80006ae <__aeabi_fmul+0x27e>
 8000532:	01b2      	lsls	r2, r6, #6
 8000534:	0a52      	lsrs	r2, r2, #9
 8000536:	b2db      	uxtb	r3, r3
 8000538:	e048      	b.n	80005cc <__aeabi_fmul+0x19c>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fmul+0x110>
 800053e:	e092      	b.n	8000666 <__aeabi_fmul+0x236>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	469a      	mov	sl, r3
 8000548:	027b      	lsls	r3, r7, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	007b      	lsls	r3, r7, #1
 8000550:	24ff      	movs	r4, #255	@ 0xff
 8000552:	0e1b      	lsrs	r3, r3, #24
 8000554:	0fff      	lsrs	r7, r7, #31
 8000556:	2b00      	cmp	r3, #0
 8000558:	d18a      	bne.n	8000470 <__aeabi_fmul+0x40>
 800055a:	4642      	mov	r2, r8
 800055c:	2a00      	cmp	r2, #0
 800055e:	d164      	bne.n	800062a <__aeabi_fmul+0x1fa>
 8000560:	4649      	mov	r1, r9
 8000562:	3201      	adds	r2, #1
 8000564:	4311      	orrs	r1, r2
 8000566:	4689      	mov	r9, r1
 8000568:	290a      	cmp	r1, #10
 800056a:	dc08      	bgt.n	800057e <__aeabi_fmul+0x14e>
 800056c:	407d      	eors	r5, r7
 800056e:	2001      	movs	r0, #1
 8000570:	b2ea      	uxtb	r2, r5
 8000572:	2902      	cmp	r1, #2
 8000574:	dc91      	bgt.n	800049a <__aeabi_fmul+0x6a>
 8000576:	0015      	movs	r5, r2
 8000578:	2200      	movs	r2, #0
 800057a:	e027      	b.n	80005cc <__aeabi_fmul+0x19c>
 800057c:	0015      	movs	r5, r2
 800057e:	4653      	mov	r3, sl
 8000580:	2b02      	cmp	r3, #2
 8000582:	d100      	bne.n	8000586 <__aeabi_fmul+0x156>
 8000584:	e093      	b.n	80006ae <__aeabi_fmul+0x27e>
 8000586:	2b03      	cmp	r3, #3
 8000588:	d01a      	beq.n	80005c0 <__aeabi_fmul+0x190>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d12c      	bne.n	80005e8 <__aeabi_fmul+0x1b8>
 800058e:	2300      	movs	r3, #0
 8000590:	2200      	movs	r2, #0
 8000592:	e01b      	b.n	80005cc <__aeabi_fmul+0x19c>
 8000594:	4643      	mov	r3, r8
 8000596:	34ff      	adds	r4, #255	@ 0xff
 8000598:	2b00      	cmp	r3, #0
 800059a:	d055      	beq.n	8000648 <__aeabi_fmul+0x218>
 800059c:	2103      	movs	r1, #3
 800059e:	464b      	mov	r3, r9
 80005a0:	430b      	orrs	r3, r1
 80005a2:	0019      	movs	r1, r3
 80005a4:	2b0a      	cmp	r3, #10
 80005a6:	dc00      	bgt.n	80005aa <__aeabi_fmul+0x17a>
 80005a8:	e092      	b.n	80006d0 <__aeabi_fmul+0x2a0>
 80005aa:	2b0f      	cmp	r3, #15
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fmul+0x180>
 80005ae:	e08c      	b.n	80006ca <__aeabi_fmul+0x29a>
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	03d2      	lsls	r2, r2, #15
 80005b4:	4216      	tst	r6, r2
 80005b6:	d003      	beq.n	80005c0 <__aeabi_fmul+0x190>
 80005b8:	4643      	mov	r3, r8
 80005ba:	4213      	tst	r3, r2
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fmul+0x190>
 80005be:	e07d      	b.n	80006bc <__aeabi_fmul+0x28c>
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	03d2      	lsls	r2, r2, #15
 80005c4:	4332      	orrs	r2, r6
 80005c6:	0252      	lsls	r2, r2, #9
 80005c8:	0a52      	lsrs	r2, r2, #9
 80005ca:	23ff      	movs	r3, #255	@ 0xff
 80005cc:	05d8      	lsls	r0, r3, #23
 80005ce:	07ed      	lsls	r5, r5, #31
 80005d0:	4310      	orrs	r0, r2
 80005d2:	4328      	orrs	r0, r5
 80005d4:	bce0      	pop	{r5, r6, r7}
 80005d6:	46ba      	mov	sl, r7
 80005d8:	46b1      	mov	r9, r6
 80005da:	46a8      	mov	r8, r5
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	2301      	movs	r3, #1
 80005e0:	0015      	movs	r5, r2
 80005e2:	0871      	lsrs	r1, r6, #1
 80005e4:	401e      	ands	r6, r3
 80005e6:	430e      	orrs	r6, r1
 80005e8:	0023      	movs	r3, r4
 80005ea:	3380      	adds	r3, #128	@ 0x80
 80005ec:	1c61      	adds	r1, r4, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dd41      	ble.n	8000676 <__aeabi_fmul+0x246>
 80005f2:	0772      	lsls	r2, r6, #29
 80005f4:	d094      	beq.n	8000520 <__aeabi_fmul+0xf0>
 80005f6:	220f      	movs	r2, #15
 80005f8:	4032      	ands	r2, r6
 80005fa:	2a04      	cmp	r2, #4
 80005fc:	d000      	beq.n	8000600 <__aeabi_fmul+0x1d0>
 80005fe:	e78e      	b.n	800051e <__aeabi_fmul+0xee>
 8000600:	e78e      	b.n	8000520 <__aeabi_fmul+0xf0>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d105      	bne.n	8000612 <__aeabi_fmul+0x1e2>
 8000606:	2304      	movs	r3, #4
 8000608:	4699      	mov	r9, r3
 800060a:	3b03      	subs	r3, #3
 800060c:	2400      	movs	r4, #0
 800060e:	469a      	mov	sl, r3
 8000610:	e726      	b.n	8000460 <__aeabi_fmul+0x30>
 8000612:	0030      	movs	r0, r6
 8000614:	f000 fb74 	bl	8000d00 <__clzsi2>
 8000618:	2476      	movs	r4, #118	@ 0x76
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	409e      	lsls	r6, r3
 800061e:	2300      	movs	r3, #0
 8000620:	4264      	negs	r4, r4
 8000622:	4699      	mov	r9, r3
 8000624:	469a      	mov	sl, r3
 8000626:	1a24      	subs	r4, r4, r0
 8000628:	e71a      	b.n	8000460 <__aeabi_fmul+0x30>
 800062a:	4640      	mov	r0, r8
 800062c:	f000 fb68 	bl	8000d00 <__clzsi2>
 8000630:	464b      	mov	r3, r9
 8000632:	1a24      	subs	r4, r4, r0
 8000634:	3c76      	subs	r4, #118	@ 0x76
 8000636:	2b0a      	cmp	r3, #10
 8000638:	dca1      	bgt.n	800057e <__aeabi_fmul+0x14e>
 800063a:	4643      	mov	r3, r8
 800063c:	3805      	subs	r0, #5
 800063e:	4083      	lsls	r3, r0
 8000640:	407d      	eors	r5, r7
 8000642:	4698      	mov	r8, r3
 8000644:	b2ea      	uxtb	r2, r5
 8000646:	e724      	b.n	8000492 <__aeabi_fmul+0x62>
 8000648:	464a      	mov	r2, r9
 800064a:	3302      	adds	r3, #2
 800064c:	4313      	orrs	r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	407a      	eors	r2, r7
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	2b0a      	cmp	r3, #10
 8000656:	dc92      	bgt.n	800057e <__aeabi_fmul+0x14e>
 8000658:	4649      	mov	r1, r9
 800065a:	0015      	movs	r5, r2
 800065c:	2900      	cmp	r1, #0
 800065e:	d026      	beq.n	80006ae <__aeabi_fmul+0x27e>
 8000660:	4699      	mov	r9, r3
 8000662:	2002      	movs	r0, #2
 8000664:	e719      	b.n	800049a <__aeabi_fmul+0x6a>
 8000666:	230c      	movs	r3, #12
 8000668:	4699      	mov	r9, r3
 800066a:	3b09      	subs	r3, #9
 800066c:	24ff      	movs	r4, #255	@ 0xff
 800066e:	469a      	mov	sl, r3
 8000670:	e6f6      	b.n	8000460 <__aeabi_fmul+0x30>
 8000672:	0015      	movs	r5, r2
 8000674:	0021      	movs	r1, r4
 8000676:	2201      	movs	r2, #1
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dd00      	ble.n	8000680 <__aeabi_fmul+0x250>
 800067e:	e786      	b.n	800058e <__aeabi_fmul+0x15e>
 8000680:	319e      	adds	r1, #158	@ 0x9e
 8000682:	0032      	movs	r2, r6
 8000684:	408e      	lsls	r6, r1
 8000686:	40da      	lsrs	r2, r3
 8000688:	1e73      	subs	r3, r6, #1
 800068a:	419e      	sbcs	r6, r3
 800068c:	4332      	orrs	r2, r6
 800068e:	0753      	lsls	r3, r2, #29
 8000690:	d004      	beq.n	800069c <__aeabi_fmul+0x26c>
 8000692:	230f      	movs	r3, #15
 8000694:	4013      	ands	r3, r2
 8000696:	2b04      	cmp	r3, #4
 8000698:	d000      	beq.n	800069c <__aeabi_fmul+0x26c>
 800069a:	3204      	adds	r2, #4
 800069c:	0153      	lsls	r3, r2, #5
 800069e:	d510      	bpl.n	80006c2 <__aeabi_fmul+0x292>
 80006a0:	2301      	movs	r3, #1
 80006a2:	2200      	movs	r2, #0
 80006a4:	e792      	b.n	80005cc <__aeabi_fmul+0x19c>
 80006a6:	003d      	movs	r5, r7
 80006a8:	4646      	mov	r6, r8
 80006aa:	4682      	mov	sl, r0
 80006ac:	e767      	b.n	800057e <__aeabi_fmul+0x14e>
 80006ae:	23ff      	movs	r3, #255	@ 0xff
 80006b0:	2200      	movs	r2, #0
 80006b2:	e78b      	b.n	80005cc <__aeabi_fmul+0x19c>
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	2500      	movs	r5, #0
 80006b8:	03d2      	lsls	r2, r2, #15
 80006ba:	e786      	b.n	80005ca <__aeabi_fmul+0x19a>
 80006bc:	003d      	movs	r5, r7
 80006be:	431a      	orrs	r2, r3
 80006c0:	e783      	b.n	80005ca <__aeabi_fmul+0x19a>
 80006c2:	0192      	lsls	r2, r2, #6
 80006c4:	2300      	movs	r3, #0
 80006c6:	0a52      	lsrs	r2, r2, #9
 80006c8:	e780      	b.n	80005cc <__aeabi_fmul+0x19c>
 80006ca:	003d      	movs	r5, r7
 80006cc:	4646      	mov	r6, r8
 80006ce:	e777      	b.n	80005c0 <__aeabi_fmul+0x190>
 80006d0:	002a      	movs	r2, r5
 80006d2:	2301      	movs	r3, #1
 80006d4:	407a      	eors	r2, r7
 80006d6:	408b      	lsls	r3, r1
 80006d8:	2003      	movs	r0, #3
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	e6e9      	b.n	80004b2 <__aeabi_fmul+0x82>
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	f7ffffff 	.word	0xf7ffffff

080006e4 <__aeabi_fsub>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	4647      	mov	r7, r8
 80006e8:	46ce      	mov	lr, r9
 80006ea:	0243      	lsls	r3, r0, #9
 80006ec:	b580      	push	{r7, lr}
 80006ee:	0a5f      	lsrs	r7, r3, #9
 80006f0:	099b      	lsrs	r3, r3, #6
 80006f2:	0045      	lsls	r5, r0, #1
 80006f4:	004a      	lsls	r2, r1, #1
 80006f6:	469c      	mov	ip, r3
 80006f8:	024b      	lsls	r3, r1, #9
 80006fa:	0fc4      	lsrs	r4, r0, #31
 80006fc:	0fce      	lsrs	r6, r1, #31
 80006fe:	0e2d      	lsrs	r5, r5, #24
 8000700:	0a58      	lsrs	r0, r3, #9
 8000702:	0e12      	lsrs	r2, r2, #24
 8000704:	0999      	lsrs	r1, r3, #6
 8000706:	2aff      	cmp	r2, #255	@ 0xff
 8000708:	d06b      	beq.n	80007e2 <__aeabi_fsub+0xfe>
 800070a:	2301      	movs	r3, #1
 800070c:	405e      	eors	r6, r3
 800070e:	1aab      	subs	r3, r5, r2
 8000710:	42b4      	cmp	r4, r6
 8000712:	d04b      	beq.n	80007ac <__aeabi_fsub+0xc8>
 8000714:	2b00      	cmp	r3, #0
 8000716:	dc00      	bgt.n	800071a <__aeabi_fsub+0x36>
 8000718:	e0ff      	b.n	800091a <__aeabi_fsub+0x236>
 800071a:	2a00      	cmp	r2, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0x3c>
 800071e:	e088      	b.n	8000832 <__aeabi_fsub+0x14e>
 8000720:	2dff      	cmp	r5, #255	@ 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fsub+0x42>
 8000724:	e0ef      	b.n	8000906 <__aeabi_fsub+0x222>
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	04d2      	lsls	r2, r2, #19
 800072a:	4311      	orrs	r1, r2
 800072c:	2001      	movs	r0, #1
 800072e:	2b1b      	cmp	r3, #27
 8000730:	dc08      	bgt.n	8000744 <__aeabi_fsub+0x60>
 8000732:	0008      	movs	r0, r1
 8000734:	2220      	movs	r2, #32
 8000736:	40d8      	lsrs	r0, r3
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4099      	lsls	r1, r3
 800073c:	000b      	movs	r3, r1
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	4193      	sbcs	r3, r2
 8000742:	4318      	orrs	r0, r3
 8000744:	4663      	mov	r3, ip
 8000746:	1a1b      	subs	r3, r3, r0
 8000748:	469c      	mov	ip, r3
 800074a:	4663      	mov	r3, ip
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	d400      	bmi.n	8000752 <__aeabi_fsub+0x6e>
 8000750:	e0cd      	b.n	80008ee <__aeabi_fsub+0x20a>
 8000752:	4663      	mov	r3, ip
 8000754:	019f      	lsls	r7, r3, #6
 8000756:	09bf      	lsrs	r7, r7, #6
 8000758:	0038      	movs	r0, r7
 800075a:	f000 fad1 	bl	8000d00 <__clzsi2>
 800075e:	003b      	movs	r3, r7
 8000760:	3805      	subs	r0, #5
 8000762:	4083      	lsls	r3, r0
 8000764:	4285      	cmp	r5, r0
 8000766:	dc00      	bgt.n	800076a <__aeabi_fsub+0x86>
 8000768:	e0a2      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 800076a:	4ab7      	ldr	r2, [pc, #732]	@ (8000a48 <__aeabi_fsub+0x364>)
 800076c:	1a2d      	subs	r5, r5, r0
 800076e:	401a      	ands	r2, r3
 8000770:	4694      	mov	ip, r2
 8000772:	075a      	lsls	r2, r3, #29
 8000774:	d100      	bne.n	8000778 <__aeabi_fsub+0x94>
 8000776:	e0c3      	b.n	8000900 <__aeabi_fsub+0x21c>
 8000778:	220f      	movs	r2, #15
 800077a:	4013      	ands	r3, r2
 800077c:	2b04      	cmp	r3, #4
 800077e:	d100      	bne.n	8000782 <__aeabi_fsub+0x9e>
 8000780:	e0be      	b.n	8000900 <__aeabi_fsub+0x21c>
 8000782:	2304      	movs	r3, #4
 8000784:	4698      	mov	r8, r3
 8000786:	44c4      	add	ip, r8
 8000788:	4663      	mov	r3, ip
 800078a:	015b      	lsls	r3, r3, #5
 800078c:	d400      	bmi.n	8000790 <__aeabi_fsub+0xac>
 800078e:	e0b7      	b.n	8000900 <__aeabi_fsub+0x21c>
 8000790:	1c68      	adds	r0, r5, #1
 8000792:	2dfe      	cmp	r5, #254	@ 0xfe
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0xb4>
 8000796:	e0a5      	b.n	80008e4 <__aeabi_fsub+0x200>
 8000798:	20ff      	movs	r0, #255	@ 0xff
 800079a:	2200      	movs	r2, #0
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	4310      	orrs	r0, r2
 80007a0:	07e4      	lsls	r4, r4, #31
 80007a2:	4320      	orrs	r0, r4
 80007a4:	bcc0      	pop	{r6, r7}
 80007a6:	46b9      	mov	r9, r7
 80007a8:	46b0      	mov	r8, r6
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fsub+0xce>
 80007b0:	e1eb      	b.n	8000b8a <__aeabi_fsub+0x4a6>
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d046      	beq.n	8000844 <__aeabi_fsub+0x160>
 80007b6:	2dff      	cmp	r5, #255	@ 0xff
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0xd8>
 80007ba:	e0a4      	b.n	8000906 <__aeabi_fsub+0x222>
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	04d2      	lsls	r2, r2, #19
 80007c0:	4311      	orrs	r1, r2
 80007c2:	2b1b      	cmp	r3, #27
 80007c4:	dc00      	bgt.n	80007c8 <__aeabi_fsub+0xe4>
 80007c6:	e0fb      	b.n	80009c0 <__aeabi_fsub+0x2dc>
 80007c8:	2305      	movs	r3, #5
 80007ca:	4698      	mov	r8, r3
 80007cc:	002b      	movs	r3, r5
 80007ce:	44c4      	add	ip, r8
 80007d0:	4662      	mov	r2, ip
 80007d2:	08d7      	lsrs	r7, r2, #3
 80007d4:	2bff      	cmp	r3, #255	@ 0xff
 80007d6:	d100      	bne.n	80007da <__aeabi_fsub+0xf6>
 80007d8:	e095      	b.n	8000906 <__aeabi_fsub+0x222>
 80007da:	027a      	lsls	r2, r7, #9
 80007dc:	0a52      	lsrs	r2, r2, #9
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	e7dc      	b.n	800079c <__aeabi_fsub+0xb8>
 80007e2:	002b      	movs	r3, r5
 80007e4:	3bff      	subs	r3, #255	@ 0xff
 80007e6:	4699      	mov	r9, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d118      	bne.n	800081e <__aeabi_fsub+0x13a>
 80007ec:	2301      	movs	r3, #1
 80007ee:	405e      	eors	r6, r3
 80007f0:	42b4      	cmp	r4, r6
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x112>
 80007f4:	e0ca      	b.n	800098c <__aeabi_fsub+0x2a8>
 80007f6:	464b      	mov	r3, r9
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d02d      	beq.n	8000858 <__aeabi_fsub+0x174>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0x11e>
 8000800:	e13c      	b.n	8000a7c <__aeabi_fsub+0x398>
 8000802:	23ff      	movs	r3, #255	@ 0xff
 8000804:	4664      	mov	r4, ip
 8000806:	2c00      	cmp	r4, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x128>
 800080a:	e15f      	b.n	8000acc <__aeabi_fsub+0x3e8>
 800080c:	1e5d      	subs	r5, r3, #1
 800080e:	2b01      	cmp	r3, #1
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x130>
 8000812:	e174      	b.n	8000afe <__aeabi_fsub+0x41a>
 8000814:	0034      	movs	r4, r6
 8000816:	2bff      	cmp	r3, #255	@ 0xff
 8000818:	d074      	beq.n	8000904 <__aeabi_fsub+0x220>
 800081a:	002b      	movs	r3, r5
 800081c:	e103      	b.n	8000a26 <__aeabi_fsub+0x342>
 800081e:	42b4      	cmp	r4, r6
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x140>
 8000822:	e09c      	b.n	800095e <__aeabi_fsub+0x27a>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d017      	beq.n	8000858 <__aeabi_fsub+0x174>
 8000828:	2d00      	cmp	r5, #0
 800082a:	d0ea      	beq.n	8000802 <__aeabi_fsub+0x11e>
 800082c:	0007      	movs	r7, r0
 800082e:	0034      	movs	r4, r6
 8000830:	e06c      	b.n	800090c <__aeabi_fsub+0x228>
 8000832:	2900      	cmp	r1, #0
 8000834:	d0cc      	beq.n	80007d0 <__aeabi_fsub+0xec>
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	2b01      	cmp	r3, #1
 800083a:	d02b      	beq.n	8000894 <__aeabi_fsub+0x1b0>
 800083c:	2bff      	cmp	r3, #255	@ 0xff
 800083e:	d062      	beq.n	8000906 <__aeabi_fsub+0x222>
 8000840:	0013      	movs	r3, r2
 8000842:	e773      	b.n	800072c <__aeabi_fsub+0x48>
 8000844:	2900      	cmp	r1, #0
 8000846:	d0c3      	beq.n	80007d0 <__aeabi_fsub+0xec>
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	2b01      	cmp	r3, #1
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x16c>
 800084e:	e11e      	b.n	8000a8e <__aeabi_fsub+0x3aa>
 8000850:	2bff      	cmp	r3, #255	@ 0xff
 8000852:	d058      	beq.n	8000906 <__aeabi_fsub+0x222>
 8000854:	0013      	movs	r3, r2
 8000856:	e7b4      	b.n	80007c2 <__aeabi_fsub+0xde>
 8000858:	22fe      	movs	r2, #254	@ 0xfe
 800085a:	1c6b      	adds	r3, r5, #1
 800085c:	421a      	tst	r2, r3
 800085e:	d10d      	bne.n	800087c <__aeabi_fsub+0x198>
 8000860:	2d00      	cmp	r5, #0
 8000862:	d060      	beq.n	8000926 <__aeabi_fsub+0x242>
 8000864:	4663      	mov	r3, ip
 8000866:	2b00      	cmp	r3, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fsub+0x188>
 800086a:	e120      	b.n	8000aae <__aeabi_fsub+0x3ca>
 800086c:	2900      	cmp	r1, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fsub+0x18e>
 8000870:	e128      	b.n	8000ac4 <__aeabi_fsub+0x3e0>
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	2400      	movs	r4, #0
 8000876:	20ff      	movs	r0, #255	@ 0xff
 8000878:	03d2      	lsls	r2, r2, #15
 800087a:	e78f      	b.n	800079c <__aeabi_fsub+0xb8>
 800087c:	4663      	mov	r3, ip
 800087e:	1a5f      	subs	r7, r3, r1
 8000880:	017b      	lsls	r3, r7, #5
 8000882:	d500      	bpl.n	8000886 <__aeabi_fsub+0x1a2>
 8000884:	e0fe      	b.n	8000a84 <__aeabi_fsub+0x3a0>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fsub+0x1a8>
 800088a:	e765      	b.n	8000758 <__aeabi_fsub+0x74>
 800088c:	2400      	movs	r4, #0
 800088e:	2000      	movs	r0, #0
 8000890:	2200      	movs	r2, #0
 8000892:	e783      	b.n	800079c <__aeabi_fsub+0xb8>
 8000894:	4663      	mov	r3, ip
 8000896:	1a59      	subs	r1, r3, r1
 8000898:	014b      	lsls	r3, r1, #5
 800089a:	d400      	bmi.n	800089e <__aeabi_fsub+0x1ba>
 800089c:	e119      	b.n	8000ad2 <__aeabi_fsub+0x3ee>
 800089e:	018f      	lsls	r7, r1, #6
 80008a0:	09bf      	lsrs	r7, r7, #6
 80008a2:	0038      	movs	r0, r7
 80008a4:	f000 fa2c 	bl	8000d00 <__clzsi2>
 80008a8:	003b      	movs	r3, r7
 80008aa:	3805      	subs	r0, #5
 80008ac:	4083      	lsls	r3, r0
 80008ae:	2501      	movs	r5, #1
 80008b0:	2220      	movs	r2, #32
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	3001      	adds	r0, #1
 80008b6:	1a12      	subs	r2, r2, r0
 80008b8:	0019      	movs	r1, r3
 80008ba:	4093      	lsls	r3, r2
 80008bc:	40c1      	lsrs	r1, r0
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	4193      	sbcs	r3, r2
 80008c2:	4319      	orrs	r1, r3
 80008c4:	468c      	mov	ip, r1
 80008c6:	1e0b      	subs	r3, r1, #0
 80008c8:	d0e1      	beq.n	800088e <__aeabi_fsub+0x1aa>
 80008ca:	075b      	lsls	r3, r3, #29
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x1ec>
 80008ce:	e152      	b.n	8000b76 <__aeabi_fsub+0x492>
 80008d0:	230f      	movs	r3, #15
 80008d2:	2500      	movs	r5, #0
 80008d4:	400b      	ands	r3, r1
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d000      	beq.n	80008dc <__aeabi_fsub+0x1f8>
 80008da:	e752      	b.n	8000782 <__aeabi_fsub+0x9e>
 80008dc:	2001      	movs	r0, #1
 80008de:	014a      	lsls	r2, r1, #5
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_fsub+0x200>
 80008e2:	e092      	b.n	8000a0a <__aeabi_fsub+0x326>
 80008e4:	b2c0      	uxtb	r0, r0
 80008e6:	4663      	mov	r3, ip
 80008e8:	019a      	lsls	r2, r3, #6
 80008ea:	0a52      	lsrs	r2, r2, #9
 80008ec:	e756      	b.n	800079c <__aeabi_fsub+0xb8>
 80008ee:	4663      	mov	r3, ip
 80008f0:	075b      	lsls	r3, r3, #29
 80008f2:	d005      	beq.n	8000900 <__aeabi_fsub+0x21c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4662      	mov	r2, ip
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d000      	beq.n	8000900 <__aeabi_fsub+0x21c>
 80008fe:	e740      	b.n	8000782 <__aeabi_fsub+0x9e>
 8000900:	002b      	movs	r3, r5
 8000902:	e765      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000904:	0007      	movs	r7, r0
 8000906:	2f00      	cmp	r7, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0x228>
 800090a:	e745      	b.n	8000798 <__aeabi_fsub+0xb4>
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	433a      	orrs	r2, r7
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e740      	b.n	800079c <__aeabi_fsub+0xb8>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d179      	bne.n	8000a12 <__aeabi_fsub+0x32e>
 800091e:	22fe      	movs	r2, #254	@ 0xfe
 8000920:	1c6b      	adds	r3, r5, #1
 8000922:	421a      	tst	r2, r3
 8000924:	d1aa      	bne.n	800087c <__aeabi_fsub+0x198>
 8000926:	4663      	mov	r3, ip
 8000928:	2b00      	cmp	r3, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fsub+0x24a>
 800092c:	e0f5      	b.n	8000b1a <__aeabi_fsub+0x436>
 800092e:	2900      	cmp	r1, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x250>
 8000932:	e0d1      	b.n	8000ad8 <__aeabi_fsub+0x3f4>
 8000934:	1a5f      	subs	r7, r3, r1
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	04db      	lsls	r3, r3, #19
 800093a:	421f      	tst	r7, r3
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x25c>
 800093e:	e10e      	b.n	8000b5e <__aeabi_fsub+0x47a>
 8000940:	4662      	mov	r2, ip
 8000942:	2401      	movs	r4, #1
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4694      	mov	ip, r2
 8000948:	2000      	movs	r0, #0
 800094a:	4034      	ands	r4, r6
 800094c:	2a00      	cmp	r2, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_fsub+0x26e>
 8000950:	e724      	b.n	800079c <__aeabi_fsub+0xb8>
 8000952:	2001      	movs	r0, #1
 8000954:	421a      	tst	r2, r3
 8000956:	d1c6      	bne.n	80008e6 <__aeabi_fsub+0x202>
 8000958:	2300      	movs	r3, #0
 800095a:	08d7      	lsrs	r7, r2, #3
 800095c:	e73d      	b.n	80007da <__aeabi_fsub+0xf6>
 800095e:	2b00      	cmp	r3, #0
 8000960:	d017      	beq.n	8000992 <__aeabi_fsub+0x2ae>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x284>
 8000966:	e0af      	b.n	8000ac8 <__aeabi_fsub+0x3e4>
 8000968:	23ff      	movs	r3, #255	@ 0xff
 800096a:	4665      	mov	r5, ip
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x28e>
 8000970:	e0ad      	b.n	8000ace <__aeabi_fsub+0x3ea>
 8000972:	1e5e      	subs	r6, r3, #1
 8000974:	2b01      	cmp	r3, #1
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x296>
 8000978:	e089      	b.n	8000a8e <__aeabi_fsub+0x3aa>
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d0c2      	beq.n	8000904 <__aeabi_fsub+0x220>
 800097e:	2e1b      	cmp	r6, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fsub+0x2a0>
 8000982:	e0ab      	b.n	8000adc <__aeabi_fsub+0x3f8>
 8000984:	1d4b      	adds	r3, r1, #5
 8000986:	469c      	mov	ip, r3
 8000988:	0013      	movs	r3, r2
 800098a:	e721      	b.n	80007d0 <__aeabi_fsub+0xec>
 800098c:	464b      	mov	r3, r9
 800098e:	2b00      	cmp	r3, #0
 8000990:	d170      	bne.n	8000a74 <__aeabi_fsub+0x390>
 8000992:	22fe      	movs	r2, #254	@ 0xfe
 8000994:	1c6b      	adds	r3, r5, #1
 8000996:	421a      	tst	r2, r3
 8000998:	d15e      	bne.n	8000a58 <__aeabi_fsub+0x374>
 800099a:	2d00      	cmp	r5, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_fsub+0x2bc>
 800099e:	e0c3      	b.n	8000b28 <__aeabi_fsub+0x444>
 80009a0:	4663      	mov	r3, ip
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x2c4>
 80009a6:	e0d0      	b.n	8000b4a <__aeabi_fsub+0x466>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fsub+0x2ca>
 80009ac:	e094      	b.n	8000ad8 <__aeabi_fsub+0x3f4>
 80009ae:	000a      	movs	r2, r1
 80009b0:	4462      	add	r2, ip
 80009b2:	0153      	lsls	r3, r2, #5
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_fsub+0x2d4>
 80009b6:	e0d8      	b.n	8000b6a <__aeabi_fsub+0x486>
 80009b8:	0192      	lsls	r2, r2, #6
 80009ba:	2001      	movs	r0, #1
 80009bc:	0a52      	lsrs	r2, r2, #9
 80009be:	e6ed      	b.n	800079c <__aeabi_fsub+0xb8>
 80009c0:	0008      	movs	r0, r1
 80009c2:	2220      	movs	r2, #32
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	4099      	lsls	r1, r3
 80009ca:	000b      	movs	r3, r1
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	4193      	sbcs	r3, r2
 80009d0:	4303      	orrs	r3, r0
 80009d2:	449c      	add	ip, r3
 80009d4:	4663      	mov	r3, ip
 80009d6:	015b      	lsls	r3, r3, #5
 80009d8:	d589      	bpl.n	80008ee <__aeabi_fsub+0x20a>
 80009da:	3501      	adds	r5, #1
 80009dc:	2dff      	cmp	r5, #255	@ 0xff
 80009de:	d100      	bne.n	80009e2 <__aeabi_fsub+0x2fe>
 80009e0:	e6da      	b.n	8000798 <__aeabi_fsub+0xb4>
 80009e2:	4662      	mov	r2, ip
 80009e4:	2301      	movs	r3, #1
 80009e6:	4919      	ldr	r1, [pc, #100]	@ (8000a4c <__aeabi_fsub+0x368>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	0852      	lsrs	r2, r2, #1
 80009ec:	400a      	ands	r2, r1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4694      	mov	ip, r2
 80009f4:	075b      	lsls	r3, r3, #29
 80009f6:	d004      	beq.n	8000a02 <__aeabi_fsub+0x31e>
 80009f8:	230f      	movs	r3, #15
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fsub+0x31e>
 8000a00:	e6bf      	b.n	8000782 <__aeabi_fsub+0x9e>
 8000a02:	4663      	mov	r3, ip
 8000a04:	015b      	lsls	r3, r3, #5
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_fsub+0x326>
 8000a08:	e6c2      	b.n	8000790 <__aeabi_fsub+0xac>
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	08df      	lsrs	r7, r3, #3
 8000a0e:	002b      	movs	r3, r5
 8000a10:	e6e3      	b.n	80007da <__aeabi_fsub+0xf6>
 8000a12:	1b53      	subs	r3, r2, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x336>
 8000a18:	e6f4      	b.n	8000804 <__aeabi_fsub+0x120>
 8000a1a:	2080      	movs	r0, #128	@ 0x80
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	04c0      	lsls	r0, r0, #19
 8000a20:	4304      	orrs	r4, r0
 8000a22:	46a4      	mov	ip, r4
 8000a24:	0034      	movs	r4, r6
 8000a26:	2001      	movs	r0, #1
 8000a28:	2b1b      	cmp	r3, #27
 8000a2a:	dc09      	bgt.n	8000a40 <__aeabi_fsub+0x35c>
 8000a2c:	2520      	movs	r5, #32
 8000a2e:	4660      	mov	r0, ip
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	1aeb      	subs	r3, r5, r3
 8000a34:	4665      	mov	r5, ip
 8000a36:	409d      	lsls	r5, r3
 8000a38:	002b      	movs	r3, r5
 8000a3a:	1e5d      	subs	r5, r3, #1
 8000a3c:	41ab      	sbcs	r3, r5
 8000a3e:	4318      	orrs	r0, r3
 8000a40:	1a0b      	subs	r3, r1, r0
 8000a42:	469c      	mov	ip, r3
 8000a44:	0015      	movs	r5, r2
 8000a46:	e680      	b.n	800074a <__aeabi_fsub+0x66>
 8000a48:	fbffffff 	.word	0xfbffffff
 8000a4c:	7dffffff 	.word	0x7dffffff
 8000a50:	22fe      	movs	r2, #254	@ 0xfe
 8000a52:	1c6b      	adds	r3, r5, #1
 8000a54:	4213      	tst	r3, r2
 8000a56:	d0a3      	beq.n	80009a0 <__aeabi_fsub+0x2bc>
 8000a58:	2bff      	cmp	r3, #255	@ 0xff
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x37a>
 8000a5c:	e69c      	b.n	8000798 <__aeabi_fsub+0xb4>
 8000a5e:	4461      	add	r1, ip
 8000a60:	0849      	lsrs	r1, r1, #1
 8000a62:	074a      	lsls	r2, r1, #29
 8000a64:	d049      	beq.n	8000afa <__aeabi_fsub+0x416>
 8000a66:	220f      	movs	r2, #15
 8000a68:	400a      	ands	r2, r1
 8000a6a:	2a04      	cmp	r2, #4
 8000a6c:	d045      	beq.n	8000afa <__aeabi_fsub+0x416>
 8000a6e:	1d0a      	adds	r2, r1, #4
 8000a70:	4694      	mov	ip, r2
 8000a72:	e6ad      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_fsub+0x396>
 8000a78:	e776      	b.n	8000968 <__aeabi_fsub+0x284>
 8000a7a:	e68d      	b.n	8000798 <__aeabi_fsub+0xb4>
 8000a7c:	0034      	movs	r4, r6
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	2200      	movs	r2, #0
 8000a82:	e68b      	b.n	800079c <__aeabi_fsub+0xb8>
 8000a84:	4663      	mov	r3, ip
 8000a86:	2401      	movs	r4, #1
 8000a88:	1acf      	subs	r7, r1, r3
 8000a8a:	4034      	ands	r4, r6
 8000a8c:	e664      	b.n	8000758 <__aeabi_fsub+0x74>
 8000a8e:	4461      	add	r1, ip
 8000a90:	014b      	lsls	r3, r1, #5
 8000a92:	d56d      	bpl.n	8000b70 <__aeabi_fsub+0x48c>
 8000a94:	0848      	lsrs	r0, r1, #1
 8000a96:	4944      	ldr	r1, [pc, #272]	@ (8000ba8 <__aeabi_fsub+0x4c4>)
 8000a98:	4001      	ands	r1, r0
 8000a9a:	0743      	lsls	r3, r0, #29
 8000a9c:	d02c      	beq.n	8000af8 <__aeabi_fsub+0x414>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	4003      	ands	r3, r0
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d028      	beq.n	8000af8 <__aeabi_fsub+0x414>
 8000aa6:	1d0b      	adds	r3, r1, #4
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e690      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_fsub+0x3d0>
 8000ab2:	e72b      	b.n	800090c <__aeabi_fsub+0x228>
 8000ab4:	2380      	movs	r3, #128	@ 0x80
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	429f      	cmp	r7, r3
 8000aba:	d200      	bcs.n	8000abe <__aeabi_fsub+0x3da>
 8000abc:	e726      	b.n	800090c <__aeabi_fsub+0x228>
 8000abe:	4298      	cmp	r0, r3
 8000ac0:	d300      	bcc.n	8000ac4 <__aeabi_fsub+0x3e0>
 8000ac2:	e723      	b.n	800090c <__aeabi_fsub+0x228>
 8000ac4:	2401      	movs	r4, #1
 8000ac6:	4034      	ands	r4, r6
 8000ac8:	0007      	movs	r7, r0
 8000aca:	e71f      	b.n	800090c <__aeabi_fsub+0x228>
 8000acc:	0034      	movs	r4, r6
 8000ace:	468c      	mov	ip, r1
 8000ad0:	e67e      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	08cf      	lsrs	r7, r1, #3
 8000ad6:	e680      	b.n	80007da <__aeabi_fsub+0xf6>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e67e      	b.n	80007da <__aeabi_fsub+0xf6>
 8000adc:	2020      	movs	r0, #32
 8000ade:	4665      	mov	r5, ip
 8000ae0:	1b80      	subs	r0, r0, r6
 8000ae2:	4085      	lsls	r5, r0
 8000ae4:	4663      	mov	r3, ip
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	40f3      	lsrs	r3, r6
 8000aea:	1e45      	subs	r5, r0, #1
 8000aec:	41a8      	sbcs	r0, r5
 8000aee:	4303      	orrs	r3, r0
 8000af0:	469c      	mov	ip, r3
 8000af2:	0015      	movs	r5, r2
 8000af4:	448c      	add	ip, r1
 8000af6:	e76d      	b.n	80009d4 <__aeabi_fsub+0x2f0>
 8000af8:	2302      	movs	r3, #2
 8000afa:	08cf      	lsrs	r7, r1, #3
 8000afc:	e66d      	b.n	80007da <__aeabi_fsub+0xf6>
 8000afe:	1b0f      	subs	r7, r1, r4
 8000b00:	017b      	lsls	r3, r7, #5
 8000b02:	d528      	bpl.n	8000b56 <__aeabi_fsub+0x472>
 8000b04:	01bf      	lsls	r7, r7, #6
 8000b06:	09bf      	lsrs	r7, r7, #6
 8000b08:	0038      	movs	r0, r7
 8000b0a:	f000 f8f9 	bl	8000d00 <__clzsi2>
 8000b0e:	003b      	movs	r3, r7
 8000b10:	3805      	subs	r0, #5
 8000b12:	4083      	lsls	r3, r0
 8000b14:	0034      	movs	r4, r6
 8000b16:	2501      	movs	r5, #1
 8000b18:	e6ca      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x43c>
 8000b1e:	e6b5      	b.n	800088c <__aeabi_fsub+0x1a8>
 8000b20:	2401      	movs	r4, #1
 8000b22:	0007      	movs	r7, r0
 8000b24:	4034      	ands	r4, r6
 8000b26:	e658      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b28:	4663      	mov	r3, ip
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fsub+0x44c>
 8000b2e:	e6e9      	b.n	8000904 <__aeabi_fsub+0x220>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x452>
 8000b34:	e6ea      	b.n	800090c <__aeabi_fsub+0x228>
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	429f      	cmp	r7, r3
 8000b3c:	d200      	bcs.n	8000b40 <__aeabi_fsub+0x45c>
 8000b3e:	e6e5      	b.n	800090c <__aeabi_fsub+0x228>
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d300      	bcc.n	8000b46 <__aeabi_fsub+0x462>
 8000b44:	e6e2      	b.n	800090c <__aeabi_fsub+0x228>
 8000b46:	0007      	movs	r7, r0
 8000b48:	e6e0      	b.n	800090c <__aeabi_fsub+0x228>
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x46c>
 8000b4e:	e69e      	b.n	800088e <__aeabi_fsub+0x1aa>
 8000b50:	2300      	movs	r3, #0
 8000b52:	08cf      	lsrs	r7, r1, #3
 8000b54:	e641      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b56:	0034      	movs	r4, r6
 8000b58:	2301      	movs	r3, #1
 8000b5a:	08ff      	lsrs	r7, r7, #3
 8000b5c:	e63d      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x480>
 8000b62:	e693      	b.n	800088c <__aeabi_fsub+0x1a8>
 8000b64:	2300      	movs	r3, #0
 8000b66:	08ff      	lsrs	r7, r7, #3
 8000b68:	e637      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	08d7      	lsrs	r7, r2, #3
 8000b6e:	e634      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b70:	2301      	movs	r3, #1
 8000b72:	08cf      	lsrs	r7, r1, #3
 8000b74:	e631      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	000b      	movs	r3, r1
 8000b7a:	04d2      	lsls	r2, r2, #19
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	4211      	tst	r1, r2
 8000b82:	d000      	beq.n	8000b86 <__aeabi_fsub+0x4a2>
 8000b84:	e6ae      	b.n	80008e4 <__aeabi_fsub+0x200>
 8000b86:	08cf      	lsrs	r7, r1, #3
 8000b88:	e627      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0x4ac>
 8000b8e:	e75f      	b.n	8000a50 <__aeabi_fsub+0x36c>
 8000b90:	1b56      	subs	r6, r2, r5
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d101      	bne.n	8000b9a <__aeabi_fsub+0x4b6>
 8000b96:	0033      	movs	r3, r6
 8000b98:	e6e7      	b.n	800096a <__aeabi_fsub+0x286>
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	4660      	mov	r0, ip
 8000b9e:	04db      	lsls	r3, r3, #19
 8000ba0:	4318      	orrs	r0, r3
 8000ba2:	4684      	mov	ip, r0
 8000ba4:	e6eb      	b.n	800097e <__aeabi_fsub+0x29a>
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	7dffffff 	.word	0x7dffffff

08000bac <__aeabi_f2iz>:
 8000bac:	0241      	lsls	r1, r0, #9
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0fc3      	lsrs	r3, r0, #31
 8000bb2:	0a49      	lsrs	r1, r1, #9
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	0e12      	lsrs	r2, r2, #24
 8000bb8:	2a7e      	cmp	r2, #126	@ 0x7e
 8000bba:	dd03      	ble.n	8000bc4 <__aeabi_f2iz+0x18>
 8000bbc:	2a9d      	cmp	r2, #157	@ 0x9d
 8000bbe:	dd02      	ble.n	8000bc6 <__aeabi_f2iz+0x1a>
 8000bc0:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <__aeabi_f2iz+0x3c>)
 8000bc2:	1898      	adds	r0, r3, r2
 8000bc4:	4770      	bx	lr
 8000bc6:	2080      	movs	r0, #128	@ 0x80
 8000bc8:	0400      	lsls	r0, r0, #16
 8000bca:	4301      	orrs	r1, r0
 8000bcc:	2a95      	cmp	r2, #149	@ 0x95
 8000bce:	dc07      	bgt.n	8000be0 <__aeabi_f2iz+0x34>
 8000bd0:	2096      	movs	r0, #150	@ 0x96
 8000bd2:	1a82      	subs	r2, r0, r2
 8000bd4:	40d1      	lsrs	r1, r2
 8000bd6:	4248      	negs	r0, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f3      	bne.n	8000bc4 <__aeabi_f2iz+0x18>
 8000bdc:	0008      	movs	r0, r1
 8000bde:	e7f1      	b.n	8000bc4 <__aeabi_f2iz+0x18>
 8000be0:	3a96      	subs	r2, #150	@ 0x96
 8000be2:	4091      	lsls	r1, r2
 8000be4:	e7f7      	b.n	8000bd6 <__aeabi_f2iz+0x2a>
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	7fffffff 	.word	0x7fffffff

08000bec <__aeabi_i2f>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d012      	beq.n	8000c18 <__aeabi_i2f+0x2c>
 8000bf2:	17c3      	asrs	r3, r0, #31
 8000bf4:	18c5      	adds	r5, r0, r3
 8000bf6:	405d      	eors	r5, r3
 8000bf8:	0fc4      	lsrs	r4, r0, #31
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	f000 f880 	bl	8000d00 <__clzsi2>
 8000c00:	239e      	movs	r3, #158	@ 0x9e
 8000c02:	1a1b      	subs	r3, r3, r0
 8000c04:	2b96      	cmp	r3, #150	@ 0x96
 8000c06:	dc0f      	bgt.n	8000c28 <__aeabi_i2f+0x3c>
 8000c08:	2808      	cmp	r0, #8
 8000c0a:	d038      	beq.n	8000c7e <__aeabi_i2f+0x92>
 8000c0c:	3808      	subs	r0, #8
 8000c0e:	4085      	lsls	r5, r0
 8000c10:	026d      	lsls	r5, r5, #9
 8000c12:	0a6d      	lsrs	r5, r5, #9
 8000c14:	b2d8      	uxtb	r0, r3
 8000c16:	e002      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	05c0      	lsls	r0, r0, #23
 8000c20:	4328      	orrs	r0, r5
 8000c22:	07e4      	lsls	r4, r4, #31
 8000c24:	4320      	orrs	r0, r4
 8000c26:	bd70      	pop	{r4, r5, r6, pc}
 8000c28:	2b99      	cmp	r3, #153	@ 0x99
 8000c2a:	dc14      	bgt.n	8000c56 <__aeabi_i2f+0x6a>
 8000c2c:	1f42      	subs	r2, r0, #5
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	002a      	movs	r2, r5
 8000c32:	4915      	ldr	r1, [pc, #84]	@ (8000c88 <__aeabi_i2f+0x9c>)
 8000c34:	4011      	ands	r1, r2
 8000c36:	0755      	lsls	r5, r2, #29
 8000c38:	d01c      	beq.n	8000c74 <__aeabi_i2f+0x88>
 8000c3a:	250f      	movs	r5, #15
 8000c3c:	402a      	ands	r2, r5
 8000c3e:	2a04      	cmp	r2, #4
 8000c40:	d018      	beq.n	8000c74 <__aeabi_i2f+0x88>
 8000c42:	3104      	adds	r1, #4
 8000c44:	08ca      	lsrs	r2, r1, #3
 8000c46:	0149      	lsls	r1, r1, #5
 8000c48:	d515      	bpl.n	8000c76 <__aeabi_i2f+0x8a>
 8000c4a:	239f      	movs	r3, #159	@ 0x9f
 8000c4c:	0252      	lsls	r2, r2, #9
 8000c4e:	1a18      	subs	r0, r3, r0
 8000c50:	0a55      	lsrs	r5, r2, #9
 8000c52:	b2c0      	uxtb	r0, r0
 8000c54:	e7e3      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c56:	2205      	movs	r2, #5
 8000c58:	0029      	movs	r1, r5
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	40d1      	lsrs	r1, r2
 8000c5e:	0002      	movs	r2, r0
 8000c60:	321b      	adds	r2, #27
 8000c62:	4095      	lsls	r5, r2
 8000c64:	002a      	movs	r2, r5
 8000c66:	1e55      	subs	r5, r2, #1
 8000c68:	41aa      	sbcs	r2, r5
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	4906      	ldr	r1, [pc, #24]	@ (8000c88 <__aeabi_i2f+0x9c>)
 8000c6e:	4011      	ands	r1, r2
 8000c70:	0755      	lsls	r5, r2, #29
 8000c72:	d1e2      	bne.n	8000c3a <__aeabi_i2f+0x4e>
 8000c74:	08ca      	lsrs	r2, r1, #3
 8000c76:	0252      	lsls	r2, r2, #9
 8000c78:	0a55      	lsrs	r5, r2, #9
 8000c7a:	b2d8      	uxtb	r0, r3
 8000c7c:	e7cf      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c7e:	026d      	lsls	r5, r5, #9
 8000c80:	0a6d      	lsrs	r5, r5, #9
 8000c82:	308e      	adds	r0, #142	@ 0x8e
 8000c84:	e7cb      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	fbffffff 	.word	0xfbffffff

08000c8c <__aeabi_cfrcmple>:
 8000c8c:	4684      	mov	ip, r0
 8000c8e:	0008      	movs	r0, r1
 8000c90:	4661      	mov	r1, ip
 8000c92:	e7ff      	b.n	8000c94 <__aeabi_cfcmpeq>

08000c94 <__aeabi_cfcmpeq>:
 8000c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c96:	f000 f8c1 	bl	8000e1c <__lesf2>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d401      	bmi.n	8000ca2 <__aeabi_cfcmpeq+0xe>
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	42c8      	cmn	r0, r1
 8000ca2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ca4 <__aeabi_fcmpeq>:
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	f000 f849 	bl	8000d3c <__eqsf2>
 8000caa:	4240      	negs	r0, r0
 8000cac:	3001      	adds	r0, #1
 8000cae:	bd10      	pop	{r4, pc}

08000cb0 <__aeabi_fcmplt>:
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	f000 f8b3 	bl	8000e1c <__lesf2>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fcmplt+0xe>
 8000cba:	2000      	movs	r0, #0
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)

08000cc4 <__aeabi_fcmple>:
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	f000 f8a9 	bl	8000e1c <__lesf2>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	dd01      	ble.n	8000cd2 <__aeabi_fcmple+0xe>
 8000cce:	2000      	movs	r0, #0
 8000cd0:	bd10      	pop	{r4, pc}
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	bd10      	pop	{r4, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)

08000cd8 <__aeabi_fcmpgt>:
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	f000 f857 	bl	8000d8c <__gesf2>
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	dc01      	bgt.n	8000ce6 <__aeabi_fcmpgt+0xe>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	bd10      	pop	{r4, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)

08000cec <__aeabi_fcmpge>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	f000 f84d 	bl	8000d8c <__gesf2>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	da01      	bge.n	8000cfa <__aeabi_fcmpge+0xe>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	bd10      	pop	{r4, pc}
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	bd10      	pop	{r4, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)

08000d00 <__clzsi2>:
 8000d00:	211c      	movs	r1, #28
 8000d02:	2301      	movs	r3, #1
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d301      	bcc.n	8000d0e <__clzsi2+0xe>
 8000d0a:	0c00      	lsrs	r0, r0, #16
 8000d0c:	3910      	subs	r1, #16
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d301      	bcc.n	8000d18 <__clzsi2+0x18>
 8000d14:	0a00      	lsrs	r0, r0, #8
 8000d16:	3908      	subs	r1, #8
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d301      	bcc.n	8000d22 <__clzsi2+0x22>
 8000d1e:	0900      	lsrs	r0, r0, #4
 8000d20:	3904      	subs	r1, #4
 8000d22:	a202      	add	r2, pc, #8	@ (adr r2, 8000d2c <__clzsi2+0x2c>)
 8000d24:	5c10      	ldrb	r0, [r2, r0]
 8000d26:	1840      	adds	r0, r0, r1
 8000d28:	4770      	bx	lr
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	02020304 	.word	0x02020304
 8000d30:	01010101 	.word	0x01010101
	...

08000d3c <__eqsf2>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	024e      	lsls	r6, r1, #9
 8000d42:	004c      	lsls	r4, r1, #1
 8000d44:	0245      	lsls	r5, r0, #9
 8000d46:	0a6d      	lsrs	r5, r5, #9
 8000d48:	0e12      	lsrs	r2, r2, #24
 8000d4a:	0fc3      	lsrs	r3, r0, #31
 8000d4c:	0a76      	lsrs	r6, r6, #9
 8000d4e:	0e24      	lsrs	r4, r4, #24
 8000d50:	0fc9      	lsrs	r1, r1, #31
 8000d52:	2aff      	cmp	r2, #255	@ 0xff
 8000d54:	d010      	beq.n	8000d78 <__eqsf2+0x3c>
 8000d56:	2cff      	cmp	r4, #255	@ 0xff
 8000d58:	d00c      	beq.n	8000d74 <__eqsf2+0x38>
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	42a2      	cmp	r2, r4
 8000d5e:	d10a      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d60:	42b5      	cmp	r5, r6
 8000d62:	d108      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d00f      	beq.n	8000d88 <__eqsf2+0x4c>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d104      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d6c:	0028      	movs	r0, r5
 8000d6e:	1e43      	subs	r3, r0, #1
 8000d70:	4198      	sbcs	r0, r3
 8000d72:	e000      	b.n	8000d76 <__eqsf2+0x3a>
 8000d74:	2001      	movs	r0, #1
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	2001      	movs	r0, #1
 8000d7a:	2cff      	cmp	r4, #255	@ 0xff
 8000d7c:	d1fb      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d7e:	4335      	orrs	r5, r6
 8000d80:	d1f9      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d82:	404b      	eors	r3, r1
 8000d84:	0018      	movs	r0, r3
 8000d86:	e7f6      	b.n	8000d76 <__eqsf2+0x3a>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7f4      	b.n	8000d76 <__eqsf2+0x3a>

08000d8c <__gesf2>:
 8000d8c:	b530      	push	{r4, r5, lr}
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0244      	lsls	r4, r0, #9
 8000d92:	024d      	lsls	r5, r1, #9
 8000d94:	0fc3      	lsrs	r3, r0, #31
 8000d96:	0048      	lsls	r0, r1, #1
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	0e12      	lsrs	r2, r2, #24
 8000d9c:	0a6d      	lsrs	r5, r5, #9
 8000d9e:	0e00      	lsrs	r0, r0, #24
 8000da0:	0fc9      	lsrs	r1, r1, #31
 8000da2:	2aff      	cmp	r2, #255	@ 0xff
 8000da4:	d018      	beq.n	8000dd8 <__gesf2+0x4c>
 8000da6:	28ff      	cmp	r0, #255	@ 0xff
 8000da8:	d00a      	beq.n	8000dc0 <__gesf2+0x34>
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d11e      	bne.n	8000dec <__gesf2+0x60>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d10a      	bne.n	8000dc8 <__gesf2+0x3c>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d029      	beq.n	8000e0a <__gesf2+0x7e>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d12d      	bne.n	8000e16 <__gesf2+0x8a>
 8000dba:	0048      	lsls	r0, r1, #1
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	bd30      	pop	{r4, r5, pc}
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d125      	bne.n	8000e10 <__gesf2+0x84>
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d101      	bne.n	8000dcc <__gesf2+0x40>
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d0f6      	beq.n	8000dba <__gesf2+0x2e>
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d019      	beq.n	8000e04 <__gesf2+0x78>
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	4318      	orrs	r0, r3
 8000dd6:	e7f2      	b.n	8000dbe <__gesf2+0x32>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d119      	bne.n	8000e10 <__gesf2+0x84>
 8000ddc:	28ff      	cmp	r0, #255	@ 0xff
 8000dde:	d1f7      	bne.n	8000dd0 <__gesf2+0x44>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d115      	bne.n	8000e10 <__gesf2+0x84>
 8000de4:	2000      	movs	r0, #0
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d1f2      	bne.n	8000dd0 <__gesf2+0x44>
 8000dea:	e7e8      	b.n	8000dbe <__gesf2+0x32>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d0ef      	beq.n	8000dd0 <__gesf2+0x44>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d1ed      	bne.n	8000dd0 <__gesf2+0x44>
 8000df4:	4282      	cmp	r2, r0
 8000df6:	dceb      	bgt.n	8000dd0 <__gesf2+0x44>
 8000df8:	db04      	blt.n	8000e04 <__gesf2+0x78>
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	d8e8      	bhi.n	8000dd0 <__gesf2+0x44>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	42ac      	cmp	r4, r5
 8000e02:	d2dc      	bcs.n	8000dbe <__gesf2+0x32>
 8000e04:	0058      	lsls	r0, r3, #1
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7d9      	b.n	8000dbe <__gesf2+0x32>
 8000e0a:	2c00      	cmp	r4, #0
 8000e0c:	d0d7      	beq.n	8000dbe <__gesf2+0x32>
 8000e0e:	e7df      	b.n	8000dd0 <__gesf2+0x44>
 8000e10:	2002      	movs	r0, #2
 8000e12:	4240      	negs	r0, r0
 8000e14:	e7d3      	b.n	8000dbe <__gesf2+0x32>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d1da      	bne.n	8000dd0 <__gesf2+0x44>
 8000e1a:	e7ee      	b.n	8000dfa <__gesf2+0x6e>

08000e1c <__lesf2>:
 8000e1c:	b530      	push	{r4, r5, lr}
 8000e1e:	0042      	lsls	r2, r0, #1
 8000e20:	0244      	lsls	r4, r0, #9
 8000e22:	024d      	lsls	r5, r1, #9
 8000e24:	0fc3      	lsrs	r3, r0, #31
 8000e26:	0048      	lsls	r0, r1, #1
 8000e28:	0a64      	lsrs	r4, r4, #9
 8000e2a:	0e12      	lsrs	r2, r2, #24
 8000e2c:	0a6d      	lsrs	r5, r5, #9
 8000e2e:	0e00      	lsrs	r0, r0, #24
 8000e30:	0fc9      	lsrs	r1, r1, #31
 8000e32:	2aff      	cmp	r2, #255	@ 0xff
 8000e34:	d017      	beq.n	8000e66 <__lesf2+0x4a>
 8000e36:	28ff      	cmp	r0, #255	@ 0xff
 8000e38:	d00a      	beq.n	8000e50 <__lesf2+0x34>
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d11b      	bne.n	8000e76 <__lesf2+0x5a>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d10a      	bne.n	8000e58 <__lesf2+0x3c>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d01d      	beq.n	8000e82 <__lesf2+0x66>
 8000e46:	2c00      	cmp	r4, #0
 8000e48:	d12d      	bne.n	8000ea6 <__lesf2+0x8a>
 8000e4a:	0048      	lsls	r0, r1, #1
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e011      	b.n	8000e74 <__lesf2+0x58>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d10e      	bne.n	8000e72 <__lesf2+0x56>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d101      	bne.n	8000e5c <__lesf2+0x40>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d0f6      	beq.n	8000e4a <__lesf2+0x2e>
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d10c      	bne.n	8000e7a <__lesf2+0x5e>
 8000e60:	0058      	lsls	r0, r3, #1
 8000e62:	3801      	subs	r0, #1
 8000e64:	e006      	b.n	8000e74 <__lesf2+0x58>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d103      	bne.n	8000e72 <__lesf2+0x56>
 8000e6a:	28ff      	cmp	r0, #255	@ 0xff
 8000e6c:	d105      	bne.n	8000e7a <__lesf2+0x5e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d015      	beq.n	8000e9e <__lesf2+0x82>
 8000e72:	2002      	movs	r0, #2
 8000e74:	bd30      	pop	{r4, r5, pc}
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d106      	bne.n	8000e88 <__lesf2+0x6c>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	4318      	orrs	r0, r3
 8000e80:	e7f8      	b.n	8000e74 <__lesf2+0x58>
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d0f6      	beq.n	8000e74 <__lesf2+0x58>
 8000e86:	e7f8      	b.n	8000e7a <__lesf2+0x5e>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d1f6      	bne.n	8000e7a <__lesf2+0x5e>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	dcf4      	bgt.n	8000e7a <__lesf2+0x5e>
 8000e90:	dbe6      	blt.n	8000e60 <__lesf2+0x44>
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	d8f1      	bhi.n	8000e7a <__lesf2+0x5e>
 8000e96:	2000      	movs	r0, #0
 8000e98:	42ac      	cmp	r4, r5
 8000e9a:	d2eb      	bcs.n	8000e74 <__lesf2+0x58>
 8000e9c:	e7e0      	b.n	8000e60 <__lesf2+0x44>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d1ea      	bne.n	8000e7a <__lesf2+0x5e>
 8000ea4:	e7e6      	b.n	8000e74 <__lesf2+0x58>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d1e7      	bne.n	8000e7a <__lesf2+0x5e>
 8000eaa:	e7f2      	b.n	8000e92 <__lesf2+0x76>

08000eac <HAL_GPIO_EXTI_Falling_Callback>:
void CalculateSpeed();		// Function for calculating actual and smooth speed
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){		// EXTI Handler Falling SWITCHERS
 8000eac:	b510      	push	{r4, lr}

	if(GPIO_Pin == Sw1_Pin){
 8000eae:	2801      	cmp	r0, #1
 8000eb0:	d004      	beq.n	8000ebc <HAL_GPIO_EXTI_Falling_Callback+0x10>
		TIM17->ARR = 14999;
		TIM17->SR &= ~TIM_SR_UIF;
		HAL_TIM_Base_Start_IT(&htim17);
	}

	if(GPIO_Pin == Sw2_Pin){
 8000eb2:	2880      	cmp	r0, #128	@ 0x80
 8000eb4:	d01e      	beq.n	8000ef4 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		TIM17->ARR = 14999;
		TIM17->SR &= ~TIM_SR_UIF;
		HAL_TIM_Base_Start_IT(&htim17);
	}

	if(GPIO_Pin == Sw3_Pin){
 8000eb6:	2840      	cmp	r0, #64	@ 0x40
 8000eb8:	d038      	beq.n	8000f2c <HAL_GPIO_EXTI_Falling_Callback+0x80>
		TIM17->ARR = 14999;
		TIM17->SR &= ~TIM_SR_UIF;
		HAL_TIM_Base_Start_IT(&htim17);

	}
}
 8000eba:	bd10      	pop	{r4, pc}
		switchers |= SW1;
 8000ebc:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
		switchers &= ~SLEEP;
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	313f      	adds	r1, #63	@ 0x3f
 8000eca:	438a      	bics	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8000ece:	4c26      	ldr	r4, [pc, #152]	@ (8000f68 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000ed0:	0020      	movs	r0, r4
 8000ed2:	f004 fabd 	bl	8005450 <HAL_TIM_Base_Stop_IT>
		TIM17->CNT = 0;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <HAL_GPIO_EXTI_Falling_Callback+0xc0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM17->PSC = 15999;
 8000edc:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8000ede:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM17->ARR = 14999;
 8000ee0:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_GPIO_EXTI_Falling_Callback+0xc8>)
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM17->SR &= ~TIM_SR_UIF;
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	438a      	bics	r2, r1
 8000eea:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim17);
 8000eec:	0020      	movs	r0, r4
 8000eee:	f004 fa7d 	bl	80053ec <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == Sw3_Pin){
 8000ef2:	e7e2      	b.n	8000eba <HAL_GPIO_EXTI_Falling_Callback+0xe>
		switchers |= SW2;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	2102      	movs	r1, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
		switchers &= ~SLEEP;
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	313e      	adds	r1, #62	@ 0x3e
 8000f02:	438a      	bics	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8000f06:	4c18      	ldr	r4, [pc, #96]	@ (8000f68 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000f08:	0020      	movs	r0, r4
 8000f0a:	f004 faa1 	bl	8005450 <HAL_TIM_Base_Stop_IT>
		TIM17->CNT = 0;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <HAL_GPIO_EXTI_Falling_Callback+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM17->PSC = 15999;
 8000f14:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM17->ARR = 14999;
 8000f18:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <HAL_GPIO_EXTI_Falling_Callback+0xc8>)
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM17->SR &= ~TIM_SR_UIF;
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	438a      	bics	r2, r1
 8000f22:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim17);
 8000f24:	0020      	movs	r0, r4
 8000f26:	f004 fa61 	bl	80053ec <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin == Sw3_Pin){
 8000f2a:	e7c6      	b.n	8000eba <HAL_GPIO_EXTI_Falling_Callback+0xe>
		switchers |= SW3;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	2104      	movs	r1, #4
 8000f32:	430a      	orrs	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
		switchers &= ~SLEEP;
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	313c      	adds	r1, #60	@ 0x3c
 8000f3a:	438a      	bics	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8000f3e:	4c0a      	ldr	r4, [pc, #40]	@ (8000f68 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000f40:	0020      	movs	r0, r4
 8000f42:	f004 fa85 	bl	8005450 <HAL_TIM_Base_Stop_IT>
		TIM17->CNT = 0;
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_GPIO_EXTI_Falling_Callback+0xc0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM17->PSC = 15999;
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM17->ARR = 14999;
 8000f50:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_GPIO_EXTI_Falling_Callback+0xc8>)
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIM17->SR &= ~TIM_SR_UIF;
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim17);
 8000f5c:	0020      	movs	r0, r4
 8000f5e:	f004 fa45 	bl	80053ec <HAL_TIM_Base_Start_IT>
}
 8000f62:	e7aa      	b.n	8000eba <HAL_GPIO_EXTI_Falling_Callback+0xe>
 8000f64:	20000014 	.word	0x20000014
 8000f68:	20000168 	.word	0x20000168
 8000f6c:	40014800 	.word	0x40014800
 8000f70:	00003e7f 	.word	0x00003e7f
 8000f74:	00003a97 	.word	0x00003a97

08000f78 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){		// EXTI Handler Rising SWITCHERS
	if(GPIO_Pin == Sw1_Pin){
 8000f78:	2801      	cmp	r0, #1
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_EXTI_Rising_Callback+0x14>
		switchers &= ~SW1;
	}

	if(GPIO_Pin == Sw2_Pin){
 8000f7c:	2880      	cmp	r0, #128	@ 0x80
 8000f7e:	d10b      	bne.n	8000f98 <HAL_GPIO_EXTI_Rising_Callback+0x20>
		switchers &= ~SW2;
 8000f80:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000f82:	7813      	ldrb	r3, [r2, #0]
 8000f84:	2102      	movs	r1, #2
 8000f86:	438b      	bics	r3, r1
 8000f88:	7013      	strb	r3, [r2, #0]
	}

	if(GPIO_Pin == Sw3_Pin){
 8000f8a:	e004      	b.n	8000f96 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
		switchers &= ~SW1;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000f8e:	7813      	ldrb	r3, [r2, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	438b      	bics	r3, r1
 8000f94:	7013      	strb	r3, [r2, #0]
		switchers &= ~SW3;
	}

}
 8000f96:	4770      	bx	lr
	if(GPIO_Pin == Sw3_Pin){
 8000f98:	2840      	cmp	r0, #64	@ 0x40
 8000f9a:	d1fc      	bne.n	8000f96 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
		switchers &= ~SW3;
 8000f9c:	4a02      	ldr	r2, [pc, #8]	@ (8000fa8 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000f9e:	7813      	ldrb	r3, [r2, #0]
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	438b      	bics	r3, r1
 8000fa4:	7013      	strb	r3, [r2, #0]
}
 8000fa6:	e7f6      	b.n	8000f96 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
 8000fa8:	20000014 	.word	0x20000014

08000fac <HAL_ADC_LevelOutOfWindowCallback>:


void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) 		// ADC Analog WatchDog Handler
{
 8000fac:	b570      	push	{r4, r5, r6, lr}

HAL_ADC_Stop_DMA(&hadc1);
 8000fae:	4868      	ldr	r0, [pc, #416]	@ (8001150 <HAL_ADC_LevelOutOfWindowCallback+0x1a4>)
 8000fb0:	f002 faec 	bl	800358c <HAL_ADC_Stop_DMA>


				if(switchers & START_TIM14){
 8000fb4:	4b67      	ldr	r3, [pc, #412]	@ (8001154 <HAL_ADC_LevelOutOfWindowCallback+0x1a8>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	069b      	lsls	r3, r3, #26
 8000fba:	d400      	bmi.n	8000fbe <HAL_ADC_LevelOutOfWindowCallback+0x12>
 8000fbc:	e09f      	b.n	80010fe <HAL_ADC_LevelOutOfWindowCallback+0x152>
					duration = TIM14->CNT;
 8000fbe:	4a66      	ldr	r2, [pc, #408]	@ (8001158 <HAL_ADC_LevelOutOfWindowCallback+0x1ac>)
 8000fc0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4965      	ldr	r1, [pc, #404]	@ (800115c <HAL_ADC_LevelOutOfWindowCallback+0x1b0>)
 8000fc6:	800b      	strh	r3, [r1, #0]
					TIM14->CNT = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6253      	str	r3, [r2, #36]	@ 0x24

					return 0;
				}


				if(duration > 37){
 8000fcc:	4b63      	ldr	r3, [pc, #396]	@ (800115c <HAL_ADC_LevelOutOfWindowCallback+0x1b0>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2b25      	cmp	r3, #37	@ 0x25
 8000fd4:	d800      	bhi.n	8000fd8 <HAL_ADC_LevelOutOfWindowCallback+0x2c>
 8000fd6:	e07c      	b.n	80010d2 <HAL_ADC_LevelOutOfWindowCallback+0x126>

					switchers &= ~SLEEP;
 8000fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8001154 <HAL_ADC_LevelOutOfWindowCallback+0x1a8>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2140      	movs	r1, #64	@ 0x40
 8000fde:	438b      	bics	r3, r1
 8000fe0:	7013      	strb	r3, [r2, #0]
					impulse++;
 8000fe2:	4a5f      	ldr	r2, [pc, #380]	@ (8001160 <HAL_ADC_LevelOutOfWindowCallback+0x1b4>)
 8000fe4:	7813      	ldrb	r3, [r2, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	7013      	strb	r3, [r2, #0]

					travel_time_msec += duration;
 8000fec:	4b5b      	ldr	r3, [pc, #364]	@ (800115c <HAL_ADC_LevelOutOfWindowCallback+0x1b0>)
 8000fee:	8819      	ldrh	r1, [r3, #0]
 8000ff0:	4a5c      	ldr	r2, [pc, #368]	@ (8001164 <HAL_ADC_LevelOutOfWindowCallback+0x1b8>)
 8000ff2:	8813      	ldrh	r3, [r2, #0]
 8000ff4:	185b      	adds	r3, r3, r1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	8013      	strh	r3, [r2, #0]
					if(travel_time_msec >  1000){
 8000ffa:	8813      	ldrh	r3, [r2, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	22fa      	movs	r2, #250	@ 0xfa
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4293      	cmp	r3, r2
 8001004:	d913      	bls.n	800102e <HAL_ADC_LevelOutOfWindowCallback+0x82>
						travel_time_sec += travel_time_msec/1000;
 8001006:	4d57      	ldr	r5, [pc, #348]	@ (8001164 <HAL_ADC_LevelOutOfWindowCallback+0x1b8>)
 8001008:	8828      	ldrh	r0, [r5, #0]
 800100a:	b280      	uxth	r0, r0
 800100c:	4e56      	ldr	r6, [pc, #344]	@ (8001168 <HAL_ADC_LevelOutOfWindowCallback+0x1bc>)
 800100e:	7834      	ldrb	r4, [r6, #0]
 8001010:	b2e4      	uxtb	r4, r4
 8001012:	0011      	movs	r1, r2
 8001014:	f7ff f87e 	bl	8000114 <__udivsi3>
 8001018:	1824      	adds	r4, r4, r0
 800101a:	b2e4      	uxtb	r4, r4
 800101c:	7034      	strb	r4, [r6, #0]
						travel_time_msec = travel_time_msec % 1000;
 800101e:	8828      	ldrh	r0, [r5, #0]
 8001020:	b280      	uxth	r0, r0
 8001022:	21fa      	movs	r1, #250	@ 0xfa
 8001024:	0089      	lsls	r1, r1, #2
 8001026:	f7ff f8fb 	bl	8000220 <__aeabi_uidivmod>
 800102a:	b289      	uxth	r1, r1
 800102c:	8029      	strh	r1, [r5, #0]
					}
					if(travel_time_sec >= 60){
 800102e:	4b4e      	ldr	r3, [pc, #312]	@ (8001168 <HAL_ADC_LevelOutOfWindowCallback+0x1bc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b3b      	cmp	r3, #59	@ 0x3b
 8001036:	d90f      	bls.n	8001058 <HAL_ADC_LevelOutOfWindowCallback+0xac>
						travel_time_min += travel_time_sec/60;
 8001038:	4d4b      	ldr	r5, [pc, #300]	@ (8001168 <HAL_ADC_LevelOutOfWindowCallback+0x1bc>)
 800103a:	7828      	ldrb	r0, [r5, #0]
 800103c:	b2c0      	uxtb	r0, r0
 800103e:	4e4b      	ldr	r6, [pc, #300]	@ (800116c <HAL_ADC_LevelOutOfWindowCallback+0x1c0>)
 8001040:	7834      	ldrb	r4, [r6, #0]
 8001042:	b2e4      	uxtb	r4, r4
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f7ff f865 	bl	8000114 <__udivsi3>
 800104a:	1824      	adds	r4, r4, r0
 800104c:	b2e4      	uxtb	r4, r4
 800104e:	7034      	strb	r4, [r6, #0]
						travel_time_sec =  travel_time_sec - 60;
 8001050:	782b      	ldrb	r3, [r5, #0]
 8001052:	3b3c      	subs	r3, #60	@ 0x3c
 8001054:	b2db      	uxtb	r3, r3
 8001056:	702b      	strb	r3, [r5, #0]
					}
					if(travel_time_min >= 60){
 8001058:	4b44      	ldr	r3, [pc, #272]	@ (800116c <HAL_ADC_LevelOutOfWindowCallback+0x1c0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001060:	d90f      	bls.n	8001082 <HAL_ADC_LevelOutOfWindowCallback+0xd6>
						travel_time_hours +=  travel_time_min/60;
 8001062:	4d42      	ldr	r5, [pc, #264]	@ (800116c <HAL_ADC_LevelOutOfWindowCallback+0x1c0>)
 8001064:	7828      	ldrb	r0, [r5, #0]
 8001066:	b2c0      	uxtb	r0, r0
 8001068:	4e41      	ldr	r6, [pc, #260]	@ (8001170 <HAL_ADC_LevelOutOfWindowCallback+0x1c4>)
 800106a:	7834      	ldrb	r4, [r6, #0]
 800106c:	b2e4      	uxtb	r4, r4
 800106e:	213c      	movs	r1, #60	@ 0x3c
 8001070:	f7ff f850 	bl	8000114 <__udivsi3>
 8001074:	1824      	adds	r4, r4, r0
 8001076:	b2e4      	uxtb	r4, r4
 8001078:	7034      	strb	r4, [r6, #0]
						travel_time_min = travel_time_min - 60;
 800107a:	782b      	ldrb	r3, [r5, #0]
 800107c:	3b3c      	subs	r3, #60	@ 0x3c
 800107e:	b2db      	uxtb	r3, r3
 8001080:	702b      	strb	r3, [r5, #0]
					}
					if(travel_time_hours >= 24)
 8001082:	4b3b      	ldr	r3, [pc, #236]	@ (8001170 <HAL_ADC_LevelOutOfWindowCallback+0x1c4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b17      	cmp	r3, #23
 800108a:	d902      	bls.n	8001092 <HAL_ADC_LevelOutOfWindowCallback+0xe6>
						travel_time_hours = 0;
 800108c:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <HAL_ADC_LevelOutOfWindowCallback+0x1c4>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

					uint8_t static time_for_avr;
					if(time_for_avr != sTime.Minutes){
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <HAL_ADC_LevelOutOfWindowCallback+0x1c8>)
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	4a38      	ldr	r2, [pc, #224]	@ (8001178 <HAL_ADC_LevelOutOfWindowCallback+0x1cc>)
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d007      	beq.n	80010ae <HAL_ADC_LevelOutOfWindowCallback+0x102>
						time_for_avr = sTime.Minutes;
 800109e:	4a36      	ldr	r2, [pc, #216]	@ (8001178 <HAL_ADC_LevelOutOfWindowCallback+0x1cc>)
 80010a0:	7013      	strb	r3, [r2, #0]
						average_speed_array[time_for_avr] = smooth_speed;
 80010a2:	4a36      	ldr	r2, [pc, #216]	@ (800117c <HAL_ADC_LevelOutOfWindowCallback+0x1d0>)
 80010a4:	8811      	ldrh	r1, [r2, #0]
 80010a6:	b289      	uxth	r1, r1
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_ADC_LevelOutOfWindowCallback+0x1d4>)
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	5299      	strh	r1, [r3, r2]
					}




					HAL_TIM_Base_Stop_IT(&htim17);
 80010ae:	4c35      	ldr	r4, [pc, #212]	@ (8001184 <HAL_ADC_LevelOutOfWindowCallback+0x1d8>)
 80010b0:	0020      	movs	r0, r4
 80010b2:	f004 f9cd 	bl	8005450 <HAL_TIM_Base_Stop_IT>
					TIM17->CNT = 0;
 80010b6:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <HAL_ADC_LevelOutOfWindowCallback+0x1dc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
					TIM17->PSC = 15999;
 80010bc:	4a33      	ldr	r2, [pc, #204]	@ (800118c <HAL_ADC_LevelOutOfWindowCallback+0x1e0>)
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
					TIM17->ARR = 14999;
 80010c0:	4a33      	ldr	r2, [pc, #204]	@ (8001190 <HAL_ADC_LevelOutOfWindowCallback+0x1e4>)
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
					TIM17->SR &= ~TIM_SR_UIF;
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	2101      	movs	r1, #1
 80010c8:	438a      	bics	r2, r1
 80010ca:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim17);
 80010cc:	0020      	movs	r0, r4
 80010ce:	f004 f98d 	bl	80053ec <HAL_TIM_Base_Start_IT>

				}



				switchers &= ~TIMER3;
 80010d2:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <HAL_ADC_LevelOutOfWindowCallback+0x1a8>)
 80010d4:	7813      	ldrb	r3, [r2, #0]
 80010d6:	2108      	movs	r1, #8
 80010d8:	438b      	bics	r3, r1
 80010da:	7013      	strb	r3, [r2, #0]
				HAL_TIM_Base_Stop_IT(&htim3);
 80010dc:	4c2d      	ldr	r4, [pc, #180]	@ (8001194 <HAL_ADC_LevelOutOfWindowCallback+0x1e8>)
 80010de:	0020      	movs	r0, r4
 80010e0:	f004 f9b6 	bl	8005450 <HAL_TIM_Base_Stop_IT>
				TIM3->CNT = 0;
 80010e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <HAL_ADC_LevelOutOfWindowCallback+0x1ec>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
				TIM3->SR &= ~TIM_SR_UIF;
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	2101      	movs	r1, #1
 80010ee:	438a      	bics	r2, r1
 80010f0:	611a      	str	r2, [r3, #16]
				TIM3->ARR = DELAY_ADC;
 80010f2:	221d      	movs	r2, #29
 80010f4:	62da      	str	r2, [r3, #44]	@ 0x2c

				HAL_TIM_Base_Start_IT(&htim3);
 80010f6:	0020      	movs	r0, r4
 80010f8:	f004 f978 	bl	80053ec <HAL_TIM_Base_Start_IT>




}
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
				else if(!(switchers & START_TIM14)){
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_ADC_LevelOutOfWindowCallback+0x1a8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	069b      	lsls	r3, r3, #26
 8001104:	d500      	bpl.n	8001108 <HAL_ADC_LevelOutOfWindowCallback+0x15c>
 8001106:	e761      	b.n	8000fcc <HAL_ADC_LevelOutOfWindowCallback+0x20>
					TIM14->CNT = 0;
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_ADC_LevelOutOfWindowCallback+0x1ac>)
 800110a:	2500      	movs	r5, #0
 800110c:	625d      	str	r5, [r3, #36]	@ 0x24
					TIM14->SR &= ~TIM_SR_UIF;
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	2401      	movs	r4, #1
 8001112:	43a2      	bics	r2, r4
 8001114:	611a      	str	r2, [r3, #16]
					HAL_TIM_Base_Start_IT(&htim14);
 8001116:	4821      	ldr	r0, [pc, #132]	@ (800119c <HAL_ADC_LevelOutOfWindowCallback+0x1f0>)
 8001118:	f004 f968 	bl	80053ec <HAL_TIM_Base_Start_IT>
					switchers |= START_TIM14;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_ADC_LevelOutOfWindowCallback+0x1a8>)
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	2120      	movs	r1, #32
 8001122:	430a      	orrs	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
					switchers &= ~TIMER3;
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	3918      	subs	r1, #24
 800112a:	438a      	bics	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 800112e:	4e19      	ldr	r6, [pc, #100]	@ (8001194 <HAL_ADC_LevelOutOfWindowCallback+0x1e8>)
 8001130:	0030      	movs	r0, r6
 8001132:	f004 f98d 	bl	8005450 <HAL_TIM_Base_Stop_IT>
					TIM3->CNT = 0;
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_ADC_LevelOutOfWindowCallback+0x1ec>)
 8001138:	625d      	str	r5, [r3, #36]	@ 0x24
					TIM3->SR &= ~TIM_SR_UIF;
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	43a2      	bics	r2, r4
 800113e:	611a      	str	r2, [r3, #16]
					TIM3->ARR = 299;
 8001140:	222c      	movs	r2, #44	@ 0x2c
 8001142:	32ff      	adds	r2, #255	@ 0xff
 8001144:	62da      	str	r2, [r3, #44]	@ 0x2c
					HAL_TIM_Base_Start_IT(&htim3);
 8001146:	0030      	movs	r0, r6
 8001148:	f004 f950 	bl	80053ec <HAL_TIM_Base_Start_IT>
					return 0;
 800114c:	e7d6      	b.n	80010fc <HAL_ADC_LevelOutOfWindowCallback+0x150>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	20000374 	.word	0x20000374
 8001154:	20000014 	.word	0x20000014
 8001158:	40002000 	.word	0x40002000
 800115c:	20000010 	.word	0x20000010
 8001160:	200000a8 	.word	0x200000a8
 8001164:	200000a6 	.word	0x200000a6
 8001168:	200000a5 	.word	0x200000a5
 800116c:	200000a4 	.word	0x200000a4
 8001170:	200000a3 	.word	0x200000a3
 8001174:	20000154 	.word	0x20000154
 8001178:	2000009d 	.word	0x2000009d
 800117c:	2000012e 	.word	0x2000012e
 8001180:	200000b4 	.word	0x200000b4
 8001184:	20000168 	.word	0x20000168
 8001188:	40014800 	.word	0x40014800
 800118c:	00003e7f 	.word	0x00003e7f
 8001190:	00003a97 	.word	0x00003a97
 8001194:	2000024c 	.word	0x2000024c
 8001198:	40000400 	.word	0x40000400
 800119c:	20000200 	.word	0x20000200

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b500      	push	{lr}
 80011a2:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a4:	2234      	movs	r2, #52	@ 0x34
 80011a6:	2100      	movs	r1, #0
 80011a8:	a805      	add	r0, sp, #20
 80011aa:	f004 fc23 	bl	80059f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ae:	2210      	movs	r2, #16
 80011b0:	2100      	movs	r1, #0
 80011b2:	a801      	add	r0, sp, #4
 80011b4:	f004 fc1e 	bl	80059f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2080      	movs	r0, #128	@ 0x80
 80011ba:	0080      	lsls	r0, r0, #2
 80011bc:	f003 faca 	bl	8004754 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011c0:	f003 fabe 	bl	8004740 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <SystemClock_Config+0x8c>)
 80011c6:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80011c8:	2118      	movs	r1, #24
 80011ca:	438b      	bics	r3, r1
 80011cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011ce:	2306      	movs	r3, #6
 80011d0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011d2:	3b05      	subs	r3, #5
 80011d4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	33ff      	adds	r3, #255	@ 0xff
 80011d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011de:	2240      	movs	r2, #64	@ 0x40
 80011e0:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	3a3e      	subs	r2, #62	@ 0x3e
 80011e4:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011e8:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011ea:	3308      	adds	r3, #8
 80011ec:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80011ee:	23e0      	movs	r3, #224	@ 0xe0
 80011f0:	031b      	lsls	r3, r3, #12
 80011f2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80011f4:	23e0      	movs	r3, #224	@ 0xe0
 80011f6:	061b      	lsls	r3, r3, #24
 80011f8:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	a805      	add	r0, sp, #20
 80011fc:	f003 fadc 	bl	80047b8 <HAL_RCC_OscConfig>
 8001200:	2800      	cmp	r0, #0
 8001202:	d10e      	bne.n	8001222 <SystemClock_Config+0x82>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	2307      	movs	r3, #7
 8001206:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	3b05      	subs	r3, #5
 800120a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001210:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001212:	2100      	movs	r1, #0
 8001214:	a801      	add	r0, sp, #4
 8001216:	f003 fdb5 	bl	8004d84 <HAL_RCC_ClockConfig>
 800121a:	2800      	cmp	r0, #0
 800121c:	d103      	bne.n	8001226 <SystemClock_Config+0x86>
  {
    Error_Handler();
  }
}
 800121e:	b013      	add	sp, #76	@ 0x4c
 8001220:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001222:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	e7fe      	b.n	8001224 <SystemClock_Config+0x84>
 8001226:	b672      	cpsid	i
 8001228:	e7fe      	b.n	8001228 <SystemClock_Config+0x88>
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	40021000 	.word	0x40021000

08001230 <WriteTime>:
void WriteTime(){
 8001230:	b530      	push	{r4, r5, lr}
 8001232:	b083      	sub	sp, #12
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001234:	4c32      	ldr	r4, [pc, #200]	@ (8001300 <WriteTime+0xd0>)
 8001236:	4d33      	ldr	r5, [pc, #204]	@ (8001304 <WriteTime+0xd4>)
 8001238:	2200      	movs	r2, #0
 800123a:	0021      	movs	r1, r4
 800123c:	0028      	movs	r0, r5
 800123e:	f004 f889 	bl	8005354 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001242:	4931      	ldr	r1, [pc, #196]	@ (8001308 <WriteTime+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	0028      	movs	r0, r5
 8001248:	f004 f8ae 	bl	80053a8 <HAL_RTC_GetDate>
		  if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
 800124c:	78a4      	ldrb	r4, [r4, #2]
 800124e:	2c09      	cmp	r4, #9
 8001250:	d831      	bhi.n	80012b6 <WriteTime+0x86>
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <WriteTime+0xd0>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	2b09      	cmp	r3, #9
 8001258:	d83b      	bhi.n	80012d2 <WriteTime+0xa2>
 800125a:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <WriteTime+0xd0>)
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	2a09      	cmp	r2, #9
 8001260:	d907      	bls.n	8001272 <WriteTime+0x42>
			  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001262:	4a27      	ldr	r2, [pc, #156]	@ (8001300 <WriteTime+0xd0>)
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	4929      	ldr	r1, [pc, #164]	@ (800130c <WriteTime+0xdc>)
 8001268:	4829      	ldr	r0, [pc, #164]	@ (8001310 <WriteTime+0xe0>)
 800126a:	9400      	str	r4, [sp, #0]
 800126c:	f004 fba0 	bl	80059b0 <siprintf>
 8001270:	e03a      	b.n	80012e8 <WriteTime+0xb8>
			  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001272:	4928      	ldr	r1, [pc, #160]	@ (8001314 <WriteTime+0xe4>)
 8001274:	4826      	ldr	r0, [pc, #152]	@ (8001310 <WriteTime+0xe0>)
 8001276:	9400      	str	r4, [sp, #0]
 8001278:	f004 fb9a 	bl	80059b0 <siprintf>
 800127c:	e034      	b.n	80012e8 <WriteTime+0xb8>
			  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800127e:	4926      	ldr	r1, [pc, #152]	@ (8001318 <WriteTime+0xe8>)
 8001280:	4823      	ldr	r0, [pc, #140]	@ (8001310 <WriteTime+0xe0>)
 8001282:	9400      	str	r4, [sp, #0]
 8001284:	f004 fb94 	bl	80059b0 <siprintf>
 8001288:	e02e      	b.n	80012e8 <WriteTime+0xb8>
			  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800128a:	4924      	ldr	r1, [pc, #144]	@ (800131c <WriteTime+0xec>)
 800128c:	4820      	ldr	r0, [pc, #128]	@ (8001310 <WriteTime+0xe0>)
 800128e:	9400      	str	r4, [sp, #0]
 8001290:	f004 fb8e 	bl	80059b0 <siprintf>
 8001294:	e028      	b.n	80012e8 <WriteTime+0xb8>
		  else if(sTime.Minutes < 10)
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <WriteTime+0xd0>)
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	2b09      	cmp	r3, #9
 800129c:	d905      	bls.n	80012aa <WriteTime+0x7a>
			  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800129e:	4920      	ldr	r1, [pc, #128]	@ (8001320 <WriteTime+0xf0>)
 80012a0:	481b      	ldr	r0, [pc, #108]	@ (8001310 <WriteTime+0xe0>)
 80012a2:	9400      	str	r4, [sp, #0]
 80012a4:	f004 fb84 	bl	80059b0 <siprintf>
 80012a8:	e01e      	b.n	80012e8 <WriteTime+0xb8>
			  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80012aa:	491e      	ldr	r1, [pc, #120]	@ (8001324 <WriteTime+0xf4>)
 80012ac:	4818      	ldr	r0, [pc, #96]	@ (8001310 <WriteTime+0xe0>)
 80012ae:	9400      	str	r4, [sp, #0]
 80012b0:	f004 fb7e 	bl	80059b0 <siprintf>
 80012b4:	e018      	b.n	80012e8 <WriteTime+0xb8>
		  else if(sTime.Hours < 10 && sTime.Minutes < 10)
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <WriteTime+0xd0>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	2a09      	cmp	r2, #9
 80012bc:	d8eb      	bhi.n	8001296 <WriteTime+0x66>
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <WriteTime+0xd0>)
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	2b09      	cmp	r3, #9
 80012c4:	d9e1      	bls.n	800128a <WriteTime+0x5a>
			  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80012c6:	4918      	ldr	r1, [pc, #96]	@ (8001328 <WriteTime+0xf8>)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <WriteTime+0xe0>)
 80012ca:	9400      	str	r4, [sp, #0]
 80012cc:	f004 fb70 	bl	80059b0 <siprintf>
 80012d0:	e00a      	b.n	80012e8 <WriteTime+0xb8>
		  else if(sTime.Seconds < 10 && sTime.Hours < 10)
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <WriteTime+0xd0>)
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	2a09      	cmp	r2, #9
 80012d8:	d9d1      	bls.n	800127e <WriteTime+0x4e>
			  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <WriteTime+0xd0>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	4913      	ldr	r1, [pc, #76]	@ (800132c <WriteTime+0xfc>)
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <WriteTime+0xe0>)
 80012e2:	9400      	str	r4, [sp, #0]
 80012e4:	f004 fb64 	bl	80059b0 <siprintf>
		  	  	ssd1306_SetCursor(28, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	201c      	movs	r0, #28
 80012ec:	f001 f952 	bl	8002594 <ssd1306_SetCursor>
		        ssd1306_WriteString(buf, Font_7x10);
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <WriteTime+0x100>)
 80012f2:	4807      	ldr	r0, [pc, #28]	@ (8001310 <WriteTime+0xe0>)
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	f001 f936 	bl	8002568 <ssd1306_WriteString>
}
 80012fc:	b003      	add	sp, #12
 80012fe:	bd30      	pop	{r4, r5, pc}
 8001300:	20000154 	.word	0x20000154
 8001304:	20000298 	.word	0x20000298
 8001308:	20000150 	.word	0x20000150
 800130c:	0800781c 	.word	0x0800781c
 8001310:	20000134 	.word	0x20000134
 8001314:	080077c8 	.word	0x080077c8
 8001318:	080077d4 	.word	0x080077d4
 800131c:	080077e0 	.word	0x080077e0
 8001320:	080077f8 	.word	0x080077f8
 8001324:	080077ec 	.word	0x080077ec
 8001328:	08007804 	.word	0x08007804
 800132c:	08007810 	.word	0x08007810
 8001330:	20000008 	.word	0x20000008

08001334 <BatteryCharge>:
uint16_t BatteryCharge(){
 8001334:	b510      	push	{r4, lr}
	if(access){
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <BatteryCharge+0x68>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01b      	beq.n	8001376 <BatteryCharge+0x42>
		adc1 = adc[0];
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <BatteryCharge+0x6c>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
		 if(adc1 > 2050){
 8001344:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <BatteryCharge+0x70>)
		adc1 = 0;
 8001346:	2000      	movs	r0, #0
		 if(adc1 > 2050){
 8001348:	4293      	cmp	r3, r2
 800134a:	d90a      	bls.n	8001362 <BatteryCharge+0x2e>
		 adc1 -= 2050;
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <BatteryCharge+0x74>)
 800134e:	1898      	adds	r0, r3, r2
		 adc1 *= 0.175f;
 8001350:	b280      	uxth	r0, r0
 8001352:	f7ff fc4b 	bl	8000bec <__aeabi_i2f>
 8001356:	4915      	ldr	r1, [pc, #84]	@ (80013ac <BatteryCharge+0x78>)
 8001358:	f7ff f86a 	bl	8000430 <__aeabi_fmul>
 800135c:	f7ff f850 	bl	8000400 <__aeabi_f2uiz>
 8001360:	b280      	uxth	r0, r0
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <BatteryCharge+0x7c>)
 8001364:	8018      	strh	r0, [r3, #0]
		 once_minute = sTime.Minutes;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <BatteryCharge+0x80>)
 8001368:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <BatteryCharge+0x84>)
 800136a:	7852      	ldrb	r2, [r2, #1]
 800136c:	701a      	strb	r2, [r3, #0]
		 access = 0;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <BatteryCharge+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	if(sTime.Minutes != once_minute)
 8001374:	e008      	b.n	8001388 <BatteryCharge+0x54>
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <BatteryCharge+0x84>)
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <BatteryCharge+0x80>)
 800137a:	7852      	ldrb	r2, [r2, #1]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d002      	beq.n	8001388 <BatteryCharge+0x54>
			access = 1;
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <BatteryCharge+0x68>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
	if(adc1 >= 100)
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <BatteryCharge+0x7c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	2b63      	cmp	r3, #99	@ 0x63
 800138e:	d902      	bls.n	8001396 <BatteryCharge+0x62>
	adc1 = 100;
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <BatteryCharge+0x7c>)
 8001392:	2264      	movs	r2, #100	@ 0x64
 8001394:	801a      	strh	r2, [r3, #0]
	return adc1;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <BatteryCharge+0x7c>)
 8001398:	8818      	ldrh	r0, [r3, #0]
}
 800139a:	bd10      	pop	{r4, pc}
 800139c:	20000094 	.word	0x20000094
 80013a0:	20000130 	.word	0x20000130
 80013a4:	00000802 	.word	0x00000802
 80013a8:	fffff7fe 	.word	0xfffff7fe
 80013ac:	3e333333 	.word	0x3e333333
 80013b0:	20000092 	.word	0x20000092
 80013b4:	20000090 	.word	0x20000090
 80013b8:	20000154 	.word	0x20000154

080013bc <WriteBatteryCharge>:
void WriteBatteryCharge(uint16_t adc){
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	0004      	movs	r4, r0
	ssd1306_SetCursor(100, 0);
 80013c0:	2100      	movs	r1, #0
 80013c2:	2064      	movs	r0, #100	@ 0x64
 80013c4:	f001 f8e6 	bl	8002594 <ssd1306_SetCursor>
		 sprintf(buf, "%d", adc);
 80013c8:	4908      	ldr	r1, [pc, #32]	@ (80013ec <WriteBatteryCharge+0x30>)
 80013ca:	4d09      	ldr	r5, [pc, #36]	@ (80013f0 <WriteBatteryCharge+0x34>)
 80013cc:	0022      	movs	r2, r4
 80013ce:	0028      	movs	r0, r5
 80013d0:	f004 faee 	bl	80059b0 <siprintf>
		 ssd1306_WriteString(buf, Font_7x10);
 80013d4:	4c07      	ldr	r4, [pc, #28]	@ (80013f4 <WriteBatteryCharge+0x38>)
 80013d6:	6821      	ldr	r1, [r4, #0]
 80013d8:	6862      	ldr	r2, [r4, #4]
 80013da:	0028      	movs	r0, r5
 80013dc:	f001 f8c4 	bl	8002568 <ssd1306_WriteString>
		 ssd1306_WriteChar('%', Font_7x10);
 80013e0:	6821      	ldr	r1, [r4, #0]
 80013e2:	6862      	ldr	r2, [r4, #4]
 80013e4:	2025      	movs	r0, #37	@ 0x25
 80013e6:	f001 f847 	bl	8002478 <ssd1306_WriteChar>
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	08007824 	.word	0x08007824
 80013f0:	20000134 	.word	0x20000134
 80013f4:	20000008 	.word	0x20000008

080013f8 <CalculateSpeed>:
void CalculateSpeed(){
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	b084      	sub	sp, #16
	if(TIM14->CNT > duration)
 80013fc:	4b80      	ldr	r3, [pc, #512]	@ (8001600 <CalculateSpeed+0x208>)
 80013fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001400:	4b80      	ldr	r3, [pc, #512]	@ (8001604 <CalculateSpeed+0x20c>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	b29b      	uxth	r3, r3
 8001406:	429a      	cmp	r2, r3
 8001408:	d904      	bls.n	8001414 <CalculateSpeed+0x1c>
	 duration = TIM14->CNT;
 800140a:	4b7d      	ldr	r3, [pc, #500]	@ (8001600 <CalculateSpeed+0x208>)
 800140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140e:	b29b      	uxth	r3, r3
 8001410:	4a7c      	ldr	r2, [pc, #496]	@ (8001604 <CalculateSpeed+0x20c>)
 8001412:	8013      	strh	r3, [r2, #0]
	if(duration < 37){  // 200 khm
 8001414:	4b7b      	ldr	r3, [pc, #492]	@ (8001604 <CalculateSpeed+0x20c>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	2b24      	cmp	r3, #36	@ 0x24
 800141c:	d800      	bhi.n	8001420 <CalculateSpeed+0x28>
 800141e:	e0c2      	b.n	80015a6 <CalculateSpeed+0x1ae>
	else if(duration < 5000){
 8001420:	4b78      	ldr	r3, [pc, #480]	@ (8001604 <CalculateSpeed+0x20c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4a78      	ldr	r2, [pc, #480]	@ (8001608 <CalculateSpeed+0x210>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d900      	bls.n	800142e <CalculateSpeed+0x36>
 800142c:	e0d8      	b.n	80015e0 <CalculateSpeed+0x1e8>
	speed = (size * 36)/duration  ;  // size = ? * 10^-3 ... speed = ... *10^3 -> del 10^+-3
 800142e:	4b75      	ldr	r3, [pc, #468]	@ (8001604 <CalculateSpeed+0x20c>)
 8001430:	8819      	ldrh	r1, [r3, #0]
 8001432:	b289      	uxth	r1, r1
 8001434:	4b75      	ldr	r3, [pc, #468]	@ (800160c <CalculateSpeed+0x214>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	00d8      	lsls	r0, r3, #3
 800143a:	18c0      	adds	r0, r0, r3
 800143c:	0080      	lsls	r0, r0, #2
 800143e:	f7fe fef3 	bl	8000228 <__divsi3>
 8001442:	b280      	uxth	r0, r0
 8001444:	4b72      	ldr	r3, [pc, #456]	@ (8001610 <CalculateSpeed+0x218>)
 8001446:	8018      	strh	r0, [r3, #0]
	smooth_speed = (SMOOTH_SPEED_A * speed + SMOOTH_SPEED_DEL * smooth_speed)/100;
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4c72      	ldr	r4, [pc, #456]	@ (8001614 <CalculateSpeed+0x21c>)
 800144c:	8822      	ldrh	r2, [r4, #0]
 800144e:	0099      	lsls	r1, r3, #2
 8001450:	185b      	adds	r3, r3, r1
 8001452:	0099      	lsls	r1, r3, #2
 8001454:	185b      	adds	r3, r3, r1
 8001456:	0091      	lsls	r1, r2, #2
 8001458:	1852      	adds	r2, r2, r1
 800145a:	0111      	lsls	r1, r2, #4
 800145c:	1a8a      	subs	r2, r1, r2
 800145e:	1898      	adds	r0, r3, r2
 8001460:	2164      	movs	r1, #100	@ 0x64
 8001462:	f7fe fee1 	bl	8000228 <__divsi3>
 8001466:	b280      	uxth	r0, r0
 8001468:	8020      	strh	r0, [r4, #0]
	volatile uint8_t real_speed1 = (uint16_t)smooth_speed / 10;
 800146a:	8820      	ldrh	r0, [r4, #0]
 800146c:	b280      	uxth	r0, r0
 800146e:	210a      	movs	r1, #10
 8001470:	f7fe fe50 	bl	8000114 <__udivsi3>
 8001474:	b2c0      	uxtb	r0, r0
 8001476:	250e      	movs	r5, #14
 8001478:	446d      	add	r5, sp
 800147a:	7028      	strb	r0, [r5, #0]
	volatile uint8_t real_speed2 = (uint16_t)smooth_speed % 10;
 800147c:	8820      	ldrh	r0, [r4, #0]
 800147e:	b280      	uxth	r0, r0
 8001480:	210a      	movs	r1, #10
 8001482:	f7fe fecd 	bl	8000220 <__aeabi_uidivmod>
 8001486:	b2c9      	uxtb	r1, r1
 8001488:	240f      	movs	r4, #15
 800148a:	446c      	add	r4, sp
 800148c:	7021      	strb	r1, [r4, #0]
		 ssd1306_SetCursor(20, 25);
 800148e:	2119      	movs	r1, #25
 8001490:	2014      	movs	r0, #20
 8001492:	f001 f87f 	bl	8002594 <ssd1306_SetCursor>
		 snprintf(buf, sizeof(buf), "%d.%dkm/h", real_speed1, real_speed2);
 8001496:	782b      	ldrb	r3, [r5, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	7821      	ldrb	r1, [r4, #0]
 800149c:	4a5e      	ldr	r2, [pc, #376]	@ (8001618 <CalculateSpeed+0x220>)
 800149e:	4c5f      	ldr	r4, [pc, #380]	@ (800161c <CalculateSpeed+0x224>)
 80014a0:	9100      	str	r1, [sp, #0]
 80014a2:	2119      	movs	r1, #25
 80014a4:	0020      	movs	r0, r4
 80014a6:	f004 fa4d 	bl	8005944 <sniprintf>
		 ssd1306_WriteString(buf, Font_11x18);
 80014aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001620 <CalculateSpeed+0x228>)
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	0020      	movs	r0, r4
 80014b2:	f001 f859 	bl	8002568 <ssd1306_WriteString>
	uint16_t counter = impulse * size;   // size 2074 od 1
 80014b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001624 <CalculateSpeed+0x22c>)
 80014b8:	7818      	ldrb	r0, [r3, #0]
 80014ba:	4b54      	ldr	r3, [pc, #336]	@ (800160c <CalculateSpeed+0x214>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	4358      	muls	r0, r3
 80014c0:	b280      	uxth	r0, r0
	odometr_decimal += counter;
 80014c2:	4d59      	ldr	r5, [pc, #356]	@ (8001628 <CalculateSpeed+0x230>)
 80014c4:	882c      	ldrh	r4, [r5, #0]
 80014c6:	b2a4      	uxth	r4, r4
	counter = counter / 10 ; //207 , 2 m 7 cm
 80014c8:	210a      	movs	r1, #10
 80014ca:	f7fe fe23 	bl	8000114 <__udivsi3>
	odometr_decimal += counter;
 80014ce:	1824      	adds	r4, r4, r0
 80014d0:	b2a4      	uxth	r4, r4
 80014d2:	802c      	strh	r4, [r5, #0]
	if(odometr_decimal > 100){
 80014d4:	882b      	ldrh	r3, [r5, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2b64      	cmp	r3, #100	@ 0x64
 80014da:	d911      	bls.n	8001500 <CalculateSpeed+0x108>
		odometr_hundreds += odometr_decimal/100;
 80014dc:	8828      	ldrh	r0, [r5, #0]
 80014de:	b280      	uxth	r0, r0
 80014e0:	4e52      	ldr	r6, [pc, #328]	@ (800162c <CalculateSpeed+0x234>)
 80014e2:	8834      	ldrh	r4, [r6, #0]
 80014e4:	b2a4      	uxth	r4, r4
 80014e6:	2164      	movs	r1, #100	@ 0x64
 80014e8:	f7fe fe14 	bl	8000114 <__udivsi3>
 80014ec:	1824      	adds	r4, r4, r0
 80014ee:	b2a4      	uxth	r4, r4
 80014f0:	8034      	strh	r4, [r6, #0]
		odometr_decimal = odometr_decimal % 100;
 80014f2:	8828      	ldrh	r0, [r5, #0]
 80014f4:	b280      	uxth	r0, r0
 80014f6:	2164      	movs	r1, #100	@ 0x64
 80014f8:	f7fe fe92 	bl	8000220 <__aeabi_uidivmod>
 80014fc:	b289      	uxth	r1, r1
 80014fe:	8029      	strh	r1, [r5, #0]
	if(odometr_hundreds > 1000){
 8001500:	4b4a      	ldr	r3, [pc, #296]	@ (800162c <CalculateSpeed+0x234>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	22fa      	movs	r2, #250	@ 0xfa
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4293      	cmp	r3, r2
 800150c:	d90b      	bls.n	8001526 <CalculateSpeed+0x12e>
		odometr_thousands++;
 800150e:	4a48      	ldr	r2, [pc, #288]	@ (8001630 <CalculateSpeed+0x238>)
 8001510:	8813      	ldrh	r3, [r2, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	8013      	strh	r3, [r2, #0]
		odometr_hundreds = odometr_hundreds - 1000;
 8001518:	4a44      	ldr	r2, [pc, #272]	@ (800162c <CalculateSpeed+0x234>)
 800151a:	8813      	ldrh	r3, [r2, #0]
 800151c:	4945      	ldr	r1, [pc, #276]	@ (8001634 <CalculateSpeed+0x23c>)
 800151e:	468c      	mov	ip, r1
 8001520:	4463      	add	r3, ip
 8001522:	b29b      	uxth	r3, r3
 8001524:	8013      	strh	r3, [r2, #0]
	if(odometr_thousands > 49999)
 8001526:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <CalculateSpeed+0x238>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4a42      	ldr	r2, [pc, #264]	@ (8001638 <CalculateSpeed+0x240>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d902      	bls.n	8001538 <CalculateSpeed+0x140>
		odometr_thousands = 0;
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <CalculateSpeed+0x238>)
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
	impulse = 0;
 8001538:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <CalculateSpeed+0x22c>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(17, 50);
 800153e:	2132      	movs	r1, #50	@ 0x32
 8001540:	2011      	movs	r0, #17
 8001542:	f001 f827 	bl	8002594 <ssd1306_SetCursor>
	snprintf(buf, sizeof(buf), "%05u.%03ukh/m", odometr_thousands, odometr_hundreds);
 8001546:	4b3a      	ldr	r3, [pc, #232]	@ (8001630 <CalculateSpeed+0x238>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4a37      	ldr	r2, [pc, #220]	@ (800162c <CalculateSpeed+0x234>)
 800154e:	8811      	ldrh	r1, [r2, #0]
 8001550:	4a3a      	ldr	r2, [pc, #232]	@ (800163c <CalculateSpeed+0x244>)
 8001552:	4c32      	ldr	r4, [pc, #200]	@ (800161c <CalculateSpeed+0x224>)
 8001554:	9100      	str	r1, [sp, #0]
 8001556:	2119      	movs	r1, #25
 8001558:	0020      	movs	r0, r4
 800155a:	f004 f9f3 	bl	8005944 <sniprintf>
	ssd1306_WriteString(buf, Font_7x10);
 800155e:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <CalculateSpeed+0x248>)
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	0020      	movs	r0, r4
 8001566:	f000 ffff 	bl	8002568 <ssd1306_WriteString>
 800156a:	2500      	movs	r5, #0
	uint16_t solve = 0;
 800156c:	2400      	movs	r4, #0
	solve += average_speed_array[i]/QUANTITY_OF_SAMPLES_SPEED;
 800156e:	4e35      	ldr	r6, [pc, #212]	@ (8001644 <CalculateSpeed+0x24c>)
 8001570:	006b      	lsls	r3, r5, #1
 8001572:	5b98      	ldrh	r0, [r3, r6]
 8001574:	b280      	uxth	r0, r0
 8001576:	213c      	movs	r1, #60	@ 0x3c
 8001578:	f7fe fdcc 	bl	8000114 <__udivsi3>
 800157c:	1824      	adds	r4, r4, r0
 800157e:	b2a4      	uxth	r4, r4
for(uint8_t i = 0 ; i < QUANTITY_OF_SAMPLES_SPEED; i++)
 8001580:	3501      	adds	r5, #1
 8001582:	2d3c      	cmp	r5, #60	@ 0x3c
 8001584:	d1f4      	bne.n	8001570 <CalculateSpeed+0x178>
average_speed_day = solve;
 8001586:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <CalculateSpeed+0x250>)
 8001588:	801c      	strh	r4, [r3, #0]
if(smooth_speed > max_speed_day)
 800158a:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <CalculateSpeed+0x21c>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	4a2f      	ldr	r2, [pc, #188]	@ (800164c <CalculateSpeed+0x254>)
 8001590:	8812      	ldrh	r2, [r2, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4293      	cmp	r3, r2
 8001596:	d904      	bls.n	80015a2 <CalculateSpeed+0x1aa>
	max_speed_day = smooth_speed;
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <CalculateSpeed+0x21c>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4a2b      	ldr	r2, [pc, #172]	@ (800164c <CalculateSpeed+0x254>)
 80015a0:	8013      	strh	r3, [r2, #0]
}
 80015a2:	b004      	add	sp, #16
 80015a4:	bd70      	pop	{r4, r5, r6, pc}
			ssd1306_SetCursor(0, 15);
 80015a6:	210f      	movs	r1, #15
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 fff3 	bl	8002594 <ssd1306_SetCursor>
			snprintf(buf, sizeof(buf), "Check cable");
 80015ae:	4c1b      	ldr	r4, [pc, #108]	@ (800161c <CalculateSpeed+0x224>)
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <CalculateSpeed+0x258>)
 80015b2:	0022      	movs	r2, r4
 80015b4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80015b6:	c223      	stmia	r2!, {r0, r1, r5}
			ssd1306_WriteString(buf, Font_11x18);
 80015b8:	4d19      	ldr	r5, [pc, #100]	@ (8001620 <CalculateSpeed+0x228>)
 80015ba:	6829      	ldr	r1, [r5, #0]
 80015bc:	686a      	ldr	r2, [r5, #4]
 80015be:	0020      	movs	r0, r4
 80015c0:	f000 ffd2 	bl	8002568 <ssd1306_WriteString>
			ssd1306_SetCursor(20, 32);
 80015c4:	2120      	movs	r1, #32
 80015c6:	2014      	movs	r0, #20
 80015c8:	f000 ffe4 	bl	8002594 <ssd1306_SetCursor>
			snprintf(buf, sizeof(buf), "or move");
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <CalculateSpeed+0x25c>)
 80015ce:	0022      	movs	r2, r4
 80015d0:	cb03      	ldmia	r3!, {r0, r1}
 80015d2:	c203      	stmia	r2!, {r0, r1}
			ssd1306_WriteString(buf, Font_11x18);
 80015d4:	6829      	ldr	r1, [r5, #0]
 80015d6:	686a      	ldr	r2, [r5, #4]
 80015d8:	0020      	movs	r0, r4
 80015da:	f000 ffc5 	bl	8002568 <ssd1306_WriteString>
 80015de:	e76a      	b.n	80014b6 <CalculateSpeed+0xbe>
		ssd1306_SetCursor(20, 25);
 80015e0:	2119      	movs	r1, #25
 80015e2:	2014      	movs	r0, #20
 80015e4:	f000 ffd6 	bl	8002594 <ssd1306_SetCursor>
		snprintf(buf, sizeof(buf), "0.0kh/h");
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <CalculateSpeed+0x224>)
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <CalculateSpeed+0x260>)
 80015ec:	0002      	movs	r2, r0
 80015ee:	cb12      	ldmia	r3!, {r1, r4}
 80015f0:	c212      	stmia	r2!, {r1, r4}
		ssd1306_WriteString(buf, Font_11x18);
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <CalculateSpeed+0x228>)
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	f000 ffb6 	bl	8002568 <ssd1306_WriteString>
 80015fc:	e75b      	b.n	80014b6 <CalculateSpeed+0xbe>
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	40002000 	.word	0x40002000
 8001604:	20000010 	.word	0x20000010
 8001608:	00001387 	.word	0x00001387
 800160c:	20000012 	.word	0x20000012
 8001610:	2000012c 	.word	0x2000012c
 8001614:	2000012e 	.word	0x2000012e
 8001618:	0800783c 	.word	0x0800783c
 800161c:	20000134 	.word	0x20000134
 8001620:	20000000 	.word	0x20000000
 8001624:	200000a8 	.word	0x200000a8
 8001628:	200000aa 	.word	0x200000aa
 800162c:	200000ae 	.word	0x200000ae
 8001630:	200000ac 	.word	0x200000ac
 8001634:	fffffc18 	.word	0xfffffc18
 8001638:	0000c34f 	.word	0x0000c34f
 800163c:	08007850 	.word	0x08007850
 8001640:	20000008 	.word	0x20000008
 8001644:	200000b4 	.word	0x200000b4
 8001648:	200000b2 	.word	0x200000b2
 800164c:	200000b0 	.word	0x200000b0
 8001650:	08007828 	.word	0x08007828
 8001654:	08007834 	.word	0x08007834
 8001658:	08007848 	.word	0x08007848

0800165c <AntiRattlesnake_TIM16>:
void AntiRattlesnake_TIM16(uint16_t Delay){
 800165c:	b510      	push	{r4, lr}
		switchers &= ~TIMER16;
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <AntiRattlesnake_TIM16+0x24>)
 8001660:	7813      	ldrb	r3, [r2, #0]
 8001662:	2110      	movs	r1, #16
 8001664:	438b      	bics	r3, r1
 8001666:	7013      	strb	r3, [r2, #0]
		TIM16->CNT = 0;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <AntiRattlesnake_TIM16+0x28>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM16->SR &= ~TIM_SR_UIF;
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	390f      	subs	r1, #15
 8001672:	438a      	bics	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
		TIM16->ARR = Delay;
 8001676:	62d8      	str	r0, [r3, #44]	@ 0x2c
		HAL_TIM_Base_Start_IT(&htim16);
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <AntiRattlesnake_TIM16+0x2c>)
 800167a:	f003 feb7 	bl	80053ec <HAL_TIM_Base_Start_IT>
}
 800167e:	bd10      	pop	{r4, pc}
 8001680:	20000014 	.word	0x20000014
 8001684:	40014400 	.word	0x40014400
 8001688:	200001b4 	.word	0x200001b4

0800168c <ConfigTime>:
void ConfigTime(){
 800168c:	b510      	push	{r4, lr}
 800168e:	b082      	sub	sp, #8
	if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
 8001690:	4b55      	ldr	r3, [pc, #340]	@ (80017e8 <ConfigTime+0x15c>)
 8001692:	789c      	ldrb	r4, [r3, #2]
 8001694:	2c09      	cmp	r4, #9
 8001696:	d83d      	bhi.n	8001714 <ConfigTime+0x88>
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	2b09      	cmp	r3, #9
 800169c:	d848      	bhi.n	8001730 <ConfigTime+0xa4>
 800169e:	4a52      	ldr	r2, [pc, #328]	@ (80017e8 <ConfigTime+0x15c>)
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	2a09      	cmp	r2, #9
 80016a4:	d907      	bls.n	80016b6 <ConfigTime+0x2a>
						  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016a6:	4a50      	ldr	r2, [pc, #320]	@ (80017e8 <ConfigTime+0x15c>)
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4950      	ldr	r1, [pc, #320]	@ (80017ec <ConfigTime+0x160>)
 80016ac:	4850      	ldr	r0, [pc, #320]	@ (80017f0 <ConfigTime+0x164>)
 80016ae:	9400      	str	r4, [sp, #0]
 80016b0:	f004 f97e 	bl	80059b0 <siprintf>
 80016b4:	e047      	b.n	8001746 <ConfigTime+0xba>
						  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016b6:	494f      	ldr	r1, [pc, #316]	@ (80017f4 <ConfigTime+0x168>)
 80016b8:	484d      	ldr	r0, [pc, #308]	@ (80017f0 <ConfigTime+0x164>)
 80016ba:	9400      	str	r4, [sp, #0]
 80016bc:	f004 f978 	bl	80059b0 <siprintf>
 80016c0:	e041      	b.n	8001746 <ConfigTime+0xba>
						  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016c2:	494d      	ldr	r1, [pc, #308]	@ (80017f8 <ConfigTime+0x16c>)
 80016c4:	484a      	ldr	r0, [pc, #296]	@ (80017f0 <ConfigTime+0x164>)
 80016c6:	9400      	str	r4, [sp, #0]
 80016c8:	f004 f972 	bl	80059b0 <siprintf>
 80016cc:	e03b      	b.n	8001746 <ConfigTime+0xba>
						  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016ce:	494b      	ldr	r1, [pc, #300]	@ (80017fc <ConfigTime+0x170>)
 80016d0:	4847      	ldr	r0, [pc, #284]	@ (80017f0 <ConfigTime+0x164>)
 80016d2:	9400      	str	r4, [sp, #0]
 80016d4:	f004 f96c 	bl	80059b0 <siprintf>
 80016d8:	e035      	b.n	8001746 <ConfigTime+0xba>
					  else if(sTime.Minutes < 10)
 80016da:	4b43      	ldr	r3, [pc, #268]	@ (80017e8 <ConfigTime+0x15c>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	2b09      	cmp	r3, #9
 80016e0:	d905      	bls.n	80016ee <ConfigTime+0x62>
						  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016e2:	4947      	ldr	r1, [pc, #284]	@ (8001800 <ConfigTime+0x174>)
 80016e4:	4842      	ldr	r0, [pc, #264]	@ (80017f0 <ConfigTime+0x164>)
 80016e6:	9400      	str	r4, [sp, #0]
 80016e8:	f004 f962 	bl	80059b0 <siprintf>
 80016ec:	e02b      	b.n	8001746 <ConfigTime+0xba>
						  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80016ee:	4945      	ldr	r1, [pc, #276]	@ (8001804 <ConfigTime+0x178>)
 80016f0:	483f      	ldr	r0, [pc, #252]	@ (80017f0 <ConfigTime+0x164>)
 80016f2:	9400      	str	r4, [sp, #0]
 80016f4:	f004 f95c 	bl	80059b0 <siprintf>
 80016f8:	e025      	b.n	8001746 <ConfigTime+0xba>
					if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016fa:	493b      	ldr	r1, [pc, #236]	@ (80017e8 <ConfigTime+0x15c>)
 80016fc:	4842      	ldr	r0, [pc, #264]	@ (8001808 <ConfigTime+0x17c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f003 fdb2 	bl	8005268 <HAL_RTC_SetTime>
 8001704:	2800      	cmp	r0, #0
 8001706:	d103      	bne.n	8001710 <ConfigTime+0x84>
					    config = 0;
 8001708:	4b40      	ldr	r3, [pc, #256]	@ (800180c <ConfigTime+0x180>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e068      	b.n	80017e2 <ConfigTime+0x156>
 8001710:	b672      	cpsid	i
  while (1)
 8001712:	e7fe      	b.n	8001712 <ConfigTime+0x86>
					  else if(sTime.Hours < 10 && sTime.Minutes < 10)
 8001714:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <ConfigTime+0x15c>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	2a09      	cmp	r2, #9
 800171a:	d8de      	bhi.n	80016da <ConfigTime+0x4e>
 800171c:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <ConfigTime+0x15c>)
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d9d4      	bls.n	80016ce <ConfigTime+0x42>
						  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001724:	493a      	ldr	r1, [pc, #232]	@ (8001810 <ConfigTime+0x184>)
 8001726:	4832      	ldr	r0, [pc, #200]	@ (80017f0 <ConfigTime+0x164>)
 8001728:	9400      	str	r4, [sp, #0]
 800172a:	f004 f941 	bl	80059b0 <siprintf>
 800172e:	e00a      	b.n	8001746 <ConfigTime+0xba>
					  else if(sTime.Seconds < 10 && sTime.Hours < 10)
 8001730:	4a2d      	ldr	r2, [pc, #180]	@ (80017e8 <ConfigTime+0x15c>)
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	2a09      	cmp	r2, #9
 8001736:	d9c4      	bls.n	80016c2 <ConfigTime+0x36>
						  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001738:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <ConfigTime+0x15c>)
 800173a:	785b      	ldrb	r3, [r3, #1]
 800173c:	4935      	ldr	r1, [pc, #212]	@ (8001814 <ConfigTime+0x188>)
 800173e:	482c      	ldr	r0, [pc, #176]	@ (80017f0 <ConfigTime+0x164>)
 8001740:	9400      	str	r4, [sp, #0]
 8001742:	f004 f935 	bl	80059b0 <siprintf>
					  	  	ssd1306_SetCursor(20, 0);
 8001746:	2100      	movs	r1, #0
 8001748:	2014      	movs	r0, #20
 800174a:	f000 ff23 	bl	8002594 <ssd1306_SetCursor>
					        ssd1306_WriteString(buf, Font_11x18);
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <ConfigTime+0x18c>)
 8001750:	4827      	ldr	r0, [pc, #156]	@ (80017f0 <ConfigTime+0x164>)
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	f000 ff07 	bl	8002568 <ssd1306_WriteString>
					if(switchers & SW1 && switchers & SW3){
 800175a:	4b30      	ldr	r3, [pc, #192]	@ (800181c <ConfigTime+0x190>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	07db      	lsls	r3, r3, #31
 8001760:	d503      	bpl.n	800176a <ConfigTime+0xde>
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <ConfigTime+0x190>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	075b      	lsls	r3, r3, #29
 8001768:	d4c7      	bmi.n	80016fa <ConfigTime+0x6e>
					if(switchers & SW3 && switchers & TIMER16){
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <ConfigTime+0x190>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	075b      	lsls	r3, r3, #29
 8001770:	d50f      	bpl.n	8001792 <ConfigTime+0x106>
 8001772:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <ConfigTime+0x190>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	06db      	lsls	r3, r3, #27
 8001778:	d50b      	bpl.n	8001792 <ConfigTime+0x106>
						if(sTime.Seconds < 60)
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <ConfigTime+0x15c>)
 800177c:	789b      	ldrb	r3, [r3, #2]
							sTime.Seconds = 0;
 800177e:	2200      	movs	r2, #0
						if(sTime.Seconds < 60)
 8001780:	2b3b      	cmp	r3, #59	@ 0x3b
 8001782:	d801      	bhi.n	8001788 <ConfigTime+0xfc>
							sTime.Seconds++;
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <ConfigTime+0x15c>)
 800178a:	709a      	strb	r2, [r3, #2]
						AntiRattlesnake_TIM16(DELAY);
 800178c:	20c8      	movs	r0, #200	@ 0xc8
 800178e:	f7ff ff65 	bl	800165c <AntiRattlesnake_TIM16>
					if(switchers & SW2 && switchers & TIMER16){
 8001792:	4b22      	ldr	r3, [pc, #136]	@ (800181c <ConfigTime+0x190>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	079b      	lsls	r3, r3, #30
 8001798:	d50f      	bpl.n	80017ba <ConfigTime+0x12e>
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <ConfigTime+0x190>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	06db      	lsls	r3, r3, #27
 80017a0:	d50b      	bpl.n	80017ba <ConfigTime+0x12e>
						if(sTime.Minutes < 60)
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <ConfigTime+0x15c>)
 80017a4:	785b      	ldrb	r3, [r3, #1]
							sTime.Minutes = 0;
 80017a6:	2200      	movs	r2, #0
						if(sTime.Minutes < 60)
 80017a8:	2b3b      	cmp	r3, #59	@ 0x3b
 80017aa:	d801      	bhi.n	80017b0 <ConfigTime+0x124>
							sTime.Minutes++;
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <ConfigTime+0x15c>)
 80017b2:	705a      	strb	r2, [r3, #1]
						AntiRattlesnake_TIM16(DELAY);
 80017b4:	20c8      	movs	r0, #200	@ 0xc8
 80017b6:	f7ff ff51 	bl	800165c <AntiRattlesnake_TIM16>
					if(switchers & SW1 && switchers & TIMER16){
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <ConfigTime+0x190>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	07db      	lsls	r3, r3, #31
 80017c0:	d50f      	bpl.n	80017e2 <ConfigTime+0x156>
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <ConfigTime+0x190>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	06db      	lsls	r3, r3, #27
 80017c8:	d50b      	bpl.n	80017e2 <ConfigTime+0x156>
						if(sTime.Hours < 24)
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <ConfigTime+0x15c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
							sTime.Hours = 0;
 80017ce:	2200      	movs	r2, #0
						if(sTime.Hours < 24)
 80017d0:	2b17      	cmp	r3, #23
 80017d2:	d801      	bhi.n	80017d8 <ConfigTime+0x14c>
							sTime.Hours++;
 80017d4:	3301      	adds	r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <ConfigTime+0x15c>)
 80017da:	701a      	strb	r2, [r3, #0]
						AntiRattlesnake_TIM16(DELAY);
 80017dc:	20c8      	movs	r0, #200	@ 0xc8
 80017de:	f7ff ff3d 	bl	800165c <AntiRattlesnake_TIM16>
}
 80017e2:	b002      	add	sp, #8
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	20000154 	.word	0x20000154
 80017ec:	0800781c 	.word	0x0800781c
 80017f0:	20000134 	.word	0x20000134
 80017f4:	080077c8 	.word	0x080077c8
 80017f8:	080077d4 	.word	0x080077d4
 80017fc:	080077e0 	.word	0x080077e0
 8001800:	080077f8 	.word	0x080077f8
 8001804:	080077ec 	.word	0x080077ec
 8001808:	20000298 	.word	0x20000298
 800180c:	200000a2 	.word	0x200000a2
 8001810:	08007804 	.word	0x08007804
 8001814:	08007810 	.word	0x08007810
 8001818:	20000000 	.word	0x20000000
 800181c:	20000014 	.word	0x20000014

08001820 <main>:
{
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	46de      	mov	lr, fp
 8001824:	4657      	mov	r7, sl
 8001826:	464e      	mov	r6, r9
 8001828:	4645      	mov	r5, r8
 800182a:	b5e0      	push	{r5, r6, r7, lr}
 800182c:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 800182e:	f001 f9e5 	bl	8002bfc <HAL_Init>
  SystemClock_Config();
 8001832:	f7ff fcb5 	bl	80011a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	220c      	movs	r2, #12
 8001838:	2100      	movs	r1, #0
 800183a:	a80c      	add	r0, sp, #48	@ 0x30
 800183c:	f004 f8da 	bl	80059f4 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4ccf      	ldr	r4, [pc, #828]	@ (8001b80 <main+0x360>)
 8001842:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001844:	2302      	movs	r3, #2
 8001846:	431a      	orrs	r2, r3
 8001848:	6362      	str	r2, [r4, #52]	@ 0x34
 800184a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800184c:	4013      	ands	r3, r2
 800184e:	9304      	str	r3, [sp, #16]
 8001850:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001854:	2304      	movs	r3, #4
 8001856:	431a      	orrs	r2, r3
 8001858:	6362      	str	r2, [r4, #52]	@ 0x34
 800185a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800185c:	4013      	ands	r3, r2
 800185e:	9305      	str	r3, [sp, #20]
 8001860:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001864:	2501      	movs	r5, #1
 8001866:	432b      	orrs	r3, r5
 8001868:	6363      	str	r3, [r4, #52]	@ 0x34
 800186a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800186c:	402b      	ands	r3, r5
 800186e:	9306      	str	r3, [sp, #24]
 8001870:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8001872:	2317      	movs	r3, #23
 8001874:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	3b14      	subs	r3, #20
 8001878:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	27a0      	movs	r7, #160	@ 0xa0
 800187c:	05ff      	lsls	r7, r7, #23
 800187e:	a90a      	add	r1, sp, #40	@ 0x28
 8001880:	0038      	movs	r0, r7
 8001882:	f002 fa93 	bl	8003dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sw3_Pin|Sw2_Pin|STDBY_BAT_Pin|CHRG_BAT_Pin;
 8001886:	23c6      	movs	r3, #198	@ 0xc6
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800188c:	26c4      	movs	r6, #196	@ 0xc4
 800188e:	03b6      	lsls	r6, r6, #14
 8001890:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001892:	950c      	str	r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	a90a      	add	r1, sp, #40	@ 0x28
 8001896:	0038      	movs	r0, r7
 8001898:	f002 fa88 	bl	8003dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sw1_Pin;
 800189c:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800189e:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a0:	950c      	str	r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(Sw1_GPIO_Port, &GPIO_InitStruct);
 80018a2:	a90a      	add	r1, sp, #40	@ 0x28
 80018a4:	48b7      	ldr	r0, [pc, #732]	@ (8001b84 <main+0x364>)
 80018a6:	f002 fa81 	bl	8003dac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2005      	movs	r0, #5
 80018b0:	f002 f88c 	bl	80039cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80018b4:	2005      	movs	r0, #5
 80018b6:	f002 f8bb 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2007      	movs	r0, #7
 80018c0:	f002 f884 	bl	80039cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018c4:	2007      	movs	r0, #7
 80018c6:	f002 f8b3 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018cc:	432b      	orrs	r3, r5
 80018ce:	63a3      	str	r3, [r4, #56]	@ 0x38
 80018d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018d2:	402b      	ands	r3, r5
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2009      	movs	r0, #9
 80018de:	f002 f875 	bl	80039cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018e2:	2009      	movs	r0, #9
 80018e4:	f002 f8a4 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80018e8:	48a7      	ldr	r0, [pc, #668]	@ (8001b88 <main+0x368>)
 80018ea:	4ba8      	ldr	r3, [pc, #672]	@ (8001b8c <main+0x36c>)
 80018ec:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80018ee:	4ba8      	ldr	r3, [pc, #672]	@ (8001b90 <main+0x370>)
 80018f0:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f6:	60c5      	str	r5, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018fa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018fc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018fe:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001900:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001902:	f002 fcbb 	bl	800427c <HAL_I2C_Init>
 8001906:	2800      	cmp	r0, #0
 8001908:	d000      	beq.n	800190c <main+0xec>
 800190a:	e0fd      	b.n	8001b08 <main+0x2e8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800190c:	489e      	ldr	r0, [pc, #632]	@ (8001b88 <main+0x368>)
 800190e:	2100      	movs	r1, #0
 8001910:	f002 fec0 	bl	8004694 <HAL_I2CEx_ConfigAnalogFilter>
 8001914:	2800      	cmp	r0, #0
 8001916:	d000      	beq.n	800191a <main+0xfa>
 8001918:	e0f8      	b.n	8001b0c <main+0x2ec>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800191a:	489b      	ldr	r0, [pc, #620]	@ (8001b88 <main+0x368>)
 800191c:	2100      	movs	r1, #0
 800191e:	f002 fee5 	bl	80046ec <HAL_I2CEx_ConfigDigitalFilter>
 8001922:	2800      	cmp	r0, #0
 8001924:	d000      	beq.n	8001928 <main+0x108>
 8001926:	e0f3      	b.n	8001b10 <main+0x2f0>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001928:	2218      	movs	r2, #24
 800192a:	2100      	movs	r1, #0
 800192c:	a80a      	add	r0, sp, #40	@ 0x28
 800192e:	f004 f861 	bl	80059f4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001932:	220c      	movs	r2, #12
 8001934:	2100      	movs	r1, #0
 8001936:	a807      	add	r0, sp, #28
 8001938:	f004 f85c 	bl	80059f4 <memset>
  hadc1.Instance = ADC1;
 800193c:	4895      	ldr	r0, [pc, #596]	@ (8001b94 <main+0x374>)
 800193e:	4b96      	ldr	r3, [pc, #600]	@ (8001b98 <main+0x378>)
 8001940:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	031b      	lsls	r3, r3, #12
 8001946:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001948:	2300      	movs	r3, #0
 800194a:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800194c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800194e:	2280      	movs	r2, #128	@ 0x80
 8001950:	0392      	lsls	r2, r2, #14
 8001952:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001954:	2204      	movs	r2, #4
 8001956:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001958:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800195a:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800195c:	3a03      	subs	r2, #3
 800195e:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 2;
 8001960:	2102      	movs	r1, #2
 8001962:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001964:	311e      	adds	r1, #30
 8001966:	5443      	strb	r3, [r0, r1]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001968:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800196a:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800196c:	310c      	adds	r1, #12
 800196e:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001970:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001972:	3206      	adds	r2, #6
 8001974:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001976:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001978:	3235      	adds	r2, #53	@ 0x35
 800197a:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800197c:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800197e:	f001 f963 	bl	8002c48 <HAL_ADC_Init>
 8001982:	2800      	cmp	r0, #0
 8001984:	d000      	beq.n	8001988 <main+0x168>
 8001986:	e0c5      	b.n	8001b14 <main+0x2f4>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001988:	a90a      	add	r1, sp, #40	@ 0x28
 800198a:	4b84      	ldr	r3, [pc, #528]	@ (8001b9c <main+0x37c>)
 800198c:	930a      	str	r3, [sp, #40]	@ 0x28
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800198e:	23c0      	movs	r3, #192	@ 0xc0
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	604b      	str	r3, [r1, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8001994:	4b82      	ldr	r3, [pc, #520]	@ (8001ba0 <main+0x380>)
 8001996:	608b      	str	r3, [r1, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 8001998:	2301      	movs	r3, #1
 800199a:	730b      	strb	r3, [r1, #12]
  AnalogWDGConfig.HighThreshold = 2300;
 800199c:	4b81      	ldr	r3, [pc, #516]	@ (8001ba4 <main+0x384>)
 800199e:	610b      	str	r3, [r1, #16]
  AnalogWDGConfig.LowThreshold = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	614b      	str	r3, [r1, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80019a4:	487b      	ldr	r0, [pc, #492]	@ (8001b94 <main+0x374>)
 80019a6:	f001 fe33 	bl	8003610 <HAL_ADC_AnalogWDGConfig>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d000      	beq.n	80019b0 <main+0x190>
 80019ae:	e0b3      	b.n	8001b18 <main+0x2f8>
  sConfig.Channel = ADC_CHANNEL_3;
 80019b0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba8 <main+0x388>)
 80019b2:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80019b8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ba:	4876      	ldr	r0, [pc, #472]	@ (8001b94 <main+0x374>)
 80019bc:	a907      	add	r1, sp, #28
 80019be:	f001 fb5f 	bl	8003080 <HAL_ADC_ConfigChannel>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d000      	beq.n	80019c8 <main+0x1a8>
 80019c6:	e0a9      	b.n	8001b1c <main+0x2fc>
  sConfig.Channel = ADC_CHANNEL_5;
 80019c8:	4b75      	ldr	r3, [pc, #468]	@ (8001ba0 <main+0x380>)
 80019ca:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019cc:	2304      	movs	r3, #4
 80019ce:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80019d0:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <main+0x38c>)
 80019d2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d4:	486f      	ldr	r0, [pc, #444]	@ (8001b94 <main+0x374>)
 80019d6:	a907      	add	r1, sp, #28
 80019d8:	f001 fb52 	bl	8003080 <HAL_ADC_ConfigChannel>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d000      	beq.n	80019e2 <main+0x1c2>
 80019e0:	e09e      	b.n	8001b20 <main+0x300>
  hrtc.Instance = RTC;
 80019e2:	4873      	ldr	r0, [pc, #460]	@ (8001bb0 <main+0x390>)
 80019e4:	4b73      	ldr	r3, [pc, #460]	@ (8001bb4 <main+0x394>)
 80019e6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019e8:	2300      	movs	r3, #0
 80019ea:	6083      	str	r3, [r0, #8]
  hrtc.Init.AsynchPrediv = 127;
 80019ec:	227f      	movs	r2, #127	@ 0x7f
 80019ee:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 80019f0:	3280      	adds	r2, #128	@ 0x80
 80019f2:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019f4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019f6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019f8:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	05d2      	lsls	r2, r2, #23
 80019fe:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a00:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a02:	f003 fbc7 	bl	8005194 <HAL_RTC_Init>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d000      	beq.n	8001a0c <main+0x1ec>
 8001a0a:	e08b      	b.n	8001b24 <main+0x304>
  htim16.Instance = TIM16;
 8001a0c:	486a      	ldr	r0, [pc, #424]	@ (8001bb8 <main+0x398>)
 8001a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001bbc <main+0x39c>)
 8001a10:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 15999;
 8001a12:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc0 <main+0x3a0>)
 8001a14:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	2300      	movs	r3, #0
 8001a18:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 4999;
 8001a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8001bc4 <main+0x3a4>)
 8001a1c:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a20:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a24:	f003 fe58 	bl	80056d8 <HAL_TIM_Base_Init>
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d000      	beq.n	8001a2e <main+0x20e>
 8001a2c:	e07c      	b.n	8001b28 <main+0x308>
  htim14.Instance = TIM14;
 8001a2e:	4866      	ldr	r0, [pc, #408]	@ (8001bc8 <main+0x3a8>)
 8001a30:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <main+0x3ac>)
 8001a32:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 15999;
 8001a34:	4b62      	ldr	r3, [pc, #392]	@ (8001bc0 <main+0x3a0>)
 8001a36:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 5050;
 8001a3c:	4a64      	ldr	r2, [pc, #400]	@ (8001bd0 <main+0x3b0>)
 8001a3e:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001a44:	f003 fe48 	bl	80056d8 <HAL_TIM_Base_Init>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d16f      	bne.n	8001b2c <main+0x30c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	2100      	movs	r1, #0
 8001a50:	a80a      	add	r0, sp, #40	@ 0x28
 8001a52:	f003 ffcf 	bl	80059f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	220c      	movs	r2, #12
 8001a58:	2100      	movs	r1, #0
 8001a5a:	a807      	add	r0, sp, #28
 8001a5c:	f003 ffca 	bl	80059f4 <memset>
  htim3.Instance = TIM3;
 8001a60:	485c      	ldr	r0, [pc, #368]	@ (8001bd4 <main+0x3b4>)
 8001a62:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd8 <main+0x3b8>)
 8001a64:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 15999;
 8001a66:	4b56      	ldr	r3, [pc, #344]	@ (8001bc0 <main+0x3a0>)
 8001a68:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 59;
 8001a6e:	223b      	movs	r2, #59	@ 0x3b
 8001a70:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a74:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a76:	f003 fe2f 	bl	80056d8 <HAL_TIM_Base_Init>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d158      	bne.n	8001b30 <main+0x310>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a84:	4853      	ldr	r0, [pc, #332]	@ (8001bd4 <main+0x3b4>)
 8001a86:	a90a      	add	r1, sp, #40	@ 0x28
 8001a88:	f003 fe62 	bl	8005750 <HAL_TIM_ConfigClockSource>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d151      	bne.n	8001b34 <main+0x314>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a96:	484f      	ldr	r0, [pc, #316]	@ (8001bd4 <main+0x3b4>)
 8001a98:	a907      	add	r1, sp, #28
 8001a9a:	f003 ff17 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d14a      	bne.n	8001b38 <main+0x318>
  htim17.Instance = TIM17;
 8001aa2:	484e      	ldr	r0, [pc, #312]	@ (8001bdc <main+0x3bc>)
 8001aa4:	4b4e      	ldr	r3, [pc, #312]	@ (8001be0 <main+0x3c0>)
 8001aa6:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 15999;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <main+0x3a0>)
 8001aaa:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	2300      	movs	r3, #0
 8001aae:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 14999;
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8001be4 <main+0x3c4>)
 8001ab2:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ab6:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001aba:	f003 fe0d 	bl	80056d8 <HAL_TIM_Base_Init>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d13c      	bne.n	8001b3c <main+0x31c>
  ssd1306_Init();
 8001ac2:	f000 fd93 	bl	80025ec <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8001ac6:	f000 fd7f 	bl	80025c8 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 8001aca:	f000 fd85 	bl	80025d8 <ssd1306_Clear>
  ssd1306_SetColor(White);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fc76 	bl	80023c0 <ssd1306_SetColor>
HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);
 8001ad4:	4c44      	ldr	r4, [pc, #272]	@ (8001be8 <main+0x3c8>)
 8001ad6:	482f      	ldr	r0, [pc, #188]	@ (8001b94 <main+0x374>)
 8001ad8:	2202      	movs	r2, #2
 8001ada:	0021      	movs	r1, r4
 8001adc:	f001 fcb0 	bl	8003440 <HAL_ADC_Start_DMA>
dead_zone = adc[1];
 8001ae0:	8862      	ldrh	r2, [r4, #2]
 8001ae2:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <main+0x3cc>)
 8001ae4:	801a      	strh	r2, [r3, #0]
direct_zone = 250;
 8001ae6:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <main+0x3d0>)
 8001ae8:	22fa      	movs	r2, #250	@ 0xfa
 8001aea:	801a      	strh	r2, [r3, #0]
TIM17->CNT = 0;
 8001aec:	4b3c      	ldr	r3, [pc, #240]	@ (8001be0 <main+0x3c0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
TIM17->SR &= ~TIM_SR_UIF;
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	2101      	movs	r1, #1
 8001af6:	438a      	bics	r2, r1
 8001af8:	611a      	str	r2, [r3, #16]
HAL_TIM_Base_Start_IT(&htim17);
 8001afa:	4838      	ldr	r0, [pc, #224]	@ (8001bdc <main+0x3bc>)
 8001afc:	f003 fc76 	bl	80053ec <HAL_TIM_Base_Start_IT>
if(switchers & SLEEP)
 8001b00:	4d3c      	ldr	r5, [pc, #240]	@ (8001bf4 <main+0x3d4>)
else if(!(switchers & SLEEP))
 8001b02:	46ab      	mov	fp, r5
	  if(switchers & SW1  && switchers & SW3){
 8001b04:	002c      	movs	r4, r5
 8001b06:	e087      	b.n	8001c18 <main+0x3f8>
 8001b08:	b672      	cpsid	i
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <main+0x2ea>
 8001b0c:	b672      	cpsid	i
 8001b0e:	e7fe      	b.n	8001b0e <main+0x2ee>
 8001b10:	b672      	cpsid	i
 8001b12:	e7fe      	b.n	8001b12 <main+0x2f2>
 8001b14:	b672      	cpsid	i
 8001b16:	e7fe      	b.n	8001b16 <main+0x2f6>
 8001b18:	b672      	cpsid	i
 8001b1a:	e7fe      	b.n	8001b1a <main+0x2fa>
 8001b1c:	b672      	cpsid	i
 8001b1e:	e7fe      	b.n	8001b1e <main+0x2fe>
 8001b20:	b672      	cpsid	i
 8001b22:	e7fe      	b.n	8001b22 <main+0x302>
 8001b24:	b672      	cpsid	i
 8001b26:	e7fe      	b.n	8001b26 <main+0x306>
 8001b28:	b672      	cpsid	i
 8001b2a:	e7fe      	b.n	8001b2a <main+0x30a>
 8001b2c:	b672      	cpsid	i
 8001b2e:	e7fe      	b.n	8001b2e <main+0x30e>
 8001b30:	b672      	cpsid	i
 8001b32:	e7fe      	b.n	8001b32 <main+0x312>
 8001b34:	b672      	cpsid	i
 8001b36:	e7fe      	b.n	8001b36 <main+0x316>
 8001b38:	b672      	cpsid	i
 8001b3a:	e7fe      	b.n	8001b3a <main+0x31a>
 8001b3c:	b672      	cpsid	i
 8001b3e:	e7fe      	b.n	8001b3e <main+0x31e>
	ssd1306_DisplayOff();
 8001b40:	f000 fd33 	bl	80025aa <ssd1306_DisplayOff>
 8001b44:	e06f      	b.n	8001c26 <main+0x406>
	ssd1306_DisplayOn();
 8001b46:	f000 fd2b 	bl	80025a0 <ssd1306_DisplayOn>
 8001b4a:	e06c      	b.n	8001c26 <main+0x406>
		switchers &= ~TIMER16;
 8001b4c:	4a29      	ldr	r2, [pc, #164]	@ (8001bf4 <main+0x3d4>)
 8001b4e:	7813      	ldrb	r3, [r2, #0]
 8001b50:	2110      	movs	r1, #16
 8001b52:	438b      	bics	r3, r1
 8001b54:	7013      	strb	r3, [r2, #0]
		TIM16->CNT = 0;
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <main+0x39c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM16->SR &= ~TIM_SR_UIF;
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	390f      	subs	r1, #15
 8001b60:	438a      	bics	r2, r1
 8001b62:	611a      	str	r2, [r3, #16]
		TIM16->ARR = 2000;
 8001b64:	22fa      	movs	r2, #250	@ 0xfa
 8001b66:	00d2      	lsls	r2, r2, #3
 8001b68:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_Base_Start_IT(&htim16);
 8001b6a:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <main+0x398>)
 8001b6c:	f003 fc3e 	bl	80053ec <HAL_TIM_Base_Start_IT>
switch (config){
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <main+0x3d8>)
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	2a05      	cmp	r2, #5
 8001b76:	d84b      	bhi.n	8001c10 <main+0x3f0>
 8001b78:	0093      	lsls	r3, r2, #2
 8001b7a:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <main+0x3dc>)
 8001b7c:	58d3      	ldr	r3, [r2, r3]
 8001b7e:	469f      	mov	pc, r3
 8001b80:	40021000 	.word	0x40021000
 8001b84:	50000400 	.word	0x50000400
 8001b88:	200002c4 	.word	0x200002c4
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	00503d58 	.word	0x00503d58
 8001b94:	20000374 	.word	0x20000374
 8001b98:	40012400 	.word	0x40012400
 8001b9c:	7cc00000 	.word	0x7cc00000
 8001ba0:	14000020 	.word	0x14000020
 8001ba4:	000008fc 	.word	0x000008fc
 8001ba8:	0c000008 	.word	0x0c000008
 8001bac:	07ffff04 	.word	0x07ffff04
 8001bb0:	20000298 	.word	0x20000298
 8001bb4:	40002800 	.word	0x40002800
 8001bb8:	200001b4 	.word	0x200001b4
 8001bbc:	40014400 	.word	0x40014400
 8001bc0:	00003e7f 	.word	0x00003e7f
 8001bc4:	00001387 	.word	0x00001387
 8001bc8:	20000200 	.word	0x20000200
 8001bcc:	40002000 	.word	0x40002000
 8001bd0:	000013ba 	.word	0x000013ba
 8001bd4:	2000024c 	.word	0x2000024c
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	20000168 	.word	0x20000168
 8001be0:	40014800 	.word	0x40014800
 8001be4:	00003a97 	.word	0x00003a97
 8001be8:	20000130 	.word	0x20000130
 8001bec:	200000a0 	.word	0x200000a0
 8001bf0:	2000009e 	.word	0x2000009e
 8001bf4:	20000014 	.word	0x20000014
 8001bf8:	200000a2 	.word	0x200000a2
 8001bfc:	08007978 	.word	0x08007978
WriteTime();
 8001c00:	f7ff fb16 	bl	8001230 <WriteTime>
WriteBatteryCharge(BatteryCharge());
 8001c04:	f7ff fb96 	bl	8001334 <BatteryCharge>
 8001c08:	f7ff fbd8 	bl	80013bc <WriteBatteryCharge>
CalculateSpeed();
 8001c0c:	f7ff fbf4 	bl	80013f8 <CalculateSpeed>
	 ssd1306_UpdateScreen();
 8001c10:	f000 fbdc 	bl	80023cc <ssd1306_UpdateScreen>
	 ssd1306_Clear();
 8001c14:	f000 fce0 	bl	80025d8 <ssd1306_Clear>
if(switchers & SLEEP)
 8001c18:	782b      	ldrb	r3, [r5, #0]
 8001c1a:	065b      	lsls	r3, r3, #25
 8001c1c:	d490      	bmi.n	8001b40 <main+0x320>
else if(!(switchers & SLEEP))
 8001c1e:	465b      	mov	r3, fp
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	065b      	lsls	r3, r3, #25
 8001c24:	d58f      	bpl.n	8001b46 <main+0x326>
	  if(switchers & SW1  && switchers & SW3){
 8001c26:	7823      	ldrb	r3, [r4, #0]
 8001c28:	07db      	lsls	r3, r3, #31
 8001c2a:	d5a1      	bpl.n	8001b70 <main+0x350>
 8001c2c:	4bd9      	ldr	r3, [pc, #868]	@ (8001f94 <main+0x774>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	075b      	lsls	r3, r3, #29
 8001c32:	d59d      	bpl.n	8001b70 <main+0x350>
	if(!(switchers & TIMER16)){
 8001c34:	4bd7      	ldr	r3, [pc, #860]	@ (8001f94 <main+0x774>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	06db      	lsls	r3, r3, #27
 8001c3a:	d487      	bmi.n	8001b4c <main+0x32c>
		if(TIM16->CNT >= 1500){
 8001c3c:	4bd6      	ldr	r3, [pc, #856]	@ (8001f98 <main+0x778>)
 8001c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c40:	4bd6      	ldr	r3, [pc, #856]	@ (8001f9c <main+0x77c>)
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d994      	bls.n	8001b70 <main+0x350>
					  config = 1;
 8001c46:	4bd6      	ldr	r3, [pc, #856]	@ (8001fa0 <main+0x780>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	7019      	strb	r1, [r3, #0]
					  switchers &= ~SW1;
 8001c4c:	4bd1      	ldr	r3, [pc, #836]	@ (8001f94 <main+0x774>)
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	438a      	bics	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
					  switchers &= ~SW3;
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	3103      	adds	r1, #3
 8001c58:	438a      	bics	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
if(switchers & SW1  && switchers & SW3)
 8001c5c:	4bcd      	ldr	r3, [pc, #820]	@ (8001f94 <main+0x774>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	07db      	lsls	r3, r3, #31
 8001c62:	d529      	bpl.n	8001cb8 <main+0x498>
 8001c64:	4bcb      	ldr	r3, [pc, #812]	@ (8001f94 <main+0x774>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	075b      	lsls	r3, r3, #29
 8001c6a:	d525      	bpl.n	8001cb8 <main+0x498>
	__NOP();
 8001c6c:	46c0      	nop			@ (mov r8, r8)
if(con > 3)
 8001c6e:	4bcd      	ldr	r3, [pc, #820]	@ (8001fa4 <main+0x784>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	dd3f      	ble.n	8001cf8 <main+0x4d8>
	con = -1;
 8001c78:	4bca      	ldr	r3, [pc, #808]	@ (8001fa4 <main+0x784>)
 8001c7a:	22ff      	movs	r2, #255	@ 0xff
 8001c7c:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(0, 0);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 fc87 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Calibration");
 8001c86:	48c8      	ldr	r0, [pc, #800]	@ (8001fa8 <main+0x788>)
 8001c88:	4bc8      	ldr	r3, [pc, #800]	@ (8001fac <main+0x78c>)
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	cbc2      	ldmia	r3!, {r1, r6, r7}
 8001c8e:	c2c2      	stmia	r2!, {r1, r6, r7}
		ssd1306_WriteString(buf, Font_11x18);
 8001c90:	4bc7      	ldr	r3, [pc, #796]	@ (8001fb0 <main+0x790>)
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	f000 fc67 	bl	8002568 <ssd1306_WriteString>
		if (switchers & SW2 && switchers & TIMER16){
 8001c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8001f94 <main+0x774>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	079b      	lsls	r3, r3, #30
 8001ca0:	d5b6      	bpl.n	8001c10 <main+0x3f0>
 8001ca2:	4bbc      	ldr	r3, [pc, #752]	@ (8001f94 <main+0x774>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	06db      	lsls	r3, r3, #27
 8001ca8:	d5b2      	bpl.n	8001c10 <main+0x3f0>
			config = 4;
 8001caa:	4bbd      	ldr	r3, [pc, #756]	@ (8001fa0 <main+0x780>)
 8001cac:	2204      	movs	r2, #4
 8001cae:	701a      	strb	r2, [r3, #0]
			AntiRattlesnake_TIM16(DELAY);
 8001cb0:	20c8      	movs	r0, #200	@ 0xc8
 8001cb2:	f7ff fcd3 	bl	800165c <AntiRattlesnake_TIM16>
 8001cb6:	e7ab      	b.n	8001c10 <main+0x3f0>
else if(switchers & SW3 && switchers & TIMER16){
 8001cb8:	4bb6      	ldr	r3, [pc, #728]	@ (8001f94 <main+0x774>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	075b      	lsls	r3, r3, #29
 8001cbe:	d503      	bpl.n	8001cc8 <main+0x4a8>
 8001cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8001f94 <main+0x774>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	06db      	lsls	r3, r3, #27
 8001cc6:	d40f      	bmi.n	8001ce8 <main+0x4c8>
else if(switchers & SW1 && switchers & TIMER16){
 8001cc8:	4bb2      	ldr	r3, [pc, #712]	@ (8001f94 <main+0x774>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	07db      	lsls	r3, r3, #31
 8001cce:	d5ce      	bpl.n	8001c6e <main+0x44e>
 8001cd0:	4bb0      	ldr	r3, [pc, #704]	@ (8001f94 <main+0x774>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	06db      	lsls	r3, r3, #27
 8001cd6:	d5ca      	bpl.n	8001c6e <main+0x44e>
	con--;
 8001cd8:	4ab2      	ldr	r2, [pc, #712]	@ (8001fa4 <main+0x784>)
 8001cda:	7813      	ldrb	r3, [r2, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	7013      	strb	r3, [r2, #0]
	AntiRattlesnake_TIM16(DELAY);
 8001ce0:	20c8      	movs	r0, #200	@ 0xc8
 8001ce2:	f7ff fcbb 	bl	800165c <AntiRattlesnake_TIM16>
 8001ce6:	e7c2      	b.n	8001c6e <main+0x44e>
	con++;
 8001ce8:	4aae      	ldr	r2, [pc, #696]	@ (8001fa4 <main+0x784>)
 8001cea:	7813      	ldrb	r3, [r2, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	7013      	strb	r3, [r2, #0]
	AntiRattlesnake_TIM16(DELAY);
 8001cf0:	20c8      	movs	r0, #200	@ 0xc8
 8001cf2:	f7ff fcb3 	bl	800165c <AntiRattlesnake_TIM16>
 8001cf6:	e7ba      	b.n	8001c6e <main+0x44e>
else if(con < -1)
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	db07      	blt.n	8001d0c <main+0x4ec>
switch (con) {
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	2a04      	cmp	r2, #4
 8001d02:	d885      	bhi.n	8001c10 <main+0x3f0>
 8001d04:	0093      	lsls	r3, r2, #2
 8001d06:	4aab      	ldr	r2, [pc, #684]	@ (8001fb4 <main+0x794>)
 8001d08:	58d3      	ldr	r3, [r2, r3]
 8001d0a:	469f      	mov	pc, r3
	con = 3;
 8001d0c:	4ba5      	ldr	r3, [pc, #660]	@ (8001fa4 <main+0x784>)
 8001d0e:	2203      	movs	r2, #3
 8001d10:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(0, 0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 fc3d 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Set mode");
 8001d1a:	4fa3      	ldr	r7, [pc, #652]	@ (8001fa8 <main+0x788>)
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	@ (8001fb8 <main+0x798>)
 8001d1e:	003a      	movs	r2, r7
 8001d20:	cb03      	ldmia	r3!, {r0, r1}
 8001d22:	c203      	stmia	r2!, {r0, r1}
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	7013      	strb	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_11x18);
 8001d28:	4ba1      	ldr	r3, [pc, #644]	@ (8001fb0 <main+0x790>)
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	0038      	movs	r0, r7
 8001d30:	f000 fc1a 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8001d34:	2114      	movs	r1, #20
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 fc2c 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Dark or Light");
 8001d3c:	4b9f      	ldr	r3, [pc, #636]	@ (8001fbc <main+0x79c>)
 8001d3e:	003a      	movs	r2, r7
 8001d40:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001d42:	c243      	stmia	r2!, {r0, r1, r6}
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	8013      	strh	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_7x10);
 8001d48:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc0 <main+0x7a0>)
 8001d4a:	4698      	mov	r8, r3
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	0038      	movs	r0, r7
 8001d52:	f000 fc09 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8001d56:	211e      	movs	r1, #30
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 fc1b 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "for display");
 8001d5e:	4b99      	ldr	r3, [pc, #612]	@ (8001fc4 <main+0x7a4>)
 8001d60:	003a      	movs	r2, r7
 8001d62:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001d64:	c243      	stmia	r2!, {r0, r1, r6}
		ssd1306_WriteString(buf, Font_7x10);
 8001d66:	4643      	mov	r3, r8
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	0038      	movs	r0, r7
 8001d6e:	f000 fbfb 	bl	8002568 <ssd1306_WriteString>
		if (switchers & SW2 && switchers & TIMER16){
 8001d72:	4b88      	ldr	r3, [pc, #544]	@ (8001f94 <main+0x774>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	079b      	lsls	r3, r3, #30
 8001d78:	d400      	bmi.n	8001d7c <main+0x55c>
 8001d7a:	e749      	b.n	8001c10 <main+0x3f0>
 8001d7c:	4b85      	ldr	r3, [pc, #532]	@ (8001f94 <main+0x774>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	06db      	lsls	r3, r3, #27
 8001d82:	d400      	bmi.n	8001d86 <main+0x566>
 8001d84:	e744      	b.n	8001c10 <main+0x3f0>
					config = 5;
 8001d86:	4b86      	ldr	r3, [pc, #536]	@ (8001fa0 <main+0x780>)
 8001d88:	2205      	movs	r2, #5
 8001d8a:	701a      	strb	r2, [r3, #0]
					AntiRattlesnake_TIM16(DELAY);
 8001d8c:	20c8      	movs	r0, #200	@ 0xc8
 8001d8e:	f7ff fc65 	bl	800165c <AntiRattlesnake_TIM16>
 8001d92:	e73d      	b.n	8001c10 <main+0x3f0>
		ssd1306_SetCursor(20, 0);
 8001d94:	2100      	movs	r1, #0
 8001d96:	2014      	movs	r0, #20
 8001d98:	f000 fbfc 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "STATUS");
 8001d9c:	4f82      	ldr	r7, [pc, #520]	@ (8001fa8 <main+0x788>)
 8001d9e:	4b8a      	ldr	r3, [pc, #552]	@ (8001fc8 <main+0x7a8>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	603a      	str	r2, [r7, #0]
 8001da4:	889a      	ldrh	r2, [r3, #4]
 8001da6:	80ba      	strh	r2, [r7, #4]
 8001da8:	799b      	ldrb	r3, [r3, #6]
 8001daa:	71bb      	strb	r3, [r7, #6]
		ssd1306_WriteString(buf, Font_11x18);
 8001dac:	4b80      	ldr	r3, [pc, #512]	@ (8001fb0 <main+0x790>)
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	0038      	movs	r0, r7
 8001db4:	f000 fbd8 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8001db8:	2114      	movs	r1, #20
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 fbea 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "AVR SPEED:%02u.%01ukm/h", average_speed_day/10, average_speed_day % 10);
 8001dc0:	4b82      	ldr	r3, [pc, #520]	@ (8001fcc <main+0x7ac>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	4691      	mov	r9, r2
 8001dc8:	8818      	ldrh	r0, [r3, #0]
 8001dca:	b280      	uxth	r0, r0
 8001dcc:	210a      	movs	r1, #10
 8001dce:	f7fe fa27 	bl	8000220 <__aeabi_uidivmod>
 8001dd2:	b28b      	uxth	r3, r1
 8001dd4:	4698      	mov	r8, r3
 8001dd6:	210a      	movs	r1, #10
 8001dd8:	4648      	mov	r0, r9
 8001dda:	f7fe f99b 	bl	8000114 <__udivsi3>
 8001dde:	b282      	uxth	r2, r0
 8001de0:	497b      	ldr	r1, [pc, #492]	@ (8001fd0 <main+0x7b0>)
 8001de2:	4643      	mov	r3, r8
 8001de4:	0038      	movs	r0, r7
 8001de6:	f003 fde3 	bl	80059b0 <siprintf>
		ssd1306_WriteString(buf, Font_7x10);
 8001dea:	4b75      	ldr	r3, [pc, #468]	@ (8001fc0 <main+0x7a0>)
 8001dec:	4698      	mov	r8, r3
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	0038      	movs	r0, r7
 8001df4:	f000 fbb8 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8001df8:	211e      	movs	r1, #30
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 fbca 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "MAX SPEED:%02u.%01ukm/h", max_speed_day/10, max_speed_day % 10);
 8001e00:	4b74      	ldr	r3, [pc, #464]	@ (8001fd4 <main+0x7b4>)
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	b292      	uxth	r2, r2
 8001e06:	4692      	mov	sl, r2
 8001e08:	8818      	ldrh	r0, [r3, #0]
 8001e0a:	b280      	uxth	r0, r0
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	f7fe fa07 	bl	8000220 <__aeabi_uidivmod>
 8001e12:	b28b      	uxth	r3, r1
 8001e14:	4699      	mov	r9, r3
 8001e16:	210a      	movs	r1, #10
 8001e18:	4650      	mov	r0, sl
 8001e1a:	f7fe f97b 	bl	8000114 <__udivsi3>
 8001e1e:	b282      	uxth	r2, r0
 8001e20:	496d      	ldr	r1, [pc, #436]	@ (8001fd8 <main+0x7b8>)
 8001e22:	464b      	mov	r3, r9
 8001e24:	0038      	movs	r0, r7
 8001e26:	f003 fdc3 	bl	80059b0 <siprintf>
		ssd1306_WriteString(buf, Font_7x10);
 8001e2a:	4643      	mov	r3, r8
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	0038      	movs	r0, r7
 8001e32:	f000 fb99 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 40);
 8001e36:	2128      	movs	r1, #40	@ 0x28
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f000 fbab 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "RIDE TIME:%02u:%02u:%02u",travel_time_hours , travel_time_min, travel_time_sec);
 8001e3e:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <main+0x7bc>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	4b66      	ldr	r3, [pc, #408]	@ (8001fe0 <main+0x7c0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4966      	ldr	r1, [pc, #408]	@ (8001fe4 <main+0x7c4>)
 8001e4c:	7808      	ldrb	r0, [r1, #0]
 8001e4e:	4966      	ldr	r1, [pc, #408]	@ (8001fe8 <main+0x7c8>)
 8001e50:	9000      	str	r0, [sp, #0]
 8001e52:	0038      	movs	r0, r7
 8001e54:	f003 fdac 	bl	80059b0 <siprintf>
		ssd1306_WriteString(buf, Font_7x10);
 8001e58:	4643      	mov	r3, r8
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	0038      	movs	r0, r7
 8001e60:	f000 fb82 	bl	8002568 <ssd1306_WriteString>
		if(switchers & SW2 && switchers & TIMER16){
 8001e64:	4b4b      	ldr	r3, [pc, #300]	@ (8001f94 <main+0x774>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	079b      	lsls	r3, r3, #30
 8001e6a:	d400      	bmi.n	8001e6e <main+0x64e>
 8001e6c:	e6d0      	b.n	8001c10 <main+0x3f0>
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <main+0x774>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	06db      	lsls	r3, r3, #27
 8001e74:	d400      	bmi.n	8001e78 <main+0x658>
 8001e76:	e6cb      	b.n	8001c10 <main+0x3f0>
			if(switchers & SW2 && switchers & TIMER16){
 8001e78:	4b46      	ldr	r3, [pc, #280]	@ (8001f94 <main+0x774>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	079b      	lsls	r3, r3, #30
 8001e7e:	d400      	bmi.n	8001e82 <main+0x662>
 8001e80:	e6c6      	b.n	8001c10 <main+0x3f0>
 8001e82:	4b44      	ldr	r3, [pc, #272]	@ (8001f94 <main+0x774>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	06db      	lsls	r3, r3, #27
 8001e88:	d400      	bmi.n	8001e8c <main+0x66c>
 8001e8a:	e6c1      	b.n	8001c10 <main+0x3f0>
				config = MAIN;
 8001e8c:	4b44      	ldr	r3, [pc, #272]	@ (8001fa0 <main+0x780>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
				AntiRattlesnake_TIM16(DELAY);
 8001e92:	20c8      	movs	r0, #200	@ 0xc8
 8001e94:	f7ff fbe2 	bl	800165c <AntiRattlesnake_TIM16>
 8001e98:	e6ba      	b.n	8001c10 <main+0x3f0>
		ssd1306_SetCursor(0, 0);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 fb79 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Set time");
 8001ea2:	4841      	ldr	r0, [pc, #260]	@ (8001fa8 <main+0x788>)
 8001ea4:	4b51      	ldr	r3, [pc, #324]	@ (8001fec <main+0x7cc>)
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	cb82      	ldmia	r3!, {r1, r7}
 8001eaa:	c282      	stmia	r2!, {r1, r7}
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	7013      	strb	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_11x18);
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb0 <main+0x790>)
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	f000 fb57 	bl	8002568 <ssd1306_WriteString>
		if(switchers & SW2 && switchers & TIMER16){
 8001eba:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <main+0x774>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	079b      	lsls	r3, r3, #30
 8001ec0:	d400      	bmi.n	8001ec4 <main+0x6a4>
 8001ec2:	e6a5      	b.n	8001c10 <main+0x3f0>
 8001ec4:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <main+0x774>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	06db      	lsls	r3, r3, #27
 8001eca:	d400      	bmi.n	8001ece <main+0x6ae>
 8001ecc:	e6a0      	b.n	8001c10 <main+0x3f0>
			config = 2;
 8001ece:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <main+0x780>)
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]
			AntiRattlesnake_TIM16(DELAY);
 8001ed4:	20c8      	movs	r0, #200	@ 0xc8
 8001ed6:	f7ff fbc1 	bl	800165c <AntiRattlesnake_TIM16>
 8001eda:	e699      	b.n	8001c10 <main+0x3f0>
		ssd1306_SetCursor(0, 0);
 8001edc:	2100      	movs	r1, #0
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 fb58 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Set size");
 8001ee4:	4830      	ldr	r0, [pc, #192]	@ (8001fa8 <main+0x788>)
 8001ee6:	4b42      	ldr	r3, [pc, #264]	@ (8001ff0 <main+0x7d0>)
 8001ee8:	0002      	movs	r2, r0
 8001eea:	cb82      	ldmia	r3!, {r1, r7}
 8001eec:	c282      	stmia	r2!, {r1, r7}
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	7013      	strb	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_11x18);
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb0 <main+0x790>)
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	f000 fb36 	bl	8002568 <ssd1306_WriteString>
		if(switchers & SW2 && switchers & TIMER16){
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <main+0x774>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	079b      	lsls	r3, r3, #30
 8001f02:	d400      	bmi.n	8001f06 <main+0x6e6>
 8001f04:	e684      	b.n	8001c10 <main+0x3f0>
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <main+0x774>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	06db      	lsls	r3, r3, #27
 8001f0c:	d400      	bmi.n	8001f10 <main+0x6f0>
 8001f0e:	e67f      	b.n	8001c10 <main+0x3f0>
			config = 3;
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <main+0x780>)
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
			size = 0;
 8001f16:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <main+0x7d4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	801a      	strh	r2, [r3, #0]
			AntiRattlesnake_TIM16(DELAY);
 8001f1c:	20c8      	movs	r0, #200	@ 0xc8
 8001f1e:	f7ff fb9d 	bl	800165c <AntiRattlesnake_TIM16>
 8001f22:	e675      	b.n	8001c10 <main+0x3f0>
		ConfigTime();
 8001f24:	f7ff fbb2 	bl	800168c <ConfigTime>
		break;
 8001f28:	e672      	b.n	8001c10 <main+0x3f0>
uint8_t table_of_size[6] = {20, 24, 26, 27, 28, 29};
 8001f2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <main+0x7d8>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	920a      	str	r2, [sp, #40]	@ 0x28
 8001f30:	889a      	ldrh	r2, [r3, #4]
 8001f32:	ab0a      	add	r3, sp, #40	@ 0x28
 8001f34:	809a      	strh	r2, [r3, #4]
		if(switchers & SW2 && switchers & TIMER16){
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <main+0x774>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	079b      	lsls	r3, r3, #30
 8001f3c:	d56e      	bpl.n	800201c <main+0x7fc>
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <main+0x774>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	06db      	lsls	r3, r3, #27
 8001f44:	d56a      	bpl.n	800201c <main+0x7fc>
			config = 0;
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <main+0x780>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
			switch(sizes){
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <main+0x7dc>)
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	2a05      	cmp	r2, #5
 8001f52:	d806      	bhi.n	8001f62 <main+0x742>
 8001f54:	0093      	lsls	r3, r2, #2
 8001f56:	4a2a      	ldr	r2, [pc, #168]	@ (8002000 <main+0x7e0>)
 8001f58:	58d3      	ldr	r3, [r2, r3]
 8001f5a:	469f      	mov	pc, r3
		size = INCH20_WHEEL;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <main+0x7d4>)
 8001f5e:	4a29      	ldr	r2, [pc, #164]	@ (8002004 <main+0x7e4>)
 8001f60:	801a      	strh	r2, [r3, #0]
			AntiRattlesnake_TIM16(DELAY);
 8001f62:	20c8      	movs	r0, #200	@ 0xc8
 8001f64:	f7ff fb7a 	bl	800165c <AntiRattlesnake_TIM16>
			break;
 8001f68:	e652      	b.n	8001c10 <main+0x3f0>
		size = INCH24_WHEEL;
 8001f6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <main+0x7d4>)
 8001f6c:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <main+0x7e8>)
 8001f6e:	801a      	strh	r2, [r3, #0]
				break;
 8001f70:	e7f7      	b.n	8001f62 <main+0x742>
		size = INCH26_WHEEL;
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <main+0x7d4>)
 8001f74:	4a25      	ldr	r2, [pc, #148]	@ (800200c <main+0x7ec>)
 8001f76:	801a      	strh	r2, [r3, #0]
				break;
 8001f78:	e7f3      	b.n	8001f62 <main+0x742>
		size = INCH27_WHEEL;
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <main+0x7d4>)
 8001f7c:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <main+0x7f0>)
 8001f7e:	801a      	strh	r2, [r3, #0]
				break;
 8001f80:	e7ef      	b.n	8001f62 <main+0x742>
		size = INCH28_WHEEL;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <main+0x7d4>)
 8001f84:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <main+0x7f4>)
 8001f86:	801a      	strh	r2, [r3, #0]
				break;
 8001f88:	e7eb      	b.n	8001f62 <main+0x742>
		size = INCH29_WHEEL;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <main+0x7d4>)
 8001f8c:	4a22      	ldr	r2, [pc, #136]	@ (8002018 <main+0x7f8>)
 8001f8e:	801a      	strh	r2, [r3, #0]
				break;
 8001f90:	e7e7      	b.n	8001f62 <main+0x742>
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	20000014 	.word	0x20000014
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	000005db 	.word	0x000005db
 8001fa0:	200000a2 	.word	0x200000a2
 8001fa4:	2000009c 	.word	0x2000009c
 8001fa8:	20000134 	.word	0x20000134
 8001fac:	080078cc 	.word	0x080078cc
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	08007990 	.word	0x08007990
 8001fb8:	080078d8 	.word	0x080078d8
 8001fbc:	080078e4 	.word	0x080078e4
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	080078f4 	.word	0x080078f4
 8001fc8:	08007860 	.word	0x08007860
 8001fcc:	200000b2 	.word	0x200000b2
 8001fd0:	08007868 	.word	0x08007868
 8001fd4:	200000b0 	.word	0x200000b0
 8001fd8:	08007880 	.word	0x08007880
 8001fdc:	200000a3 	.word	0x200000a3
 8001fe0:	200000a4 	.word	0x200000a4
 8001fe4:	200000a5 	.word	0x200000a5
 8001fe8:	08007898 	.word	0x08007898
 8001fec:	080078b4 	.word	0x080078b4
 8001ff0:	080078c0 	.word	0x080078c0
 8001ff4:	20000012 	.word	0x20000012
 8001ff8:	08007970 	.word	0x08007970
 8001ffc:	2000009b 	.word	0x2000009b
 8002000:	080079a4 	.word	0x080079a4
 8002004:	0000063b 	.word	0x0000063b
 8002008:	0000077b 	.word	0x0000077b
 800200c:	0000081a 	.word	0x0000081a
 8002010:	0000086a 	.word	0x0000086a
 8002014:	000008ba 	.word	0x000008ba
 8002018:	0000090a 	.word	0x0000090a
		else if(switchers & SW3 && switchers & TIMER16){
 800201c:	4bc3      	ldr	r3, [pc, #780]	@ (800232c <main+0xb0c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	075b      	lsls	r3, r3, #29
 8002022:	d538      	bpl.n	8002096 <main+0x876>
 8002024:	4bc1      	ldr	r3, [pc, #772]	@ (800232c <main+0xb0c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	06db      	lsls	r3, r3, #27
 800202a:	d534      	bpl.n	8002096 <main+0x876>
			sizes++;
 800202c:	4bc0      	ldr	r3, [pc, #768]	@ (8002330 <main+0xb10>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b25b      	sxtb	r3, r3
			if(sizes > 5)
 8002034:	2105      	movs	r1, #5
 8002036:	0fda      	lsrs	r2, r3, #31
 8002038:	17c8      	asrs	r0, r1, #31
 800203a:	4299      	cmp	r1, r3
 800203c:	4142      	adcs	r2, r0
 800203e:	4252      	negs	r2, r2
 8002040:	4013      	ands	r3, r2
			sizes++;
 8002042:	4abb      	ldr	r2, [pc, #748]	@ (8002330 <main+0xb10>)
 8002044:	7013      	strb	r3, [r2, #0]
			AntiRattlesnake_TIM16(DELAY);
 8002046:	20c8      	movs	r0, #200	@ 0xc8
 8002048:	f7ff fb08 	bl	800165c <AntiRattlesnake_TIM16>
		ssd1306_SetCursor(33, 0);
 800204c:	2100      	movs	r1, #0
 800204e:	2021      	movs	r0, #33	@ 0x21
 8002050:	f000 faa0 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Wheel");
 8002054:	4fb7      	ldr	r7, [pc, #732]	@ (8002334 <main+0xb14>)
 8002056:	4bb8      	ldr	r3, [pc, #736]	@ (8002338 <main+0xb18>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	603a      	str	r2, [r7, #0]
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	80bb      	strh	r3, [r7, #4]
		ssd1306_WriteString(buf, Font_11x18);
 8002060:	4bb6      	ldr	r3, [pc, #728]	@ (800233c <main+0xb1c>)
 8002062:	4698      	mov	r8, r3
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	0038      	movs	r0, r7
 800206a:	f000 fa7d 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 39);
 800206e:	2127      	movs	r1, #39	@ 0x27
 8002070:	2000      	movs	r0, #0
 8002072:	f000 fa8f 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Size:%dinch", table_of_size[sizes]);
 8002076:	4bae      	ldr	r3, [pc, #696]	@ (8002330 <main+0xb10>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	aa0a      	add	r2, sp, #40	@ 0x28
 800207e:	5cd2      	ldrb	r2, [r2, r3]
 8002080:	49af      	ldr	r1, [pc, #700]	@ (8002340 <main+0xb20>)
 8002082:	0038      	movs	r0, r7
 8002084:	f003 fc94 	bl	80059b0 <siprintf>
		ssd1306_WriteString(buf, Font_11x18);
 8002088:	4643      	mov	r3, r8
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	0038      	movs	r0, r7
 8002090:	f000 fa6a 	bl	8002568 <ssd1306_WriteString>
		break;
 8002094:	e5bc      	b.n	8001c10 <main+0x3f0>
		else if(switchers & SW1 && switchers & TIMER16){
 8002096:	4ba5      	ldr	r3, [pc, #660]	@ (800232c <main+0xb0c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	07db      	lsls	r3, r3, #31
 800209c:	d5d6      	bpl.n	800204c <main+0x82c>
 800209e:	4ba3      	ldr	r3, [pc, #652]	@ (800232c <main+0xb0c>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	06db      	lsls	r3, r3, #27
 80020a4:	d5d2      	bpl.n	800204c <main+0x82c>
			sizes--;
 80020a6:	4ba2      	ldr	r3, [pc, #648]	@ (8002330 <main+0xb10>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b25a      	sxtb	r2, r3
			if(sizes < 0)
 80020ae:	061b      	lsls	r3, r3, #24
 80020b0:	d405      	bmi.n	80020be <main+0x89e>
			sizes--;
 80020b2:	4b9f      	ldr	r3, [pc, #636]	@ (8002330 <main+0xb10>)
 80020b4:	701a      	strb	r2, [r3, #0]
			AntiRattlesnake_TIM16(DELAY);
 80020b6:	20c8      	movs	r0, #200	@ 0xc8
 80020b8:	f7ff fad0 	bl	800165c <AntiRattlesnake_TIM16>
 80020bc:	e7c6      	b.n	800204c <main+0x82c>
 80020be:	2205      	movs	r2, #5
 80020c0:	e7f7      	b.n	80020b2 <main+0x892>
		if(zones){
 80020c2:	4ba0      	ldr	r3, [pc, #640]	@ (8002344 <main+0xb24>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <main+0x8ac>
 80020ca:	e0b4      	b.n	8002236 <main+0xa16>
			ssd1306_SetCursor(17, 0);
 80020cc:	2100      	movs	r1, #0
 80020ce:	2011      	movs	r0, #17
 80020d0:	f000 fa60 	bl	8002594 <ssd1306_SetCursor>
			sprintf(buf, "Set direct zone");
 80020d4:	4897      	ldr	r0, [pc, #604]	@ (8002334 <main+0xb14>)
 80020d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002348 <main+0xb28>)
 80020d8:	0002      	movs	r2, r0
 80020da:	cbc2      	ldmia	r3!, {r1, r6, r7}
 80020dc:	c2c2      	stmia	r2!, {r1, r6, r7}
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6013      	str	r3, [r2, #0]
			ssd1306_WriteString(buf, Font_7x10);
 80020e2:	4b9a      	ldr	r3, [pc, #616]	@ (800234c <main+0xb2c>)
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	f000 fa3e 	bl	8002568 <ssd1306_WriteString>
if(switchers & SW2 && switchers & TIMER16){
 80020ec:	4b8f      	ldr	r3, [pc, #572]	@ (800232c <main+0xb0c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	079b      	lsls	r3, r3, #30
 80020f2:	d53a      	bpl.n	800216a <main+0x94a>
 80020f4:	4b8d      	ldr	r3, [pc, #564]	@ (800232c <main+0xb0c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	06db      	lsls	r3, r3, #27
 80020fa:	d536      	bpl.n	800216a <main+0x94a>
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80020fc:	2218      	movs	r2, #24
 80020fe:	2100      	movs	r1, #0
 8002100:	a80a      	add	r0, sp, #40	@ 0x28
 8002102:	f003 fc77 	bl	80059f4 <memset>
				direct_zone = adc[1];
 8002106:	4b92      	ldr	r3, [pc, #584]	@ (8002350 <main+0xb30>)
 8002108:	885b      	ldrh	r3, [r3, #2]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4a91      	ldr	r2, [pc, #580]	@ (8002354 <main+0xb34>)
 800210e:	8013      	strh	r3, [r2, #0]
				zones = 0;
 8002110:	4b8c      	ldr	r3, [pc, #560]	@ (8002344 <main+0xb24>)
 8002112:	2100      	movs	r1, #0
 8002114:	7019      	strb	r1, [r3, #0]
				config = MAIN;
 8002116:	4b90      	ldr	r3, [pc, #576]	@ (8002358 <main+0xb38>)
 8002118:	7019      	strb	r1, [r3, #0]
				if(direct_zone > dead_zone){
 800211a:	8813      	ldrh	r3, [r2, #0]
 800211c:	4a8f      	ldr	r2, [pc, #572]	@ (800235c <main+0xb3c>)
 800211e:	8812      	ldrh	r2, [r2, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4293      	cmp	r3, r2
 8002124:	d846      	bhi.n	80021b4 <main+0x994>
				else if(dead_zone > direct_zone){
 8002126:	4b8d      	ldr	r3, [pc, #564]	@ (800235c <main+0xb3c>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	4a8a      	ldr	r2, [pc, #552]	@ (8002354 <main+0xb34>)
 800212c:	8812      	ldrh	r2, [r2, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4293      	cmp	r3, r2
 8002132:	d863      	bhi.n	80021fc <main+0x9dc>
				HAL_ADC_Stop_DMA(&hadc1);
 8002134:	488a      	ldr	r0, [pc, #552]	@ (8002360 <main+0xb40>)
 8002136:	f001 fa29 	bl	800358c <HAL_ADC_Stop_DMA>
				switchers &= ~TIMER3;
 800213a:	4a7c      	ldr	r2, [pc, #496]	@ (800232c <main+0xb0c>)
 800213c:	7813      	ldrb	r3, [r2, #0]
 800213e:	2108      	movs	r1, #8
 8002140:	438b      	bics	r3, r1
 8002142:	7013      	strb	r3, [r2, #0]
				HAL_TIM_Base_Stop_IT(&htim3);
 8002144:	4f87      	ldr	r7, [pc, #540]	@ (8002364 <main+0xb44>)
 8002146:	0038      	movs	r0, r7
 8002148:	f003 f982 	bl	8005450 <HAL_TIM_Base_Stop_IT>
				TIM3->CNT = 0;
 800214c:	4b86      	ldr	r3, [pc, #536]	@ (8002368 <main+0xb48>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24
				TIM3->SR &= ~TIM_SR_UIF;
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	2101      	movs	r1, #1
 8002156:	438a      	bics	r2, r1
 8002158:	611a      	str	r2, [r3, #16]
				TIM3->ARR = 1999;
 800215a:	4a84      	ldr	r2, [pc, #528]	@ (800236c <main+0xb4c>)
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
				HAL_TIM_Base_Start_IT(&htim3);
 800215e:	0038      	movs	r0, r7
 8002160:	f003 f944 	bl	80053ec <HAL_TIM_Base_Start_IT>
				AntiRattlesnake_TIM16(DELAY);
 8002164:	20c8      	movs	r0, #200	@ 0xc8
 8002166:	f7ff fa79 	bl	800165c <AntiRattlesnake_TIM16>
			ssd1306_SetCursor(6, 24);
 800216a:	2118      	movs	r1, #24
 800216c:	2006      	movs	r0, #6
 800216e:	f000 fa11 	bl	8002594 <ssd1306_SetCursor>
			sprintf(buf, "%d", adc[1]);
 8002172:	4b77      	ldr	r3, [pc, #476]	@ (8002350 <main+0xb30>)
 8002174:	885a      	ldrh	r2, [r3, #2]
 8002176:	b292      	uxth	r2, r2
 8002178:	497d      	ldr	r1, [pc, #500]	@ (8002370 <main+0xb50>)
 800217a:	4f6e      	ldr	r7, [pc, #440]	@ (8002334 <main+0xb14>)
 800217c:	0038      	movs	r0, r7
 800217e:	f003 fc17 	bl	80059b0 <siprintf>
			ssd1306_WriteString(buf, Font_11x18);
 8002182:	4b6e      	ldr	r3, [pc, #440]	@ (800233c <main+0xb1c>)
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	0038      	movs	r0, r7
 800218a:	f000 f9ed 	bl	8002568 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 48);
 800218e:	2130      	movs	r1, #48	@ 0x30
 8002190:	2006      	movs	r0, #6
 8002192:	f000 f9ff 	bl	8002594 <ssd1306_SetCursor>
			sprintf(buf, "Put middle button");
 8002196:	4b77      	ldr	r3, [pc, #476]	@ (8002374 <main+0xb54>)
 8002198:	003a      	movs	r2, r7
 800219a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800219c:	c243      	stmia	r2!, {r0, r1, r6}
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	6011      	str	r1, [r2, #0]
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	8093      	strh	r3, [r2, #4]
			ssd1306_WriteString(buf, Font_7x10);
 80021a6:	4b69      	ldr	r3, [pc, #420]	@ (800234c <main+0xb2c>)
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	0038      	movs	r0, r7
 80021ae:	f000 f9db 	bl	8002568 <ssd1306_WriteString>
		break;
 80021b2:	e52d      	b.n	8001c10 <main+0x3f0>
				 delta= (direct_zone - dead_zone)/2;
 80021b4:	4f67      	ldr	r7, [pc, #412]	@ (8002354 <main+0xb34>)
 80021b6:	883a      	ldrh	r2, [r7, #0]
 80021b8:	4868      	ldr	r0, [pc, #416]	@ (800235c <main+0xb3c>)
 80021ba:	8803      	ldrh	r3, [r0, #0]
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	0fd3      	lsrs	r3, r2, #31
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	105b      	asrs	r3, r3, #1
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	aa07      	add	r2, sp, #28
 80021c8:	8013      	strh	r3, [r2, #0]
				AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80021ca:	a90a      	add	r1, sp, #40	@ 0x28
 80021cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002378 <main+0xb58>)
 80021ce:	930a      	str	r3, [sp, #40]	@ 0x28
				AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80021d0:	23c0      	movs	r3, #192	@ 0xc0
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	604b      	str	r3, [r1, #4]
				AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80021d6:	4b69      	ldr	r3, [pc, #420]	@ (800237c <main+0xb5c>)
 80021d8:	608b      	str	r3, [r1, #8]
				AnalogWDGConfig.ITMode = ENABLE;
 80021da:	2301      	movs	r3, #1
 80021dc:	730b      	strb	r3, [r1, #12]
				AnalogWDGConfig.HighThreshold = direct_zone - delta;
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	8817      	ldrh	r7, [r2, #0]
 80021e2:	1bdb      	subs	r3, r3, r7
 80021e4:	610b      	str	r3, [r1, #16]
				AnalogWDGConfig.LowThreshold = dead_zone - delta;
 80021e6:	8803      	ldrh	r3, [r0, #0]
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	614b      	str	r3, [r1, #20]
				if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80021ee:	485c      	ldr	r0, [pc, #368]	@ (8002360 <main+0xb40>)
 80021f0:	f001 fa0e 	bl	8003610 <HAL_ADC_AnalogWDGConfig>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d09d      	beq.n	8002134 <main+0x914>
 80021f8:	b672      	cpsid	i
  while (1)
 80021fa:	e7fe      	b.n	80021fa <main+0x9da>
					AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80021fc:	a90a      	add	r1, sp, #40	@ 0x28
 80021fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <main+0xb58>)
 8002200:	930a      	str	r3, [sp, #40]	@ 0x28
					AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002202:	23c0      	movs	r3, #192	@ 0xc0
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	604b      	str	r3, [r1, #4]
					AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8002208:	4b5c      	ldr	r3, [pc, #368]	@ (800237c <main+0xb5c>)
 800220a:	608b      	str	r3, [r1, #8]
					AnalogWDGConfig.ITMode = ENABLE;
 800220c:	2301      	movs	r3, #1
 800220e:	730b      	strb	r3, [r1, #12]
					AnalogWDGConfig.HighThreshold = dead_zone + delta;
 8002210:	4b52      	ldr	r3, [pc, #328]	@ (800235c <main+0xb3c>)
 8002212:	8818      	ldrh	r0, [r3, #0]
 8002214:	aa07      	add	r2, sp, #28
 8002216:	8813      	ldrh	r3, [r2, #0]
 8002218:	181b      	adds	r3, r3, r0
 800221a:	610b      	str	r3, [r1, #16]
					AnalogWDGConfig.LowThreshold = direct_zone + delta;
 800221c:	4b4d      	ldr	r3, [pc, #308]	@ (8002354 <main+0xb34>)
 800221e:	8818      	ldrh	r0, [r3, #0]
 8002220:	8813      	ldrh	r3, [r2, #0]
 8002222:	181b      	adds	r3, r3, r0
 8002224:	614b      	str	r3, [r1, #20]
					if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8002226:	484e      	ldr	r0, [pc, #312]	@ (8002360 <main+0xb40>)
 8002228:	f001 f9f2 	bl	8003610 <HAL_ADC_AnalogWDGConfig>
 800222c:	2800      	cmp	r0, #0
 800222e:	d100      	bne.n	8002232 <main+0xa12>
 8002230:	e780      	b.n	8002134 <main+0x914>
 8002232:	b672      	cpsid	i
  while (1)
 8002234:	e7fe      	b.n	8002234 <main+0xa14>
			ssd1306_SetCursor(17, 0);
 8002236:	2100      	movs	r1, #0
 8002238:	2011      	movs	r0, #17
 800223a:	f000 f9ab 	bl	8002594 <ssd1306_SetCursor>
			sprintf(buf, "Set dead zone");
 800223e:	483d      	ldr	r0, [pc, #244]	@ (8002334 <main+0xb14>)
 8002240:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <main+0xb60>)
 8002242:	0002      	movs	r2, r0
 8002244:	cbc2      	ldmia	r3!, {r1, r6, r7}
 8002246:	c2c2      	stmia	r2!, {r1, r6, r7}
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	8013      	strh	r3, [r2, #0]
			ssd1306_WriteString(buf, Font_7x10);
 800224c:	4b3f      	ldr	r3, [pc, #252]	@ (800234c <main+0xb2c>)
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	f000 f989 	bl	8002568 <ssd1306_WriteString>
if(switchers & SW2 && switchers & TIMER16){
 8002256:	4b35      	ldr	r3, [pc, #212]	@ (800232c <main+0xb0c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	079b      	lsls	r3, r3, #30
 800225c:	d400      	bmi.n	8002260 <main+0xa40>
 800225e:	e784      	b.n	800216a <main+0x94a>
 8002260:	4b32      	ldr	r3, [pc, #200]	@ (800232c <main+0xb0c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	06db      	lsls	r3, r3, #27
 8002266:	d400      	bmi.n	800226a <main+0xa4a>
 8002268:	e77f      	b.n	800216a <main+0x94a>
				dead_zone = adc[1];
 800226a:	4b39      	ldr	r3, [pc, #228]	@ (8002350 <main+0xb30>)
 800226c:	885b      	ldrh	r3, [r3, #2]
 800226e:	b29b      	uxth	r3, r3
 8002270:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <main+0xb3c>)
 8002272:	8013      	strh	r3, [r2, #0]
				zones = 1;
 8002274:	4b33      	ldr	r3, [pc, #204]	@ (8002344 <main+0xb24>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
				AntiRattlesnake_TIM16(DELAY);
 800227a:	20c8      	movs	r0, #200	@ 0xc8
 800227c:	f7ff f9ee 	bl	800165c <AntiRattlesnake_TIM16>
 8002280:	e773      	b.n	800216a <main+0x94a>
		ssd1306_SetCursor(0, 20);
 8002282:	2114      	movs	r1, #20
 8002284:	2000      	movs	r0, #0
 8002286:	f000 f985 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Left for");
 800228a:	4f2a      	ldr	r7, [pc, #168]	@ (8002334 <main+0xb14>)
 800228c:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <main+0xb64>)
 800228e:	0038      	movs	r0, r7
 8002290:	cb06      	ldmia	r3!, {r1, r2}
 8002292:	c006      	stmia	r0!, {r1, r2}
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	7003      	strb	r3, [r0, #0]
		ssd1306_WriteString(buf, Font_7x10);
 8002298:	4b2c      	ldr	r3, [pc, #176]	@ (800234c <main+0xb2c>)
 800229a:	4698      	mov	r8, r3
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	0038      	movs	r0, r7
 80022a2:	f000 f961 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 80022a6:	211e      	movs	r1, #30
 80022a8:	2000      	movs	r0, #0
 80022aa:	f000 f973 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "dark");
 80022ae:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <main+0xb68>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	603a      	str	r2, [r7, #0]
 80022b4:	791b      	ldrb	r3, [r3, #4]
 80022b6:	713b      	strb	r3, [r7, #4]
		ssd1306_WriteString(buf, Font_7x10);
 80022b8:	4643      	mov	r3, r8
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	0038      	movs	r0, r7
 80022c0:	f000 f952 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(60, 20);
 80022c4:	2114      	movs	r1, #20
 80022c6:	203c      	movs	r0, #60	@ 0x3c
 80022c8:	f000 f964 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "Right for");
 80022cc:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <main+0xb6c>)
 80022ce:	003a      	movs	r2, r7
 80022d0:	cb03      	ldmia	r3!, {r0, r1}
 80022d2:	c203      	stmia	r2!, {r0, r1}
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	8013      	strh	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_7x10);
 80022d8:	4643      	mov	r3, r8
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	0038      	movs	r0, r7
 80022e0:	f000 f942 	bl	8002568 <ssd1306_WriteString>
		ssd1306_SetCursor(60, 30);
 80022e4:	211e      	movs	r1, #30
 80022e6:	203c      	movs	r0, #60	@ 0x3c
 80022e8:	f000 f954 	bl	8002594 <ssd1306_SetCursor>
		sprintf(buf, "light");
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <main+0xb70>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	603a      	str	r2, [r7, #0]
 80022f2:	889b      	ldrh	r3, [r3, #4]
 80022f4:	80bb      	strh	r3, [r7, #4]
		ssd1306_WriteString(buf, Font_7x10);
 80022f6:	4643      	mov	r3, r8
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	0038      	movs	r0, r7
 80022fe:	f000 f933 	bl	8002568 <ssd1306_WriteString>
		if(switchers & SW3){
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <main+0xb0c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	075b      	lsls	r3, r3, #29
 8002308:	d40a      	bmi.n	8002320 <main+0xb00>
		else if(switchers & SW1){
 800230a:	4b08      	ldr	r3, [pc, #32]	@ (800232c <main+0xb0c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	07db      	lsls	r3, r3, #31
 8002310:	d400      	bmi.n	8002314 <main+0xaf4>
 8002312:	e47d      	b.n	8001c10 <main+0x3f0>
			 ssd1306_NormalDisplay();
 8002314:	f000 f953 	bl	80025be <ssd1306_NormalDisplay>
			 config = MAIN;
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <main+0xb38>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
 800231e:	e477      	b.n	8001c10 <main+0x3f0>
			ssd1306_InvertDisplay();
 8002320:	f000 f948 	bl	80025b4 <ssd1306_InvertDisplay>
			config = MAIN;
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <main+0xb38>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e471      	b.n	8001c10 <main+0x3f0>
 800232c:	20000014 	.word	0x20000014
 8002330:	2000009b 	.word	0x2000009b
 8002334:	20000134 	.word	0x20000134
 8002338:	08007900 	.word	0x08007900
 800233c:	20000000 	.word	0x20000000
 8002340:	08007908 	.word	0x08007908
 8002344:	2000009a 	.word	0x2000009a
 8002348:	08007914 	.word	0x08007914
 800234c:	20000008 	.word	0x20000008
 8002350:	20000130 	.word	0x20000130
 8002354:	20000098 	.word	0x20000098
 8002358:	200000a2 	.word	0x200000a2
 800235c:	20000096 	.word	0x20000096
 8002360:	20000374 	.word	0x20000374
 8002364:	2000024c 	.word	0x2000024c
 8002368:	40000400 	.word	0x40000400
 800236c:	000007cf 	.word	0x000007cf
 8002370:	08007824 	.word	0x08007824
 8002374:	08007934 	.word	0x08007934
 8002378:	7cc00000 	.word	0x7cc00000
 800237c:	14000020 	.word	0x14000020
 8002380:	08007924 	.word	0x08007924
 8002384:	08007948 	.word	0x08007948
 8002388:	08007954 	.word	0x08007954
 800238c:	0800795c 	.word	0x0800795c
 8002390:	08007968 	.word	0x08007968

08002394 <Error_Handler>:
 8002394:	b672      	cpsid	i
  while (1)
 8002396:	e7fe      	b.n	8002396 <Error_Handler+0x2>

08002398 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002398:	b500      	push	{lr}
 800239a:	b087      	sub	sp, #28
 800239c:	2317      	movs	r3, #23
 800239e:	446b      	add	r3, sp
 80023a0:	7018      	strb	r0, [r3, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80023a2:	4806      	ldr	r0, [pc, #24]	@ (80023bc <ssd1306_WriteCommand+0x24>)
 80023a4:	220a      	movs	r2, #10
 80023a6:	9202      	str	r2, [sp, #8]
 80023a8:	3a09      	subs	r2, #9
 80023aa:	9201      	str	r2, [sp, #4]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	2200      	movs	r2, #0
 80023b2:	2178      	movs	r1, #120	@ 0x78
 80023b4:	f001 ffd0 	bl	8004358 <HAL_I2C_Mem_Write>
#endif
}
 80023b8:	b007      	add	sp, #28
 80023ba:	bd00      	pop	{pc}
 80023bc:	200002c4 	.word	0x200002c4

080023c0 <ssd1306_SetColor>:
	SSD1306.Color = color;
 80023c0:	4b01      	ldr	r3, [pc, #4]	@ (80023c8 <ssd1306_SetColor+0x8>)
 80023c2:	7158      	strb	r0, [r3, #5]
}
 80023c4:	4770      	bx	lr
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	200007dc 	.word	0x200007dc

080023cc <ssd1306_UpdateScreen>:
{
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	46c6      	mov	lr, r8
 80023d0:	b500      	push	{lr}
 80023d2:	b084      	sub	sp, #16
	for (i = 0; i < 8; i++)
 80023d4:	4d10      	ldr	r5, [pc, #64]	@ (8002418 <ssd1306_UpdateScreen+0x4c>)
{
 80023d6:	24b0      	movs	r4, #176	@ 0xb0
{
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 80023d8:	4b10      	ldr	r3, [pc, #64]	@ (800241c <ssd1306_UpdateScreen+0x50>)
 80023da:	4698      	mov	r8, r3
 80023dc:	2764      	movs	r7, #100	@ 0x64
 80023de:	2680      	movs	r6, #128	@ 0x80
		ssd1306_WriteCommand(0xB0 + i);
 80023e0:	0020      	movs	r0, r4
 80023e2:	f7ff ffd9 	bl	8002398 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7ff ffd6 	bl	8002398 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 80023ec:	2010      	movs	r0, #16
 80023ee:	f7ff ffd3 	bl	8002398 <ssd1306_WriteCommand>
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 80023f2:	9702      	str	r7, [sp, #8]
 80023f4:	9601      	str	r6, [sp, #4]
 80023f6:	9500      	str	r5, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	2240      	movs	r2, #64	@ 0x40
 80023fc:	2178      	movs	r1, #120	@ 0x78
 80023fe:	4640      	mov	r0, r8
 8002400:	f001 ffaa 	bl	8004358 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++)
 8002404:	3401      	adds	r4, #1
 8002406:	b2e4      	uxtb	r4, r4
 8002408:	3580      	adds	r5, #128	@ 0x80
 800240a:	2cb8      	cmp	r4, #184	@ 0xb8
 800240c:	d1e8      	bne.n	80023e0 <ssd1306_UpdateScreen+0x14>
}
 800240e:	b004      	add	sp, #16
 8002410:	bc80      	pop	{r7}
 8002412:	46b8      	mov	r8, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	200003dc 	.word	0x200003dc
 800241c:	200002c4 	.word	0x200002c4

08002420 <ssd1306_DrawPixel>:
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8002420:	b243      	sxtb	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	db13      	blt.n	800244e <ssd1306_DrawPixel+0x2e>
 8002426:	293f      	cmp	r1, #63	@ 0x3f
 8002428:	d811      	bhi.n	800244e <ssd1306_DrawPixel+0x2e>
	SSD1306_COLOR color = SSD1306.Color;
 800242a:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <ssd1306_DrawPixel+0x50>)
 800242c:	795a      	ldrb	r2, [r3, #5]
	if (SSD1306.Inverted)
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <ssd1306_DrawPixel+0x30>
	if (color == White)
 8002434:	2a00      	cmp	r2, #0
 8002436:	d00d      	beq.n	8002454 <ssd1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8002438:	08cb      	lsrs	r3, r1, #3
 800243a:	01db      	lsls	r3, r3, #7
 800243c:	1818      	adds	r0, r3, r0
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <ssd1306_DrawPixel+0x54>)
 8002440:	2207      	movs	r2, #7
 8002442:	400a      	ands	r2, r1
 8002444:	2101      	movs	r1, #1
 8002446:	4091      	lsls	r1, r2
 8002448:	5c1a      	ldrb	r2, [r3, r0]
 800244a:	438a      	bics	r2, r1
 800244c:	541a      	strb	r2, [r3, r0]
}
 800244e:	4770      	bx	lr
	if (color == White)
 8002450:	2a01      	cmp	r2, #1
 8002452:	d1f1      	bne.n	8002438 <ssd1306_DrawPixel+0x18>
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8002454:	08cb      	lsrs	r3, r1, #3
 8002456:	01db      	lsls	r3, r3, #7
 8002458:	181b      	adds	r3, r3, r0
 800245a:	4806      	ldr	r0, [pc, #24]	@ (8002474 <ssd1306_DrawPixel+0x54>)
 800245c:	2207      	movs	r2, #7
 800245e:	4011      	ands	r1, r2
 8002460:	3a06      	subs	r2, #6
 8002462:	408a      	lsls	r2, r1
 8002464:	0001      	movs	r1, r0
 8002466:	5cc0      	ldrb	r0, [r0, r3]
 8002468:	4302      	orrs	r2, r0
 800246a:	54ca      	strb	r2, [r1, r3]
 800246c:	e7ef      	b.n	800244e <ssd1306_DrawPixel+0x2e>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	200007dc 	.word	0x200007dc
 8002474:	200003dc 	.word	0x200003dc

08002478 <ssd1306_WriteChar>:
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	46de      	mov	lr, fp
 800247c:	4657      	mov	r7, sl
 800247e:	464e      	mov	r6, r9
 8002480:	4645      	mov	r5, r8
 8002482:	b5e0      	push	{r5, r6, r7, lr}
 8002484:	b089      	sub	sp, #36	@ 0x24
 8002486:	0005      	movs	r5, r0
 8002488:	9005      	str	r0, [sp, #20]
 800248a:	9106      	str	r1, [sp, #24]
 800248c:	9207      	str	r2, [sp, #28]
 800248e:	b2c9      	uxtb	r1, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <ssd1306_WriteChar+0xec>)
 8002492:	881c      	ldrh	r4, [r3, #0]
 8002494:	1862      	adds	r2, r4, r1
 8002496:	2a7f      	cmp	r2, #127	@ 0x7f
 8002498:	dc5f      	bgt.n	800255a <ssd1306_WriteChar+0xe2>
 800249a:	ab06      	add	r3, sp, #24
 800249c:	785a      	ldrb	r2, [r3, #1]
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 800249e:	4831      	ldr	r0, [pc, #196]	@ (8002564 <ssd1306_WriteChar+0xec>)
 80024a0:	8846      	ldrh	r6, [r0, #2]
 80024a2:	18b0      	adds	r0, r6, r2
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80024a4:	283f      	cmp	r0, #63	@ 0x3f
 80024a6:	dc5a      	bgt.n	800255e <ssd1306_WriteChar+0xe6>
	for (i = 0; i < Font.FontHeight; i++)
 80024a8:	9204      	str	r2, [sp, #16]
 80024aa:	2a00      	cmp	r2, #0
 80024ac:	d04a      	beq.n	8002544 <ssd1306_WriteChar+0xcc>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80024ae:	0028      	movs	r0, r5
 80024b0:	3820      	subs	r0, #32
 80024b2:	4342      	muls	r2, r0
 80024b4:	0053      	lsls	r3, r2, #1
 80024b6:	469b      	mov	fp, r3
 80024b8:	b2f3      	uxtb	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 80024ba:	2200      	movs	r2, #0
 80024bc:	4692      	mov	sl, r2
		for (j = 0; j < Font.FontWidth; j++)
 80024be:	9101      	str	r1, [sp, #4]
				SSD1306.Color = !SSD1306.Color;
 80024c0:	4f28      	ldr	r7, [pc, #160]	@ (8002564 <ssd1306_WriteChar+0xec>)
 80024c2:	465a      	mov	r2, fp
 80024c4:	9202      	str	r2, [sp, #8]
 80024c6:	9103      	str	r1, [sp, #12]
 80024c8:	46d3      	mov	fp, sl
 80024ca:	46a2      	mov	sl, r4
 80024cc:	001c      	movs	r4, r3
 80024ce:	e028      	b.n	8002522 <ssd1306_WriteChar+0xaa>
 80024d0:	797e      	ldrb	r6, [r7, #5]
 80024d2:	4273      	negs	r3, r6
 80024d4:	4173      	adcs	r3, r6
 80024d6:	717b      	strb	r3, [r7, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80024d8:	1960      	adds	r0, r4, r5
 80024da:	b2c0      	uxtb	r0, r0
 80024dc:	4651      	mov	r1, sl
 80024de:	f7ff ff9f 	bl	8002420 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 80024e2:	1e73      	subs	r3, r6, #1
 80024e4:	419e      	sbcs	r6, r3
 80024e6:	717e      	strb	r6, [r7, #5]
		for (j = 0; j < Font.FontWidth; j++)
 80024e8:	3501      	adds	r5, #1
 80024ea:	9b01      	ldr	r3, [sp, #4]
 80024ec:	42ab      	cmp	r3, r5
 80024ee:	d90a      	bls.n	8002506 <ssd1306_WriteChar+0x8e>
			if ((b << j) & 0x8000)
 80024f0:	4643      	mov	r3, r8
 80024f2:	40ab      	lsls	r3, r5
 80024f4:	464a      	mov	r2, r9
 80024f6:	4213      	tst	r3, r2
 80024f8:	d0ea      	beq.n	80024d0 <ssd1306_WriteChar+0x58>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80024fa:	1960      	adds	r0, r4, r5
 80024fc:	b2c0      	uxtb	r0, r0
 80024fe:	4651      	mov	r1, sl
 8002500:	f7ff ff8e 	bl	8002420 <ssd1306_DrawPixel>
 8002504:	e7f0      	b.n	80024e8 <ssd1306_WriteChar+0x70>
 8002506:	4653      	mov	r3, sl
 8002508:	46a2      	mov	sl, r4
 800250a:	001c      	movs	r4, r3
	for (i = 0; i < Font.FontHeight; i++)
 800250c:	2301      	movs	r3, #1
 800250e:	469c      	mov	ip, r3
 8002510:	44e3      	add	fp, ip
 8002512:	9b02      	ldr	r3, [sp, #8]
 8002514:	3302      	adds	r3, #2
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	3401      	adds	r4, #1
 800251a:	b2e4      	uxtb	r4, r4
 800251c:	9b04      	ldr	r3, [sp, #16]
 800251e:	455b      	cmp	r3, fp
 8002520:	d90e      	bls.n	8002540 <ssd1306_WriteChar+0xc8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002522:	9b07      	ldr	r3, [sp, #28]
 8002524:	9a02      	ldr	r2, [sp, #8]
 8002526:	5a9b      	ldrh	r3, [r3, r2]
 8002528:	4698      	mov	r8, r3
		for (j = 0; j < Font.FontWidth; j++)
 800252a:	9b03      	ldr	r3, [sp, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ed      	beq.n	800250c <ssd1306_WriteChar+0x94>
 8002530:	2500      	movs	r5, #0
			if ((b << j) & 0x8000)
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	4699      	mov	r9, r3
 8002538:	0023      	movs	r3, r4
 800253a:	4654      	mov	r4, sl
 800253c:	469a      	mov	sl, r3
 800253e:	e7d7      	b.n	80024f0 <ssd1306_WriteChar+0x78>
 8002540:	4654      	mov	r4, sl
 8002542:	9903      	ldr	r1, [sp, #12]
	SSD1306.CurrentX += Font.FontWidth;
 8002544:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <ssd1306_WriteChar+0xec>)
 8002546:	1909      	adds	r1, r1, r4
 8002548:	8011      	strh	r1, [r2, #0]
	return ch;
 800254a:	9805      	ldr	r0, [sp, #20]
}
 800254c:	b009      	add	sp, #36	@ 0x24
 800254e:	bcf0      	pop	{r4, r5, r6, r7}
 8002550:	46bb      	mov	fp, r7
 8002552:	46b2      	mov	sl, r6
 8002554:	46a9      	mov	r9, r5
 8002556:	46a0      	mov	r8, r4
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
 800255a:	2000      	movs	r0, #0
 800255c:	e7f6      	b.n	800254c <ssd1306_WriteChar+0xd4>
 800255e:	2000      	movs	r0, #0
 8002560:	e7f4      	b.n	800254c <ssd1306_WriteChar+0xd4>
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	200007dc 	.word	0x200007dc

08002568 <ssd1306_WriteString>:
{
 8002568:	b510      	push	{r4, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	0004      	movs	r4, r0
 800256e:	9100      	str	r1, [sp, #0]
 8002570:	9201      	str	r2, [sp, #4]
	while (*str)
 8002572:	7800      	ldrb	r0, [r0, #0]
 8002574:	2800      	cmp	r0, #0
 8002576:	d00b      	beq.n	8002590 <ssd1306_WriteString+0x28>
		if (ssd1306_WriteChar(*str, Font) != *str)
 8002578:	9900      	ldr	r1, [sp, #0]
 800257a:	9a01      	ldr	r2, [sp, #4]
 800257c:	f7ff ff7c 	bl	8002478 <ssd1306_WriteChar>
 8002580:	0003      	movs	r3, r0
 8002582:	7820      	ldrb	r0, [r4, #0]
 8002584:	4283      	cmp	r3, r0
 8002586:	d103      	bne.n	8002590 <ssd1306_WriteString+0x28>
		str++;
 8002588:	3401      	adds	r4, #1
	while (*str)
 800258a:	7820      	ldrb	r0, [r4, #0]
 800258c:	2800      	cmp	r0, #0
 800258e:	d1f3      	bne.n	8002578 <ssd1306_WriteString+0x10>
}
 8002590:	b002      	add	sp, #8
 8002592:	bd10      	pop	{r4, pc}

08002594 <ssd1306_SetCursor>:
	SSD1306.CurrentX = x;
 8002594:	4b01      	ldr	r3, [pc, #4]	@ (800259c <ssd1306_SetCursor+0x8>)
 8002596:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002598:	8059      	strh	r1, [r3, #2]
}
 800259a:	4770      	bx	lr
 800259c:	200007dc 	.word	0x200007dc

080025a0 <ssd1306_DisplayOn>:
{
 80025a0:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(DISPLAYON);
 80025a2:	20af      	movs	r0, #175	@ 0xaf
 80025a4:	f7ff fef8 	bl	8002398 <ssd1306_WriteCommand>
}
 80025a8:	bd10      	pop	{r4, pc}

080025aa <ssd1306_DisplayOff>:
{
 80025aa:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(DISPLAYOFF);
 80025ac:	20ae      	movs	r0, #174	@ 0xae
 80025ae:	f7ff fef3 	bl	8002398 <ssd1306_WriteCommand>
}
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <ssd1306_InvertDisplay>:
{
 80025b4:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(INVERTDISPLAY);
 80025b6:	20a7      	movs	r0, #167	@ 0xa7
 80025b8:	f7ff feee 	bl	8002398 <ssd1306_WriteCommand>
}
 80025bc:	bd10      	pop	{r4, pc}

080025be <ssd1306_NormalDisplay>:
{
 80025be:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(NORMALDISPLAY);
 80025c0:	20a6      	movs	r0, #166	@ 0xa6
 80025c2:	f7ff fee9 	bl	8002398 <ssd1306_WriteCommand>
}
 80025c6:	bd10      	pop	{r4, pc}

080025c8 <ssd1306_FlipScreenVertically>:
{
 80025c8:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 80025ca:	20a1      	movs	r0, #161	@ 0xa1
 80025cc:	f7ff fee4 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 80025d0:	20c8      	movs	r0, #200	@ 0xc8
 80025d2:	f7ff fee1 	bl	8002398 <ssd1306_WriteCommand>
}
 80025d6:	bd10      	pop	{r4, pc}

080025d8 <ssd1306_Clear>:
{
 80025d8:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 80025da:	4803      	ldr	r0, [pc, #12]	@ (80025e8 <ssd1306_Clear+0x10>)
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	00d2      	lsls	r2, r2, #3
 80025e0:	2100      	movs	r1, #0
 80025e2:	f003 fa07 	bl	80059f4 <memset>
}
 80025e6:	bd10      	pop	{r4, pc}
 80025e8:	200003dc 	.word	0x200003dc

080025ec <ssd1306_Init>:
{
 80025ec:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80025ee:	23fa      	movs	r3, #250	@ 0xfa
 80025f0:	483d      	ldr	r0, [pc, #244]	@ (80026e8 <ssd1306_Init+0xfc>)
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	2205      	movs	r2, #5
 80025f6:	2178      	movs	r1, #120	@ 0x78
 80025f8:	f001 ffa4 	bl	8004544 <HAL_I2C_IsDeviceReady>
		return 0;
 80025fc:	2300      	movs	r3, #0
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80025fe:	2800      	cmp	r0, #0
 8002600:	d003      	beq.n	800260a <ssd1306_Init+0x1e>
		SSD1306.Initialized = 0;
 8002602:	4a3a      	ldr	r2, [pc, #232]	@ (80026ec <ssd1306_Init+0x100>)
 8002604:	7193      	strb	r3, [r2, #6]
}
 8002606:	0018      	movs	r0, r3
 8002608:	bd10      	pop	{r4, pc}
	ssd1306_WriteCommand(DISPLAYOFF);
 800260a:	30ae      	adds	r0, #174	@ 0xae
 800260c:	f7ff fec4 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8002610:	20d5      	movs	r0, #213	@ 0xd5
 8002612:	f7ff fec1 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8002616:	20f0      	movs	r0, #240	@ 0xf0
 8002618:	f7ff febe 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 800261c:	20a8      	movs	r0, #168	@ 0xa8
 800261e:	f7ff febb 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8002622:	203f      	movs	r0, #63	@ 0x3f
 8002624:	f7ff feb8 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8002628:	20d3      	movs	r0, #211	@ 0xd3
 800262a:	f7ff feb5 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff feb2 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8002634:	2040      	movs	r0, #64	@ 0x40
 8002636:	f7ff feaf 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 800263a:	208d      	movs	r0, #141	@ 0x8d
 800263c:	f7ff feac 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8002640:	2014      	movs	r0, #20
 8002642:	f7ff fea9 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8002646:	2020      	movs	r0, #32
 8002648:	f7ff fea6 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff fea3 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8002652:	20a0      	movs	r0, #160	@ 0xa0
 8002654:	f7ff fea0 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8002658:	20c0      	movs	r0, #192	@ 0xc0
 800265a:	f7ff fe9d 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 800265e:	20da      	movs	r0, #218	@ 0xda
 8002660:	f7ff fe9a 	bl	8002398 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 8002664:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <ssd1306_Init+0x104>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02d      	beq.n	80026c8 <ssd1306_Init+0xdc>
	else if (display_geometry == GEOMETRY_128_32)
 800266c:	2b01      	cmp	r3, #1
 800266e:	d02f      	beq.n	80026d0 <ssd1306_Init+0xe4>
	ssd1306_WriteCommand(SETCONTRAST);
 8002670:	2081      	movs	r0, #129	@ 0x81
 8002672:	f7ff fe91 	bl	8002398 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 8002676:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <ssd1306_Init+0x104>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02c      	beq.n	80026d8 <ssd1306_Init+0xec>
	else if (display_geometry == GEOMETRY_128_32)
 800267e:	2b01      	cmp	r3, #1
 8002680:	d02e      	beq.n	80026e0 <ssd1306_Init+0xf4>
	ssd1306_WriteCommand(SETPRECHARGE);
 8002682:	20d9      	movs	r0, #217	@ 0xd9
 8002684:	f7ff fe88 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8002688:	20f1      	movs	r0, #241	@ 0xf1
 800268a:	f7ff fe85 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 800268e:	20db      	movs	r0, #219	@ 0xdb
 8002690:	f7ff fe82 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8002694:	2040      	movs	r0, #64	@ 0x40
 8002696:	f7ff fe7f 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 800269a:	20a4      	movs	r0, #164	@ 0xa4
 800269c:	f7ff fe7c 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 80026a0:	20a6      	movs	r0, #166	@ 0xa6
 80026a2:	f7ff fe79 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 80026a6:	202e      	movs	r0, #46	@ 0x2e
 80026a8:	f7ff fe76 	bl	8002398 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 80026ac:	20af      	movs	r0, #175	@ 0xaf
 80026ae:	f7ff fe73 	bl	8002398 <ssd1306_WriteCommand>
	SSD1306.CurrentX = 0;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <ssd1306_Init+0x100>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80026b8:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 80026ba:	715a      	strb	r2, [r3, #5]
	ssd1306_Clear();
 80026bc:	f7ff ff8c 	bl	80025d8 <ssd1306_Clear>
	ssd1306_UpdateScreen();
 80026c0:	f7ff fe84 	bl	80023cc <ssd1306_UpdateScreen>
	return 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e79c      	b.n	8002602 <ssd1306_Init+0x16>
	  ssd1306_WriteCommand(0x12);
 80026c8:	2012      	movs	r0, #18
 80026ca:	f7ff fe65 	bl	8002398 <ssd1306_WriteCommand>
 80026ce:	e7cf      	b.n	8002670 <ssd1306_Init+0x84>
	  ssd1306_WriteCommand(0x02);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f7ff fe61 	bl	8002398 <ssd1306_WriteCommand>
 80026d6:	e7cb      	b.n	8002670 <ssd1306_Init+0x84>
	  ssd1306_WriteCommand(0xCF);
 80026d8:	20cf      	movs	r0, #207	@ 0xcf
 80026da:	f7ff fe5d 	bl	8002398 <ssd1306_WriteCommand>
 80026de:	e7d0      	b.n	8002682 <ssd1306_Init+0x96>
	  ssd1306_WriteCommand(0x8F);
 80026e0:	208f      	movs	r0, #143	@ 0x8f
 80026e2:	f7ff fe59 	bl	8002398 <ssd1306_WriteCommand>
 80026e6:	e7cc      	b.n	8002682 <ssd1306_Init+0x96>
 80026e8:	200002c4 	.word	0x200002c4
 80026ec:	200007dc 	.word	0x200007dc
 80026f0:	200003d8 	.word	0x200003d8

080026f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_MspInit+0x2c>)
 80026f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80026fa:	2201      	movs	r2, #1
 80026fc:	4311      	orrs	r1, r2
 80026fe:	6419      	str	r1, [r3, #64]	@ 0x40
 8002700:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002702:	400a      	ands	r2, r1
 8002704:	9200      	str	r2, [sp, #0]
 8002706:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	0549      	lsls	r1, r1, #21
 800270e:	430a      	orrs	r2, r1
 8002710:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	400b      	ands	r3, r1
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	b002      	add	sp, #8
 800271c:	4770      	bx	lr
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002724:	b530      	push	{r4, r5, lr}
 8002726:	b08f      	sub	sp, #60	@ 0x3c
 8002728:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272a:	2214      	movs	r2, #20
 800272c:	2100      	movs	r1, #0
 800272e:	a809      	add	r0, sp, #36	@ 0x24
 8002730:	f003 f960 	bl	80059f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002734:	2218      	movs	r2, #24
 8002736:	2100      	movs	r1, #0
 8002738:	a803      	add	r0, sp, #12
 800273a:	f003 f95b 	bl	80059f4 <memset>
  if(hadc->Instance==ADC1)
 800273e:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <HAL_ADC_MspInit+0xc4>)
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d001      	beq.n	800274a <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002746:	b00f      	add	sp, #60	@ 0x3c
 8002748:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	01db      	lsls	r3, r3, #7
 800274e:	9303      	str	r3, [sp, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	05db      	lsls	r3, r3, #23
 8002754:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002756:	a803      	add	r0, sp, #12
 8002758:	f002 fbe8 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 800275c:	2800      	cmp	r0, #0
 800275e:	d13d      	bne.n	80027dc <HAL_ADC_MspInit+0xb8>
    __HAL_RCC_ADC_CLK_ENABLE();
 8002760:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 8002762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0349      	lsls	r1, r1, #13
 8002768:	430a      	orrs	r2, r1
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
 800276c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276e:	400a      	ands	r2, r1
 8002770:	9201      	str	r2, [sp, #4]
 8002772:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002774:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002776:	2201      	movs	r2, #1
 8002778:	4311      	orrs	r1, r2
 800277a:	6359      	str	r1, [r3, #52]	@ 0x34
 800277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277e:	401a      	ands	r2, r3
 8002780:	9202      	str	r2, [sp, #8]
 8002782:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BAT_Pin|HALL_Pin;
 8002784:	2328      	movs	r3, #40	@ 0x28
 8002786:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002788:	3b25      	subs	r3, #37	@ 0x25
 800278a:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2500      	movs	r5, #0
 800278e:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	20a0      	movs	r0, #160	@ 0xa0
 8002792:	a909      	add	r1, sp, #36	@ 0x24
 8002794:	05c0      	lsls	r0, r0, #23
 8002796:	f001 fb09 	bl	8003dac <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800279a:	4815      	ldr	r0, [pc, #84]	@ (80027f0 <HAL_ADC_MspInit+0xcc>)
 800279c:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <HAL_ADC_MspInit+0xd0>)
 800279e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027a0:	2305      	movs	r3, #5
 80027a2:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a4:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a6:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027a8:	337b      	adds	r3, #123	@ 0x7b
 80027aa:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027ac:	3380      	adds	r3, #128	@ 0x80
 80027ae:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027b6:	2320      	movs	r3, #32
 80027b8:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ba:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027bc:	f001 f99e 	bl	8003afc <HAL_DMA_Init>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d10e      	bne.n	80027e2 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_ADC_MspInit+0xcc>)
 80027c6:	6523      	str	r3, [r4, #80]	@ 0x50
 80027c8:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	200c      	movs	r0, #12
 80027d0:	f001 f8fc 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80027d4:	200c      	movs	r0, #12
 80027d6:	f001 f92b 	bl	8003a30 <HAL_NVIC_EnableIRQ>
}
 80027da:	e7b4      	b.n	8002746 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80027dc:	f7ff fdda 	bl	8002394 <Error_Handler>
 80027e0:	e7be      	b.n	8002760 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80027e2:	f7ff fdd7 	bl	8002394 <Error_Handler>
 80027e6:	e7ed      	b.n	80027c4 <HAL_ADC_MspInit+0xa0>
 80027e8:	40012400 	.word	0x40012400
 80027ec:	40021000 	.word	0x40021000
 80027f0:	20000318 	.word	0x20000318
 80027f4:	40020008 	.word	0x40020008

080027f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	b08e      	sub	sp, #56	@ 0x38
 80027fc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fe:	2214      	movs	r2, #20
 8002800:	2100      	movs	r1, #0
 8002802:	a809      	add	r0, sp, #36	@ 0x24
 8002804:	f003 f8f6 	bl	80059f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002808:	2218      	movs	r2, #24
 800280a:	2100      	movs	r1, #0
 800280c:	a803      	add	r0, sp, #12
 800280e:	f003 f8f1 	bl	80059f4 <memset>
  if(hi2c->Instance==I2C1)
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HAL_I2C_MspInit+0x7c>)
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <HAL_I2C_MspInit+0x26>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800281a:	b00e      	add	sp, #56	@ 0x38
 800281c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800281e:	2320      	movs	r3, #32
 8002820:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002822:	a803      	add	r0, sp, #12
 8002824:	f002 fb82 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 8002828:	2800      	cmp	r0, #0
 800282a:	d11f      	bne.n	800286c <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282c:	4c12      	ldr	r4, [pc, #72]	@ (8002878 <HAL_I2C_MspInit+0x80>)
 800282e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002830:	2302      	movs	r3, #2
 8002832:	431a      	orrs	r2, r3
 8002834:	6362      	str	r2, [r4, #52]	@ 0x34
 8002836:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002838:	4013      	ands	r3, r2
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800283e:	23c0      	movs	r3, #192	@ 0xc0
 8002840:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002842:	3bae      	subs	r3, #174	@ 0xae
 8002844:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800284c:	3306      	adds	r3, #6
 800284e:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	a909      	add	r1, sp, #36	@ 0x24
 8002852:	480a      	ldr	r0, [pc, #40]	@ (800287c <HAL_I2C_MspInit+0x84>)
 8002854:	f001 faaa 	bl	8003dac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002858:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800285a:	2280      	movs	r2, #128	@ 0x80
 800285c:	0392      	lsls	r2, r2, #14
 800285e:	4313      	orrs	r3, r2
 8002860:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002862:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002864:	4013      	ands	r3, r2
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	9b02      	ldr	r3, [sp, #8]
}
 800286a:	e7d6      	b.n	800281a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800286c:	f7ff fd92 	bl	8002394 <Error_Handler>
 8002870:	e7dc      	b.n	800282c <HAL_I2C_MspInit+0x34>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	40005400 	.word	0x40005400
 8002878:	40021000 	.word	0x40021000
 800287c:	50000400 	.word	0x50000400

08002880 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002880:	b510      	push	{r4, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	0004      	movs	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002886:	2218      	movs	r2, #24
 8002888:	2100      	movs	r1, #0
 800288a:	a802      	add	r0, sp, #8
 800288c:	f003 f8b2 	bl	80059f4 <memset>
  if(hrtc->Instance==RTC)
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_RTC_MspInit+0x58>)
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RTC_MspInit+0x1c>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002898:	b008      	add	sp, #32
 800289a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a8:	a802      	add	r0, sp, #8
 80028aa:	f002 fb3f 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_RTC_MspInit+0x52>
    __HAL_RCC_RTC_ENABLE();
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <HAL_RTC_MspInit+0x5c>)
 80028b4:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80028b6:	2280      	movs	r2, #128	@ 0x80
 80028b8:	0212      	lsls	r2, r2, #8
 80028ba:	430a      	orrs	r2, r1
 80028bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80028be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	00c9      	lsls	r1, r1, #3
 80028c4:	430a      	orrs	r2, r1
 80028c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ca:	400b      	ands	r3, r1
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	9b01      	ldr	r3, [sp, #4]
}
 80028d0:	e7e2      	b.n	8002898 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80028d2:	f7ff fd5f 	bl	8002394 <Error_Handler>
 80028d6:	e7ec      	b.n	80028b2 <HAL_RTC_MspInit+0x32>
 80028d8:	40002800 	.word	0x40002800
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e0:	b500      	push	{lr}
 80028e2:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM3)
 80028e4:	6803      	ldr	r3, [r0, #0]
 80028e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002998 <HAL_TIM_Base_MspInit+0xb8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00a      	beq.n	8002902 <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80028ec:	4a2b      	ldr	r2, [pc, #172]	@ (800299c <HAL_TIM_Base_MspInit+0xbc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_TIM_Base_MspInit+0x46>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80028f2:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d029      	beq.n	800294c <HAL_TIM_Base_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 80028f8:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <HAL_TIM_Base_MspInit+0xc4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d039      	beq.n	8002972 <HAL_TIM_Base_MspInit+0x92>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80028fe:	b005      	add	sp, #20
 8002900:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002902:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <HAL_TIM_Base_MspInit+0xc8>)
 8002904:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002906:	2302      	movs	r3, #2
 8002908:	4319      	orrs	r1, r3
 800290a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800290c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800290e:	4013      	ands	r3, r2
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2100      	movs	r1, #0
 8002918:	2010      	movs	r0, #16
 800291a:	f001 f857 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800291e:	2010      	movs	r0, #16
 8002920:	f001 f886 	bl	8003a30 <HAL_NVIC_EnableIRQ>
 8002924:	e7eb      	b.n	80028fe <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_TIM_Base_MspInit+0xc8>)
 8002928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800292a:	2180      	movs	r1, #128	@ 0x80
 800292c:	0209      	lsls	r1, r1, #8
 800292e:	430a      	orrs	r2, r1
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	400b      	ands	r3, r1
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2013      	movs	r0, #19
 8002940:	f001 f844 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002944:	2013      	movs	r0, #19
 8002946:	f001 f873 	bl	8003a30 <HAL_NVIC_EnableIRQ>
 800294a:	e7d8      	b.n	80028fe <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <HAL_TIM_Base_MspInit+0xc8>)
 800294e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002950:	2180      	movs	r1, #128	@ 0x80
 8002952:	0289      	lsls	r1, r1, #10
 8002954:	430a      	orrs	r2, r1
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	400b      	ands	r3, r1
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2015      	movs	r0, #21
 8002966:	f001 f831 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800296a:	2015      	movs	r0, #21
 800296c:	f001 f860 	bl	8003a30 <HAL_NVIC_EnableIRQ>
 8002970:	e7c5      	b.n	80028fe <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <HAL_TIM_Base_MspInit+0xc8>)
 8002974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	02c9      	lsls	r1, r1, #11
 800297a:	430a      	orrs	r2, r1
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	400b      	ands	r3, r1
 8002982:	9303      	str	r3, [sp, #12]
 8002984:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2016      	movs	r0, #22
 800298c:	f001 f81e 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002990:	2016      	movs	r0, #22
 8002992:	f001 f84d 	bl	8003a30 <HAL_NVIC_EnableIRQ>
}
 8002996:	e7b2      	b.n	80028fe <HAL_TIM_Base_MspInit+0x1e>
 8002998:	40000400 	.word	0x40000400
 800299c:	40002000 	.word	0x40002000
 80029a0:	40014400 	.word	0x40014400
 80029a4:	40014800 	.word	0x40014800
 80029a8:	40021000 	.word	0x40021000

080029ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029ac:	e7fe      	b.n	80029ac <NMI_Handler>

080029ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <HardFault_Handler>

080029b0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029b0:	4770      	bx	lr

080029b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b6:	f000 f935 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ba:	bd10      	pop	{r4, pc}

080029bc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80029bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sw1_Pin);
 80029be:	2001      	movs	r0, #1
 80029c0:	f001 fae0 	bl	8003f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80029c4:	bd10      	pop	{r4, pc}

080029c6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80029c6:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sw3_Pin);
 80029c8:	2040      	movs	r0, #64	@ 0x40
 80029ca:	f001 fadb 	bl	8003f84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sw2_Pin);
 80029ce:	2080      	movs	r0, #128	@ 0x80
 80029d0:	f001 fad8 	bl	8003f84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STDBY_BAT_Pin);
 80029d4:	2080      	movs	r0, #128	@ 0x80
 80029d6:	0100      	lsls	r0, r0, #4
 80029d8:	f001 fad4 	bl	8003f84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHRG_BAT_Pin);
 80029dc:	2080      	movs	r0, #128	@ 0x80
 80029de:	0140      	lsls	r0, r0, #5
 80029e0:	f001 fad0 	bl	8003f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80029e4:	bd10      	pop	{r4, pc}
	...

080029e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029ea:	4802      	ldr	r0, [pc, #8]	@ (80029f4 <DMA1_Channel1_IRQHandler+0xc>)
 80029ec:	f001 f978 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029f0:	bd10      	pop	{r4, pc}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	20000318 	.word	0x20000318

080029f8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80029f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029fa:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <ADC1_IRQHandler+0xc>)
 80029fc:	f000 fa94 	bl	8002f28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002a00:	bd10      	pop	{r4, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	20000374 	.word	0x20000374

08002a08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);

HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);
 8002a0a:	490a      	ldr	r1, [pc, #40]	@ (8002a34 <TIM3_IRQHandler+0x2c>)
 8002a0c:	480a      	ldr	r0, [pc, #40]	@ (8002a38 <TIM3_IRQHandler+0x30>)
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f000 fd16 	bl	8003440 <HAL_ADC_Start_DMA>
//else if(!(switchers & TIMER3)){




switchers |= TIMER3;
 8002a14:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <TIM3_IRQHandler+0x34>)
 8002a16:	7813      	ldrb	r3, [r2, #0]
 8002a18:	2108      	movs	r1, #8
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	7013      	strb	r3, [r2, #0]
//HAL_TIM_Base_Stop_IT(&htim3);

TIM3->CNT = 0;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <TIM3_IRQHandler+0x38>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24
//TIM3->SR &= ~TIM_SR_UIF;
//TIM3->ARR = 9999;

HAL_TIM_Base_Start_IT(&htim3);
 8002a24:	4c07      	ldr	r4, [pc, #28]	@ (8002a44 <TIM3_IRQHandler+0x3c>)
 8002a26:	0020      	movs	r0, r4
 8002a28:	f002 fce0 	bl	80053ec <HAL_TIM_Base_Start_IT>
//}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a2c:	0020      	movs	r0, r4
 8002a2e:	f002 fd31 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a32:	bd10      	pop	{r4, pc}
 8002a34:	20000130 	.word	0x20000130
 8002a38:	20000374 	.word	0x20000374
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	40000400 	.word	0x40000400
 8002a44:	2000024c 	.word	0x2000024c

08002a48 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002a48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */
	HAL_TIM_Base_Stop_IT(&htim14);
 8002a4a:	4c09      	ldr	r4, [pc, #36]	@ (8002a70 <TIM14_IRQHandler+0x28>)
 8002a4c:	0020      	movs	r0, r4
 8002a4e:	f002 fcff 	bl	8005450 <HAL_TIM_Base_Stop_IT>
	duration = 5025;
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <TIM14_IRQHandler+0x2c>)
 8002a54:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <TIM14_IRQHandler+0x30>)
 8002a56:	801a      	strh	r2, [r3, #0]
	TIM14->CNT = 0;
 8002a58:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <TIM14_IRQHandler+0x34>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24
	//counter = 0;
	switchers &= ~START_TIM14;
 8002a5e:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <TIM14_IRQHandler+0x38>)
 8002a60:	7813      	ldrb	r3, [r2, #0]
 8002a62:	2120      	movs	r1, #32
 8002a64:	438b      	bics	r3, r1
 8002a66:	7013      	strb	r3, [r2, #0]
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002a68:	0020      	movs	r0, r4
 8002a6a:	f002 fd13 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002a6e:	bd10      	pop	{r4, pc}
 8002a70:	20000200 	.word	0x20000200
 8002a74:	20000010 	.word	0x20000010
 8002a78:	000013a1 	.word	0x000013a1
 8002a7c:	40002000 	.word	0x40002000
 8002a80:	20000014 	.word	0x20000014

08002a84 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002a84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */
//switchers |= TIMER17;
//	if(switchers & TIMER16)
//		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);

switchers |= TIMER16;
 8002a86:	4a06      	ldr	r2, [pc, #24]	@ (8002aa0 <TIM16_IRQHandler+0x1c>)
 8002a88:	7813      	ldrb	r3, [r2, #0]
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	7013      	strb	r3, [r2, #0]
HAL_TIM_Base_Stop_IT(&htim16);
 8002a90:	4c04      	ldr	r4, [pc, #16]	@ (8002aa4 <TIM16_IRQHandler+0x20>)
 8002a92:	0020      	movs	r0, r4
 8002a94:	f002 fcdc 	bl	8005450 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002a98:	0020      	movs	r0, r4
 8002a9a:	f002 fcfb 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002a9e:	bd10      	pop	{r4, pc}
 8002aa0:	20000014 	.word	0x20000014
 8002aa4:	200001b4 	.word	0x200001b4

08002aa8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002aa8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */
HAL_TIM_Base_Stop_IT(&htim17);
 8002aaa:	4812      	ldr	r0, [pc, #72]	@ (8002af4 <TIM17_IRQHandler+0x4c>)
 8002aac:	f002 fcd0 	bl	8005450 <HAL_TIM_Base_Stop_IT>

static uint8_t sleep;
if(!(switchers & SLEEP))
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <TIM17_IRQHandler+0x50>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	065a      	lsls	r2, r3, #25
 8002ab6:	d507      	bpl.n	8002ac8 <TIM17_IRQHandler+0x20>
	sleep = 0;


if(sleep){
 8002ab8:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <TIM17_IRQHandler+0x54>)
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d003      	beq.n	8002ac8 <TIM17_IRQHandler+0x20>




  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002ac0:	480c      	ldr	r0, [pc, #48]	@ (8002af4 <TIM17_IRQHandler+0x4c>)
 8002ac2:	f002 fce7 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002ac6:	bd10      	pop	{r4, pc}
switchers |= SLEEP;
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <TIM17_IRQHandler+0x50>)
 8002aca:	2140      	movs	r1, #64	@ 0x40
 8002acc:	430b      	orrs	r3, r1
 8002ace:	7013      	strb	r3, [r2, #0]
sleep = 1;
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <TIM17_IRQHandler+0x54>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	7019      	strb	r1, [r3, #0]
		TIM17->CNT = 0;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <TIM17_IRQHandler+0x58>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM17->SR &= ~TIM_SR_UIF;
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	438a      	bics	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
		TIM17->PSC = 49999;
 8002ae2:	4a08      	ldr	r2, [pc, #32]	@ (8002b04 <TIM17_IRQHandler+0x5c>)
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM17->ARR = 57599;
 8002ae6:	4a08      	ldr	r2, [pc, #32]	@ (8002b08 <TIM17_IRQHandler+0x60>)
 8002ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_TIM_Base_Start_IT(&htim17);
 8002aea:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <TIM17_IRQHandler+0x4c>)
 8002aec:	f002 fc7e 	bl	80053ec <HAL_TIM_Base_Start_IT>
 8002af0:	e7e6      	b.n	8002ac0 <TIM17_IRQHandler+0x18>
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	20000168 	.word	0x20000168
 8002af8:	20000014 	.word	0x20000014
 8002afc:	200007e4 	.word	0x200007e4
 8002b00:	40014800 	.word	0x40014800
 8002b04:	0000c34f 	.word	0x0000c34f
 8002b08:	0000e0ff 	.word	0x0000e0ff

08002b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <_sbrk+0x38>)
 8002b12:	490d      	ldr	r1, [pc, #52]	@ (8002b48 <_sbrk+0x3c>)
 8002b14:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b16:	490d      	ldr	r1, [pc, #52]	@ (8002b4c <_sbrk+0x40>)
 8002b18:	6809      	ldr	r1, [r1, #0]
 8002b1a:	2900      	cmp	r1, #0
 8002b1c:	d007      	beq.n	8002b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	490b      	ldr	r1, [pc, #44]	@ (8002b4c <_sbrk+0x40>)
 8002b20:	6808      	ldr	r0, [r1, #0]
 8002b22:	18c3      	adds	r3, r0, r3
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d806      	bhi.n	8002b36 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002b28:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <_sbrk+0x40>)
 8002b2a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002b2c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002b2e:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <_sbrk+0x40>)
 8002b30:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <_sbrk+0x44>)
 8002b32:	6008      	str	r0, [r1, #0]
 8002b34:	e7f3      	b.n	8002b1e <_sbrk+0x12>
    errno = ENOMEM;
 8002b36:	f002 ff65 	bl	8005a04 <__errno>
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	4240      	negs	r0, r0
 8002b42:	e7f3      	b.n	8002b2c <_sbrk+0x20>
 8002b44:	20002000 	.word	0x20002000
 8002b48:	00000400 	.word	0x00000400
 8002b4c:	200007e8 	.word	0x200007e8
 8002b50:	20000938 	.word	0x20000938

08002b54 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b54:	4770      	bx	lr
	...

08002b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b58:	480d      	ldr	r0, [pc, #52]	@ (8002b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b5c:	f7ff fffa 	bl	8002b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b60:	480c      	ldr	r0, [pc, #48]	@ (8002b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b62:	490d      	ldr	r1, [pc, #52]	@ (8002b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b64:	4a0d      	ldr	r2, [pc, #52]	@ (8002b9c <LoopForever+0xe>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b68:	e002      	b.n	8002b70 <LoopCopyDataInit>

08002b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6e:	3304      	adds	r3, #4

08002b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b74:	d3f9      	bcc.n	8002b6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b78:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba4 <LoopForever+0x16>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b7c:	e001      	b.n	8002b82 <LoopFillZerobss>

08002b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b80:	3204      	adds	r2, #4

08002b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b84:	d3fb      	bcc.n	8002b7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b86:	f002 ff43 	bl	8005a10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002b8a:	f7fe fe49 	bl	8001820 <main>

08002b8e <LoopForever>:

LoopForever:
  b LoopForever
 8002b8e:	e7fe      	b.n	8002b8e <LoopForever>
  ldr   r0, =_estack
 8002b90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002b9c:	08007a38 	.word	0x08007a38
  ldr r2, =_sbss
 8002ba0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002ba4:	20000938 	.word	0x20000938

08002ba8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ba8:	e7fe      	b.n	8002ba8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08002bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <HAL_InitTick+0x44>)
 8002bb2:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 8002bb6:	2900      	cmp	r1, #0
 8002bb8:	d100      	bne.n	8002bbc <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002bbc:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf4 <HAL_InitTick+0x48>)
 8002bbe:	20fa      	movs	r0, #250	@ 0xfa
 8002bc0:	0080      	lsls	r0, r0, #2
 8002bc2:	f7fd faa7 	bl	8000114 <__udivsi3>
 8002bc6:	0001      	movs	r1, r0
 8002bc8:	6828      	ldr	r0, [r5, #0]
 8002bca:	f7fd faa3 	bl	8000114 <__udivsi3>
 8002bce:	f000 ff3b 	bl	8003a48 <HAL_SYSTICK_Config>
 8002bd2:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8002bd4:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ef      	bne.n	8002bba <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bda:	2c03      	cmp	r4, #3
 8002bdc:	d8ed      	bhi.n	8002bba <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bde:	2200      	movs	r2, #0
 8002be0:	0021      	movs	r1, r4
 8002be2:	4240      	negs	r0, r0
 8002be4:	f000 fef2 	bl	80039cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_InitTick+0x4c>)
 8002bea:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bec:	2000      	movs	r0, #0
 8002bee:	e7e4      	b.n	8002bba <HAL_InitTick+0xe>
 8002bf0:	2000001c 	.word	0x2000001c
 8002bf4:	20000018 	.word	0x20000018
 8002bf8:	20000020 	.word	0x20000020

08002bfc <HAL_Init>:
{
 8002bfc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfe:	4a08      	ldr	r2, [pc, #32]	@ (8002c20 <HAL_Init+0x24>)
 8002c00:	6811      	ldr	r1, [r2, #0]
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	430b      	orrs	r3, r1
 8002c08:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f7ff ffce 	bl	8002bac <HAL_InitTick>
 8002c10:	1e04      	subs	r4, r0, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002c14:	2401      	movs	r4, #1
}
 8002c16:	0020      	movs	r0, r4
 8002c18:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002c1a:	f7ff fd6b 	bl	80026f4 <HAL_MspInit>
 8002c1e:	e7fa      	b.n	8002c16 <HAL_Init+0x1a>
 8002c20:	40022000 	.word	0x40022000

08002c24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002c24:	4a03      	ldr	r2, [pc, #12]	@ (8002c34 <HAL_IncTick+0x10>)
 8002c26:	6811      	ldr	r1, [r2, #0]
 8002c28:	4b03      	ldr	r3, [pc, #12]	@ (8002c38 <HAL_IncTick+0x14>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	185b      	adds	r3, r3, r1
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	4770      	bx	lr
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	200007ec 	.word	0x200007ec
 8002c38:	2000001c 	.word	0x2000001c

08002c3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002c3c:	4b01      	ldr	r3, [pc, #4]	@ (8002c44 <HAL_GetTick+0x8>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
}
 8002c40:	4770      	bx	lr
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	200007ec 	.word	0x200007ec

08002c48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d100      	bne.n	8002c58 <HAL_ADC_Init+0x10>
 8002c56:	e0ff      	b.n	8002e58 <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c58:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d100      	bne.n	8002c60 <HAL_ADC_Init+0x18>
 8002c5e:	e0b6      	b.n	8002dce <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c60:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	d417      	bmi.n	8002c98 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e5c <HAL_ADC_Init+0x214>)
 8002c6c:	4011      	ands	r1, r2
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	0552      	lsls	r2, r2, #21
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c76:	4b7a      	ldr	r3, [pc, #488]	@ (8002e60 <HAL_ADC_Init+0x218>)
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	497a      	ldr	r1, [pc, #488]	@ (8002e64 <HAL_ADC_Init+0x21c>)
 8002c7c:	f7fd fa4a 	bl	8000114 <__udivsi3>
 8002c80:	3001      	adds	r0, #1
 8002c82:	0040      	lsls	r0, r0, #1
 8002c84:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c86:	9b01      	ldr	r3, [sp, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8002c8c:	9b01      	ldr	r3, [sp, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002c92:	9b01      	ldr	r3, [sp, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c98:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c9a:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	d408      	bmi.n	8002cb4 <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002cac:	3a0f      	subs	r2, #15
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb2:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cb4:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002cb8:	2310      	movs	r3, #16
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	402a      	ands	r2, r5
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	d000      	beq.n	8002cc6 <HAL_ADC_Init+0x7e>
 8002cc4:	e0c1      	b.n	8002e4a <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cc8:	4a67      	ldr	r2, [pc, #412]	@ (8002e68 <HAL_ADC_Init+0x220>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	3206      	adds	r2, #6
 8002cce:	32ff      	adds	r2, #255	@ 0xff
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd4:	688b      	ldr	r3, [r1, #8]
 8002cd6:	07db      	lsls	r3, r3, #31
 8002cd8:	d44f      	bmi.n	8002d7a <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002cda:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002cdc:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8002cde:	1e73      	subs	r3, r6, #1
 8002ce0:	419e      	sbcs	r6, r3
 8002ce2:	0336      	lsls	r6, r6, #12
 8002ce4:	68a2      	ldr	r2, [r4, #8]
 8002ce6:	68e3      	ldr	r3, [r4, #12]
 8002ce8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cea:	7e23      	ldrb	r3, [r4, #24]
 8002cec:	039b      	lsls	r3, r3, #14
 8002cee:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002cf0:	7e63      	ldrb	r3, [r4, #25]
 8002cf2:	03db      	lsls	r3, r3, #15
 8002cf4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002cf6:	036b      	lsls	r3, r5, #13
 8002cf8:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002cfa:	6923      	ldr	r3, [r4, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db6d      	blt.n	8002ddc <HAL_ADC_Init+0x194>
 8002d00:	2780      	movs	r7, #128	@ 0x80
 8002d02:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d04:	232c      	movs	r3, #44	@ 0x2c
 8002d06:	5ce3      	ldrb	r3, [r4, r3]
 8002d08:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	4333      	orrs	r3, r6
 8002d0e:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d10:	2220      	movs	r2, #32
 8002d12:	5ca2      	ldrb	r2, [r4, r2]
 8002d14:	2a01      	cmp	r2, #1
 8002d16:	d064      	beq.n	8002de2 <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002d1a:	2a00      	cmp	r2, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_ADC_Init+0xe2>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d1e:	25e0      	movs	r5, #224	@ 0xe0
 8002d20:	006d      	lsls	r5, r5, #1
 8002d22:	402a      	ands	r2, r5
 8002d24:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002d26:	432a      	orrs	r2, r5
 8002d28:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d2a:	68ca      	ldr	r2, [r1, #12]
 8002d2c:	4d4f      	ldr	r5, [pc, #316]	@ (8002e6c <HAL_ADC_Init+0x224>)
 8002d2e:	402a      	ands	r2, r5
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	0f9b      	lsrs	r3, r3, #30
 8002d38:	079b      	lsls	r3, r3, #30
 8002d3a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8002d3c:	431a      	orrs	r2, r3
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d3e:	213c      	movs	r1, #60	@ 0x3c
 8002d40:	5c61      	ldrb	r1, [r4, r1]
 8002d42:	2901      	cmp	r1, #1
 8002d44:	d05c      	beq.n	8002e00 <HAL_ADC_Init+0x1b8>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002d46:	6821      	ldr	r1, [r4, #0]
 8002d48:	690b      	ldr	r3, [r1, #16]
 8002d4a:	4d49      	ldr	r5, [pc, #292]	@ (8002e70 <HAL_ADC_Init+0x228>)
 8002d4c:	402b      	ands	r3, r5
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d52:	6862      	ldr	r2, [r4, #4]
 8002d54:	0053      	lsls	r3, r2, #1
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	05c9      	lsls	r1, r1, #23
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	d00c      	beq.n	8002d7a <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d008      	beq.n	8002d7a <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002d68:	4942      	ldr	r1, [pc, #264]	@ (8002e74 <HAL_ADC_Init+0x22c>)
 8002d6a:	680b      	ldr	r3, [r1, #0]
 8002d6c:	4d42      	ldr	r5, [pc, #264]	@ (8002e78 <HAL_ADC_Init+0x230>)
 8002d6e:	402b      	ands	r3, r5
 8002d70:	25f0      	movs	r5, #240	@ 0xf0
 8002d72:	03ad      	lsls	r5, r5, #14
 8002d74:	402a      	ands	r2, r5
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d7a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002d7c:	6953      	ldr	r3, [r2, #20]
 8002d7e:	2107      	movs	r1, #7
 8002d80:	438b      	bics	r3, r1
 8002d82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d88:	6821      	ldr	r1, [r4, #0]
 8002d8a:	694a      	ldr	r2, [r1, #20]
 8002d8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	2570      	movs	r5, #112	@ 0x70
 8002d92:	43aa      	bics	r2, r5
 8002d94:	4313      	orrs	r3, r2
 8002d96:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d98:	6923      	ldr	r3, [r4, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d13a      	bne.n	8002e14 <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002da2:	3b10      	subs	r3, #16
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002da8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	2307      	movs	r3, #7
 8002dae:	4013      	ands	r3, r2
 8002db0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d040      	beq.n	8002e38 <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002db6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002db8:	2212      	movs	r2, #18
 8002dba:	4393      	bics	r3, r2
 8002dbc:	3a02      	subs	r2, #2
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002dc4:	3a0f      	subs	r2, #15
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002dca:	2001      	movs	r0, #1
 8002dcc:	e042      	b.n	8002e54 <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 8002dce:	f7ff fca9 	bl	8002724 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002dd6:	2254      	movs	r2, #84	@ 0x54
 8002dd8:	54a3      	strb	r3, [r4, r2]
 8002dda:	e741      	b.n	8002c60 <HAL_ADC_Init+0x18>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	085f      	lsrs	r7, r3, #1
 8002de0:	e790      	b.n	8002d04 <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d103      	bne.n	8002dee <HAL_ADC_Init+0x1a6>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	0252      	lsls	r2, r2, #9
 8002dea:	4313      	orrs	r3, r2
 8002dec:	e794      	b.n	8002d18 <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dee:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002df0:	2520      	movs	r5, #32
 8002df2:	432a      	orrs	r2, r5
 8002df4:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002df8:	3d1f      	subs	r5, #31
 8002dfa:	432a      	orrs	r2, r5
 8002dfc:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002dfe:	e78b      	b.n	8002d18 <HAL_ADC_Init+0xd0>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002e00:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002e02:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8002e04:	4329      	orrs	r1, r5
 8002e06:	430a      	orrs	r2, r1
 8002e08:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	2201      	movs	r2, #1
 8002e10:	431a      	orrs	r2, r3
 8002e12:	e798      	b.n	8002d46 <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e14:	2280      	movs	r2, #128	@ 0x80
 8002e16:	0392      	lsls	r2, r2, #14
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d1c5      	bne.n	8002da8 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002e1c:	6821      	ldr	r1, [r4, #0]
 8002e1e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002e20:	69e3      	ldr	r3, [r4, #28]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	221c      	movs	r2, #28
 8002e28:	401a      	ands	r2, r3
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	4093      	lsls	r3, r2
 8002e30:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002e32:	4313      	orrs	r3, r2
 8002e34:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e36:	e7b7      	b.n	8002da8 <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e3e:	2203      	movs	r2, #3
 8002e40:	4393      	bics	r3, r2
 8002e42:	3a02      	subs	r2, #2
 8002e44:	4313      	orrs	r3, r2
 8002e46:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e48:	e004      	b.n	8002e54 <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002e54:	b003      	add	sp, #12
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7fb      	b.n	8002e54 <HAL_ADC_Init+0x20c>
 8002e5c:	6fffffe8 	.word	0x6fffffe8
 8002e60:	20000018 	.word	0x20000018
 8002e64:	00030d40 	.word	0x00030d40
 8002e68:	fffffefd 	.word	0xfffffefd
 8002e6c:	ffde0201 	.word	0xffde0201
 8002e70:	1ffffc02 	.word	0x1ffffc02
 8002e74:	40012708 	.word	0x40012708
 8002e78:	ffc3ffff 	.word	0xffc3ffff

08002e7c <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e7e:	4770      	bx	lr

08002e80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e80:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e82:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002e84:	f7ff fffb 	bl	8002e7e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e88:	bd10      	pop	{r4, pc}

08002e8a <HAL_ADC_ErrorCallback>:
}
 8002e8a:	4770      	bx	lr

08002e8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8e:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e90:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002e92:	2240      	movs	r2, #64	@ 0x40
 8002e94:	4313      	orrs	r3, r2
 8002e96:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e98:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002e9a:	3a3c      	subs	r2, #60	@ 0x3c
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ea0:	f7ff fff3 	bl	8002e8a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ea4:	bd10      	pop	{r4, pc}
	...

08002ea8 <ADC_DMAConvCplt>:
{
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eac:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002eae:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002eb0:	2150      	movs	r1, #80	@ 0x50
 8002eb2:	4211      	tst	r1, r2
 8002eb4:	d12a      	bne.n	8002f0c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ec0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ec2:	68d9      	ldr	r1, [r3, #12]
 8002ec4:	22c0      	movs	r2, #192	@ 0xc0
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	4211      	tst	r1, r2
 8002eca:	d113      	bne.n	8002ef4 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ecc:	7e82      	ldrb	r2, [r0, #26]
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d110      	bne.n	8002ef4 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	0712      	lsls	r2, r2, #28
 8002ed6:	d50d      	bpl.n	8002ef4 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	0752      	lsls	r2, r2, #29
 8002edc:	d40d      	bmi.n	8002efa <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	210c      	movs	r1, #12
 8002ee2:	438a      	bics	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <ADC_DMAConvCplt+0x7c>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	3204      	adds	r2, #4
 8002eee:	32ff      	adds	r2, #255	@ 0xff
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002ef4:	f7ff ffc2 	bl	8002e7c <HAL_ADC_ConvCpltCallback>
}
 8002ef8:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002efc:	2220      	movs	r2, #32
 8002efe:	4313      	orrs	r3, r2
 8002f00:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002f04:	3a1f      	subs	r2, #31
 8002f06:	4313      	orrs	r3, r2
 8002f08:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8002f0a:	e7f3      	b.n	8002ef4 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f0c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002f0e:	06d2      	lsls	r2, r2, #27
 8002f10:	d404      	bmi.n	8002f1c <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f12:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002f14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f16:	0018      	movs	r0, r3
 8002f18:	4790      	blx	r2
}
 8002f1a:	e7ed      	b.n	8002ef8 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8002f1c:	f7ff ffb5 	bl	8002e8a <HAL_ADC_ErrorCallback>
 8002f20:	e7ea      	b.n	8002ef8 <ADC_DMAConvCplt+0x50>
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	fffffefe 	.word	0xfffffefe

08002f28 <HAL_ADC_IRQHandler>:
{
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f2c:	6803      	ldr	r3, [r0, #0]
 8002f2e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f30:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f32:	07ab      	lsls	r3, r5, #30
 8002f34:	d50f      	bpl.n	8002f56 <HAL_ADC_IRQHandler+0x2e>
 8002f36:	07b3      	lsls	r3, r6, #30
 8002f38:	d50d      	bpl.n	8002f56 <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f3a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002f3c:	06db      	lsls	r3, r3, #27
 8002f3e:	d404      	bmi.n	8002f4a <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f40:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002f42:	2380      	movs	r3, #128	@ 0x80
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4313      	orrs	r3, r2
 8002f48:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f4a:	0020      	movs	r0, r4
 8002f4c:	f000 fd3c 	bl	80039c8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	2202      	movs	r2, #2
 8002f54:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f56:	076b      	lsls	r3, r5, #29
 8002f58:	d501      	bpl.n	8002f5e <HAL_ADC_IRQHandler+0x36>
 8002f5a:	0773      	lsls	r3, r6, #29
 8002f5c:	d403      	bmi.n	8002f66 <HAL_ADC_IRQHandler+0x3e>
 8002f5e:	072b      	lsls	r3, r5, #28
 8002f60:	d529      	bpl.n	8002fb6 <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f62:	0733      	lsls	r3, r6, #28
 8002f64:	d527      	bpl.n	8002fb6 <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f68:	06db      	lsls	r3, r3, #27
 8002f6a:	d404      	bmi.n	8002f76 <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f6c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4313      	orrs	r3, r2
 8002f74:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f76:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	22c0      	movs	r2, #192	@ 0xc0
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	4211      	tst	r1, r2
 8002f80:	d113      	bne.n	8002faa <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f82:	7ea2      	ldrb	r2, [r4, #26]
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d110      	bne.n	8002faa <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	0712      	lsls	r2, r2, #28
 8002f8c:	d50d      	bpl.n	8002faa <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	0752      	lsls	r2, r2, #29
 8002f92:	d43b      	bmi.n	800300c <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	210c      	movs	r1, #12
 8002f98:	438a      	bics	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f9e:	4a37      	ldr	r2, [pc, #220]	@ (800307c <HAL_ADC_IRQHandler+0x154>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	3204      	adds	r2, #4
 8002fa4:	32ff      	adds	r2, #255	@ 0xff
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7ff ff66 	bl	8002e7c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002fb6:	062b      	lsls	r3, r5, #24
 8002fb8:	d501      	bpl.n	8002fbe <HAL_ADC_IRQHandler+0x96>
 8002fba:	0633      	lsls	r3, r6, #24
 8002fbc:	d42f      	bmi.n	800301e <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fbe:	05eb      	lsls	r3, r5, #23
 8002fc0:	d501      	bpl.n	8002fc6 <HAL_ADC_IRQHandler+0x9e>
 8002fc2:	05f3      	lsls	r3, r6, #23
 8002fc4:	d437      	bmi.n	8003036 <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fc6:	05ab      	lsls	r3, r5, #22
 8002fc8:	d501      	bpl.n	8002fce <HAL_ADC_IRQHandler+0xa6>
 8002fca:	05b3      	lsls	r3, r6, #22
 8002fcc:	d440      	bmi.n	8003050 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fce:	06eb      	lsls	r3, r5, #27
 8002fd0:	d517      	bpl.n	8003002 <HAL_ADC_IRQHandler+0xda>
 8002fd2:	06f3      	lsls	r3, r6, #27
 8002fd4:	d515      	bpl.n	8003002 <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002fdc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	079b      	lsls	r3, r3, #30
 8002fe2:	d00b      	beq.n	8002ffc <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fe4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fee:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8002ff6:	0020      	movs	r0, r4
 8002ff8:	f7ff ff47 	bl	8002e8a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003002:	04ad      	lsls	r5, r5, #18
 8003004:	d501      	bpl.n	800300a <HAL_ADC_IRQHandler+0xe2>
 8003006:	04b6      	lsls	r6, r6, #18
 8003008:	d42f      	bmi.n	800306a <HAL_ADC_IRQHandler+0x142>
}
 800300a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800300e:	2220      	movs	r2, #32
 8003010:	4313      	orrs	r3, r2
 8003012:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003014:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003016:	3a1f      	subs	r2, #31
 8003018:	4313      	orrs	r3, r2
 800301a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800301c:	e7c5      	b.n	8002faa <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800301e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	025b      	lsls	r3, r3, #9
 8003024:	4313      	orrs	r3, r2
 8003026:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003028:	0020      	movs	r0, r4
 800302a:	f7fd ffbf 	bl	8000fac <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	2280      	movs	r2, #128	@ 0x80
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e7c3      	b.n	8002fbe <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003036:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	4313      	orrs	r3, r2
 800303e:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003040:	0020      	movs	r0, r4
 8003042:	f000 fcbf 	bl	80039c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	2280      	movs	r2, #128	@ 0x80
 800304a:	0052      	lsls	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e7ba      	b.n	8002fc6 <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003050:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	02db      	lsls	r3, r3, #11
 8003056:	4313      	orrs	r3, r2
 8003058:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800305a:	0020      	movs	r0, r4
 800305c:	f000 fcb3 	bl	80039c6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	2280      	movs	r2, #128	@ 0x80
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e7b1      	b.n	8002fce <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800306a:	0020      	movs	r0, r4
 800306c:	f000 fcad 	bl	80039ca <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	0192      	lsls	r2, r2, #6
 8003076:	601a      	str	r2, [r3, #0]
}
 8003078:	e7c7      	b.n	800300a <HAL_ADC_IRQHandler+0xe2>
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	fffffefe 	.word	0xfffffefe

08003080 <HAL_ADC_ConfigChannel>:
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b083      	sub	sp, #12
 8003084:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003086:	2300      	movs	r3, #0
 8003088:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800308a:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 800308c:	3354      	adds	r3, #84	@ 0x54
 800308e:	5cc3      	ldrb	r3, [r0, r3]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d100      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x16>
 8003094:	e11e      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x254>
 8003096:	2354      	movs	r3, #84	@ 0x54
 8003098:	2201      	movs	r2, #1
 800309a:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309c:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800309e:	6883      	ldr	r3, [r0, #8]
 80030a0:	3203      	adds	r2, #3
 80030a2:	0017      	movs	r7, r2
 80030a4:	401f      	ands	r7, r3
 80030a6:	421a      	tst	r2, r3
 80030a8:	d009      	beq.n	80030be <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030ac:	321c      	adds	r2, #28
 80030ae:	4313      	orrs	r3, r2
 80030b0:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80030b4:	2354      	movs	r3, #84	@ 0x54
 80030b6:	2200      	movs	r2, #0
 80030b8:	54e2      	strb	r2, [r4, r3]
}
 80030ba:	b003      	add	sp, #12
 80030bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80030be:	684a      	ldr	r2, [r1, #4]
 80030c0:	2a02      	cmp	r2, #2
 80030c2:	d100      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x46>
 80030c4:	e0c4      	b.n	8003250 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030c6:	2304      	movs	r3, #4
 80030c8:	439d      	bics	r5, r3
 80030ca:	2680      	movs	r6, #128	@ 0x80
 80030cc:	0636      	lsls	r6, r6, #24
 80030ce:	42b5      	cmp	r5, r6
 80030d0:	d021      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80030d2:	231f      	movs	r3, #31
 80030d4:	401a      	ands	r2, r3
 80030d6:	3b10      	subs	r3, #16
 80030d8:	4093      	lsls	r3, r2
 80030da:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 80030dc:	439e      	bics	r6, r3
 80030de:	680b      	ldr	r3, [r1, #0]
 80030e0:	035d      	lsls	r5, r3, #13
 80030e2:	d148      	bne.n	8003176 <HAL_ADC_ConfigChannel+0xf6>
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	0edf      	lsrs	r7, r3, #27
 80030e8:	003b      	movs	r3, r7
 80030ea:	4093      	lsls	r3, r2
 80030ec:	4333      	orrs	r3, r6
 80030ee:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80030f0:	684a      	ldr	r2, [r1, #4]
 80030f2:	0893      	lsrs	r3, r2, #2
 80030f4:	3301      	adds	r3, #1
 80030f6:	69e5      	ldr	r5, [r4, #28]
 80030f8:	42ab      	cmp	r3, r5
 80030fa:	d812      	bhi.n	8003122 <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 80030fc:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 80030fe:	251f      	movs	r5, #31
 8003100:	4015      	ands	r5, r2
 8003102:	680b      	ldr	r3, [r1, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	220f      	movs	r2, #15
 8003108:	4013      	ands	r3, r2
 800310a:	40ab      	lsls	r3, r5
 800310c:	40aa      	lsls	r2, r5
 800310e:	4396      	bics	r6, r2
 8003110:	4333      	orrs	r3, r6
 8003112:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8003114:	e005      	b.n	8003122 <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003116:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003118:	680b      	ldr	r3, [r1, #0]
 800311a:	035b      	lsls	r3, r3, #13
 800311c:	0b5b      	lsrs	r3, r3, #13
 800311e:	4313      	orrs	r3, r2
 8003120:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003122:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003124:	6968      	ldr	r0, [r5, #20]
 8003126:	680a      	ldr	r2, [r1, #0]
 8003128:	0212      	lsls	r2, r2, #8
 800312a:	688b      	ldr	r3, [r1, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	4e6a      	ldr	r6, [pc, #424]	@ (80032d8 <HAL_ADC_ConfigChannel+0x258>)
 8003130:	4033      	ands	r3, r6
 8003132:	4390      	bics	r0, r2
 8003134:	4303      	orrs	r3, r0
 8003136:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003138:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313a:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800313c:	2b00      	cmp	r3, #0
 800313e:	dab9      	bge.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003140:	4a66      	ldr	r2, [pc, #408]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	25e0      	movs	r5, #224	@ 0xe0
 8003146:	046d      	lsls	r5, r5, #17
 8003148:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800314a:	4965      	ldr	r1, [pc, #404]	@ (80032e0 <HAL_ADC_ConfigChannel+0x260>)
 800314c:	428b      	cmp	r3, r1
 800314e:	d050      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003150:	4864      	ldr	r0, [pc, #400]	@ (80032e4 <HAL_ADC_ConfigChannel+0x264>)
 8003152:	4283      	cmp	r3, r0
 8003154:	d06e      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003156:	4964      	ldr	r1, [pc, #400]	@ (80032e8 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003158:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800315a:	428b      	cmp	r3, r1
 800315c:	d1aa      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
 800315e:	0252      	lsls	r2, r2, #9
 8003160:	d4a8      	bmi.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003162:	495e      	ldr	r1, [pc, #376]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 8003164:	680b      	ldr	r3, [r1, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	@ (80032ec <HAL_ADC_ConfigChannel+0x26c>)
 8003168:	4013      	ands	r3, r2
 800316a:	432b      	orrs	r3, r5
 800316c:	2280      	movs	r2, #128	@ 0x80
 800316e:	03d2      	lsls	r2, r2, #15
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
}
 8003174:	e79e      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003176:	07dd      	lsls	r5, r3, #31
 8003178:	d4b6      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 800317a:	2701      	movs	r7, #1
 800317c:	079d      	lsls	r5, r3, #30
 800317e:	d4b3      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 8003180:	3701      	adds	r7, #1
 8003182:	075d      	lsls	r5, r3, #29
 8003184:	d4b0      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 8003186:	3701      	adds	r7, #1
 8003188:	071d      	lsls	r5, r3, #28
 800318a:	d4ad      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 800318c:	3701      	adds	r7, #1
 800318e:	06dd      	lsls	r5, r3, #27
 8003190:	d4aa      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 8003192:	3701      	adds	r7, #1
 8003194:	069d      	lsls	r5, r3, #26
 8003196:	d4a7      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 8003198:	3701      	adds	r7, #1
 800319a:	065d      	lsls	r5, r3, #25
 800319c:	d4a4      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 800319e:	3701      	adds	r7, #1
 80031a0:	061d      	lsls	r5, r3, #24
 80031a2:	d4a1      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031a4:	3701      	adds	r7, #1
 80031a6:	05dd      	lsls	r5, r3, #23
 80031a8:	d49e      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031aa:	3701      	adds	r7, #1
 80031ac:	059d      	lsls	r5, r3, #22
 80031ae:	d49b      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031b0:	3701      	adds	r7, #1
 80031b2:	055d      	lsls	r5, r3, #21
 80031b4:	d498      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031b6:	3701      	adds	r7, #1
 80031b8:	051d      	lsls	r5, r3, #20
 80031ba:	d495      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031bc:	3701      	adds	r7, #1
 80031be:	04dd      	lsls	r5, r3, #19
 80031c0:	d492      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031c2:	3701      	adds	r7, #1
 80031c4:	049d      	lsls	r5, r3, #18
 80031c6:	d48f      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031c8:	3701      	adds	r7, #1
 80031ca:	045d      	lsls	r5, r3, #17
 80031cc:	d48c      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031ce:	3701      	adds	r7, #1
 80031d0:	041d      	lsls	r5, r3, #16
 80031d2:	d489      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031d4:	3701      	adds	r7, #1
 80031d6:	03dd      	lsls	r5, r3, #15
 80031d8:	d486      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031da:	3701      	adds	r7, #1
 80031dc:	039d      	lsls	r5, r3, #14
 80031de:	d483      	bmi.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031e0:	2580      	movs	r5, #128	@ 0x80
 80031e2:	02ed      	lsls	r5, r5, #11
 80031e4:	001f      	movs	r7, r3
 80031e6:	402f      	ands	r7, r5
 80031e8:	422b      	tst	r3, r5
 80031ea:	d100      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x16e>
 80031ec:	e77c      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
 80031ee:	2712      	movs	r7, #18
 80031f0:	e77a      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031f2:	0212      	lsls	r2, r2, #8
 80031f4:	d500      	bpl.n	80031f8 <HAL_ADC_ConfigChannel+0x178>
 80031f6:	e75d      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031f8:	4938      	ldr	r1, [pc, #224]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 80031fa:	680b      	ldr	r3, [r1, #0]
 80031fc:	4a3b      	ldr	r2, [pc, #236]	@ (80032ec <HAL_ADC_ConfigChannel+0x26c>)
 80031fe:	4013      	ands	r3, r2
 8003200:	432b      	orrs	r3, r5
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	0412      	lsls	r2, r2, #16
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320a:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <HAL_ADC_ConfigChannel+0x270>)
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	4939      	ldr	r1, [pc, #228]	@ (80032f4 <HAL_ADC_ConfigChannel+0x274>)
 8003210:	f7fc ff80 	bl	8000114 <__udivsi3>
 8003214:	3001      	adds	r0, #1
 8003216:	0043      	lsls	r3, r0, #1
 8003218:	181b      	adds	r3, r3, r0
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800321e:	9b01      	ldr	r3, [sp, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d055      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8003224:	9b01      	ldr	r3, [sp, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800322a:	9b01      	ldr	r3, [sp, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003230:	2000      	movs	r0, #0
 8003232:	e73f      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
 8003234:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003236:	01d2      	lsls	r2, r2, #7
 8003238:	d500      	bpl.n	800323c <HAL_ADC_ConfigChannel+0x1bc>
 800323a:	e73b      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
 800323c:	4927      	ldr	r1, [pc, #156]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 800323e:	680b      	ldr	r3, [r1, #0]
 8003240:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <HAL_ADC_ConfigChannel+0x26c>)
 8003242:	4013      	ands	r3, r2
 8003244:	432b      	orrs	r3, r5
 8003246:	2280      	movs	r2, #128	@ 0x80
 8003248:	0452      	lsls	r2, r2, #17
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
}
 800324e:	e731      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003250:	2304      	movs	r3, #4
 8003252:	439d      	bics	r5, r3
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	429d      	cmp	r5, r3
 800325a:	d01c      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800325c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003260:	2b00      	cmp	r3, #0
 8003262:	db00      	blt.n	8003266 <HAL_ADC_ConfigChannel+0x1e6>
 8003264:	e726      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 8003268:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326a:	491d      	ldr	r1, [pc, #116]	@ (80032e0 <HAL_ADC_ConfigChannel+0x260>)
 800326c:	428b      	cmp	r3, r1
 800326e:	d019      	beq.n	80032a4 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003270:	491c      	ldr	r1, [pc, #112]	@ (80032e4 <HAL_ADC_ConfigChannel+0x264>)
 8003272:	428b      	cmp	r3, r1
 8003274:	d021      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003276:	491c      	ldr	r1, [pc, #112]	@ (80032e8 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003278:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800327a:	428b      	cmp	r3, r1
 800327c:	d000      	beq.n	8003280 <HAL_ADC_ConfigChannel+0x200>
 800327e:	e719      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003280:	4816      	ldr	r0, [pc, #88]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 8003282:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003284:	23c0      	movs	r3, #192	@ 0xc0
 8003286:	045b      	lsls	r3, r3, #17
 8003288:	4013      	ands	r3, r2
 800328a:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_ADC_ConfigChannel+0x26c>)
 800328c:	400a      	ands	r2, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003292:	2000      	movs	r0, #0
}
 8003294:	e70e      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003296:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003298:	680b      	ldr	r3, [r1, #0]
 800329a:	035b      	lsls	r3, r3, #13
 800329c:	0b5b      	lsrs	r3, r3, #13
 800329e:	439a      	bics	r2, r3
 80032a0:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80032a2:	e7db      	b.n	800325c <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032a4:	480d      	ldr	r0, [pc, #52]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 80032a6:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a8:	23a0      	movs	r3, #160	@ 0xa0
 80032aa:	045b      	lsls	r3, r3, #17
 80032ac:	4013      	ands	r3, r2
 80032ae:	4a0f      	ldr	r2, [pc, #60]	@ (80032ec <HAL_ADC_ConfigChannel+0x26c>)
 80032b0:	400a      	ands	r2, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2000      	movs	r0, #0
}
 80032b8:	e6fc      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032ba:	4808      	ldr	r0, [pc, #32]	@ (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 80032bc:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032be:	23c0      	movs	r3, #192	@ 0xc0
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	4013      	ands	r3, r2
 80032c4:	4a09      	ldr	r2, [pc, #36]	@ (80032ec <HAL_ADC_ConfigChannel+0x26c>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032cc:	2000      	movs	r0, #0
}
 80032ce:	e6f1      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
 80032d0:	2000      	movs	r0, #0
 80032d2:	e6ef      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80032d4:	2002      	movs	r0, #2
 80032d6:	e6f0      	b.n	80030ba <HAL_ADC_ConfigChannel+0x3a>
 80032d8:	07ffff00 	.word	0x07ffff00
 80032dc:	40012708 	.word	0x40012708
 80032e0:	b0001000 	.word	0xb0001000
 80032e4:	b8004000 	.word	0xb8004000
 80032e8:	b4002000 	.word	0xb4002000
 80032ec:	fe3fffff 	.word	0xfe3fffff
 80032f0:	20000018 	.word	0x20000018
 80032f4:	00030d40 	.word	0x00030d40

080032f8 <ADC_ConversionStop>:
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032fc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032fe:	6893      	ldr	r3, [r2, #8]
  return HAL_OK;
 8003300:	2000      	movs	r0, #0
 8003302:	075b      	lsls	r3, r3, #29
 8003304:	d529      	bpl.n	800335a <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003306:	6893      	ldr	r3, [r2, #8]
 8003308:	079b      	lsls	r3, r3, #30
 800330a:	d405      	bmi.n	8003318 <ADC_ConversionStop+0x20>
  MODIFY_REG(ADCx->CR,
 800330c:	6893      	ldr	r3, [r2, #8]
 800330e:	4914      	ldr	r1, [pc, #80]	@ (8003360 <ADC_ConversionStop+0x68>)
 8003310:	400b      	ands	r3, r1
 8003312:	2110      	movs	r1, #16
 8003314:	430b      	orrs	r3, r1
 8003316:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003318:	f7ff fc90 	bl	8002c3c <HAL_GetTick>
 800331c:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	075b      	lsls	r3, r3, #29
 8003324:	d51a      	bpl.n	800335c <ADC_ConversionStop+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003326:	2504      	movs	r5, #4
 8003328:	e003      	b.n	8003332 <ADC_ConversionStop+0x3a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	421d      	tst	r5, r3
 8003330:	d012      	beq.n	8003358 <ADC_ConversionStop+0x60>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003332:	f7ff fc83 	bl	8002c3c <HAL_GetTick>
 8003336:	1b80      	subs	r0, r0, r6
 8003338:	2802      	cmp	r0, #2
 800333a:	d9f6      	bls.n	800332a <ADC_ConversionStop+0x32>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	421d      	tst	r5, r3
 8003342:	d0f2      	beq.n	800332a <ADC_ConversionStop+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003346:	2210      	movs	r2, #16
 8003348:	4313      	orrs	r3, r2
 800334a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800334e:	3a0f      	subs	r2, #15
 8003350:	4313      	orrs	r3, r2
 8003352:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003354:	2001      	movs	r0, #1
 8003356:	e000      	b.n	800335a <ADC_ConversionStop+0x62>
  return HAL_OK;
 8003358:	2000      	movs	r0, #0
}
 800335a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800335c:	2000      	movs	r0, #0
 800335e:	e7fc      	b.n	800335a <ADC_ConversionStop+0x62>
 8003360:	7fffffe8 	.word	0x7fffffe8

08003364 <ADC_Enable>:
{
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003366:	b083      	sub	sp, #12
 8003368:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800336a:	2300      	movs	r3, #0
 800336c:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003370:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003372:	2000      	movs	r0, #0
 8003374:	07d2      	lsls	r2, r2, #31
 8003376:	d434      	bmi.n	80033e2 <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003378:	6899      	ldr	r1, [r3, #8]
 800337a:	4a2c      	ldr	r2, [pc, #176]	@ (800342c <ADC_Enable+0xc8>)
 800337c:	4211      	tst	r1, r2
 800337e:	d127      	bne.n	80033d0 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	492b      	ldr	r1, [pc, #172]	@ (8003430 <ADC_Enable+0xcc>)
 8003384:	400a      	ands	r2, r1
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800338c:	4b29      	ldr	r3, [pc, #164]	@ (8003434 <ADC_Enable+0xd0>)
 800338e:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	d50f      	bpl.n	80033b4 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003394:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <ADC_Enable+0xd4>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	4928      	ldr	r1, [pc, #160]	@ (800343c <ADC_Enable+0xd8>)
 800339a:	f7fc febb 	bl	8000114 <__udivsi3>
 800339e:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80033a0:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <ADC_Enable+0x50>
        wait_loop_index--;
 80033a8:	9b01      	ldr	r3, [sp, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80033ae:	9b01      	ldr	r3, [sp, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033b4:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 80033b6:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d012      	beq.n	80033e2 <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 80033bc:	f7ff fc3e 	bl	8002c3c <HAL_GetTick>
 80033c0:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	07d2      	lsls	r2, r2, #31
 80033c8:	d42d      	bmi.n	8003426 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033ca:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80033cc:	4f18      	ldr	r7, [pc, #96]	@ (8003430 <ADC_Enable+0xcc>)
 80033ce:	e00e      	b.n	80033ee <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033d2:	2210      	movs	r2, #16
 80033d4:	4313      	orrs	r3, r2
 80033d6:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80033da:	3a0f      	subs	r2, #15
 80033dc:	4313      	orrs	r3, r2
 80033de:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80033e0:	3001      	adds	r0, #1
}
 80033e2:	b003      	add	sp, #12
 80033e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4215      	tst	r5, r2
 80033ec:	d119      	bne.n	8003422 <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	4215      	tst	r5, r2
 80033f2:	d103      	bne.n	80033fc <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	403a      	ands	r2, r7
 80033f8:	432a      	orrs	r2, r5
 80033fa:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033fc:	f7ff fc1e 	bl	8002c3c <HAL_GetTick>
 8003400:	1b80      	subs	r0, r0, r6
 8003402:	2802      	cmp	r0, #2
 8003404:	d9ef      	bls.n	80033e6 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	421d      	tst	r5, r3
 800340c:	d1eb      	bne.n	80033e6 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003410:	2210      	movs	r2, #16
 8003412:	4313      	orrs	r3, r2
 8003414:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003418:	3a0f      	subs	r2, #15
 800341a:	4313      	orrs	r3, r2
 800341c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800341e:	2001      	movs	r0, #1
 8003420:	e7df      	b.n	80033e2 <ADC_Enable+0x7e>
  return HAL_OK;
 8003422:	2000      	movs	r0, #0
 8003424:	e7dd      	b.n	80033e2 <ADC_Enable+0x7e>
 8003426:	2000      	movs	r0, #0
 8003428:	e7db      	b.n	80033e2 <ADC_Enable+0x7e>
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	80000017 	.word	0x80000017
 8003430:	7fffffe8 	.word	0x7fffffe8
 8003434:	40012708 	.word	0x40012708
 8003438:	20000018 	.word	0x20000018
 800343c:	00030d40 	.word	0x00030d40

08003440 <HAL_ADC_Start_DMA>:
{
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	0004      	movs	r4, r0
 8003444:	000d      	movs	r5, r1
 8003446:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003448:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800344a:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 800344c:	2002      	movs	r0, #2
 800344e:	075b      	lsls	r3, r3, #29
 8003450:	d41c      	bmi.n	800348c <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8003452:	2354      	movs	r3, #84	@ 0x54
 8003454:	5ce3      	ldrb	r3, [r4, r3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d044      	beq.n	80034e4 <HAL_ADC_Start_DMA+0xa4>
 800345a:	2301      	movs	r3, #1
 800345c:	2154      	movs	r1, #84	@ 0x54
 800345e:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003460:	68d1      	ldr	r1, [r2, #12]
 8003462:	420b      	tst	r3, r1
 8003464:	d10d      	bne.n	8003482 <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003466:	6893      	ldr	r3, [r2, #8]
 8003468:	07db      	lsls	r3, r3, #31
 800346a:	d505      	bpl.n	8003478 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 800346c:	6893      	ldr	r3, [r2, #8]
 800346e:	491e      	ldr	r1, [pc, #120]	@ (80034e8 <HAL_ADC_Start_DMA+0xa8>)
 8003470:	400b      	ands	r3, r1
 8003472:	2102      	movs	r1, #2
 8003474:	430b      	orrs	r3, r1
 8003476:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	68d3      	ldr	r3, [r2, #12]
 800347c:	2101      	movs	r1, #1
 800347e:	430b      	orrs	r3, r1
 8003480:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8003482:	0020      	movs	r0, r4
 8003484:	f7ff ff6e 	bl	8003364 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003488:	2800      	cmp	r0, #0
 800348a:	d000      	beq.n	800348e <HAL_ADC_Start_DMA+0x4e>
}
 800348c:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800348e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003490:	4b16      	ldr	r3, [pc, #88]	@ (80034ec <HAL_ADC_Start_DMA+0xac>)
 8003492:	401a      	ands	r2, r3
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4313      	orrs	r3, r2
 800349a:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800349c:	2300      	movs	r3, #0
 800349e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034a0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80034a2:	4913      	ldr	r1, [pc, #76]	@ (80034f0 <HAL_ADC_Start_DMA+0xb0>)
 80034a4:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80034a8:	4912      	ldr	r1, [pc, #72]	@ (80034f4 <HAL_ADC_Start_DMA+0xb4>)
 80034aa:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034ac:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80034ae:	4912      	ldr	r1, [pc, #72]	@ (80034f8 <HAL_ADC_Start_DMA+0xb8>)
 80034b0:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	211c      	movs	r1, #28
 80034b6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80034b8:	2254      	movs	r2, #84	@ 0x54
 80034ba:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	6853      	ldr	r3, [r2, #4]
 80034c0:	390c      	subs	r1, #12
 80034c2:	430b      	orrs	r3, r1
 80034c4:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034c6:	6821      	ldr	r1, [r4, #0]
 80034c8:	3140      	adds	r1, #64	@ 0x40
 80034ca:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80034cc:	0033      	movs	r3, r6
 80034ce:	002a      	movs	r2, r5
 80034d0:	f000 fb78 	bl	8003bc4 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80034d4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034d6:	6893      	ldr	r3, [r2, #8]
 80034d8:	4903      	ldr	r1, [pc, #12]	@ (80034e8 <HAL_ADC_Start_DMA+0xa8>)
 80034da:	400b      	ands	r3, r1
 80034dc:	2104      	movs	r1, #4
 80034de:	430b      	orrs	r3, r1
 80034e0:	6093      	str	r3, [r2, #8]
}
 80034e2:	e7d3      	b.n	800348c <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 80034e4:	2002      	movs	r0, #2
 80034e6:	e7d1      	b.n	800348c <HAL_ADC_Start_DMA+0x4c>
 80034e8:	7fffffe8 	.word	0x7fffffe8
 80034ec:	fffff0fe 	.word	0xfffff0fe
 80034f0:	08002ea9 	.word	0x08002ea9
 80034f4:	08002e81 	.word	0x08002e81
 80034f8:	08002e8d 	.word	0x08002e8d

080034fc <ADC_Disable>:
{
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003500:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003502:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003504:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003506:	2000      	movs	r0, #0
 8003508:	07d2      	lsls	r2, r2, #31
 800350a:	d50f      	bpl.n	800352c <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 800350c:	0789      	lsls	r1, r1, #30
 800350e:	d40d      	bmi.n	800352c <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003510:	6899      	ldr	r1, [r3, #8]
 8003512:	2205      	movs	r2, #5
 8003514:	400a      	ands	r2, r1
 8003516:	2a01      	cmp	r2, #1
 8003518:	d009      	beq.n	800352e <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800351c:	2210      	movs	r2, #16
 800351e:	4313      	orrs	r3, r2
 8003520:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003522:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003524:	3a0f      	subs	r2, #15
 8003526:	4313      	orrs	r3, r2
 8003528:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800352a:	2001      	movs	r0, #1
}
 800352c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4915      	ldr	r1, [pc, #84]	@ (8003588 <ADC_Disable+0x8c>)
 8003532:	400a      	ands	r2, r1
 8003534:	2102      	movs	r1, #2
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	2203      	movs	r2, #3
 800353e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003540:	f7ff fb7c 	bl	8002c3c <HAL_GetTick>
 8003544:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800354a:	2501      	movs	r5, #1
  return HAL_OK;
 800354c:	2000      	movs	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800354e:	07db      	lsls	r3, r3, #31
 8003550:	d404      	bmi.n	800355c <ADC_Disable+0x60>
 8003552:	e7eb      	b.n	800352c <ADC_Disable+0x30>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	421d      	tst	r5, r3
 800355a:	d012      	beq.n	8003582 <ADC_Disable+0x86>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800355c:	f7ff fb6e 	bl	8002c3c <HAL_GetTick>
 8003560:	1b80      	subs	r0, r0, r6
 8003562:	2802      	cmp	r0, #2
 8003564:	d9f6      	bls.n	8003554 <ADC_Disable+0x58>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	421d      	tst	r5, r3
 800356c:	d0f2      	beq.n	8003554 <ADC_Disable+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003570:	2210      	movs	r2, #16
 8003572:	4313      	orrs	r3, r2
 8003574:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003576:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003578:	3a0f      	subs	r2, #15
 800357a:	4313      	orrs	r3, r2
 800357c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800357e:	2001      	movs	r0, #1
 8003580:	e7d4      	b.n	800352c <ADC_Disable+0x30>
  return HAL_OK;
 8003582:	2000      	movs	r0, #0
 8003584:	e7d2      	b.n	800352c <ADC_Disable+0x30>
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	7fffffe8 	.word	0x7fffffe8

0800358c <HAL_ADC_Stop_DMA>:
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003590:	2354      	movs	r3, #84	@ 0x54
 8003592:	5cc3      	ldrb	r3, [r0, r3]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d037      	beq.n	8003608 <HAL_ADC_Stop_DMA+0x7c>
 8003598:	2354      	movs	r3, #84	@ 0x54
 800359a:	2201      	movs	r2, #1
 800359c:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800359e:	f7ff feab 	bl	80032f8 <ADC_ConversionStop>
 80035a2:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80035a4:	d12b      	bne.n	80035fe <HAL_ADC_Stop_DMA+0x72>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80035a6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80035a8:	2325      	movs	r3, #37	@ 0x25
 80035aa:	5cc3      	ldrb	r3, [r0, r3]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d011      	beq.n	80035d4 <HAL_ADC_Stop_DMA+0x48>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80035b0:	6822      	ldr	r2, [r4, #0]
 80035b2:	6853      	ldr	r3, [r2, #4]
 80035b4:	2110      	movs	r1, #16
 80035b6:	438b      	bics	r3, r1
 80035b8:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80035ba:	0020      	movs	r0, r4
 80035bc:	f7ff ff9e 	bl	80034fc <ADC_Disable>
 80035c0:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 80035c2:	d117      	bne.n	80035f4 <HAL_ADC_Stop_DMA+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80035c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035c6:	4a11      	ldr	r2, [pc, #68]	@ (800360c <HAL_ADC_Stop_DMA+0x80>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	3204      	adds	r2, #4
 80035cc:	32ff      	adds	r2, #255	@ 0xff
 80035ce:	4313      	orrs	r3, r2
 80035d0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80035d2:	e00f      	b.n	80035f4 <HAL_ADC_Stop_DMA+0x68>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80035d4:	f000 fb44 	bl	8003c60 <HAL_DMA_Abort>
 80035d8:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 80035da:	d0e9      	beq.n	80035b0 <HAL_ADC_Stop_DMA+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	4313      	orrs	r3, r2
 80035e2:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	6853      	ldr	r3, [r2, #4]
 80035e8:	2110      	movs	r1, #16
 80035ea:	438b      	bics	r3, r1
 80035ec:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 80035ee:	0020      	movs	r0, r4
 80035f0:	f7ff ff84 	bl	80034fc <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	68d3      	ldr	r3, [r2, #12]
 80035f8:	2101      	movs	r1, #1
 80035fa:	438b      	bics	r3, r1
 80035fc:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 80035fe:	2354      	movs	r3, #84	@ 0x54
 8003600:	2200      	movs	r2, #0
 8003602:	54e2      	strb	r2, [r4, r3]
}
 8003604:	0028      	movs	r0, r5
 8003606:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8003608:	2502      	movs	r5, #2
 800360a:	e7fb      	b.n	8003604 <HAL_ADC_Stop_DMA+0x78>
 800360c:	fffffefe 	.word	0xfffffefe

08003610 <HAL_ADC_AnalogWDGConfig>:
{
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	0004      	movs	r4, r0
 8003614:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8003616:	2354      	movs	r3, #84	@ 0x54
 8003618:	5cc3      	ldrb	r3, [r0, r3]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d100      	bne.n	8003620 <HAL_ADC_AnalogWDGConfig+0x10>
 800361e:	e1bc      	b.n	800399a <HAL_ADC_AnalogWDGConfig+0x38a>
 8003620:	2354      	movs	r3, #84	@ 0x54
 8003622:	2201      	movs	r2, #1
 8003624:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003626:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003628:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800362a:	2000      	movs	r0, #0
 800362c:	0752      	lsls	r2, r2, #29
 800362e:	d500      	bpl.n	8003632 <HAL_ADC_AnalogWDGConfig+0x22>
 8003630:	e15e      	b.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003632:	680a      	ldr	r2, [r1, #0]
 8003634:	4998      	ldr	r1, [pc, #608]	@ (8003898 <HAL_ADC_AnalogWDGConfig+0x288>)
 8003636:	428a      	cmp	r2, r1
 8003638:	d01b      	beq.n	8003672 <HAL_ADC_AnalogWDGConfig+0x62>
      switch (pAnalogWDGConfig->WatchdogMode)
 800363a:	6869      	ldr	r1, [r5, #4]
 800363c:	2080      	movs	r0, #128	@ 0x80
 800363e:	0400      	lsls	r0, r0, #16
 8003640:	4281      	cmp	r1, r0
 8003642:	d100      	bne.n	8003646 <HAL_ADC_AnalogWDGConfig+0x36>
 8003644:	e132      	b.n	80038ac <HAL_ADC_AnalogWDGConfig+0x29c>
 8003646:	20c0      	movs	r0, #192	@ 0xc0
 8003648:	0400      	lsls	r0, r0, #16
 800364a:	4281      	cmp	r1, r0
 800364c:	d000      	beq.n	8003650 <HAL_ADC_AnalogWDGConfig+0x40>
 800364e:	e169      	b.n	8003924 <HAL_ADC_AnalogWDGConfig+0x314>
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8003650:	4992      	ldr	r1, [pc, #584]	@ (800389c <HAL_ADC_AnalogWDGConfig+0x28c>)
 8003652:	428a      	cmp	r2, r1
 8003654:	d059      	beq.n	800370a <HAL_ADC_AnalogWDGConfig+0xfa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8003656:	22a4      	movs	r2, #164	@ 0xa4
 8003658:	589e      	ldr	r6, [r3, r2]
 800365a:	68aa      	ldr	r2, [r5, #8]
 800365c:	0351      	lsls	r1, r2, #13
 800365e:	d000      	beq.n	8003662 <HAL_ADC_AnalogWDGConfig+0x52>
 8003660:	e0b9      	b.n	80037d6 <HAL_ADC_AnalogWDGConfig+0x1c6>
 8003662:	0050      	lsls	r0, r2, #1
 8003664:	0ec0      	lsrs	r0, r0, #27
 8003666:	3101      	adds	r1, #1
 8003668:	4081      	lsls	r1, r0
 800366a:	430e      	orrs	r6, r1
 800366c:	21a4      	movs	r1, #164	@ 0xa4
 800366e:	505e      	str	r6, [r3, r1]
 8003670:	e129      	b.n	80038c6 <HAL_ADC_AnalogWDGConfig+0x2b6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2201      	movs	r2, #1
 8003676:	0016      	movs	r6, r2
 8003678:	401e      	ands	r6, r3
 800367a:	421a      	tst	r2, r3
 800367c:	d002      	beq.n	8003684 <HAL_ADC_AnalogWDGConfig+0x74>
        tmp_hal_status = ADC_Disable(hadc);
 800367e:	0020      	movs	r0, r4
 8003680:	f7ff ff3c 	bl	80034fc <ADC_Disable>
      switch (pAnalogWDGConfig->WatchdogMode)
 8003684:	686b      	ldr	r3, [r5, #4]
 8003686:	2280      	movs	r2, #128	@ 0x80
 8003688:	0412      	lsls	r2, r2, #16
 800368a:	4293      	cmp	r3, r2
 800368c:	d022      	beq.n	80036d4 <HAL_ADC_AnalogWDGConfig+0xc4>
 800368e:	22c0      	movs	r2, #192	@ 0xc0
 8003690:	0412      	lsls	r2, r2, #16
 8003692:	4293      	cmp	r3, r2
 8003694:	d127      	bne.n	80036e6 <HAL_ADC_AnalogWDGConfig+0xd6>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8003696:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(*preg,
 8003698:	68ca      	ldr	r2, [r1, #12]
 800369a:	68ab      	ldr	r3, [r5, #8]
 800369c:	27f8      	movs	r7, #248	@ 0xf8
 800369e:	05ff      	lsls	r7, r7, #23
 80036a0:	403b      	ands	r3, r7
 80036a2:	4f7f      	ldr	r7, [pc, #508]	@ (80038a0 <HAL_ADC_AnalogWDGConfig+0x290>)
 80036a4:	403a      	ands	r2, r7
 80036a6:	4313      	orrs	r3, r2
 80036a8:	22c0      	movs	r2, #192	@ 0xc0
 80036aa:	0412      	lsls	r2, r2, #16
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
      if (backup_setting_adc_enable_state == 1UL)
 80036b0:	2e01      	cmp	r6, #1
 80036b2:	d01e      	beq.n	80036f2 <HAL_ADC_AnalogWDGConfig+0xe2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036b6:	4a7b      	ldr	r2, [pc, #492]	@ (80038a4 <HAL_ADC_AnalogWDGConfig+0x294>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	65a3      	str	r3, [r4, #88]	@ 0x58
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80036bc:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80036be:	2280      	movs	r2, #128	@ 0x80
 80036c0:	601a      	str	r2, [r3, #0]
      if (pAnalogWDGConfig->ITMode == ENABLE)
 80036c2:	7b2b      	ldrb	r3, [r5, #12]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d01a      	beq.n	80036fe <HAL_ADC_AnalogWDGConfig+0xee>
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80036c8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80036ca:	6853      	ldr	r3, [r2, #4]
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	438b      	bics	r3, r1
 80036d0:	6053      	str	r3, [r2, #4]
}
 80036d2:	e10d      	b.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80036d4:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(*preg,
 80036d6:	68ca      	ldr	r2, [r1, #12]
 80036d8:	4b71      	ldr	r3, [pc, #452]	@ (80038a0 <HAL_ADC_AnalogWDGConfig+0x290>)
 80036da:	401a      	ands	r2, r3
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60cb      	str	r3, [r1, #12]
}
 80036e4:	e7e4      	b.n	80036b0 <HAL_ADC_AnalogWDGConfig+0xa0>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80036e6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 80036e8:	68d3      	ldr	r3, [r2, #12]
 80036ea:	496d      	ldr	r1, [pc, #436]	@ (80038a0 <HAL_ADC_AnalogWDGConfig+0x290>)
 80036ec:	400b      	ands	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]
}
 80036f0:	e7de      	b.n	80036b0 <HAL_ADC_AnalogWDGConfig+0xa0>
        if (tmp_hal_status == HAL_OK)
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1de      	bne.n	80036b4 <HAL_ADC_AnalogWDGConfig+0xa4>
          tmp_hal_status = ADC_Enable(hadc);
 80036f6:	0020      	movs	r0, r4
 80036f8:	f7ff fe34 	bl	8003364 <ADC_Enable>
 80036fc:	e7da      	b.n	80036b4 <HAL_ADC_AnalogWDGConfig+0xa4>
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80036fe:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003700:	6853      	ldr	r3, [r2, #4]
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	430b      	orrs	r3, r1
 8003706:	6053      	str	r3, [r2, #4]
}
 8003708:	e0f2      	b.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800370a:	22a0      	movs	r2, #160	@ 0xa0
 800370c:	589e      	ldr	r6, [r3, r2]
 800370e:	68aa      	ldr	r2, [r5, #8]
 8003710:	0351      	lsls	r1, r2, #13
 8003712:	d107      	bne.n	8003724 <HAL_ADC_AnalogWDGConfig+0x114>
 8003714:	0050      	lsls	r0, r2, #1
 8003716:	0ec0      	lsrs	r0, r0, #27
 8003718:	3101      	adds	r1, #1
 800371a:	4081      	lsls	r1, r0
 800371c:	430e      	orrs	r6, r1
 800371e:	21a0      	movs	r1, #160	@ 0xa0
 8003720:	505e      	str	r6, [r3, r1]
 8003722:	e0d0      	b.n	80038c6 <HAL_ADC_AnalogWDGConfig+0x2b6>
 8003724:	2001      	movs	r0, #1
 8003726:	0001      	movs	r1, r0
 8003728:	4011      	ands	r1, r2
 800372a:	4210      	tst	r0, r2
 800372c:	d1f6      	bne.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 800372e:	2102      	movs	r1, #2
 8003730:	0790      	lsls	r0, r2, #30
 8003732:	d4f3      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 8003734:	3102      	adds	r1, #2
 8003736:	0750      	lsls	r0, r2, #29
 8003738:	d4f0      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 800373a:	3104      	adds	r1, #4
 800373c:	0710      	lsls	r0, r2, #28
 800373e:	d4ed      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 8003740:	3108      	adds	r1, #8
 8003742:	06d0      	lsls	r0, r2, #27
 8003744:	d4ea      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 8003746:	3110      	adds	r1, #16
 8003748:	0690      	lsls	r0, r2, #26
 800374a:	d4e7      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 800374c:	3120      	adds	r1, #32
 800374e:	0650      	lsls	r0, r2, #25
 8003750:	d4e4      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 8003752:	3140      	adds	r1, #64	@ 0x40
 8003754:	0610      	lsls	r0, r2, #24
 8003756:	d4e1      	bmi.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 8003758:	05d1      	lsls	r1, r2, #23
 800375a:	d41e      	bmi.n	800379a <HAL_ADC_AnalogWDGConfig+0x18a>
 800375c:	0591      	lsls	r1, r2, #22
 800375e:	d41f      	bmi.n	80037a0 <HAL_ADC_AnalogWDGConfig+0x190>
 8003760:	0551      	lsls	r1, r2, #21
 8003762:	d420      	bmi.n	80037a6 <HAL_ADC_AnalogWDGConfig+0x196>
 8003764:	0511      	lsls	r1, r2, #20
 8003766:	d421      	bmi.n	80037ac <HAL_ADC_AnalogWDGConfig+0x19c>
 8003768:	04d1      	lsls	r1, r2, #19
 800376a:	d422      	bmi.n	80037b2 <HAL_ADC_AnalogWDGConfig+0x1a2>
 800376c:	0491      	lsls	r1, r2, #18
 800376e:	d423      	bmi.n	80037b8 <HAL_ADC_AnalogWDGConfig+0x1a8>
 8003770:	0451      	lsls	r1, r2, #17
 8003772:	d424      	bmi.n	80037be <HAL_ADC_AnalogWDGConfig+0x1ae>
 8003774:	0411      	lsls	r1, r2, #16
 8003776:	d425      	bmi.n	80037c4 <HAL_ADC_AnalogWDGConfig+0x1b4>
 8003778:	03d1      	lsls	r1, r2, #15
 800377a:	d426      	bmi.n	80037ca <HAL_ADC_AnalogWDGConfig+0x1ba>
 800377c:	0391      	lsls	r1, r2, #14
 800377e:	d427      	bmi.n	80037d0 <HAL_ADC_AnalogWDGConfig+0x1c0>
 8003780:	2180      	movs	r1, #128	@ 0x80
 8003782:	02c9      	lsls	r1, r1, #11
 8003784:	400a      	ands	r2, r1
 8003786:	4251      	negs	r1, r2
 8003788:	414a      	adcs	r2, r1
 800378a:	4252      	negs	r2, r2
 800378c:	4946      	ldr	r1, [pc, #280]	@ (80038a8 <HAL_ADC_AnalogWDGConfig+0x298>)
 800378e:	4011      	ands	r1, r2
 8003790:	2280      	movs	r2, #128	@ 0x80
 8003792:	02d2      	lsls	r2, r2, #11
 8003794:	4694      	mov	ip, r2
 8003796:	4461      	add	r1, ip
 8003798:	e7c0      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	0049      	lsls	r1, r1, #1
 800379e:	e7bd      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037a0:	2180      	movs	r1, #128	@ 0x80
 80037a2:	0089      	lsls	r1, r1, #2
 80037a4:	e7ba      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037a6:	2180      	movs	r1, #128	@ 0x80
 80037a8:	00c9      	lsls	r1, r1, #3
 80037aa:	e7b7      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037ac:	2180      	movs	r1, #128	@ 0x80
 80037ae:	0109      	lsls	r1, r1, #4
 80037b0:	e7b4      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	0149      	lsls	r1, r1, #5
 80037b6:	e7b1      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	0189      	lsls	r1, r1, #6
 80037bc:	e7ae      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037be:	2180      	movs	r1, #128	@ 0x80
 80037c0:	01c9      	lsls	r1, r1, #7
 80037c2:	e7ab      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037c4:	2180      	movs	r1, #128	@ 0x80
 80037c6:	0209      	lsls	r1, r1, #8
 80037c8:	e7a8      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	0249      	lsls	r1, r1, #9
 80037ce:	e7a5      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
 80037d0:	2180      	movs	r1, #128	@ 0x80
 80037d2:	0289      	lsls	r1, r1, #10
 80037d4:	e7a2      	b.n	800371c <HAL_ADC_AnalogWDGConfig+0x10c>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 80037d6:	2001      	movs	r0, #1
 80037d8:	0001      	movs	r1, r0
 80037da:	4011      	ands	r1, r2
 80037dc:	4210      	tst	r0, r2
 80037de:	d000      	beq.n	80037e2 <HAL_ADC_AnalogWDGConfig+0x1d2>
 80037e0:	e743      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 80037e2:	2102      	movs	r1, #2
 80037e4:	0790      	lsls	r0, r2, #30
 80037e6:	d500      	bpl.n	80037ea <HAL_ADC_AnalogWDGConfig+0x1da>
 80037e8:	e73f      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 80037ea:	3102      	adds	r1, #2
 80037ec:	0750      	lsls	r0, r2, #29
 80037ee:	d500      	bpl.n	80037f2 <HAL_ADC_AnalogWDGConfig+0x1e2>
 80037f0:	e73b      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 80037f2:	3104      	adds	r1, #4
 80037f4:	0710      	lsls	r0, r2, #28
 80037f6:	d500      	bpl.n	80037fa <HAL_ADC_AnalogWDGConfig+0x1ea>
 80037f8:	e737      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 80037fa:	3108      	adds	r1, #8
 80037fc:	06d0      	lsls	r0, r2, #27
 80037fe:	d500      	bpl.n	8003802 <HAL_ADC_AnalogWDGConfig+0x1f2>
 8003800:	e733      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003802:	3110      	adds	r1, #16
 8003804:	0690      	lsls	r0, r2, #26
 8003806:	d500      	bpl.n	800380a <HAL_ADC_AnalogWDGConfig+0x1fa>
 8003808:	e72f      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 800380a:	3120      	adds	r1, #32
 800380c:	0650      	lsls	r0, r2, #25
 800380e:	d500      	bpl.n	8003812 <HAL_ADC_AnalogWDGConfig+0x202>
 8003810:	e72b      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003812:	3140      	adds	r1, #64	@ 0x40
 8003814:	0610      	lsls	r0, r2, #24
 8003816:	d500      	bpl.n	800381a <HAL_ADC_AnalogWDGConfig+0x20a>
 8003818:	e727      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 800381a:	05d1      	lsls	r1, r2, #23
 800381c:	d41e      	bmi.n	800385c <HAL_ADC_AnalogWDGConfig+0x24c>
 800381e:	0591      	lsls	r1, r2, #22
 8003820:	d41f      	bmi.n	8003862 <HAL_ADC_AnalogWDGConfig+0x252>
 8003822:	0551      	lsls	r1, r2, #21
 8003824:	d420      	bmi.n	8003868 <HAL_ADC_AnalogWDGConfig+0x258>
 8003826:	0511      	lsls	r1, r2, #20
 8003828:	d421      	bmi.n	800386e <HAL_ADC_AnalogWDGConfig+0x25e>
 800382a:	04d1      	lsls	r1, r2, #19
 800382c:	d422      	bmi.n	8003874 <HAL_ADC_AnalogWDGConfig+0x264>
 800382e:	0491      	lsls	r1, r2, #18
 8003830:	d423      	bmi.n	800387a <HAL_ADC_AnalogWDGConfig+0x26a>
 8003832:	0451      	lsls	r1, r2, #17
 8003834:	d424      	bmi.n	8003880 <HAL_ADC_AnalogWDGConfig+0x270>
 8003836:	0411      	lsls	r1, r2, #16
 8003838:	d425      	bmi.n	8003886 <HAL_ADC_AnalogWDGConfig+0x276>
 800383a:	03d1      	lsls	r1, r2, #15
 800383c:	d426      	bmi.n	800388c <HAL_ADC_AnalogWDGConfig+0x27c>
 800383e:	0391      	lsls	r1, r2, #14
 8003840:	d427      	bmi.n	8003892 <HAL_ADC_AnalogWDGConfig+0x282>
 8003842:	2180      	movs	r1, #128	@ 0x80
 8003844:	02c9      	lsls	r1, r1, #11
 8003846:	400a      	ands	r2, r1
 8003848:	4251      	negs	r1, r2
 800384a:	414a      	adcs	r2, r1
 800384c:	4252      	negs	r2, r2
 800384e:	4916      	ldr	r1, [pc, #88]	@ (80038a8 <HAL_ADC_AnalogWDGConfig+0x298>)
 8003850:	4011      	ands	r1, r2
 8003852:	2280      	movs	r2, #128	@ 0x80
 8003854:	02d2      	lsls	r2, r2, #11
 8003856:	4694      	mov	ip, r2
 8003858:	4461      	add	r1, ip
 800385a:	e706      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	0049      	lsls	r1, r1, #1
 8003860:	e703      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	0089      	lsls	r1, r1, #2
 8003866:	e700      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	00c9      	lsls	r1, r1, #3
 800386c:	e6fd      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 800386e:	2180      	movs	r1, #128	@ 0x80
 8003870:	0109      	lsls	r1, r1, #4
 8003872:	e6fa      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	0149      	lsls	r1, r1, #5
 8003878:	e6f7      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	0189      	lsls	r1, r1, #6
 800387e:	e6f4      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003880:	2180      	movs	r1, #128	@ 0x80
 8003882:	01c9      	lsls	r1, r1, #7
 8003884:	e6f1      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003886:	2180      	movs	r1, #128	@ 0x80
 8003888:	0209      	lsls	r1, r1, #8
 800388a:	e6ee      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 800388c:	2180      	movs	r1, #128	@ 0x80
 800388e:	0249      	lsls	r1, r1, #9
 8003890:	e6eb      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003892:	2180      	movs	r1, #128	@ 0x80
 8003894:	0289      	lsls	r1, r1, #10
 8003896:	e6e8      	b.n	800366a <HAL_ADC_AnalogWDGConfig+0x5a>
 8003898:	7cc00000 	.word	0x7cc00000
 800389c:	0017ffff 	.word	0x0017ffff
 80038a0:	833fffff 	.word	0x833fffff
 80038a4:	fffeffff 	.word	0xfffeffff
 80038a8:	fffc0001 	.word	0xfffc0001
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 80038ac:	0cd1      	lsrs	r1, r2, #19
 80038ae:	2004      	movs	r0, #4
 80038b0:	4001      	ands	r1, r0
 80038b2:	33a0      	adds	r3, #160	@ 0xa0
 80038b4:	18cb      	adds	r3, r1, r3
  MODIFY_REG(*preg,
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	4839      	ldr	r0, [pc, #228]	@ (80039a0 <HAL_ADC_AnalogWDGConfig+0x390>)
 80038ba:	4010      	ands	r0, r2
 80038bc:	4381      	bics	r1, r0
 80038be:	4839      	ldr	r0, [pc, #228]	@ (80039a4 <HAL_ADC_AnalogWDGConfig+0x394>)
 80038c0:	4002      	ands	r2, r0
 80038c2:	430a      	orrs	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80038c6:	4b38      	ldr	r3, [pc, #224]	@ (80039a8 <HAL_ADC_AnalogWDGConfig+0x398>)
 80038c8:	682a      	ldr	r2, [r5, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d035      	beq.n	800393a <HAL_ADC_AnalogWDGConfig+0x32a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038d0:	4a36      	ldr	r2, [pc, #216]	@ (80039ac <HAL_ADC_AnalogWDGConfig+0x39c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	65a3      	str	r3, [r4, #88]	@ 0x58
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80038d6:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80038de:	7b2b      	ldrb	r3, [r5, #12]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d043      	beq.n	800396c <HAL_ADC_AnalogWDGConfig+0x35c>
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80038e4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80038e6:	6853      	ldr	r3, [r2, #4]
 80038e8:	4931      	ldr	r1, [pc, #196]	@ (80039b0 <HAL_ADC_AnalogWDGConfig+0x3a0>)
 80038ea:	400b      	ands	r3, r1
 80038ec:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ee:	2000      	movs	r0, #0
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80038f0:	682a      	ldr	r2, [r5, #0]
 80038f2:	4b30      	ldr	r3, [pc, #192]	@ (80039b4 <HAL_ADC_AnalogWDGConfig+0x3a4>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d041      	beq.n	800397c <HAL_ADC_AnalogWDGConfig+0x36c>
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 80038f8:	6929      	ldr	r1, [r5, #16]
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 80038fa:	696d      	ldr	r5, [r5, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 80038fc:	0293      	lsls	r3, r2, #10
 80038fe:	0f9b      	lsrs	r3, r3, #30
 8003900:	0292      	lsls	r2, r2, #10
 8003902:	0fd2      	lsrs	r2, r2, #31
 8003904:	189b      	adds	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	3220      	adds	r2, #32
 800390c:	189b      	adds	r3, r3, r2
  MODIFY_REG(*preg,
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4e29      	ldr	r6, [pc, #164]	@ (80039b8 <HAL_ADC_AnalogWDGConfig+0x3a8>)
 8003912:	4032      	ands	r2, r6
 8003914:	432a      	orrs	r2, r5
 8003916:	0409      	lsls	r1, r1, #16
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hadc);
 800391c:	2354      	movs	r3, #84	@ 0x54
 800391e:	2200      	movs	r2, #0
 8003920:	54e2      	strb	r2, [r4, r3]
}
 8003922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8003924:	0cd1      	lsrs	r1, r2, #19
 8003926:	2004      	movs	r0, #4
 8003928:	4001      	ands	r1, r0
 800392a:	33a0      	adds	r3, #160	@ 0xa0
 800392c:	18cb      	adds	r3, r1, r3
  MODIFY_REG(*preg,
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	481b      	ldr	r0, [pc, #108]	@ (80039a0 <HAL_ADC_AnalogWDGConfig+0x390>)
 8003932:	4002      	ands	r2, r0
 8003934:	4391      	bics	r1, r2
 8003936:	6019      	str	r1, [r3, #0]
}
 8003938:	e7c5      	b.n	80038c6 <HAL_ADC_AnalogWDGConfig+0x2b6>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800393a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800393c:	4a1f      	ldr	r2, [pc, #124]	@ (80039bc <HAL_ADC_AnalogWDGConfig+0x3ac>)
 800393e:	4013      	ands	r3, r2
 8003940:	65a3      	str	r3, [r4, #88]	@ 0x58
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8003942:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	0052      	lsls	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800394a:	7b2b      	ldrb	r3, [r5, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d006      	beq.n	800395e <HAL_ADC_AnalogWDGConfig+0x34e>
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8003950:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003952:	6853      	ldr	r3, [r2, #4]
 8003954:	491a      	ldr	r1, [pc, #104]	@ (80039c0 <HAL_ADC_AnalogWDGConfig+0x3b0>)
 8003956:	400b      	ands	r3, r1
 8003958:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395a:	2000      	movs	r0, #0
}
 800395c:	e7c8      	b.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800395e:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003960:	6851      	ldr	r1, [r2, #4]
 8003962:	33ff      	adds	r3, #255	@ 0xff
 8003964:	430b      	orrs	r3, r1
 8003966:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003968:	2000      	movs	r0, #0
}
 800396a:	e7c1      	b.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800396c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800396e:	6851      	ldr	r1, [r2, #4]
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	430b      	orrs	r3, r1
 8003976:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003978:	2000      	movs	r0, #0
}
 800397a:	e7b9      	b.n	80038f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800397c:	6827      	ldr	r7, [r4, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	08db      	lsrs	r3, r3, #3
 8003982:	2603      	movs	r6, #3
 8003984:	4033      	ands	r3, r6
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	6929      	ldr	r1, [r5, #16]
 800398a:	4099      	lsls	r1, r3
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	08db      	lsrs	r3, r3, #3
 8003990:	401e      	ands	r6, r3
 8003992:	0076      	lsls	r6, r6, #1
 8003994:	696d      	ldr	r5, [r5, #20]
 8003996:	40b5      	lsls	r5, r6
 8003998:	e7b0      	b.n	80038fc <HAL_ADC_AnalogWDGConfig+0x2ec>
  __HAL_LOCK(hadc);
 800399a:	2002      	movs	r0, #2
 800399c:	e7c1      	b.n	8003922 <HAL_ADC_AnalogWDGConfig+0x312>
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	7cc7ffff 	.word	0x7cc7ffff
 80039a4:	0087ffff 	.word	0x0087ffff
 80039a8:	0017ffff 	.word	0x0017ffff
 80039ac:	fffbffff 	.word	0xfffbffff
 80039b0:	fffffdff 	.word	0xfffffdff
 80039b4:	7cc00000 	.word	0x7cc00000
 80039b8:	f000f000 	.word	0xf000f000
 80039bc:	fffdffff 	.word	0xfffdffff
 80039c0:	fffffeff 	.word	0xfffffeff

080039c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039c4:	4770      	bx	lr

080039c6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039c6:	4770      	bx	lr

080039c8 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039c8:	4770      	bx	lr

080039ca <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80039ca:	4770      	bx	lr

080039cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039cc:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80039ce:	2800      	cmp	r0, #0
 80039d0:	db14      	blt.n	80039fc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d2:	0884      	lsrs	r4, r0, #2
 80039d4:	00a4      	lsls	r4, r4, #2
 80039d6:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <HAL_NVIC_SetPriority+0x5c>)
 80039d8:	469c      	mov	ip, r3
 80039da:	4464      	add	r4, ip
 80039dc:	26c0      	movs	r6, #192	@ 0xc0
 80039de:	00b6      	lsls	r6, r6, #2
 80039e0:	59a5      	ldr	r5, [r4, r6]
 80039e2:	2203      	movs	r2, #3
 80039e4:	4002      	ands	r2, r0
 80039e6:	00d2      	lsls	r2, r2, #3
 80039e8:	23ff      	movs	r3, #255	@ 0xff
 80039ea:	0018      	movs	r0, r3
 80039ec:	4090      	lsls	r0, r2
 80039ee:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039f0:	0189      	lsls	r1, r1, #6
 80039f2:	400b      	ands	r3, r1
 80039f4:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f6:	432b      	orrs	r3, r5
 80039f8:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039fc:	230f      	movs	r3, #15
 80039fe:	4003      	ands	r3, r0
 8003a00:	3b08      	subs	r3, #8
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_NVIC_SetPriority+0x60>)
 8003a08:	4694      	mov	ip, r2
 8003a0a:	4463      	add	r3, ip
 8003a0c:	69dc      	ldr	r4, [r3, #28]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4010      	ands	r0, r2
 8003a12:	00c0      	lsls	r0, r0, #3
 8003a14:	32fc      	adds	r2, #252	@ 0xfc
 8003a16:	0015      	movs	r5, r2
 8003a18:	4085      	lsls	r5, r0
 8003a1a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a1c:	0189      	lsls	r1, r1, #6
 8003a1e:	400a      	ands	r2, r1
 8003a20:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a22:	4322      	orrs	r2, r4
 8003a24:	61da      	str	r2, [r3, #28]
 8003a26:	e7e8      	b.n	80039fa <HAL_NVIC_SetPriority+0x2e>
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a30:	2800      	cmp	r0, #0
 8003a32:	db05      	blt.n	8003a40 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a34:	221f      	movs	r2, #31
 8003a36:	4002      	ands	r2, r0
 8003a38:	2301      	movs	r3, #1
 8003a3a:	4093      	lsls	r3, r2
 8003a3c:	4a01      	ldr	r2, [pc, #4]	@ (8003a44 <HAL_NVIC_EnableIRQ+0x14>)
 8003a3e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a40:	4770      	bx	lr
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a48:	3801      	subs	r0, #1
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	045b      	lsls	r3, r3, #17
 8003a4e:	4298      	cmp	r0, r3
 8003a50:	d20f      	bcs.n	8003a72 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <HAL_SYSTICK_Config+0x30>)
 8003a54:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a56:	4809      	ldr	r0, [pc, #36]	@ (8003a7c <HAL_SYSTICK_Config+0x34>)
 8003a58:	6a03      	ldr	r3, [r0, #32]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	21c0      	movs	r1, #192	@ 0xc0
 8003a60:	0609      	lsls	r1, r1, #24
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a66:	2300      	movs	r3, #0
 8003a68:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	3307      	adds	r3, #7
 8003a6c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a6e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003a70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8003a74:	e7fc      	b.n	8003a70 <HAL_SYSTICK_Config+0x28>
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	e000e010 	.word	0xe000e010
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a82:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003a84:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8003a86:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a88:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8003a8a:	2c00      	cmp	r4, #0
 8003a8c:	d002      	beq.n	8003a94 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a8e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003a90:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003a92:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a94:	4e0b      	ldr	r6, [pc, #44]	@ (8003ac4 <DMA_SetConfig+0x44>)
 8003a96:	6877      	ldr	r7, [r6, #4]
 8003a98:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003a9a:	241c      	movs	r4, #28
 8003a9c:	4025      	ands	r5, r4
 8003a9e:	3c1b      	subs	r4, #27
 8003aa0:	40ac      	lsls	r4, r5
 8003aa2:	433c      	orrs	r4, r7
 8003aa4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aa6:	6804      	ldr	r4, [r0, #0]
 8003aa8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aaa:	6883      	ldr	r3, [r0, #8]
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d004      	beq.n	8003aba <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003ab4:	6803      	ldr	r3, [r0, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
  }
}
 8003ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8003aba:	6803      	ldr	r3, [r0, #0]
 8003abc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003abe:	6803      	ldr	r3, [r0, #0]
 8003ac0:	60d9      	str	r1, [r3, #12]
 8003ac2:	e7f9      	b.n	8003ab8 <DMA_SetConfig+0x38>
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003acc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	4a08      	ldr	r2, [pc, #32]	@ (8003af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8003ad2:	4694      	mov	ip, r2
 8003ad4:	4463      	add	r3, ip
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ada:	7800      	ldrb	r0, [r0, #0]
 8003adc:	3808      	subs	r0, #8
 8003ade:	2114      	movs	r1, #20
 8003ae0:	f7fc fb18 	bl	8000114 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003ae6:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ae8:	231f      	movs	r3, #31
 8003aea:	4018      	ands	r0, r3
 8003aec:	3b1e      	subs	r3, #30
 8003aee:	4083      	lsls	r3, r0
 8003af0:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	10008200 	.word	0x10008200
 8003af8:	40020880 	.word	0x40020880

08003afc <HAL_DMA_Init>:
{
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8003b00:	d055      	beq.n	8003bae <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b02:	6805      	ldr	r5, [r0, #0]
 8003b04:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <HAL_DMA_Init+0xb8>)
 8003b06:	18e8      	adds	r0, r5, r3
 8003b08:	2114      	movs	r1, #20
 8003b0a:	f7fc fb03 	bl	8000114 <__udivsi3>
 8003b0e:	0080      	lsls	r0, r0, #2
 8003b10:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b12:	2325      	movs	r3, #37	@ 0x25
 8003b14:	2202      	movs	r2, #2
 8003b16:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <HAL_DMA_Init+0xbc>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	6811      	ldr	r1, [r2, #0]
 8003b24:	68a3      	ldr	r3, [r4, #8]
 8003b26:	68e0      	ldr	r0, [r4, #12]
 8003b28:	4303      	orrs	r3, r0
 8003b2a:	6920      	ldr	r0, [r4, #16]
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	6960      	ldr	r0, [r4, #20]
 8003b30:	4303      	orrs	r3, r0
 8003b32:	69a0      	ldr	r0, [r4, #24]
 8003b34:	4303      	orrs	r3, r0
 8003b36:	69e0      	ldr	r0, [r4, #28]
 8003b38:	4303      	orrs	r3, r0
 8003b3a:	6a20      	ldr	r0, [r4, #32]
 8003b3c:	4303      	orrs	r3, r0
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b42:	0020      	movs	r0, r4
 8003b44:	f7ff ffc0 	bl	8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	01db      	lsls	r3, r3, #7
 8003b4c:	68a2      	ldr	r2, [r4, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d018      	beq.n	8003b84 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b52:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b54:	6863      	ldr	r3, [r4, #4]
 8003b56:	213f      	movs	r1, #63	@ 0x3f
 8003b58:	400b      	ands	r3, r1
 8003b5a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b5c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003b5e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003b60:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	2a03      	cmp	r2, #3
 8003b68:	d90f      	bls.n	8003b8a <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b6e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b70:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003b76:	2225      	movs	r2, #37	@ 0x25
 8003b78:	2101      	movs	r1, #1
 8003b7a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003b80:	2000      	movs	r0, #0
}
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b84:	2300      	movs	r3, #0
 8003b86:	6063      	str	r3, [r4, #4]
 8003b88:	e7e3      	b.n	8003b52 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b8a:	223f      	movs	r2, #63	@ 0x3f
 8003b8c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bbc <HAL_DMA_Init+0xc0>)
 8003b90:	189a      	adds	r2, r3, r2
 8003b92:	0092      	lsls	r2, r2, #2
 8003b94:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b96:	490a      	ldr	r1, [pc, #40]	@ (8003bc0 <HAL_DMA_Init+0xc4>)
 8003b98:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4099      	lsls	r1, r3
 8003ba0:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ba8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	e7e1      	b.n	8003b72 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
 8003bb0:	e7e7      	b.n	8003b82 <HAL_DMA_Init+0x86>
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	bffdfff8 	.word	0xbffdfff8
 8003bb8:	ffff800f 	.word	0xffff800f
 8003bbc:	1000823f 	.word	0x1000823f
 8003bc0:	40020940 	.word	0x40020940

08003bc4 <HAL_DMA_Start_IT>:
{
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003bc8:	2024      	movs	r0, #36	@ 0x24
 8003bca:	5c20      	ldrb	r0, [r4, r0]
 8003bcc:	2801      	cmp	r0, #1
 8003bce:	d045      	beq.n	8003c5c <HAL_DMA_Start_IT+0x98>
 8003bd0:	2024      	movs	r0, #36	@ 0x24
 8003bd2:	2501      	movs	r5, #1
 8003bd4:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	5c20      	ldrb	r0, [r4, r0]
 8003bda:	2801      	cmp	r0, #1
 8003bdc:	d006      	beq.n	8003bec <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003be2:	3b5c      	subs	r3, #92	@ 0x5c
 8003be4:	2200      	movs	r2, #0
 8003be6:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8003be8:	2001      	movs	r0, #1
}
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bec:	3024      	adds	r0, #36	@ 0x24
 8003bee:	3501      	adds	r5, #1
 8003bf0:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	6828      	ldr	r0, [r5, #0]
 8003bfa:	2601      	movs	r6, #1
 8003bfc:	43b0      	bics	r0, r6
 8003bfe:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c00:	0020      	movs	r0, r4
 8003c02:	f7ff ff3d 	bl	8003a80 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003c06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01c      	beq.n	8003c46 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	210e      	movs	r1, #14
 8003c12:	430b      	orrs	r3, r1
 8003c14:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c16:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	03db      	lsls	r3, r3, #15
 8003c1c:	d504      	bpl.n	8003c28 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c1e:	6811      	ldr	r1, [r2, #0]
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003c28:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	2280      	movs	r2, #128	@ 0x80
 8003c32:	0052      	lsls	r2, r2, #1
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2000      	movs	r0, #0
 8003c44:	e7d1      	b.n	8003bea <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	6813      	ldr	r3, [r2, #0]
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	438b      	bics	r3, r1
 8003c4e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	3106      	adds	r1, #6
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e7dc      	b.n	8003c16 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	e7c4      	b.n	8003bea <HAL_DMA_Start_IT+0x26>

08003c60 <HAL_DMA_Abort>:
{
 8003c60:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d036      	beq.n	8003cd4 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c66:	2325      	movs	r3, #37	@ 0x25
 8003c68:	5cc3      	ldrb	r3, [r0, r3]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d006      	beq.n	8003c7c <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c6e:	2304      	movs	r3, #4
 8003c70:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003c72:	3320      	adds	r3, #32
 8003c74:	2200      	movs	r2, #0
 8003c76:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
}
 8003c7a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c7c:	6802      	ldr	r2, [r0, #0]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	210e      	movs	r1, #14
 8003c82:	438b      	bics	r3, r1
 8003c84:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c86:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003c88:	6813      	ldr	r3, [r2, #0]
 8003c8a:	4913      	ldr	r1, [pc, #76]	@ (8003cd8 <HAL_DMA_Abort+0x78>)
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003c90:	6801      	ldr	r1, [r0, #0]
 8003c92:	680a      	ldr	r2, [r1, #0]
 8003c94:	2301      	movs	r3, #1
 8003c96:	439a      	bics	r2, r3
 8003c98:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003c9a:	4910      	ldr	r1, [pc, #64]	@ (8003cdc <HAL_DMA_Abort+0x7c>)
 8003c9c:	684c      	ldr	r4, [r1, #4]
 8003c9e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003ca0:	251c      	movs	r5, #28
 8003ca2:	402a      	ands	r2, r5
 8003ca4:	4093      	lsls	r3, r2
 8003ca6:	4323      	orrs	r3, r4
 8003ca8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003caa:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003cac:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003cae:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003cb0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4907      	ldr	r1, [pc, #28]	@ (8003cd8 <HAL_DMA_Abort+0x78>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cbe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003cc0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003cc2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	2325      	movs	r3, #37	@ 0x25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	2200      	movs	r2, #0
 8003cce:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e7d2      	b.n	8003c7a <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	e7d0      	b.n	8003c7a <HAL_DMA_Abort+0x1a>
 8003cd8:	fffffeff 	.word	0xfffffeff
 8003cdc:	40020000 	.word	0x40020000

08003ce0 <HAL_DMA_IRQHandler>:
{
 8003ce0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8003ce2:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <HAL_DMA_IRQHandler+0xc8>)
 8003ce4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce6:	6804      	ldr	r4, [r0, #0]
 8003ce8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003cec:	221c      	movs	r2, #28
 8003cee:	4013      	ands	r3, r2
 8003cf0:	3a18      	subs	r2, #24
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	4211      	tst	r1, r2
 8003cf6:	d016      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x46>
 8003cf8:	076a      	lsls	r2, r5, #29
 8003cfa:	d514      	bpl.n	8003d26 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	069b      	lsls	r3, r3, #26
 8003d00:	d403      	bmi.n	8003d0a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	2204      	movs	r2, #4
 8003d06:	4393      	bics	r3, r2
 8003d08:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003d0a:	4927      	ldr	r1, [pc, #156]	@ (8003da8 <HAL_DMA_IRQHandler+0xc8>)
 8003d0c:	684c      	ldr	r4, [r1, #4]
 8003d0e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003d10:	231c      	movs	r3, #28
 8003d12:	401a      	ands	r2, r3
 8003d14:	3b18      	subs	r3, #24
 8003d16:	4093      	lsls	r3, r2
 8003d18:	4323      	orrs	r3, r4
 8003d1a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003d1c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d000      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8003d22:	4798      	blx	r3
}
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d26:	2202      	movs	r2, #2
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	4211      	tst	r1, r2
 8003d2c:	d01c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x88>
 8003d2e:	07aa      	lsls	r2, r5, #30
 8003d30:	d51a      	bpl.n	8003d68 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	069b      	lsls	r3, r3, #26
 8003d36:	d406      	bmi.n	8003d46 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003d40:	2325      	movs	r3, #37	@ 0x25
 8003d42:	3a09      	subs	r2, #9
 8003d44:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d46:	4918      	ldr	r1, [pc, #96]	@ (8003da8 <HAL_DMA_IRQHandler+0xc8>)
 8003d48:	684c      	ldr	r4, [r1, #4]
 8003d4a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003d4c:	231c      	movs	r3, #28
 8003d4e:	401a      	ands	r2, r3
 8003d50:	3b1a      	subs	r3, #26
 8003d52:	4093      	lsls	r3, r2
 8003d54:	4323      	orrs	r3, r4
 8003d56:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8003d58:	2324      	movs	r3, #36	@ 0x24
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8003d5e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0df      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8003d64:	4798      	blx	r3
 8003d66:	e7dd      	b.n	8003d24 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d68:	2208      	movs	r2, #8
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	4211      	tst	r1, r2
 8003d6e:	d0d9      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x44>
 8003d70:	072d      	lsls	r5, r5, #28
 8003d72:	d5d7      	bpl.n	8003d24 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	220e      	movs	r2, #14
 8003d78:	4393      	bics	r3, r2
 8003d7a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003d7c:	490a      	ldr	r1, [pc, #40]	@ (8003da8 <HAL_DMA_IRQHandler+0xc8>)
 8003d7e:	684c      	ldr	r4, [r1, #4]
 8003d80:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003d82:	231c      	movs	r3, #28
 8003d84:	401a      	ands	r2, r3
 8003d86:	3b1b      	subs	r3, #27
 8003d88:	001d      	movs	r5, r3
 8003d8a:	4095      	lsls	r5, r2
 8003d8c:	002a      	movs	r2, r5
 8003d8e:	4322      	orrs	r2, r4
 8003d90:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d92:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003d94:	2225      	movs	r2, #37	@ 0x25
 8003d96:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003d98:	3323      	adds	r3, #35	@ 0x23
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003d9e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0bf      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8003da4:	4798      	blx	r3
  return;
 8003da6:	e7bd      	b.n	8003d24 <HAL_DMA_IRQHandler+0x44>
 8003da8:	40020000 	.word	0x40020000

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dae:	46de      	mov	lr, fp
 8003db0:	4657      	mov	r7, sl
 8003db2:	464e      	mov	r6, r9
 8003db4:	4645      	mov	r5, r8
 8003db6:	b5e0      	push	{r5, r6, r7, lr}
 8003db8:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dba:	680f      	ldr	r7, [r1, #0]
 8003dbc:	2f00      	cmp	r7, #0
 8003dbe:	d100      	bne.n	8003dc2 <HAL_GPIO_Init+0x16>
 8003dc0:	e0d1      	b.n	8003f66 <HAL_GPIO_Init+0x1ba>
 8003dc2:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003dc4:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dc6:	2401      	movs	r4, #1
 8003dc8:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dca:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dcc:	4d69      	ldr	r5, [pc, #420]	@ (8003f74 <HAL_GPIO_Init+0x1c8>)
 8003dce:	46ab      	mov	fp, r5
 8003dd0:	e052      	b.n	8003e78 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 8003dd2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dd4:	0025      	movs	r5, r4
 8003dd6:	4095      	lsls	r5, r2
 8003dd8:	43af      	bics	r7, r5
 8003dda:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ddc:	68cf      	ldr	r7, [r1, #12]
 8003dde:	4097      	lsls	r7, r2
 8003de0:	464d      	mov	r5, r9
 8003de2:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8003de4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003de6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de8:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dea:	684e      	ldr	r6, [r1, #4]
 8003dec:	0936      	lsrs	r6, r6, #4
 8003dee:	4645      	mov	r5, r8
 8003df0:	402e      	ands	r6, r5
 8003df2:	409e      	lsls	r6, r3
 8003df4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003df6:	6046      	str	r6, [r0, #4]
 8003df8:	e04a      	b.n	8003e90 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	4655      	mov	r5, sl
 8003dfe:	40ae      	lsls	r6, r5
 8003e00:	464d      	mov	r5, r9
 8003e02:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 8003e04:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 8003e06:	465d      	mov	r5, fp
 8003e08:	682d      	ldr	r5, [r5, #0]
 8003e0a:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 8003e0c:	4665      	mov	r5, ip
 8003e0e:	43ed      	mvns	r5, r5
 8003e10:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e12:	684d      	ldr	r5, [r1, #4]
 8003e14:	2680      	movs	r6, #128	@ 0x80
 8003e16:	0376      	lsls	r6, r6, #13
 8003e18:	4235      	tst	r5, r6
 8003e1a:	d000      	beq.n	8003e1e <HAL_GPIO_Init+0x72>
 8003e1c:	e094      	b.n	8003f48 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003e1e:	4656      	mov	r6, sl
 8003e20:	9d01      	ldr	r5, [sp, #4]
 8003e22:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003e24:	465d      	mov	r5, fp
 8003e26:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003e28:	686d      	ldr	r5, [r5, #4]
 8003e2a:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e2c:	684d      	ldr	r5, [r1, #4]
 8003e2e:	2680      	movs	r6, #128	@ 0x80
 8003e30:	03b6      	lsls	r6, r6, #14
 8003e32:	4235      	tst	r5, r6
 8003e34:	d000      	beq.n	8003e38 <HAL_GPIO_Init+0x8c>
 8003e36:	e08b      	b.n	8003f50 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8003e38:	4656      	mov	r6, sl
 8003e3a:	9d01      	ldr	r5, [sp, #4]
 8003e3c:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003e3e:	465d      	mov	r5, fp
 8003e40:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e42:	2684      	movs	r6, #132	@ 0x84
 8003e44:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e46:	684d      	ldr	r5, [r1, #4]
 8003e48:	03ad      	lsls	r5, r5, #14
 8003e4a:	d500      	bpl.n	8003e4e <HAL_GPIO_Init+0xa2>
 8003e4c:	e084      	b.n	8003f58 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8003e4e:	9d01      	ldr	r5, [sp, #4]
 8003e50:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003e52:	2584      	movs	r5, #132	@ 0x84
 8003e54:	465f      	mov	r7, fp
 8003e56:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 8003e58:	2680      	movs	r6, #128	@ 0x80
 8003e5a:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5c:	684d      	ldr	r5, [r1, #4]
 8003e5e:	03ed      	lsls	r5, r5, #15
 8003e60:	d47d      	bmi.n	8003f5e <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8003e62:	9d01      	ldr	r5, [sp, #4]
 8003e64:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003e66:	2780      	movs	r7, #128	@ 0x80
 8003e68:	465d      	mov	r5, fp
 8003e6a:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 8003e6c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	680f      	ldr	r7, [r1, #0]
 8003e70:	3202      	adds	r2, #2
 8003e72:	003e      	movs	r6, r7
 8003e74:	40de      	lsrs	r6, r3
 8003e76:	d076      	beq.n	8003f66 <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e78:	4646      	mov	r6, r8
 8003e7a:	409e      	lsls	r6, r3
 8003e7c:	003d      	movs	r5, r7
 8003e7e:	4035      	ands	r5, r6
 8003e80:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 8003e82:	4237      	tst	r7, r6
 8003e84:	d0f2      	beq.n	8003e6c <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e86:	684f      	ldr	r7, [r1, #4]
 8003e88:	4027      	ands	r7, r4
 8003e8a:	3f01      	subs	r7, #1
 8003e8c:	2f01      	cmp	r7, #1
 8003e8e:	d9a0      	bls.n	8003dd2 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e90:	684e      	ldr	r6, [r1, #4]
 8003e92:	4026      	ands	r6, r4
 8003e94:	2e03      	cmp	r6, #3
 8003e96:	d022      	beq.n	8003ede <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 8003e98:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e9a:	0026      	movs	r6, r4
 8003e9c:	4096      	lsls	r6, r2
 8003e9e:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ea0:	688e      	ldr	r6, [r1, #8]
 8003ea2:	4096      	lsls	r6, r2
 8003ea4:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8003ea6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea8:	684e      	ldr	r6, [r1, #4]
 8003eaa:	4026      	ands	r6, r4
 8003eac:	2e02      	cmp	r6, #2
 8003eae:	d116      	bne.n	8003ede <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 8003eb0:	08de      	lsrs	r6, r3, #3
 8003eb2:	00b6      	lsls	r6, r6, #2
 8003eb4:	1985      	adds	r5, r0, r6
 8003eb6:	9501      	str	r5, [sp, #4]
 8003eb8:	6a2d      	ldr	r5, [r5, #32]
 8003eba:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ebc:	2707      	movs	r7, #7
 8003ebe:	401f      	ands	r7, r3
 8003ec0:	00bf      	lsls	r7, r7, #2
 8003ec2:	250f      	movs	r5, #15
 8003ec4:	40bd      	lsls	r5, r7
 8003ec6:	46a9      	mov	r9, r5
 8003ec8:	4655      	mov	r5, sl
 8003eca:	464e      	mov	r6, r9
 8003ecc:	43b5      	bics	r5, r6
 8003ece:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ed0:	690d      	ldr	r5, [r1, #16]
 8003ed2:	40bd      	lsls	r5, r7
 8003ed4:	002f      	movs	r7, r5
 8003ed6:	4655      	mov	r5, sl
 8003ed8:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003eda:	9d01      	ldr	r5, [sp, #4]
 8003edc:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 8003ede:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ee0:	0026      	movs	r6, r4
 8003ee2:	4096      	lsls	r6, r2
 8003ee4:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	4026      	ands	r6, r4
 8003eea:	4096      	lsls	r6, r2
 8003eec:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003eee:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ef0:	684e      	ldr	r6, [r1, #4]
 8003ef2:	25c0      	movs	r5, #192	@ 0xc0
 8003ef4:	02ad      	lsls	r5, r5, #10
 8003ef6:	422e      	tst	r6, r5
 8003ef8:	d0b8      	beq.n	8003e6c <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 8003efa:	089f      	lsrs	r7, r3, #2
 8003efc:	00bf      	lsls	r7, r7, #2
 8003efe:	4d1d      	ldr	r5, [pc, #116]	@ (8003f74 <HAL_GPIO_Init+0x1c8>)
 8003f00:	46a9      	mov	r9, r5
 8003f02:	444f      	add	r7, r9
 8003f04:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8003f06:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f08:	0025      	movs	r5, r4
 8003f0a:	401d      	ands	r5, r3
 8003f0c:	00ed      	lsls	r5, r5, #3
 8003f0e:	46aa      	mov	sl, r5
 8003f10:	250f      	movs	r5, #15
 8003f12:	4656      	mov	r6, sl
 8003f14:	40b5      	lsls	r5, r6
 8003f16:	9e01      	ldr	r6, [sp, #4]
 8003f18:	43ae      	bics	r6, r5
 8003f1a:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f1c:	25a0      	movs	r5, #160	@ 0xa0
 8003f1e:	05ed      	lsls	r5, r5, #23
 8003f20:	42a8      	cmp	r0, r5
 8003f22:	d100      	bne.n	8003f26 <HAL_GPIO_Init+0x17a>
 8003f24:	e769      	b.n	8003dfa <HAL_GPIO_Init+0x4e>
 8003f26:	4e14      	ldr	r6, [pc, #80]	@ (8003f78 <HAL_GPIO_Init+0x1cc>)
 8003f28:	42b0      	cmp	r0, r6
 8003f2a:	d009      	beq.n	8003f40 <HAL_GPIO_Init+0x194>
 8003f2c:	4e13      	ldr	r6, [pc, #76]	@ (8003f7c <HAL_GPIO_Init+0x1d0>)
 8003f2e:	42b0      	cmp	r0, r6
 8003f30:	d008      	beq.n	8003f44 <HAL_GPIO_Init+0x198>
 8003f32:	4d13      	ldr	r5, [pc, #76]	@ (8003f80 <HAL_GPIO_Init+0x1d4>)
 8003f34:	1946      	adds	r6, r0, r5
 8003f36:	1e75      	subs	r5, r6, #1
 8003f38:	41ae      	sbcs	r6, r5
 8003f3a:	0076      	lsls	r6, r6, #1
 8003f3c:	3603      	adds	r6, #3
 8003f3e:	e75d      	b.n	8003dfc <HAL_GPIO_Init+0x50>
 8003f40:	2601      	movs	r6, #1
 8003f42:	e75b      	b.n	8003dfc <HAL_GPIO_Init+0x50>
 8003f44:	2602      	movs	r6, #2
 8003f46:	e759      	b.n	8003dfc <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 8003f48:	4665      	mov	r5, ip
 8003f4a:	4656      	mov	r6, sl
 8003f4c:	432e      	orrs	r6, r5
 8003f4e:	e769      	b.n	8003e24 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8003f50:	4665      	mov	r5, ip
 8003f52:	4656      	mov	r6, sl
 8003f54:	432e      	orrs	r6, r5
 8003f56:	e772      	b.n	8003e3e <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 8003f58:	4665      	mov	r5, ip
 8003f5a:	432e      	orrs	r6, r5
 8003f5c:	e779      	b.n	8003e52 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 8003f5e:	4665      	mov	r5, ip
 8003f60:	4335      	orrs	r5, r6
 8003f62:	002e      	movs	r6, r5
 8003f64:	e77f      	b.n	8003e66 <HAL_GPIO_Init+0xba>
  }
}
 8003f66:	b003      	add	sp, #12
 8003f68:	bcf0      	pop	{r4, r5, r6, r7}
 8003f6a:	46bb      	mov	fp, r7
 8003f6c:	46b2      	mov	sl, r6
 8003f6e:	46a9      	mov	r9, r5
 8003f70:	46a0      	mov	r8, r4
 8003f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f74:	40021800 	.word	0x40021800
 8003f78:	50000400 	.word	0x50000400
 8003f7c:	50000800 	.word	0x50000800
 8003f80:	affff400 	.word	0xaffff400

08003f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f84:	b510      	push	{r4, lr}
 8003f86:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4218      	tst	r0, r3
 8003f8e:	d104      	bne.n	8003f9a <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003f90:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	4223      	tst	r3, r4
 8003f96:	d105      	bne.n	8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8003f98:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f9c:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003f9e:	f7fc ffeb 	bl	8000f78 <HAL_GPIO_EXTI_Rising_Callback>
 8003fa2:	e7f5      	b.n	8003f90 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003fa4:	4b02      	ldr	r3, [pc, #8]	@ (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa6:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003fa8:	0020      	movs	r0, r4
 8003faa:	f7fc ff7f 	bl	8000eac <HAL_GPIO_EXTI_Falling_Callback>
}
 8003fae:	e7f3      	b.n	8003f98 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8003fb0:	40021800 	.word	0x40021800

08003fb4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fb4:	6802      	ldr	r2, [r0, #0]
 8003fb6:	6993      	ldr	r3, [r2, #24]
 8003fb8:	079b      	lsls	r3, r3, #30
 8003fba:	d501      	bpl.n	8003fc0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	07d2      	lsls	r2, r2, #31
 8003fc6:	d403      	bmi.n	8003fd0 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	619a      	str	r2, [r3, #24]
  }
}
 8003fd0:	4770      	bx	lr
	...

08003fd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fd4:	b530      	push	{r4, r5, lr}
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fd6:	6800      	ldr	r0, [r0, #0]
 8003fd8:	6844      	ldr	r4, [r0, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fda:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fdc:	9d03      	ldr	r5, [sp, #12]
 8003fde:	432b      	orrs	r3, r5
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	0589      	lsls	r1, r1, #22
 8003fe4:	0d89      	lsrs	r1, r1, #22
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	0052      	lsls	r2, r2, #1
 8003fea:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fec:	0d6b      	lsrs	r3, r5, #21
 8003fee:	2180      	movs	r1, #128	@ 0x80
 8003ff0:	00c9      	lsls	r1, r1, #3
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	4902      	ldr	r1, [pc, #8]	@ (8004000 <I2C_TransferConfig+0x2c>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	439c      	bics	r4, r3
 8003ffa:	4322      	orrs	r2, r4
 8003ffc:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ffe:	bd30      	pop	{r4, r5, pc}
 8004000:	03ff63ff 	.word	0x03ff63ff

08004004 <I2C_IsErrorOccurred>:
{
 8004004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004006:	46d6      	mov	lr, sl
 8004008:	464f      	mov	r7, r9
 800400a:	4646      	mov	r6, r8
 800400c:	b5c0      	push	{r6, r7, lr}
 800400e:	0004      	movs	r4, r0
 8004010:	000d      	movs	r5, r1
 8004012:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8004014:	6801      	ldr	r1, [r0, #0]
 8004016:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004018:	2210      	movs	r2, #16
 800401a:	0016      	movs	r6, r2
 800401c:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 800401e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004020:	421a      	tst	r2, r3
 8004022:	d044      	beq.n	80040ae <I2C_IsErrorOccurred+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004024:	2310      	movs	r3, #16
 8004026:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 800402c:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800402e:	2720      	movs	r7, #32
 8004030:	6821      	ldr	r1, [r4, #0]
 8004032:	698b      	ldr	r3, [r1, #24]
 8004034:	421f      	tst	r7, r3
 8004036:	d131      	bne.n	800409c <I2C_IsErrorOccurred+0x98>
 8004038:	2e00      	cmp	r6, #0
 800403a:	d133      	bne.n	80040a4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800403c:	1c6b      	adds	r3, r5, #1
 800403e:	d0f8      	beq.n	8004032 <I2C_IsErrorOccurred+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fe fdfc 	bl	8002c3c <HAL_GetTick>
 8004044:	4643      	mov	r3, r8
 8004046:	1ac0      	subs	r0, r0, r3
 8004048:	42a8      	cmp	r0, r5
 800404a:	d801      	bhi.n	8004050 <I2C_IsErrorOccurred+0x4c>
 800404c:	2d00      	cmp	r5, #0
 800404e:	d1ef      	bne.n	8004030 <I2C_IsErrorOccurred+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8004054:	2342      	movs	r3, #66	@ 0x42
 8004056:	5ce3      	ldrb	r3, [r4, r3]
 8004058:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800405a:	6991      	ldr	r1, [r2, #24]
 800405c:	0409      	lsls	r1, r1, #16
 800405e:	d503      	bpl.n	8004068 <I2C_IsErrorOccurred+0x64>
 8004060:	0440      	lsls	r0, r0, #17
 8004062:	d401      	bmi.n	8004068 <I2C_IsErrorOccurred+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8004064:	2b20      	cmp	r3, #32
 8004066:	d110      	bne.n	800408a <I2C_IsErrorOccurred+0x86>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004068:	2320      	movs	r3, #32
 800406a:	469a      	mov	sl, r3
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4652      	mov	r2, sl
 8004072:	421a      	tst	r2, r3
 8004074:	d1dc      	bne.n	8004030 <I2C_IsErrorOccurred+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004076:	f7fe fde1 	bl	8002c3c <HAL_GetTick>
 800407a:	4643      	mov	r3, r8
 800407c:	1ac0      	subs	r0, r0, r3
 800407e:	2819      	cmp	r0, #25
 8004080:	d9f4      	bls.n	800406c <I2C_IsErrorOccurred+0x68>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	2320      	movs	r3, #32
 8004084:	4699      	mov	r9, r3
              status = HAL_ERROR;
 8004086:	2601      	movs	r6, #1
 8004088:	e7d2      	b.n	8004030 <I2C_IsErrorOccurred+0x2c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800408a:	6851      	ldr	r1, [r2, #4]
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	01db      	lsls	r3, r3, #7
 8004090:	430b      	orrs	r3, r1
 8004092:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8004094:	f7fe fdd2 	bl	8002c3c <HAL_GetTick>
 8004098:	4680      	mov	r8, r0
 800409a:	e7e5      	b.n	8004068 <I2C_IsErrorOccurred+0x64>
    if (status == HAL_OK)
 800409c:	2e00      	cmp	r6, #0
 800409e:	d101      	bne.n	80040a4 <I2C_IsErrorOccurred+0xa0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a0:	2320      	movs	r3, #32
 80040a2:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80040a4:	2604      	movs	r6, #4
 80040a6:	464b      	mov	r3, r9
 80040a8:	4333      	orrs	r3, r6
 80040aa:	001e      	movs	r6, r3
    status = HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040b2:	05d9      	lsls	r1, r3, #23
 80040b4:	d504      	bpl.n	80040c0 <I2C_IsErrorOccurred+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 80040b6:	2101      	movs	r1, #1
 80040b8:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040ba:	31ff      	adds	r1, #255	@ 0xff
 80040bc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80040be:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040c0:	055a      	lsls	r2, r3, #21
 80040c2:	d526      	bpl.n	8004112 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_OVR;
 80040c4:	2208      	movs	r2, #8
 80040c6:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	2180      	movs	r1, #128	@ 0x80
 80040cc:	00c9      	lsls	r1, r1, #3
 80040ce:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040d0:	059b      	lsls	r3, r3, #22
 80040d2:	d505      	bpl.n	80040e0 <I2C_IsErrorOccurred+0xdc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80040d4:	2302      	movs	r3, #2
 80040d6:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	0092      	lsls	r2, r2, #2
 80040de:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7ff ff67 	bl	8003fb4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	6853      	ldr	r3, [r2, #4]
 80040ea:	490c      	ldr	r1, [pc, #48]	@ (800411c <I2C_IsErrorOccurred+0x118>)
 80040ec:	400b      	ands	r3, r1
 80040ee:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80040f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80040f2:	4333      	orrs	r3, r6
 80040f4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	2341      	movs	r3, #65	@ 0x41
 80040f8:	2220      	movs	r2, #32
 80040fa:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	3222      	adds	r2, #34	@ 0x22
 8004100:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8004102:	3a02      	subs	r2, #2
 8004104:	54a3      	strb	r3, [r4, r2]
 8004106:	2001      	movs	r0, #1
}
 8004108:	bce0      	pop	{r5, r6, r7}
 800410a:	46ba      	mov	sl, r7
 800410c:	46b1      	mov	r9, r6
 800410e:	46a8      	mov	r8, r5
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004112:	059b      	lsls	r3, r3, #22
 8004114:	d4de      	bmi.n	80040d4 <I2C_IsErrorOccurred+0xd0>
  if (status != HAL_OK)
 8004116:	2800      	cmp	r0, #0
 8004118:	d0f6      	beq.n	8004108 <I2C_IsErrorOccurred+0x104>
 800411a:	e7e1      	b.n	80040e0 <I2C_IsErrorOccurred+0xdc>
 800411c:	fe00e800 	.word	0xfe00e800

08004120 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	0004      	movs	r4, r0
 8004124:	000d      	movs	r5, r1
 8004126:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004128:	2702      	movs	r7, #2
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	421f      	tst	r7, r3
 8004130:	d120      	bne.n	8004174 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	0032      	movs	r2, r6
 8004134:	0029      	movs	r1, r5
 8004136:	0020      	movs	r0, r4
 8004138:	f7ff ff64 	bl	8004004 <I2C_IsErrorOccurred>
 800413c:	2800      	cmp	r0, #0
 800413e:	d11b      	bne.n	8004178 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8004140:	1c6b      	adds	r3, r5, #1
 8004142:	d0f2      	beq.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004144:	f7fe fd7a 	bl	8002c3c <HAL_GetTick>
 8004148:	1b80      	subs	r0, r0, r6
 800414a:	42a8      	cmp	r0, r5
 800414c:	d801      	bhi.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800414e:	2d00      	cmp	r5, #0
 8004150:	d1eb      	bne.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	079b      	lsls	r3, r3, #30
 8004158:	d4e7      	bmi.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800415a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800415c:	2220      	movs	r2, #32
 800415e:	4313      	orrs	r3, r2
 8004160:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004162:	2341      	movs	r3, #65	@ 0x41
 8004164:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	2300      	movs	r3, #0
 8004168:	3222      	adds	r2, #34	@ 0x22
 800416a:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 800416c:	3a02      	subs	r2, #2
 800416e:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8004170:	2001      	movs	r0, #1
 8004172:	e000      	b.n	8004176 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  return HAL_OK;
 8004174:	2000      	movs	r0, #0
}
 8004176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004178:	2001      	movs	r0, #1
 800417a:	e7fc      	b.n	8004176 <I2C_WaitOnTXISFlagUntilTimeout+0x56>

0800417c <I2C_WaitOnFlagUntilTimeout>:
{
 800417c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417e:	46d6      	mov	lr, sl
 8004180:	4647      	mov	r7, r8
 8004182:	b580      	push	{r7, lr}
 8004184:	b083      	sub	sp, #12
 8004186:	0007      	movs	r7, r0
 8004188:	000d      	movs	r5, r1
 800418a:	0016      	movs	r6, r2
 800418c:	4698      	mov	r8, r3
 800418e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004190:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004192:	9201      	str	r2, [sp, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699c      	ldr	r4, [r3, #24]
 8004198:	402c      	ands	r4, r5
 800419a:	1b64      	subs	r4, r4, r5
 800419c:	4263      	negs	r3, r4
 800419e:	415c      	adcs	r4, r3
 80041a0:	42b4      	cmp	r4, r6
 80041a2:	d128      	bne.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a4:	4652      	mov	r2, sl
 80041a6:	4641      	mov	r1, r8
 80041a8:	0038      	movs	r0, r7
 80041aa:	f7ff ff2b 	bl	8004004 <I2C_IsErrorOccurred>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d127      	bne.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	4643      	mov	r3, r8
 80041b4:	3301      	adds	r3, #1
 80041b6:	d0ed      	beq.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7fe fd40 	bl	8002c3c <HAL_GetTick>
 80041bc:	4653      	mov	r3, sl
 80041be:	1ac0      	subs	r0, r0, r3
 80041c0:	4540      	cmp	r0, r8
 80041c2:	d802      	bhi.n	80041ca <I2C_WaitOnFlagUntilTimeout+0x4e>
 80041c4:	4643      	mov	r3, r8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e4      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	402b      	ands	r3, r5
 80041d0:	1b5b      	subs	r3, r3, r5
 80041d2:	425a      	negs	r2, r3
 80041d4:	4153      	adcs	r3, r2
 80041d6:	9a01      	ldr	r2, [sp, #4]
 80041d8:	4293      	cmp	r3, r2
 80041da:	d1db      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041de:	2220      	movs	r2, #32
 80041e0:	4313      	orrs	r3, r2
 80041e2:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	2341      	movs	r3, #65	@ 0x41
 80041e6:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	3222      	adds	r2, #34	@ 0x22
 80041ec:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 80041ee:	3a02      	subs	r2, #2
 80041f0:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 80041f2:	2001      	movs	r0, #1
 80041f4:	e000      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80041f6:	2000      	movs	r0, #0
}
 80041f8:	b003      	add	sp, #12
 80041fa:	bcc0      	pop	{r6, r7}
 80041fc:	46ba      	mov	sl, r7
 80041fe:	46b0      	mov	r8, r6
 8004200:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004202:	2001      	movs	r0, #1
 8004204:	e7f8      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x7c>

08004206 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004208:	46c6      	mov	lr, r8
 800420a:	b500      	push	{lr}
 800420c:	0005      	movs	r5, r0
 800420e:	000e      	movs	r6, r1
 8004210:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004212:	6803      	ldr	r3, [r0, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	069b      	lsls	r3, r3, #26
 8004218:	d428      	bmi.n	800426c <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800421a:	2320      	movs	r3, #32
 800421c:	4698      	mov	r8, r3
 800421e:	e009      	b.n	8004234 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4642      	mov	r2, r8
 8004226:	421a      	tst	r2, r3
 8004228:	d013      	beq.n	8004252 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	4642      	mov	r2, r8
 8004230:	421a      	tst	r2, r3
 8004232:	d11e      	bne.n	8004272 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004234:	003a      	movs	r2, r7
 8004236:	0031      	movs	r1, r6
 8004238:	0028      	movs	r0, r5
 800423a:	f7ff fee3 	bl	8004004 <I2C_IsErrorOccurred>
 800423e:	1e04      	subs	r4, r0, #0
 8004240:	d116      	bne.n	8004270 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe fcfb 	bl	8002c3c <HAL_GetTick>
 8004246:	1bc0      	subs	r0, r0, r7
 8004248:	42b0      	cmp	r0, r6
 800424a:	d8e9      	bhi.n	8004220 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
 800424c:	2e00      	cmp	r6, #0
 800424e:	d1ec      	bne.n	800422a <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
 8004250:	e7e6      	b.n	8004220 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004252:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004254:	2220      	movs	r2, #32
 8004256:	4313      	orrs	r3, r2
 8004258:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800425a:	2341      	movs	r3, #65	@ 0x41
 800425c:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800425e:	2300      	movs	r3, #0
 8004260:	3222      	adds	r2, #34	@ 0x22
 8004262:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8004264:	3a02      	subs	r2, #2
 8004266:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8004268:	2401      	movs	r4, #1
 800426a:	e002      	b.n	8004272 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  return HAL_OK;
 800426c:	2400      	movs	r4, #0
 800426e:	e000      	b.n	8004272 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
      return HAL_ERROR;
 8004270:	2401      	movs	r4, #1
}
 8004272:	0020      	movs	r0, r4
 8004274:	bc80      	pop	{r7}
 8004276:	46b8      	mov	r8, r7
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800427c <HAL_I2C_Init>:
{
 800427c:	b510      	push	{r4, lr}
 800427e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8004280:	d060      	beq.n	8004344 <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004282:	2341      	movs	r3, #65	@ 0x41
 8004284:	5cc3      	ldrb	r3, [r0, r3]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d048      	beq.n	800431c <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800428a:	2341      	movs	r3, #65	@ 0x41
 800428c:	2224      	movs	r2, #36	@ 0x24
 800428e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	438b      	bics	r3, r1
 8004298:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	492a      	ldr	r1, [pc, #168]	@ (8004348 <HAL_I2C_Init+0xcc>)
 80042a0:	400b      	ands	r3, r1
 80042a2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	6893      	ldr	r3, [r2, #8]
 80042a8:	4928      	ldr	r1, [pc, #160]	@ (800434c <HAL_I2C_Init+0xd0>)
 80042aa:	400b      	ands	r3, r1
 80042ac:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ae:	68e3      	ldr	r3, [r4, #12]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d039      	beq.n	8004328 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	68a1      	ldr	r1, [r4, #8]
 80042b8:	2384      	movs	r3, #132	@ 0x84
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	430b      	orrs	r3, r1
 80042be:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042c0:	68e3      	ldr	r3, [r4, #12]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d037      	beq.n	8004336 <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042c6:	6822      	ldr	r2, [r4, #0]
 80042c8:	6853      	ldr	r3, [r2, #4]
 80042ca:	4921      	ldr	r1, [pc, #132]	@ (8004350 <HAL_I2C_Init+0xd4>)
 80042cc:	400b      	ands	r3, r1
 80042ce:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	6851      	ldr	r1, [r2, #4]
 80042d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004354 <HAL_I2C_Init+0xd8>)
 80042d6:	430b      	orrs	r3, r1
 80042d8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	68d3      	ldr	r3, [r2, #12]
 80042de:	491b      	ldr	r1, [pc, #108]	@ (800434c <HAL_I2C_Init+0xd0>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042e4:	6821      	ldr	r1, [r4, #0]
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	6962      	ldr	r2, [r4, #20]
 80042ea:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042ec:	69a2      	ldr	r2, [r4, #24]
 80042ee:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	69e3      	ldr	r3, [r4, #28]
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	6813      	ldr	r3, [r2, #0]
 8004302:	2101      	movs	r1, #1
 8004304:	430b      	orrs	r3, r1
 8004306:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004308:	2300      	movs	r3, #0
 800430a:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800430c:	2241      	movs	r2, #65	@ 0x41
 800430e:	311f      	adds	r1, #31
 8004310:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004312:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	3201      	adds	r2, #1
 8004316:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004318:	2000      	movs	r0, #0
}
 800431a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800431c:	3340      	adds	r3, #64	@ 0x40
 800431e:	2200      	movs	r2, #0
 8004320:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8004322:	f7fe fa69 	bl	80027f8 <HAL_I2C_MspInit>
 8004326:	e7b0      	b.n	800428a <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	68a1      	ldr	r1, [r4, #8]
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	430b      	orrs	r3, r1
 8004332:	6093      	str	r3, [r2, #8]
 8004334:	e7c4      	b.n	80042c0 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	6851      	ldr	r1, [r2, #4]
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	430b      	orrs	r3, r1
 8004340:	6053      	str	r3, [r2, #4]
 8004342:	e7c5      	b.n	80042d0 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8004344:	2001      	movs	r0, #1
 8004346:	e7e8      	b.n	800431a <HAL_I2C_Init+0x9e>
 8004348:	f0ffffff 	.word	0xf0ffffff
 800434c:	ffff7fff 	.word	0xffff7fff
 8004350:	fffff7ff 	.word	0xfffff7ff
 8004354:	02008000 	.word	0x02008000

08004358 <HAL_I2C_Mem_Write>:
{
 8004358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435a:	b087      	sub	sp, #28
 800435c:	0004      	movs	r4, r0
 800435e:	9103      	str	r1, [sp, #12]
 8004360:	9205      	str	r2, [sp, #20]
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	ab0c      	add	r3, sp, #48	@ 0x30
 8004366:	cb20      	ldmia	r3!, {r5}
 8004368:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	2341      	movs	r3, #65	@ 0x41
 800436c:	5cc3      	ldrb	r3, [r0, r3]
 800436e:	2b20      	cmp	r3, #32
 8004370:	d000      	beq.n	8004374 <HAL_I2C_Mem_Write+0x1c>
 8004372:	e0d8      	b.n	8004526 <HAL_I2C_Mem_Write+0x1ce>
    if ((pData == NULL) || (Size == 0U))
 8004374:	2d00      	cmp	r5, #0
 8004376:	d054      	beq.n	8004422 <HAL_I2C_Mem_Write+0xca>
 8004378:	2e00      	cmp	r6, #0
 800437a:	d052      	beq.n	8004422 <HAL_I2C_Mem_Write+0xca>
    __HAL_LOCK(hi2c);
 800437c:	2340      	movs	r3, #64	@ 0x40
 800437e:	5cc3      	ldrb	r3, [r0, r3]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d100      	bne.n	8004386 <HAL_I2C_Mem_Write+0x2e>
 8004384:	e0d2      	b.n	800452c <HAL_I2C_Mem_Write+0x1d4>
 8004386:	2340      	movs	r3, #64	@ 0x40
 8004388:	2201      	movs	r2, #1
 800438a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 800438c:	f7fe fc56 	bl	8002c3c <HAL_GetTick>
 8004390:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	9000      	str	r0, [sp, #0]
 8004396:	2319      	movs	r3, #25
 8004398:	2201      	movs	r2, #1
 800439a:	0209      	lsls	r1, r1, #8
 800439c:	0020      	movs	r0, r4
 800439e:	f7ff feed 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 80043a2:	0003      	movs	r3, r0
      return HAL_ERROR;
 80043a4:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d000      	beq.n	80043ac <HAL_I2C_Mem_Write+0x54>
 80043aa:	e0bd      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ac:	3341      	adds	r3, #65	@ 0x41
 80043ae:	2221      	movs	r2, #33	@ 0x21
 80043b0:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b2:	3301      	adds	r3, #1
 80043b4:	321f      	adds	r2, #31
 80043b6:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80043bc:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043be:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043c0:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043c2:	3380      	adds	r3, #128	@ 0x80
 80043c4:	9d04      	ldr	r5, [sp, #16]
 80043c6:	b2ea      	uxtb	r2, r5
 80043c8:	495c      	ldr	r1, [pc, #368]	@ (800453c <HAL_I2C_Mem_Write+0x1e4>)
 80043ca:	9100      	str	r1, [sp, #0]
 80043cc:	045b      	lsls	r3, r3, #17
 80043ce:	9903      	ldr	r1, [sp, #12]
 80043d0:	0020      	movs	r0, r4
 80043d2:	f7ff fdff 	bl	8003fd4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	003a      	movs	r2, r7
 80043d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80043da:	0020      	movs	r0, r4
 80043dc:	f7ff fea0 	bl	8004120 <I2C_WaitOnTXISFlagUntilTimeout>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d132      	bne.n	800444a <HAL_I2C_Mem_Write+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e4:	2d01      	cmp	r5, #1
 80043e6:	d121      	bne.n	800442c <HAL_I2C_Mem_Write+0xd4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	466a      	mov	r2, sp
 80043ec:	7d16      	ldrb	r6, [r2, #20]
 80043ee:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043f0:	9700      	str	r7, [sp, #0]
 80043f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	@ 0x80
 80043f8:	0020      	movs	r0, r4
 80043fa:	f7ff febf 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043fe:	2800      	cmp	r0, #0
 8004400:	d123      	bne.n	800444a <HAL_I2C_Mem_Write+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004402:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2bff      	cmp	r3, #255	@ 0xff
 8004408:	d924      	bls.n	8004454 <HAL_I2C_Mem_Write+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800440a:	23ff      	movs	r3, #255	@ 0xff
 800440c:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800440e:	3b7f      	subs	r3, #127	@ 0x7f
 8004410:	2200      	movs	r2, #0
 8004412:	9200      	str	r2, [sp, #0]
 8004414:	045b      	lsls	r3, r3, #17
 8004416:	32ff      	adds	r2, #255	@ 0xff
 8004418:	9903      	ldr	r1, [sp, #12]
 800441a:	0020      	movs	r0, r4
 800441c:	f7ff fdda 	bl	8003fd4 <I2C_TransferConfig>
 8004420:	e035      	b.n	800448e <HAL_I2C_Mem_Write+0x136>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004428:	2001      	movs	r0, #1
 800442a:	e07d      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	9d05      	ldr	r5, [sp, #20]
 8004430:	0a2a      	lsrs	r2, r5, #8
 8004432:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004434:	003a      	movs	r2, r7
 8004436:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004438:	0020      	movs	r0, r4
 800443a:	f7ff fe71 	bl	8004120 <I2C_WaitOnTXISFlagUntilTimeout>
 800443e:	2800      	cmp	r0, #0
 8004440:	d103      	bne.n	800444a <HAL_I2C_Mem_Write+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	b2ee      	uxtb	r6, r5
 8004446:	629e      	str	r6, [r3, #40]	@ 0x28
 8004448:	e7d2      	b.n	80043f0 <HAL_I2C_Mem_Write+0x98>
      __HAL_UNLOCK(hi2c);
 800444a:	2340      	movs	r3, #64	@ 0x40
 800444c:	2200      	movs	r2, #0
 800444e:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8004450:	2001      	movs	r0, #1
 8004452:	e069      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
      hi2c->XferSize = hi2c->XferCount;
 8004454:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004456:	b292      	uxth	r2, r2
 8004458:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800445a:	2380      	movs	r3, #128	@ 0x80
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	2100      	movs	r1, #0
 8004460:	9100      	str	r1, [sp, #0]
 8004462:	049b      	lsls	r3, r3, #18
 8004464:	9903      	ldr	r1, [sp, #12]
 8004466:	0020      	movs	r0, r4
 8004468:	f7ff fdb4 	bl	8003fd4 <I2C_TransferConfig>
 800446c:	e00f      	b.n	800448e <HAL_I2C_Mem_Write+0x136>
          hi2c->XferSize = hi2c->XferCount;
 800446e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004470:	b292      	uxth	r2, r2
 8004472:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	2100      	movs	r1, #0
 800447a:	9100      	str	r1, [sp, #0]
 800447c:	049b      	lsls	r3, r3, #18
 800447e:	9903      	ldr	r1, [sp, #12]
 8004480:	0020      	movs	r0, r4
 8004482:	f7ff fda7 	bl	8003fd4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004486:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d034      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x1a0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448e:	003a      	movs	r2, r7
 8004490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004492:	0020      	movs	r0, r4
 8004494:	f7ff fe44 	bl	8004120 <I2C_WaitOnTXISFlagUntilTimeout>
 8004498:	2800      	cmp	r0, #0
 800449a:	d149      	bne.n	8004530 <HAL_I2C_Mem_Write+0x1d8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80044a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80044a6:	3301      	adds	r3, #1
 80044a8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80044aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80044b2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ba:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80044bc:	b292      	uxth	r2, r2
 80044be:	2a00      	cmp	r2, #0
 80044c0:	d0e1      	beq.n	8004486 <HAL_I2C_Mem_Write+0x12e>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1df      	bne.n	8004486 <HAL_I2C_Mem_Write+0x12e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	9700      	str	r7, [sp, #0]
 80044c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044ca:	2200      	movs	r2, #0
 80044cc:	2180      	movs	r1, #128	@ 0x80
 80044ce:	0020      	movs	r0, r4
 80044d0:	f7ff fe54 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d12d      	bne.n	8004534 <HAL_I2C_Mem_Write+0x1dc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2bff      	cmp	r3, #255	@ 0xff
 80044de:	d9c6      	bls.n	800446e <HAL_I2C_Mem_Write+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044e0:	23ff      	movs	r3, #255	@ 0xff
 80044e2:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044e4:	3b7f      	subs	r3, #127	@ 0x7f
 80044e6:	2200      	movs	r2, #0
 80044e8:	9200      	str	r2, [sp, #0]
 80044ea:	045b      	lsls	r3, r3, #17
 80044ec:	32ff      	adds	r2, #255	@ 0xff
 80044ee:	9903      	ldr	r1, [sp, #12]
 80044f0:	0020      	movs	r0, r4
 80044f2:	f7ff fd6f 	bl	8003fd4 <I2C_TransferConfig>
 80044f6:	e7c6      	b.n	8004486 <HAL_I2C_Mem_Write+0x12e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f8:	003a      	movs	r2, r7
 80044fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80044fc:	0020      	movs	r0, r4
 80044fe:	f7ff fe82 	bl	8004206 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004502:	2800      	cmp	r0, #0
 8004504:	d118      	bne.n	8004538 <HAL_I2C_Mem_Write+0x1e0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	2220      	movs	r2, #32
 800450a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800450c:	6821      	ldr	r1, [r4, #0]
 800450e:	684b      	ldr	r3, [r1, #4]
 8004510:	4d0b      	ldr	r5, [pc, #44]	@ (8004540 <HAL_I2C_Mem_Write+0x1e8>)
 8004512:	402b      	ands	r3, r5
 8004514:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	2341      	movs	r3, #65	@ 0x41
 8004518:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800451a:	2300      	movs	r3, #0
 800451c:	3222      	adds	r2, #34	@ 0x22
 800451e:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8004520:	3a02      	subs	r2, #2
 8004522:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8004524:	e000      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
    return HAL_BUSY;
 8004526:	2002      	movs	r0, #2
}
 8004528:	b007      	add	sp, #28
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800452c:	2002      	movs	r0, #2
 800452e:	e7fb      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
        return HAL_ERROR;
 8004530:	2001      	movs	r0, #1
 8004532:	e7f9      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
          return HAL_ERROR;
 8004534:	2001      	movs	r0, #1
 8004536:	e7f7      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
      return HAL_ERROR;
 8004538:	2001      	movs	r0, #1
 800453a:	e7f5      	b.n	8004528 <HAL_I2C_Mem_Write+0x1d0>
 800453c:	80002000 	.word	0x80002000
 8004540:	fe00e800 	.word	0xfe00e800

08004544 <HAL_I2C_IsDeviceReady>:
{
 8004544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004546:	46de      	mov	lr, fp
 8004548:	464f      	mov	r7, r9
 800454a:	b580      	push	{r7, lr}
 800454c:	b087      	sub	sp, #28
 800454e:	0005      	movs	r5, r0
 8004550:	9103      	str	r1, [sp, #12]
 8004552:	9202      	str	r2, [sp, #8]
 8004554:	001c      	movs	r4, r3
  __IO uint32_t I2C_Trials = 0UL;
 8004556:	2300      	movs	r3, #0
 8004558:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	3341      	adds	r3, #65	@ 0x41
 800455c:	5cc3      	ldrb	r3, [r0, r3]
 800455e:	2b20      	cmp	r3, #32
 8004560:	d000      	beq.n	8004564 <HAL_I2C_IsDeviceReady+0x20>
 8004562:	e089      	b.n	8004678 <HAL_I2C_IsDeviceReady+0x134>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004564:	6803      	ldr	r3, [r0, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	d500      	bpl.n	800456e <HAL_I2C_IsDeviceReady+0x2a>
 800456c:	e086      	b.n	800467c <HAL_I2C_IsDeviceReady+0x138>
    __HAL_LOCK(hi2c);
 800456e:	2340      	movs	r3, #64	@ 0x40
 8004570:	5cc3      	ldrb	r3, [r0, r3]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d100      	bne.n	8004578 <HAL_I2C_IsDeviceReady+0x34>
 8004576:	e083      	b.n	8004680 <HAL_I2C_IsDeviceReady+0x13c>
 8004578:	2340      	movs	r3, #64	@ 0x40
 800457a:	2201      	movs	r2, #1
 800457c:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800457e:	3301      	adds	r3, #1
 8004580:	3223      	adds	r2, #35	@ 0x23
 8004582:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	2300      	movs	r3, #0
 8004586:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004588:	058b      	lsls	r3, r1, #22
 800458a:	0d9b      	lsrs	r3, r3, #22
 800458c:	469b      	mov	fp, r3
 800458e:	68eb      	ldr	r3, [r5, #12]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d014      	beq.n	80045be <HAL_I2C_IsDeviceReady+0x7a>
 8004594:	4b3d      	ldr	r3, [pc, #244]	@ (800468c <HAL_I2C_IsDeviceReady+0x148>)
 8004596:	465a      	mov	r2, fp
 8004598:	4313      	orrs	r3, r2
 800459a:	682a      	ldr	r2, [r5, #0]
 800459c:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800459e:	f7fe fb4d 	bl	8002c3c <HAL_GetTick>
 80045a2:	0007      	movs	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	6999      	ldr	r1, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045aa:	2320      	movs	r3, #32
 80045ac:	4013      	ands	r3, r2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	2210      	movs	r2, #16
 80045b0:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d129      	bne.n	800460a <HAL_I2C_IsDeviceReady+0xc6>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b6:	3320      	adds	r3, #32
 80045b8:	4699      	mov	r9, r3
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ba:	2610      	movs	r6, #16
 80045bc:	e00d      	b.n	80045da <HAL_I2C_IsDeviceReady+0x96>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	059a      	lsls	r2, r3, #22
 80045c2:	0d92      	lsrs	r2, r2, #22
 80045c4:	4b32      	ldr	r3, [pc, #200]	@ (8004690 <HAL_I2C_IsDeviceReady+0x14c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	e7e7      	b.n	800459a <HAL_I2C_IsDeviceReady+0x56>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ca:	682a      	ldr	r2, [r5, #0]
 80045cc:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ce:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d0:	4649      	mov	r1, r9
 80045d2:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d117      	bne.n	800460a <HAL_I2C_IsDeviceReady+0xc6>
        if (Timeout != HAL_MAX_DELAY)
 80045da:	1c63      	adds	r3, r4, #1
 80045dc:	d0f5      	beq.n	80045ca <HAL_I2C_IsDeviceReady+0x86>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe fb2d 	bl	8002c3c <HAL_GetTick>
 80045e2:	1bc0      	subs	r0, r0, r7
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d801      	bhi.n	80045ec <HAL_I2C_IsDeviceReady+0xa8>
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_I2C_IsDeviceReady+0x86>
            hi2c->State = HAL_I2C_STATE_READY;
 80045ec:	2220      	movs	r2, #32
 80045ee:	2341      	movs	r3, #65	@ 0x41
 80045f0:	54ea      	strb	r2, [r5, r3]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80045f4:	4313      	orrs	r3, r2
 80045f6:	646b      	str	r3, [r5, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 80045f8:	2340      	movs	r3, #64	@ 0x40
 80045fa:	2200      	movs	r2, #0
 80045fc:	54ea      	strb	r2, [r5, r3]
            return HAL_ERROR;
 80045fe:	2001      	movs	r0, #1
}
 8004600:	b007      	add	sp, #28
 8004602:	bcc0      	pop	{r6, r7}
 8004604:	46bb      	mov	fp, r7
 8004606:	46b1      	mov	r9, r6
 8004608:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800460a:	682b      	ldr	r3, [r5, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	06db      	lsls	r3, r3, #27
 8004610:	d520      	bpl.n	8004654 <HAL_I2C_IsDeviceReady+0x110>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004612:	9700      	str	r7, [sp, #0]
 8004614:	0023      	movs	r3, r4
 8004616:	2200      	movs	r2, #0
 8004618:	2120      	movs	r1, #32
 800461a:	0028      	movs	r0, r5
 800461c:	f7ff fdae 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8004620:	2800      	cmp	r0, #0
 8004622:	d131      	bne.n	8004688 <HAL_I2C_IsDeviceReady+0x144>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	3210      	adds	r2, #16
 800462e:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 8004630:	9b05      	ldr	r3, [sp, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	9305      	str	r3, [sp, #20]
    } while (I2C_Trials < Trials);
 8004636:	9b05      	ldr	r3, [sp, #20]
 8004638:	9a02      	ldr	r2, [sp, #8]
 800463a:	4293      	cmp	r3, r2
 800463c:	d3a7      	bcc.n	800458e <HAL_I2C_IsDeviceReady+0x4a>
    hi2c->State = HAL_I2C_STATE_READY;
 800463e:	2220      	movs	r2, #32
 8004640:	2341      	movs	r3, #65	@ 0x41
 8004642:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004646:	4313      	orrs	r3, r2
 8004648:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 800464a:	2340      	movs	r3, #64	@ 0x40
 800464c:	2200      	movs	r2, #0
 800464e:	54ea      	strb	r2, [r5, r3]
    return HAL_ERROR;
 8004650:	3001      	adds	r0, #1
 8004652:	e7d5      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004654:	9700      	str	r7, [sp, #0]
 8004656:	0023      	movs	r3, r4
 8004658:	2200      	movs	r2, #0
 800465a:	2120      	movs	r1, #32
 800465c:	0028      	movs	r0, r5
 800465e:	f7ff fd8d 	bl	800417c <I2C_WaitOnFlagUntilTimeout>
 8004662:	2800      	cmp	r0, #0
 8004664:	d10e      	bne.n	8004684 <HAL_I2C_IsDeviceReady+0x140>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004666:	682a      	ldr	r2, [r5, #0]
 8004668:	2320      	movs	r3, #32
 800466a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800466c:	2241      	movs	r2, #65	@ 0x41
 800466e:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8004670:	3320      	adds	r3, #32
 8004672:	2200      	movs	r2, #0
 8004674:	54ea      	strb	r2, [r5, r3]
        return HAL_OK;
 8004676:	e7c3      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_BUSY;
 8004678:	2002      	movs	r0, #2
 800467a:	e7c1      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
      return HAL_BUSY;
 800467c:	2002      	movs	r0, #2
 800467e:	e7bf      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
    __HAL_LOCK(hi2c);
 8004680:	2002      	movs	r0, #2
 8004682:	e7bd      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8004684:	2001      	movs	r0, #1
 8004686:	e7bb      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8004688:	2001      	movs	r0, #1
 800468a:	e7b9      	b.n	8004600 <HAL_I2C_IsDeviceReady+0xbc>
 800468c:	02002800 	.word	0x02002800
 8004690:	02002000 	.word	0x02002000

08004694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004694:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004696:	2341      	movs	r3, #65	@ 0x41
 8004698:	5cc3      	ldrb	r3, [r0, r3]
 800469a:	2b20      	cmp	r3, #32
 800469c:	d120      	bne.n	80046e0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469e:	3320      	adds	r3, #32
 80046a0:	5cc3      	ldrb	r3, [r0, r3]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d01e      	beq.n	80046e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80046a6:	2440      	movs	r4, #64	@ 0x40
 80046a8:	2201      	movs	r2, #1
 80046aa:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ac:	2541      	movs	r5, #65	@ 0x41
 80046ae:	2324      	movs	r3, #36	@ 0x24
 80046b0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b2:	6806      	ldr	r6, [r0, #0]
 80046b4:	6833      	ldr	r3, [r6, #0]
 80046b6:	4393      	bics	r3, r2
 80046b8:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ba:	6806      	ldr	r6, [r0, #0]
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	4f0a      	ldr	r7, [pc, #40]	@ (80046e8 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80046c0:	403b      	ands	r3, r7
 80046c2:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046c4:	6806      	ldr	r6, [r0, #0]
 80046c6:	6833      	ldr	r3, [r6, #0]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046cc:	6801      	ldr	r1, [r0, #0]
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d4:	2320      	movs	r3, #32
 80046d6:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	2300      	movs	r3, #0
 80046da:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80046dc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80046de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80046e0:	2002      	movs	r0, #2
 80046e2:	e7fc      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80046e4:	2002      	movs	r0, #2
 80046e6:	e7fa      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80046e8:	ffffefff 	.word	0xffffefff

080046ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ee:	2341      	movs	r3, #65	@ 0x41
 80046f0:	5cc3      	ldrb	r3, [r0, r3]
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d11e      	bne.n	8004734 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f6:	3320      	adds	r3, #32
 80046f8:	5cc3      	ldrb	r3, [r0, r3]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d01c      	beq.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80046fe:	2440      	movs	r4, #64	@ 0x40
 8004700:	2201      	movs	r2, #1
 8004702:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004704:	2541      	movs	r5, #65	@ 0x41
 8004706:	2324      	movs	r3, #36	@ 0x24
 8004708:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800470a:	6806      	ldr	r6, [r0, #0]
 800470c:	6833      	ldr	r3, [r6, #0]
 800470e:	4393      	bics	r3, r2
 8004710:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004712:	6806      	ldr	r6, [r0, #0]
 8004714:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004716:	4f09      	ldr	r7, [pc, #36]	@ (800473c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8004718:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800471a:	0209      	lsls	r1, r1, #8
 800471c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800471e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004720:	6801      	ldr	r1, [r0, #0]
 8004722:	680b      	ldr	r3, [r1, #0]
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004728:	2320      	movs	r3, #32
 800472a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472c:	2300      	movs	r3, #0
 800472e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8004730:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004734:	2002      	movs	r0, #2
 8004736:	e7fc      	b.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8004738:	2002      	movs	r0, #2
 800473a:	e7fa      	b.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800473c:	fffff0ff 	.word	0xfffff0ff

08004740 <HAL_PWR_EnableBkUpAccess>:
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004740:	4a03      	ldr	r2, [pc, #12]	@ (8004750 <HAL_PWR_EnableBkUpAccess+0x10>)
 8004742:	6811      	ldr	r1, [r2, #0]
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	430b      	orrs	r3, r1
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	4770      	bx	lr
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	40007000 	.word	0x40007000

08004754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004754:	b510      	push	{r4, lr}
 8004756:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004758:	4913      	ldr	r1, [pc, #76]	@ (80047a8 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800475a:	680b      	ldr	r3, [r1, #0]
 800475c:	4813      	ldr	r0, [pc, #76]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x58>)
 800475e:	4003      	ands	r3, r0
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004768:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800476a:	429a      	cmp	r2, r3
 800476c:	d000      	beq.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 800476e:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004770:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	0058      	lsls	r0, r3, #1
 8004776:	18c0      	adds	r0, r0, r3
 8004778:	0040      	lsls	r0, r0, #1
 800477a:	490e      	ldr	r1, [pc, #56]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x60>)
 800477c:	f7fb fcca 	bl	8000114 <__udivsi3>
 8004780:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004782:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	055b      	lsls	r3, r3, #21
 8004788:	d50a      	bpl.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800478a:	4907      	ldr	r1, [pc, #28]	@ (80047a8 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800478c:	2280      	movs	r2, #128	@ 0x80
 800478e:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8004790:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004792:	694b      	ldr	r3, [r1, #20]
 8004794:	4213      	tst	r3, r2
 8004796:	d005      	beq.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8004798:	2800      	cmp	r0, #0
 800479a:	d1f9      	bne.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 800479c:	2003      	movs	r0, #3
 800479e:	e7e6      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 80047a0:	2000      	movs	r0, #0
 80047a2:	e7e4      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x1a>
 80047a4:	2000      	movs	r0, #0
 80047a6:	e7e2      	b.n	800476e <HAL_PWREx_ControlVoltageScaling+0x1a>
 80047a8:	40007000 	.word	0x40007000
 80047ac:	fffff9ff 	.word	0xfffff9ff
 80047b0:	20000018 	.word	0x20000018
 80047b4:	000f4240 	.word	0x000f4240

080047b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	46ce      	mov	lr, r9
 80047bc:	4647      	mov	r7, r8
 80047be:	b580      	push	{r7, lr}
 80047c0:	b083      	sub	sp, #12
 80047c2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	d100      	bne.n	80047c8 <HAL_RCC_OscConfig+0x10>
 80047c6:	e23e      	b.n	8004c46 <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c8:	6803      	ldr	r3, [r0, #0]
 80047ca:	07db      	lsls	r3, r3, #31
 80047cc:	d538      	bpl.n	8004840 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ce:	4ac7      	ldr	r2, [pc, #796]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80047d0:	6891      	ldr	r1, [r2, #8]
 80047d2:	2338      	movs	r3, #56	@ 0x38
 80047d4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d6:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d026      	beq.n	800482a <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d027      	beq.n	8004830 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	2280      	movs	r2, #128	@ 0x80
 80047e4:	0252      	lsls	r2, r2, #9
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d07a      	beq.n	80048e0 <HAL_RCC_OscConfig+0x128>
 80047ea:	22a0      	movs	r2, #160	@ 0xa0
 80047ec:	02d2      	lsls	r2, r2, #11
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d07d      	beq.n	80048ee <HAL_RCC_OscConfig+0x136>
 80047f2:	4bbe      	ldr	r3, [pc, #760]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	49be      	ldr	r1, [pc, #760]	@ (8004af0 <HAL_RCC_OscConfig+0x338>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	49bd      	ldr	r1, [pc, #756]	@ (8004af4 <HAL_RCC_OscConfig+0x33c>)
 8004800:	400a      	ands	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d07d      	beq.n	8004906 <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fe fa17 	bl	8002c3c <HAL_GetTick>
 800480e:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004810:	4fb6      	ldr	r7, [pc, #728]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004812:	2680      	movs	r6, #128	@ 0x80
 8004814:	02b6      	lsls	r6, r6, #10
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4233      	tst	r3, r6
 800481a:	d111      	bne.n	8004840 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481c:	f7fe fa0e 	bl	8002c3c <HAL_GetTick>
 8004820:	1b40      	subs	r0, r0, r5
 8004822:	2864      	cmp	r0, #100	@ 0x64
 8004824:	d9f7      	bls.n	8004816 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8004826:	2003      	movs	r0, #3
 8004828:	e20e      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800482a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800482c:	0792      	lsls	r2, r2, #30
 800482e:	d1d7      	bne.n	80047e0 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	4bae      	ldr	r3, [pc, #696]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	039b      	lsls	r3, r3, #14
 8004836:	d503      	bpl.n	8004840 <HAL_RCC_OscConfig+0x88>
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d100      	bne.n	8004840 <HAL_RCC_OscConfig+0x88>
 800483e:	e208      	b.n	8004c52 <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	079b      	lsls	r3, r3, #30
 8004844:	d52a      	bpl.n	800489c <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004846:	4aa9      	ldr	r2, [pc, #676]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004848:	6891      	ldr	r1, [r2, #8]
 800484a:	2338      	movs	r3, #56	@ 0x38
 800484c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800484e:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004850:	2b10      	cmp	r3, #16
 8004852:	d068      	beq.n	8004926 <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004854:	2b00      	cmp	r3, #0
 8004856:	d16b      	bne.n	8004930 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004858:	4ba4      	ldr	r3, [pc, #656]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	055b      	lsls	r3, r3, #21
 800485e:	d500      	bpl.n	8004862 <HAL_RCC_OscConfig+0xaa>
 8004860:	e21a      	b.n	8004c98 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004862:	49a2      	ldr	r1, [pc, #648]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004864:	684a      	ldr	r2, [r1, #4]
 8004866:	6963      	ldr	r3, [r4, #20]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	48a3      	ldr	r0, [pc, #652]	@ (8004af8 <HAL_RCC_OscConfig+0x340>)
 800486c:	4002      	ands	r2, r0
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004872:	4a9e      	ldr	r2, [pc, #632]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004874:	6813      	ldr	r3, [r2, #0]
 8004876:	49a1      	ldr	r1, [pc, #644]	@ (8004afc <HAL_RCC_OscConfig+0x344>)
 8004878:	400b      	ands	r3, r1
 800487a:	6921      	ldr	r1, [r4, #16]
 800487c:	430b      	orrs	r3, r1
 800487e:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004880:	6813      	ldr	r3, [r2, #0]
 8004882:	499f      	ldr	r1, [pc, #636]	@ (8004b00 <HAL_RCC_OscConfig+0x348>)
 8004884:	049b      	lsls	r3, r3, #18
 8004886:	0f5b      	lsrs	r3, r3, #29
 8004888:	4a9e      	ldr	r2, [pc, #632]	@ (8004b04 <HAL_RCC_OscConfig+0x34c>)
 800488a:	40da      	lsrs	r2, r3
 800488c:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800488e:	4b9e      	ldr	r3, [pc, #632]	@ (8004b08 <HAL_RCC_OscConfig+0x350>)
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f7fe f98b 	bl	8002bac <HAL_InitTick>
 8004896:	2800      	cmp	r0, #0
 8004898:	d000      	beq.n	800489c <HAL_RCC_OscConfig+0xe4>
 800489a:	e1dc      	b.n	8004c56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	071b      	lsls	r3, r3, #28
 80048a0:	d400      	bmi.n	80048a4 <HAL_RCC_OscConfig+0xec>
 80048a2:	e08b      	b.n	80049bc <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048a4:	4b91      	ldr	r3, [pc, #580]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	2338      	movs	r3, #56	@ 0x38
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b18      	cmp	r3, #24
 80048ae:	d07d      	beq.n	80049ac <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b0:	69a3      	ldr	r3, [r4, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d100      	bne.n	80048b8 <HAL_RCC_OscConfig+0x100>
 80048b6:	e0c4      	b.n	8004a42 <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80048b8:	4a8c      	ldr	r2, [pc, #560]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80048ba:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80048bc:	2101      	movs	r1, #1
 80048be:	430b      	orrs	r3, r1
 80048c0:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c2:	f7fe f9bb 	bl	8002c3c <HAL_GetTick>
 80048c6:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c8:	4f88      	ldr	r7, [pc, #544]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80048ca:	2602      	movs	r6, #2
 80048cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048ce:	421e      	tst	r6, r3
 80048d0:	d174      	bne.n	80049bc <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d2:	f7fe f9b3 	bl	8002c3c <HAL_GetTick>
 80048d6:	1b40      	subs	r0, r0, r5
 80048d8:	2802      	cmp	r0, #2
 80048da:	d9f7      	bls.n	80048cc <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 80048dc:	2003      	movs	r0, #3
 80048de:	e1b3      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e0:	4a82      	ldr	r2, [pc, #520]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80048e2:	6811      	ldr	r1, [r2, #0]
 80048e4:	2380      	movs	r3, #128	@ 0x80
 80048e6:	025b      	lsls	r3, r3, #9
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	e78a      	b.n	8004804 <HAL_RCC_OscConfig+0x4c>
 80048ee:	4b7f      	ldr	r3, [pc, #508]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	2280      	movs	r2, #128	@ 0x80
 80048f4:	02d2      	lsls	r2, r2, #11
 80048f6:	430a      	orrs	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	0252      	lsls	r2, r2, #9
 8004900:	430a      	orrs	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e77e      	b.n	8004804 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004906:	f7fe f999 	bl	8002c3c <HAL_GetTick>
 800490a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800490c:	4f77      	ldr	r7, [pc, #476]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 800490e:	2680      	movs	r6, #128	@ 0x80
 8004910:	02b6      	lsls	r6, r6, #10
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4233      	tst	r3, r6
 8004916:	d093      	beq.n	8004840 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004918:	f7fe f990 	bl	8002c3c <HAL_GetTick>
 800491c:	1b40      	subs	r0, r0, r5
 800491e:	2864      	cmp	r0, #100	@ 0x64
 8004920:	d9f7      	bls.n	8004912 <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8004922:	2003      	movs	r0, #3
 8004924:	e190      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004926:	3b0d      	subs	r3, #13
 8004928:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800492a:	2b02      	cmp	r3, #2
 800492c:	d100      	bne.n	8004930 <HAL_RCC_OscConfig+0x178>
 800492e:	e1a3      	b.n	8004c78 <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004930:	68e3      	ldr	r3, [r4, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004936:	4a6d      	ldr	r2, [pc, #436]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004938:	6813      	ldr	r3, [r2, #0]
 800493a:	4970      	ldr	r1, [pc, #448]	@ (8004afc <HAL_RCC_OscConfig+0x344>)
 800493c:	400b      	ands	r3, r1
 800493e:	6921      	ldr	r1, [r4, #16]
 8004940:	430b      	orrs	r3, r1
 8004942:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004944:	6811      	ldr	r1, [r2, #0]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	430b      	orrs	r3, r1
 800494c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800494e:	f7fe f975 	bl	8002c3c <HAL_GetTick>
 8004952:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004954:	4f65      	ldr	r7, [pc, #404]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004956:	2680      	movs	r6, #128	@ 0x80
 8004958:	00f6      	lsls	r6, r6, #3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4233      	tst	r3, r6
 800495e:	d106      	bne.n	800496e <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004960:	f7fe f96c 	bl	8002c3c <HAL_GetTick>
 8004964:	1b40      	subs	r0, r0, r5
 8004966:	2802      	cmp	r0, #2
 8004968:	d9f7      	bls.n	800495a <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 800496a:	2003      	movs	r0, #3
 800496c:	e16c      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	495f      	ldr	r1, [pc, #380]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004970:	684a      	ldr	r2, [r1, #4]
 8004972:	6963      	ldr	r3, [r4, #20]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	4860      	ldr	r0, [pc, #384]	@ (8004af8 <HAL_RCC_OscConfig+0x340>)
 8004978:	4002      	ands	r2, r0
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]
 800497e:	e78d      	b.n	800489c <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8004980:	4a5a      	ldr	r2, [pc, #360]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	4961      	ldr	r1, [pc, #388]	@ (8004b0c <HAL_RCC_OscConfig+0x354>)
 8004986:	400b      	ands	r3, r1
 8004988:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800498a:	f7fe f957 	bl	8002c3c <HAL_GetTick>
 800498e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004990:	4f56      	ldr	r7, [pc, #344]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004992:	2680      	movs	r6, #128	@ 0x80
 8004994:	00f6      	lsls	r6, r6, #3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4233      	tst	r3, r6
 800499a:	d100      	bne.n	800499e <HAL_RCC_OscConfig+0x1e6>
 800499c:	e77e      	b.n	800489c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499e:	f7fe f94d 	bl	8002c3c <HAL_GetTick>
 80049a2:	1b40      	subs	r0, r0, r5
 80049a4:	2802      	cmp	r0, #2
 80049a6:	d9f6      	bls.n	8004996 <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 80049a8:	2003      	movs	r0, #3
 80049aa:	e14d      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80049ac:	4b4f      	ldr	r3, [pc, #316]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80049ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b0:	079b      	lsls	r3, r3, #30
 80049b2:	d503      	bpl.n	80049bc <HAL_RCC_OscConfig+0x204>
 80049b4:	69a3      	ldr	r3, [r4, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d100      	bne.n	80049bc <HAL_RCC_OscConfig+0x204>
 80049ba:	e14e      	b.n	8004c5a <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	075b      	lsls	r3, r3, #29
 80049c0:	d400      	bmi.n	80049c4 <HAL_RCC_OscConfig+0x20c>
 80049c2:	e0ac      	b.n	8004b1e <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049c4:	4b49      	ldr	r3, [pc, #292]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	2338      	movs	r3, #56	@ 0x38
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d04c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049d0:	4b46      	ldr	r3, [pc, #280]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80049d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80049d4:	2200      	movs	r2, #0
 80049d6:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	d40b      	bmi.n	80049f4 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80049dc:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 80049de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0549      	lsls	r1, r1, #21
 80049e4:	430a      	orrs	r2, r1
 80049e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	400b      	ands	r3, r1
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80049f0:	2301      	movs	r3, #1
 80049f2:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f4:	4b46      	ldr	r3, [pc, #280]	@ (8004b10 <HAL_RCC_OscConfig+0x358>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	05db      	lsls	r3, r3, #23
 80049fa:	d53f      	bpl.n	8004a7c <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	68a3      	ldr	r3, [r4, #8]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d052      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x2f0>
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d056      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x2fc>
 8004a06:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a12:	3103      	adds	r1, #3
 8004a14:	438a      	bics	r2, r1
 8004a16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a18:	68a3      	ldr	r3, [r4, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d054      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fe f90d 	bl	8002c3c <HAL_GetTick>
 8004a22:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a24:	4b31      	ldr	r3, [pc, #196]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004a26:	4698      	mov	r8, r3
 8004a28:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	4d3a      	ldr	r5, [pc, #232]	@ (8004b14 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2c:	4643      	mov	r3, r8
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a30:	421f      	tst	r7, r3
 8004a32:	d171      	bne.n	8004b18 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fe f902 	bl	8002c3c <HAL_GetTick>
 8004a38:	1b80      	subs	r0, r0, r6
 8004a3a:	42a8      	cmp	r0, r5
 8004a3c:	d9f6      	bls.n	8004a2c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8004a3e:	2003      	movs	r0, #3
 8004a40:	e102      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 8004a42:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004a44:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004a46:	2101      	movs	r1, #1
 8004a48:	438b      	bics	r3, r1
 8004a4a:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004a4c:	f7fe f8f6 	bl	8002c3c <HAL_GetTick>
 8004a50:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a52:	4f26      	ldr	r7, [pc, #152]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004a54:	2602      	movs	r6, #2
 8004a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a58:	421e      	tst	r6, r3
 8004a5a:	d0af      	beq.n	80049bc <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fe f8ee 	bl	8002c3c <HAL_GetTick>
 8004a60:	1b40      	subs	r0, r0, r5
 8004a62:	2802      	cmp	r0, #2
 8004a64:	d9f7      	bls.n	8004a56 <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8004a66:	2003      	movs	r0, #3
 8004a68:	e0ee      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004a6a:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	079b      	lsls	r3, r3, #30
 8004a70:	d555      	bpl.n	8004b1e <HAL_RCC_OscConfig+0x366>
 8004a72:	68a3      	ldr	r3, [r4, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d152      	bne.n	8004b1e <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8004a78:	2001      	movs	r0, #1
 8004a7a:	e0e5      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7c:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <HAL_RCC_OscConfig+0x358>)
 8004a7e:	6811      	ldr	r1, [r2, #0]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a88:	f7fe f8d8 	bl	8002c3c <HAL_GetTick>
 8004a8c:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8e:	4d20      	ldr	r5, [pc, #128]	@ (8004b10 <HAL_RCC_OscConfig+0x358>)
 8004a90:	2780      	movs	r7, #128	@ 0x80
 8004a92:	007f      	lsls	r7, r7, #1
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	423b      	tst	r3, r7
 8004a98:	d1b0      	bne.n	80049fc <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9a:	f7fe f8cf 	bl	8002c3c <HAL_GetTick>
 8004a9e:	1b80      	subs	r0, r0, r6
 8004aa0:	2802      	cmp	r0, #2
 8004aa2:	d9f7      	bls.n	8004a94 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8004aa4:	2003      	movs	r0, #3
 8004aa6:	e0cf      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa8:	4a10      	ldr	r2, [pc, #64]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004aaa:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8004aac:	2101      	movs	r1, #1
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004ab2:	e7b1      	b.n	8004a18 <HAL_RCC_OscConfig+0x260>
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004ab6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ab8:	2104      	movs	r1, #4
 8004aba:	430a      	orrs	r2, r1
 8004abc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ac0:	3903      	subs	r1, #3
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ac6:	e7a7      	b.n	8004a18 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe f8b8 	bl	8002c3c <HAL_GetTick>
 8004acc:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <HAL_RCC_OscConfig+0x334>)
 8004ad0:	4698      	mov	r8, r3
 8004ad2:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	4d0f      	ldr	r5, [pc, #60]	@ (8004b14 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ad6:	4643      	mov	r3, r8
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	421f      	tst	r7, r3
 8004adc:	d01c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fe f8ad 	bl	8002c3c <HAL_GetTick>
 8004ae2:	1b80      	subs	r0, r0, r6
 8004ae4:	42a8      	cmp	r0, r5
 8004ae6:	d9f6      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004ae8:	2003      	movs	r0, #3
 8004aea:	e0ad      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
 8004aec:	40021000 	.word	0x40021000
 8004af0:	fffeffff 	.word	0xfffeffff
 8004af4:	fffbffff 	.word	0xfffbffff
 8004af8:	ffff80ff 	.word	0xffff80ff
 8004afc:	ffffc7ff 	.word	0xffffc7ff
 8004b00:	20000018 	.word	0x20000018
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	20000020 	.word	0x20000020
 8004b0c:	fffffeff 	.word	0xfffffeff
 8004b10:	40007000 	.word	0x40007000
 8004b14:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b18:	464b      	mov	r3, r9
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d021      	beq.n	8004b62 <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b1e:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d100      	bne.n	8004b28 <HAL_RCC_OscConfig+0x370>
 8004b26:	e08f      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b28:	4a62      	ldr	r2, [pc, #392]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b2a:	6891      	ldr	r1, [r2, #8]
 8004b2c:	2238      	movs	r2, #56	@ 0x38
 8004b2e:	400a      	ands	r2, r1
 8004b30:	2a10      	cmp	r2, #16
 8004b32:	d064      	beq.n	8004bfe <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d01a      	beq.n	8004b6e <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8004b38:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	495e      	ldr	r1, [pc, #376]	@ (8004cb8 <HAL_RCC_OscConfig+0x500>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b42:	f7fe f87b 	bl	8002c3c <HAL_GetTick>
 8004b46:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	4e5a      	ldr	r6, [pc, #360]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b4a:	2580      	movs	r5, #128	@ 0x80
 8004b4c:	04ad      	lsls	r5, r5, #18
 8004b4e:	6833      	ldr	r3, [r6, #0]
 8004b50:	422b      	tst	r3, r5
 8004b52:	d04d      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fe f872 	bl	8002c3c <HAL_GetTick>
 8004b58:	1b00      	subs	r0, r0, r4
 8004b5a:	2802      	cmp	r0, #2
 8004b5c:	d9f7      	bls.n	8004b4e <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8004b5e:	2003      	movs	r0, #3
 8004b60:	e072      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b62:	4a54      	ldr	r2, [pc, #336]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b64:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004b66:	4955      	ldr	r1, [pc, #340]	@ (8004cbc <HAL_RCC_OscConfig+0x504>)
 8004b68:	400b      	ands	r3, r1
 8004b6a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004b6c:	e7d7      	b.n	8004b1e <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	4a51      	ldr	r2, [pc, #324]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b70:	6813      	ldr	r3, [r2, #0]
 8004b72:	4951      	ldr	r1, [pc, #324]	@ (8004cb8 <HAL_RCC_OscConfig+0x500>)
 8004b74:	400b      	ands	r3, r1
 8004b76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b78:	f7fe f860 	bl	8002c3c <HAL_GetTick>
 8004b7c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7e:	4f4d      	ldr	r7, [pc, #308]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b80:	2680      	movs	r6, #128	@ 0x80
 8004b82:	04b6      	lsls	r6, r6, #18
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4233      	tst	r3, r6
 8004b88:	d006      	beq.n	8004b98 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8a:	f7fe f857 	bl	8002c3c <HAL_GetTick>
 8004b8e:	1b40      	subs	r0, r0, r5
 8004b90:	2802      	cmp	r0, #2
 8004b92:	d9f7      	bls.n	8004b84 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8004b94:	2003      	movs	r0, #3
 8004b96:	e057      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b98:	4a46      	ldr	r2, [pc, #280]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004b9a:	68d1      	ldr	r1, [r2, #12]
 8004b9c:	6a23      	ldr	r3, [r4, #32]
 8004b9e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004ba0:	4303      	orrs	r3, r0
 8004ba2:	4847      	ldr	r0, [pc, #284]	@ (8004cc0 <HAL_RCC_OscConfig+0x508>)
 8004ba4:	4001      	ands	r1, r0
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004bb2:	0209      	lsls	r1, r1, #8
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	045b      	lsls	r3, r3, #17
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004bc2:	68d1      	ldr	r1, [r2, #12]
 8004bc4:	2380      	movs	r3, #128	@ 0x80
 8004bc6:	055b      	lsls	r3, r3, #21
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004bcc:	f7fe f836 	bl	8002c3c <HAL_GetTick>
 8004bd0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4e38      	ldr	r6, [pc, #224]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004bd4:	2580      	movs	r5, #128	@ 0x80
 8004bd6:	04ad      	lsls	r5, r5, #18
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	422b      	tst	r3, r5
 8004bdc:	d106      	bne.n	8004bec <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fe f82d 	bl	8002c3c <HAL_GetTick>
 8004be2:	1b00      	subs	r0, r0, r4
 8004be4:	2802      	cmp	r0, #2
 8004be6:	d9f7      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8004be8:	2003      	movs	r0, #3
 8004bea:	e02d      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8004bec:	2000      	movs	r0, #0
 8004bee:	e02b      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004bf0:	4a30      	ldr	r2, [pc, #192]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004bf2:	68d3      	ldr	r3, [r2, #12]
 8004bf4:	4933      	ldr	r1, [pc, #204]	@ (8004cc4 <HAL_RCC_OscConfig+0x50c>)
 8004bf6:	400b      	ands	r3, r1
 8004bf8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e024      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d02d      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8004c02:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004c04:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	2303      	movs	r3, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8004c0c:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	428b      	cmp	r3, r1
 8004c10:	d11a      	bne.n	8004c48 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c12:	2370      	movs	r3, #112	@ 0x70
 8004c14:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	d115      	bne.n	8004c48 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c1c:	21fe      	movs	r1, #254	@ 0xfe
 8004c1e:	01c9      	lsls	r1, r1, #7
 8004c20:	4011      	ands	r1, r2
 8004c22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c24:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c26:	4299      	cmp	r1, r3
 8004c28:	d10e      	bne.n	8004c48 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c2a:	23f8      	movs	r3, #248	@ 0xf8
 8004c2c:	039b      	lsls	r3, r3, #14
 8004c2e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c30:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c32:	428b      	cmp	r3, r1
 8004c34:	d108      	bne.n	8004c48 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004c36:	0f53      	lsrs	r3, r2, #29
 8004c38:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	1e5a      	subs	r2, r3, #1
 8004c40:	4193      	sbcs	r3, r2
 8004c42:	b2d8      	uxtb	r0, r3
 8004c44:	e000      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8004c46:	2001      	movs	r0, #1
}
 8004c48:	b003      	add	sp, #12
 8004c4a:	bcc0      	pop	{r6, r7}
 8004c4c:	46b9      	mov	r9, r7
 8004c4e:	46b0      	mov	r8, r6
 8004c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004c52:	2001      	movs	r0, #1
 8004c54:	e7f8      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8004c56:	2001      	movs	r0, #1
 8004c58:	e7f6      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004c5a:	2001      	movs	r0, #1
 8004c5c:	e7f4      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004c5e:	2001      	movs	r0, #1
 8004c60:	e7f2      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8004c62:	2001      	movs	r0, #1
 8004c64:	e7f0      	b.n	8004c48 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4913      	ldr	r1, [pc, #76]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004c68:	684a      	ldr	r2, [r1, #4]
 8004c6a:	6963      	ldr	r3, [r4, #20]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	4816      	ldr	r0, [pc, #88]	@ (8004cc8 <HAL_RCC_OscConfig+0x510>)
 8004c70:	4002      	ands	r2, r0
 8004c72:	4313      	orrs	r3, r2
 8004c74:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c76:	e60a      	b.n	800488e <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c78:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	055b      	lsls	r3, r3, #21
 8004c7e:	d5f2      	bpl.n	8004c66 <HAL_RCC_OscConfig+0x4ae>
 8004c80:	68e3      	ldr	r3, [r4, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ed      	beq.n	8004c62 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	490b      	ldr	r1, [pc, #44]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004c88:	684a      	ldr	r2, [r1, #4]
 8004c8a:	6963      	ldr	r3, [r4, #20]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	480e      	ldr	r0, [pc, #56]	@ (8004cc8 <HAL_RCC_OscConfig+0x510>)
 8004c90:	4002      	ands	r2, r0
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c96:	e5fa      	b.n	800488e <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c98:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8004c9a:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0d3      	beq.n	8004c48 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4904      	ldr	r1, [pc, #16]	@ (8004cb4 <HAL_RCC_OscConfig+0x4fc>)
 8004ca2:	684a      	ldr	r2, [r1, #4]
 8004ca4:	6963      	ldr	r3, [r4, #20]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	4807      	ldr	r0, [pc, #28]	@ (8004cc8 <HAL_RCC_OscConfig+0x510>)
 8004caa:	4002      	ands	r2, r0
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cb0:	e5df      	b.n	8004872 <HAL_RCC_OscConfig+0xba>
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	feffffff 	.word	0xfeffffff
 8004cbc:	efffffff 	.word	0xefffffff
 8004cc0:	1fc1808c 	.word	0x1fc1808c
 8004cc4:	effefffc 	.word	0xeffefffc
 8004cc8:	ffff80ff 	.word	0xffff80ff

08004ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cce:	4b29      	ldr	r3, [pc, #164]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2238      	movs	r2, #56	@ 0x38
 8004cd4:	421a      	tst	r2, r3
 8004cd6:	d106      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cd8:	4b26      	ldr	r3, [pc, #152]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	049b      	lsls	r3, r3, #18
 8004cde:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004ce0:	4825      	ldr	r0, [pc, #148]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ce2:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004ce4:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce6:	4b23      	ldr	r3, [pc, #140]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	2338      	movs	r3, #56	@ 0x38
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d03a      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	2338      	movs	r3, #56	@ 0x38
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d014      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	2338      	movs	r3, #56	@ 0x38
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d030      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2038      	movs	r0, #56	@ 0x38
 8004d10:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8004d12:	3818      	subs	r0, #24
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	4198      	sbcs	r0, r3
 8004d18:	4240      	negs	r0, r0
 8004d1a:	4b18      	ldr	r3, [pc, #96]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d1c:	4018      	ands	r0, r3
 8004d1e:	23fa      	movs	r3, #250	@ 0xfa
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	469c      	mov	ip, r3
 8004d24:	4460      	add	r0, ip
 8004d26:	e7dd      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d28:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d2a:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d2c:	68d1      	ldr	r1, [r2, #12]
 8004d2e:	0649      	lsls	r1, r1, #25
 8004d30:	0f49      	lsrs	r1, r1, #29
 8004d32:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d34:	43db      	mvns	r3, r3
    switch (pllsource)
 8004d36:	079b      	lsls	r3, r3, #30
 8004d38:	d00e      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d3c:	68dc      	ldr	r4, [r3, #12]
 8004d3e:	0464      	lsls	r4, r4, #17
 8004d40:	0e64      	lsrs	r4, r4, #25
 8004d42:	480d      	ldr	r0, [pc, #52]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d44:	f7fb f9e6 	bl	8000114 <__udivsi3>
 8004d48:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	0f49      	lsrs	r1, r1, #29
 8004d50:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004d52:	f7fb f9df 	bl	8000114 <__udivsi3>
 8004d56:	e7c5      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d58:	68d4      	ldr	r4, [r2, #12]
 8004d5a:	0464      	lsls	r4, r4, #17
 8004d5c:	0e64      	lsrs	r4, r4, #25
 8004d5e:	4808      	ldr	r0, [pc, #32]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d60:	f7fb f9d8 	bl	8000114 <__udivsi3>
 8004d64:	4360      	muls	r0, r4
        break;
 8004d66:	e7f0      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 8004d68:	4805      	ldr	r0, [pc, #20]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d6a:	e7bb      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8004d6c:	2080      	movs	r0, #128	@ 0x80
 8004d6e:	0200      	lsls	r0, r0, #8
 8004d70:	e7b8      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x18>
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	ffff8300 	.word	0xffff8300
 8004d80:	007a1200 	.word	0x007a1200

08004d84 <HAL_RCC_ClockConfig>:
{
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	46ce      	mov	lr, r9
 8004d88:	4647      	mov	r7, r8
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	0004      	movs	r4, r0
 8004d8e:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d100      	bne.n	8004d96 <HAL_RCC_ClockConfig+0x12>
 8004d94:	e0b6      	b.n	8004f04 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d96:	4b5d      	ldr	r3, [pc, #372]	@ (8004f0c <HAL_RCC_ClockConfig+0x188>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2307      	movs	r3, #7
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	428b      	cmp	r3, r1
 8004da0:	d321      	bcc.n	8004de6 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	079a      	lsls	r2, r3, #30
 8004da6:	d50e      	bpl.n	8004dc6 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	075b      	lsls	r3, r3, #29
 8004daa:	d505      	bpl.n	8004db8 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dac:	4a58      	ldr	r2, [pc, #352]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004dae:	6891      	ldr	r1, [r2, #8]
 8004db0:	23e0      	movs	r3, #224	@ 0xe0
 8004db2:	01db      	lsls	r3, r3, #7
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4a55      	ldr	r2, [pc, #340]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004dba:	6893      	ldr	r3, [r2, #8]
 8004dbc:	4955      	ldr	r1, [pc, #340]	@ (8004f14 <HAL_RCC_ClockConfig+0x190>)
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	68a1      	ldr	r1, [r4, #8]
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	07db      	lsls	r3, r3, #31
 8004dca:	d55b      	bpl.n	8004e84 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d023      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d042      	beq.n	8004e5c <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d146      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dda:	4a4d      	ldr	r2, [pc, #308]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	0552      	lsls	r2, r2, #21
 8004de0:	d420      	bmi.n	8004e24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
 8004de4:	e070      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4a49      	ldr	r2, [pc, #292]	@ (8004f0c <HAL_RCC_ClockConfig+0x188>)
 8004de8:	6813      	ldr	r3, [r2, #0]
 8004dea:	2107      	movs	r1, #7
 8004dec:	438b      	bics	r3, r1
 8004dee:	432b      	orrs	r3, r5
 8004df0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004df2:	f7fd ff23 	bl	8002c3c <HAL_GetTick>
 8004df6:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004df8:	4b44      	ldr	r3, [pc, #272]	@ (8004f0c <HAL_RCC_ClockConfig+0x188>)
 8004dfa:	4698      	mov	r8, r3
 8004dfc:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfe:	4b46      	ldr	r3, [pc, #280]	@ (8004f18 <HAL_RCC_ClockConfig+0x194>)
 8004e00:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e02:	4643      	mov	r3, r8
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	403b      	ands	r3, r7
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	d0ca      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0c:	f7fd ff16 	bl	8002c3c <HAL_GetTick>
 8004e10:	1b80      	subs	r0, r0, r6
 8004e12:	4548      	cmp	r0, r9
 8004e14:	d9f5      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004e16:	2003      	movs	r0, #3
 8004e18:	e056      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	0392      	lsls	r2, r2, #14
 8004e20:	d400      	bmi.n	8004e24 <HAL_RCC_ClockConfig+0xa0>
 8004e22:	e071      	b.n	8004f08 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e24:	493a      	ldr	r1, [pc, #232]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e26:	688a      	ldr	r2, [r1, #8]
 8004e28:	2007      	movs	r0, #7
 8004e2a:	4382      	bics	r2, r0
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004e30:	f7fd ff04 	bl	8002c3c <HAL_GetTick>
 8004e34:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b36      	ldr	r3, [pc, #216]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e38:	4698      	mov	r8, r3
 8004e3a:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <HAL_RCC_ClockConfig+0x194>)
 8004e3e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e40:	4643      	mov	r3, r8
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	403a      	ands	r2, r7
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d01a      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4e:	f7fd fef5 	bl	8002c3c <HAL_GetTick>
 8004e52:	1b80      	subs	r0, r0, r6
 8004e54:	4548      	cmp	r0, r9
 8004e56:	d9f3      	bls.n	8004e40 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8004e58:	2003      	movs	r0, #3
 8004e5a:	e035      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	0192      	lsls	r2, r2, #6
 8004e62:	d4df      	bmi.n	8004e24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004e64:	2001      	movs	r0, #1
 8004e66:	e02f      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6c:	4a28      	ldr	r2, [pc, #160]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e70:	0792      	lsls	r2, r2, #30
 8004e72:	d4d7      	bmi.n	8004e24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004e74:	2001      	movs	r0, #1
 8004e76:	e027      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e78:	4a25      	ldr	r2, [pc, #148]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e7a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8004e7c:	0792      	lsls	r2, r2, #30
 8004e7e:	d4d1      	bmi.n	8004e24 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8004e80:	2001      	movs	r0, #1
 8004e82:	e021      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e84:	4b21      	ldr	r3, [pc, #132]	@ (8004f0c <HAL_RCC_ClockConfig+0x188>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2307      	movs	r3, #7
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	42ab      	cmp	r3, r5
 8004e8e:	d81f      	bhi.n	8004ed0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	075b      	lsls	r3, r3, #29
 8004e94:	d506      	bpl.n	8004ea4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e96:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004e98:	6893      	ldr	r3, [r2, #8]
 8004e9a:	4920      	ldr	r1, [pc, #128]	@ (8004f1c <HAL_RCC_ClockConfig+0x198>)
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	68e1      	ldr	r1, [r4, #12]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ea4:	f7ff ff12 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004ea8:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <HAL_RCC_ClockConfig+0x18c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	491c      	ldr	r1, [pc, #112]	@ (8004f20 <HAL_RCC_ClockConfig+0x19c>)
 8004eae:	4a1d      	ldr	r2, [pc, #116]	@ (8004f24 <HAL_RCC_ClockConfig+0x1a0>)
 8004eb0:	051b      	lsls	r3, r3, #20
 8004eb2:	0f1b      	lsrs	r3, r3, #28
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	589b      	ldr	r3, [r3, r2]
 8004eb8:	221f      	movs	r2, #31
 8004eba:	4013      	ands	r3, r2
 8004ebc:	40d8      	lsrs	r0, r3
 8004ebe:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <HAL_RCC_ClockConfig+0x1a4>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	f7fd fe72 	bl	8002bac <HAL_InitTick>
}
 8004ec8:	bcc0      	pop	{r6, r7}
 8004eca:	46b9      	mov	r9, r7
 8004ecc:	46b0      	mov	r8, r6
 8004ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8004f0c <HAL_RCC_ClockConfig+0x188>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	2107      	movs	r1, #7
 8004ed6:	438b      	bics	r3, r1
 8004ed8:	432b      	orrs	r3, r5
 8004eda:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004edc:	f7fd feae 	bl	8002c3c <HAL_GetTick>
 8004ee0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RCC_ClockConfig+0x188>)
 8004ee4:	4698      	mov	r8, r3
 8004ee6:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCC_ClockConfig+0x194>)
 8004eea:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004eec:	4643      	mov	r3, r8
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	403b      	ands	r3, r7
 8004ef2:	42ab      	cmp	r3, r5
 8004ef4:	d0cc      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef6:	f7fd fea1 	bl	8002c3c <HAL_GetTick>
 8004efa:	1b80      	subs	r0, r0, r6
 8004efc:	4548      	cmp	r0, r9
 8004efe:	d9f5      	bls.n	8004eec <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8004f00:	2003      	movs	r0, #3
 8004f02:	e7e1      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
 8004f06:	e7df      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004f08:	2001      	movs	r0, #1
 8004f0a:	e7dd      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x144>
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40021000 	.word	0x40021000
 8004f14:	fffff0ff 	.word	0xfffff0ff
 8004f18:	00001388 	.word	0x00001388
 8004f1c:	ffff8fff 	.word	0xffff8fff
 8004f20:	20000018 	.word	0x20000018
 8004f24:	080079bc 	.word	0x080079bc
 8004f28:	20000020 	.word	0x20000020

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2e:	46d6      	mov	lr, sl
 8004f30:	464f      	mov	r7, r9
 8004f32:	4646      	mov	r6, r8
 8004f34:	b5c0      	push	{r6, r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f3a:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f3c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f3e:	039b      	lsls	r3, r3, #14
 8004f40:	d52a      	bpl.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f42:	4b57      	ldr	r3, [pc, #348]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2200      	movs	r2, #0
 8004f48:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	d40b      	bmi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4e:	4b54      	ldr	r3, [pc, #336]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f52:	2180      	movs	r1, #128	@ 0x80
 8004f54:	0549      	lsls	r1, r1, #21
 8004f56:	430a      	orrs	r2, r1
 8004f58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	400b      	ands	r3, r1
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f62:	2301      	movs	r3, #1
 8004f64:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f66:	4a4f      	ldr	r2, [pc, #316]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004f68:	6811      	ldr	r1, [r2, #0]
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f72:	f7fd fe63 	bl	8002c3c <HAL_GetTick>
 8004f76:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f78:	4f4a      	ldr	r7, [pc, #296]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004f7a:	2680      	movs	r6, #128	@ 0x80
 8004f7c:	0076      	lsls	r6, r6, #1
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	4233      	tst	r3, r6
 8004f82:	d000      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8004f84:	e07a      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f86:	f7fd fe59 	bl	8002c3c <HAL_GetTick>
 8004f8a:	1b40      	subs	r0, r0, r5
 8004f8c:	2802      	cmp	r0, #2
 8004f8e:	d9f6      	bls.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8004f90:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f92:	4653      	mov	r3, sl
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d05d      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	07db      	lsls	r3, r3, #31
 8004f9c:	d506      	bpl.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f9e:	4a40      	ldr	r2, [pc, #256]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004fa0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004fa2:	2103      	movs	r1, #3
 8004fa4:	438b      	bics	r3, r1
 8004fa6:	6861      	ldr	r1, [r4, #4]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	d506      	bpl.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004fb4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004fb6:	493c      	ldr	r1, [pc, #240]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004fb8:	400b      	ands	r3, r1
 8004fba:	68a1      	ldr	r1, [r4, #8]
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	045b      	lsls	r3, r3, #17
 8004fc4:	d50b      	bpl.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fc6:	4a36      	ldr	r2, [pc, #216]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004fc8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	6921      	ldr	r1, [r4, #16]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004fd4:	2380      	movs	r3, #128	@ 0x80
 8004fd6:	05db      	lsls	r3, r3, #23
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d040      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x134>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	051b      	lsls	r3, r3, #20
 8004fe2:	d50b      	bpl.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004fe6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004fe8:	4930      	ldr	r1, [pc, #192]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	68e1      	ldr	r1, [r4, #12]
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ff2:	2380      	movs	r3, #128	@ 0x80
 8004ff4:	01db      	lsls	r3, r3, #7
 8004ff6:	68e2      	ldr	r2, [r4, #12]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d038      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x142>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bce0      	pop	{r5, r6, r7}
 8005000:	46ba      	mov	sl, r7
 8005002:	46b1      	mov	r9, r6
 8005004:	46a8      	mov	r8, r5
 8005006:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005008:	6963      	ldr	r3, [r4, #20]
 800500a:	428b      	cmp	r3, r1
 800500c:	d03e      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800500e:	4b24      	ldr	r3, [pc, #144]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005010:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005012:	4927      	ldr	r1, [pc, #156]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005014:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8005016:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8005018:	2080      	movs	r0, #128	@ 0x80
 800501a:	0240      	lsls	r0, r0, #9
 800501c:	4328      	orrs	r0, r5
 800501e:	65d8      	str	r0, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005020:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8005022:	4d24      	ldr	r5, [pc, #144]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005024:	4028      	ands	r0, r5
 8005026:	65d8      	str	r0, [r3, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 8005028:	65d9      	str	r1, [r3, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800502a:	07d2      	lsls	r2, r2, #31
 800502c:	d52e      	bpl.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x160>
        tickstart = HAL_GetTick();
 800502e:	f7fd fe05 	bl	8002c3c <HAL_GetTick>
 8005032:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005034:	4b1a      	ldr	r3, [pc, #104]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005036:	4698      	mov	r8, r3
 8005038:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	4b1f      	ldr	r3, [pc, #124]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800503c:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503e:	4643      	mov	r3, r8
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	421e      	tst	r6, r3
 8005044:	d122      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x160>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fd fdf9 	bl	8002c3c <HAL_GetTick>
 800504a:	1b40      	subs	r0, r0, r5
 800504c:	4548      	cmp	r0, r9
 800504e:	d9f6      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x112>
            ret = HAL_TIMEOUT;
 8005050:	2003      	movs	r0, #3
 8005052:	e79e      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005054:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005056:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8005058:	4918      	ldr	r1, [pc, #96]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800505a:	400b      	ands	r3, r1
 800505c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800505e:	e79b      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005060:	4a0f      	ldr	r2, [pc, #60]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005062:	68d1      	ldr	r1, [r2, #12]
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	025b      	lsls	r3, r3, #9
 8005068:	430b      	orrs	r3, r1
 800506a:	60d3      	str	r3, [r2, #12]
 800506c:	e7b7      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800506e:	4a0c      	ldr	r2, [pc, #48]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8005070:	68d1      	ldr	r1, [r2, #12]
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	025b      	lsls	r3, r3, #9
 8005076:	430b      	orrs	r3, r1
 8005078:	60d3      	str	r3, [r2, #12]
  return status;
 800507a:	e7bf      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800507c:	4b08      	ldr	r3, [pc, #32]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800507e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005080:	23c0      	movs	r3, #192	@ 0xc0
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	0011      	movs	r1, r2
 8005086:	4019      	ands	r1, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005088:	421a      	tst	r2, r3
 800508a:	d1bd      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508c:	4a04      	ldr	r2, [pc, #16]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800508e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005090:	4907      	ldr	r1, [pc, #28]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005092:	400b      	ands	r3, r1
 8005094:	6961      	ldr	r1, [r4, #20]
 8005096:	430b      	orrs	r3, r1
 8005098:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800509a:	2000      	movs	r0, #0
 800509c:	e779      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40007000 	.word	0x40007000
 80050a8:	ffffcfff 	.word	0xffffcfff
 80050ac:	ffff3fff 	.word	0xffff3fff
 80050b0:	fffffcff 	.word	0xfffffcff
 80050b4:	fffeffff 	.word	0xfffeffff
 80050b8:	00001388 	.word	0x00001388
 80050bc:	efffffff 	.word	0xefffffff

080050c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80050c4:	6803      	ldr	r3, [r0, #0]
 80050c6:	4a0a      	ldr	r2, [pc, #40]	@ (80050f0 <HAL_RTC_WaitForSynchro+0x30>)
 80050c8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80050ca:	f7fd fdb7 	bl	8002c3c <HAL_GetTick>
 80050ce:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80050d0:	2620      	movs	r6, #32
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050d2:	27fa      	movs	r7, #250	@ 0xfa
 80050d4:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	421e      	tst	r6, r3
 80050dc:	d106      	bne.n	80050ec <HAL_RTC_WaitForSynchro+0x2c>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050de:	f7fd fdad 	bl	8002c3c <HAL_GetTick>
 80050e2:	1b40      	subs	r0, r0, r5
 80050e4:	42b8      	cmp	r0, r7
 80050e6:	d9f6      	bls.n	80050d6 <HAL_RTC_WaitForSynchro+0x16>
    {
      return HAL_TIMEOUT;
 80050e8:	2003      	movs	r0, #3
 80050ea:	e000      	b.n	80050ee <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80050ec:	2000      	movs	r0, #0
}
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f0:	0001005f 	.word	0x0001005f

080050f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80050f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f6:	46c6      	mov	lr, r8
 80050f8:	b500      	push	{lr}
 80050fa:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80050fc:	6802      	ldr	r2, [r0, #0]
 80050fe:	68d3      	ldr	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8005100:	2500      	movs	r5, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005102:	065b      	lsls	r3, r3, #25
 8005104:	d503      	bpl.n	800510e <RTC_EnterInitMode+0x1a>
      }
    }
  }

  return status;
}
 8005106:	0028      	movs	r0, r5
 8005108:	bc80      	pop	{r7}
 800510a:	46b8      	mov	r8, r7
 800510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800510e:	68d3      	ldr	r3, [r2, #12]
 8005110:	2180      	movs	r1, #128	@ 0x80
 8005112:	430b      	orrs	r3, r1
 8005114:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8005116:	f7fd fd91 	bl	8002c3c <HAL_GetTick>
 800511a:	0006      	movs	r6, r0
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800511c:	2740      	movs	r7, #64	@ 0x40
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800511e:	23fa      	movs	r3, #250	@ 0xfa
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4698      	mov	r8, r3
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	421f      	tst	r7, r3
 800512a:	d1ec      	bne.n	8005106 <RTC_EnterInitMode+0x12>
 800512c:	2d03      	cmp	r5, #3
 800512e:	d0ea      	beq.n	8005106 <RTC_EnterInitMode+0x12>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005130:	f7fd fd84 	bl	8002c3c <HAL_GetTick>
 8005134:	1b80      	subs	r0, r0, r6
 8005136:	4540      	cmp	r0, r8
 8005138:	d9f4      	bls.n	8005124 <RTC_EnterInitMode+0x30>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800513a:	2329      	movs	r3, #41	@ 0x29
 800513c:	2203      	movs	r2, #3
 800513e:	54e2      	strb	r2, [r4, r3]
        status = HAL_TIMEOUT;
 8005140:	2503      	movs	r5, #3
 8005142:	e7ef      	b.n	8005124 <RTC_EnterInitMode+0x30>

08005144 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005144:	b510      	push	{r4, lr}
 8005146:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <RTC_ExitInitMode+0x4c>)
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	2180      	movs	r1, #128	@ 0x80
 800514e:	438a      	bics	r2, r1
 8005150:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	069b      	lsls	r3, r3, #26
 8005156:	d408      	bmi.n	800516a <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005158:	f7ff ffb2 	bl	80050c0 <HAL_RTC_WaitForSynchro>
 800515c:	2800      	cmp	r0, #0
 800515e:	d016      	beq.n	800518e <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005160:	2329      	movs	r3, #41	@ 0x29
 8005162:	2203      	movs	r2, #3
 8005164:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8005166:	2003      	movs	r0, #3
 8005168:	e011      	b.n	800518e <RTC_ExitInitMode+0x4a>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800516a:	4a09      	ldr	r2, [pc, #36]	@ (8005190 <RTC_ExitInitMode+0x4c>)
 800516c:	6993      	ldr	r3, [r2, #24]
 800516e:	2120      	movs	r1, #32
 8005170:	438b      	bics	r3, r1
 8005172:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005174:	f7ff ffa4 	bl	80050c0 <HAL_RTC_WaitForSynchro>
 8005178:	2800      	cmp	r0, #0
 800517a:	d003      	beq.n	8005184 <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800517c:	2329      	movs	r3, #41	@ 0x29
 800517e:	2203      	movs	r2, #3
 8005180:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8005182:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005184:	4a02      	ldr	r2, [pc, #8]	@ (8005190 <RTC_ExitInitMode+0x4c>)
 8005186:	6993      	ldr	r3, [r2, #24]
 8005188:	2120      	movs	r1, #32
 800518a:	430b      	orrs	r3, r1
 800518c:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800518e:	bd10      	pop	{r4, pc}
 8005190:	40002800 	.word	0x40002800

08005194 <HAL_RTC_Init>:
{
 8005194:	b510      	push	{r4, lr}
 8005196:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 8005198:	d054      	beq.n	8005244 <HAL_RTC_Init+0xb0>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800519a:	2329      	movs	r3, #41	@ 0x29
 800519c:	5cc3      	ldrb	r3, [r0, r3]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_RTC_Init+0x26>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051a2:	2329      	movs	r3, #41	@ 0x29
 80051a4:	2202      	movs	r2, #2
 80051a6:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	68d3      	ldr	r3, [r2, #12]
 80051ac:	06db      	lsls	r3, r3, #27
 80051ae:	d50d      	bpl.n	80051cc <HAL_RTC_Init+0x38>
      hrtc->State = HAL_RTC_STATE_READY;
 80051b0:	2329      	movs	r3, #41	@ 0x29
 80051b2:	2201      	movs	r2, #1
 80051b4:	54e2      	strb	r2, [r4, r3]
 80051b6:	2000      	movs	r0, #0
}
 80051b8:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80051ba:	3328      	adds	r3, #40	@ 0x28
 80051bc:	2200      	movs	r2, #0
 80051be:	54c2      	strb	r2, [r0, r3]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80051c0:	2388      	movs	r3, #136	@ 0x88
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	6043      	str	r3, [r0, #4]
      HAL_RTC_MspInit(hrtc);
 80051c6:	f7fd fb5b 	bl	8002880 <HAL_RTC_MspInit>
 80051ca:	e7ea      	b.n	80051a2 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051cc:	23ca      	movs	r3, #202	@ 0xca
 80051ce:	6253      	str	r3, [r2, #36]	@ 0x24
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	2253      	movs	r2, #83	@ 0x53
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 80051d6:	0020      	movs	r0, r4
 80051d8:	f7ff ff8c 	bl	80050f4 <RTC_EnterInitMode>
      if(status == HAL_OK)
 80051dc:	2800      	cmp	r0, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RTC_Init+0x54>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	22ff      	movs	r2, #255	@ 0xff
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24
  return status;
 80051e6:	e7e7      	b.n	80051b8 <HAL_RTC_Init+0x24>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	6993      	ldr	r3, [r2, #24]
 80051ec:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_RTC_Init+0xb4>)
 80051ee:	400b      	ands	r3, r1
 80051f0:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	6991      	ldr	r1, [r2, #24]
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	6960      	ldr	r0, [r4, #20]
 80051fa:	4303      	orrs	r3, r0
 80051fc:	69e0      	ldr	r0, [r4, #28]
 80051fe:	4303      	orrs	r3, r0
 8005200:	430b      	orrs	r3, r1
 8005202:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	6922      	ldr	r2, [r4, #16]
 8005208:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	6911      	ldr	r1, [r2, #16]
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	430b      	orrs	r3, r1
 8005214:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8005216:	0020      	movs	r0, r4
 8005218:	f7ff ff94 	bl	8005144 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800521c:	2800      	cmp	r0, #0
 800521e:	d1df      	bne.n	80051e0 <HAL_RTC_Init+0x4c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005220:	6822      	ldr	r2, [r4, #0]
 8005222:	6993      	ldr	r3, [r2, #24]
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	08db      	lsrs	r3, r3, #3
 8005228:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	6991      	ldr	r1, [r2, #24]
 800522e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005230:	6a20      	ldr	r0, [r4, #32]
 8005232:	4303      	orrs	r3, r0
 8005234:	69a0      	ldr	r0, [r4, #24]
 8005236:	4303      	orrs	r3, r0
 8005238:	430b      	orrs	r3, r1
 800523a:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	22ff      	movs	r2, #255	@ 0xff
 8005240:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005242:	e7b5      	b.n	80051b0 <HAL_RTC_Init+0x1c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005244:	2001      	movs	r0, #1
 8005246:	e7b7      	b.n	80051b8 <HAL_RTC_Init+0x24>
 8005248:	fb8fffbf 	.word	0xfb8fffbf

0800524c <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t Param = Value;

  while(Param >= 10U)
 800524c:	2809      	cmp	r0, #9
 800524e:	d909      	bls.n	8005264 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 8005250:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8005252:	3301      	adds	r3, #1
    Param -= 10U;
 8005254:	380a      	subs	r0, #10
 8005256:	b2c0      	uxtb	r0, r0
  while(Param >= 10U)
 8005258:	2809      	cmp	r0, #9
 800525a:	d8fa      	bhi.n	8005252 <RTC_ByteToBcd2+0x6>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4318      	orrs	r0, r3
 8005260:	b2c0      	uxtb	r0, r0
}
 8005262:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	e7f9      	b.n	800525c <RTC_ByteToBcd2+0x10>

08005268 <HAL_RTC_SetTime>:
{
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	0004      	movs	r4, r0
 800526c:	000e      	movs	r6, r1
 800526e:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8005270:	2328      	movs	r3, #40	@ 0x28
 8005272:	5cc3      	ldrb	r3, [r0, r3]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d056      	beq.n	8005326 <HAL_RTC_SetTime+0xbe>
 8005278:	2328      	movs	r3, #40	@ 0x28
 800527a:	2201      	movs	r2, #1
 800527c:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800527e:	3301      	adds	r3, #1
 8005280:	3201      	adds	r2, #1
 8005282:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005284:	6803      	ldr	r3, [r0, #0]
 8005286:	32c8      	adds	r2, #200	@ 0xc8
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24
 800528a:	6803      	ldr	r3, [r0, #0]
 800528c:	3a77      	subs	r2, #119	@ 0x77
 800528e:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005290:	f7ff ff30 	bl	80050f4 <RTC_EnterInitMode>
  if(status == HAL_OK)
 8005294:	2800      	cmp	r0, #0
 8005296:	d148      	bne.n	800532a <HAL_RTC_SetTime+0xc2>
    if(Format == RTC_FORMAT_BIN)
 8005298:	2d00      	cmp	r5, #0
 800529a:	d133      	bne.n	8005304 <HAL_RTC_SetTime+0x9c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	065b      	lsls	r3, r3, #25
 80052a2:	d401      	bmi.n	80052a8 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052a8:	7830      	ldrb	r0, [r6, #0]
 80052aa:	f7ff ffcf 	bl	800524c <RTC_ByteToBcd2>
 80052ae:	0007      	movs	r7, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052b0:	7870      	ldrb	r0, [r6, #1]
 80052b2:	f7ff ffcb 	bl	800524c <RTC_ByteToBcd2>
 80052b6:	0005      	movs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80052b8:	78b0      	ldrb	r0, [r6, #2]
 80052ba:	f7ff ffc7 	bl	800524c <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052be:	78f2      	ldrb	r2, [r6, #3]
 80052c0:	0592      	lsls	r2, r2, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052c2:	4310      	orrs	r0, r2
 80052c4:	043f      	lsls	r7, r7, #16
 80052c6:	4338      	orrs	r0, r7
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052c8:	022d      	lsls	r5, r5, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80052ca:	4328      	orrs	r0, r5
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <HAL_RTC_SetTime+0xd0>)
 80052d0:	4010      	ands	r0, r2
 80052d2:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80052d4:	6822      	ldr	r2, [r4, #0]
 80052d6:	6993      	ldr	r3, [r2, #24]
 80052d8:	4918      	ldr	r1, [pc, #96]	@ (800533c <HAL_RTC_SetTime+0xd4>)
 80052da:	400b      	ands	r3, r1
 80052dc:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	6991      	ldr	r1, [r2, #24]
 80052e2:	68f3      	ldr	r3, [r6, #12]
 80052e4:	6930      	ldr	r0, [r6, #16]
 80052e6:	4303      	orrs	r3, r0
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6193      	str	r3, [r2, #24]
    status = RTC_ExitInitMode(hrtc);
 80052ec:	0020      	movs	r0, r4
 80052ee:	f7ff ff29 	bl	8005144 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	22ff      	movs	r2, #255	@ 0xff
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d119      	bne.n	8005330 <HAL_RTC_SetTime+0xc8>
   hrtc->State = HAL_RTC_STATE_READY;
 80052fc:	2329      	movs	r3, #41	@ 0x29
 80052fe:	3afe      	subs	r2, #254	@ 0xfe
 8005300:	54e2      	strb	r2, [r4, r3]
 8005302:	e015      	b.n	8005330 <HAL_RTC_SetTime+0xc8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	065b      	lsls	r3, r3, #25
 800530a:	d401      	bmi.n	8005310 <HAL_RTC_SetTime+0xa8>
        sTime->TimeFormat = 0x00U;
 800530c:	2300      	movs	r3, #0
 800530e:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005310:	7830      	ldrb	r0, [r6, #0]
 8005312:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005314:	7873      	ldrb	r3, [r6, #1]
 8005316:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005318:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800531a:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800531c:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800531e:	78f3      	ldrb	r3, [r6, #3]
 8005320:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005322:	4318      	orrs	r0, r3
 8005324:	e7d2      	b.n	80052cc <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8005326:	2002      	movs	r0, #2
 8005328:	e005      	b.n	8005336 <HAL_RTC_SetTime+0xce>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	22ff      	movs	r2, #255	@ 0xff
 800532e:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005330:	2328      	movs	r3, #40	@ 0x28
 8005332:	2200      	movs	r2, #0
 8005334:	54e2      	strb	r2, [r4, r3]
}
 8005336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005338:	007f7f7f 	.word	0x007f7f7f
 800533c:	fffbffff 	.word	0xfffbffff

08005340 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005340:	0902      	lsrs	r2, r0, #4
 8005342:	0093      	lsls	r3, r2, #2
 8005344:	189b      	adds	r3, r3, r2
 8005346:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005348:	220f      	movs	r2, #15
 800534a:	4010      	ands	r0, r2
 800534c:	1818      	adds	r0, r3, r0
 800534e:	b2c0      	uxtb	r0, r0
}
 8005350:	4770      	bx	lr
	...

08005354 <HAL_RTC_GetTime>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005358:	6803      	ldr	r3, [r0, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	045b      	lsls	r3, r3, #17
 8005364:	0c5b      	lsrs	r3, r3, #17
 8005366:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005368:	6803      	ldr	r3, [r0, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	490d      	ldr	r1, [pc, #52]	@ (80053a4 <HAL_RTC_GetTime+0x50>)
 800536e:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005370:	0298      	lsls	r0, r3, #10
 8005372:	0e80      	lsrs	r0, r0, #26
 8005374:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005376:	0a1d      	lsrs	r5, r3, #8
 8005378:	b2ed      	uxtb	r5, r5
 800537a:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800537c:	b2de      	uxtb	r6, r3
 800537e:	70a6      	strb	r6, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005380:	0d9b      	lsrs	r3, r3, #22
 8005382:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8005384:	2a00      	cmp	r2, #0
 8005386:	d10a      	bne.n	800539e <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005388:	f7ff ffda 	bl	8005340 <RTC_Bcd2ToByte>
 800538c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800538e:	0028      	movs	r0, r5
 8005390:	f7ff ffd6 	bl	8005340 <RTC_Bcd2ToByte>
 8005394:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005396:	0030      	movs	r0, r6
 8005398:	f7ff ffd2 	bl	8005340 <RTC_Bcd2ToByte>
 800539c:	70a0      	strb	r0, [r4, #2]
}
 800539e:	2000      	movs	r0, #0
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	007f7f7f 	.word	0x007f7f7f

080053a8 <HAL_RTC_GetDate>:
{
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	490d      	ldr	r1, [pc, #52]	@ (80053e8 <HAL_RTC_GetDate+0x40>)
 80053b2:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053b4:	0c18      	lsrs	r0, r3, #16
 80053b6:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80053b8:	04dd      	lsls	r5, r3, #19
 80053ba:	0eed      	lsrs	r5, r5, #27
 80053bc:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053be:	b2de      	uxtb	r6, r3
 80053c0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	0f5b      	lsrs	r3, r3, #29
 80053c6:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	d10a      	bne.n	80053e2 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053cc:	f7ff ffb8 	bl	8005340 <RTC_Bcd2ToByte>
 80053d0:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80053d2:	0028      	movs	r0, r5
 80053d4:	f7ff ffb4 	bl	8005340 <RTC_Bcd2ToByte>
 80053d8:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80053da:	0030      	movs	r0, r6
 80053dc:	f7ff ffb0 	bl	8005340 <RTC_Bcd2ToByte>
 80053e0:	70a0      	strb	r0, [r4, #2]
}
 80053e2:	2000      	movs	r0, #0
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	00ffff3f 	.word	0x00ffff3f

080053ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ec:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ee:	223d      	movs	r2, #61	@ 0x3d
 80053f0:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 80053f2:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80053f4:	2a01      	cmp	r2, #1
 80053f6:	d112      	bne.n	800541e <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	323c      	adds	r2, #60	@ 0x3c
 80053fa:	2102      	movs	r1, #2
 80053fc:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	68ca      	ldr	r2, [r1, #12]
 8005402:	4302      	orrs	r2, r0
 8005404:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a0e      	ldr	r2, [pc, #56]	@ (8005444 <HAL_TIM_Base_Start_IT+0x58>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d008      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x34>
 800540e:	4a0e      	ldr	r2, [pc, #56]	@ (8005448 <HAL_TIM_Base_Start_IT+0x5c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d005      	beq.n	8005420 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	2101      	movs	r1, #1
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541c:	2000      	movs	r0, #0
}
 800541e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	490a      	ldr	r1, [pc, #40]	@ (800544c <HAL_TIM_Base_Start_IT+0x60>)
 8005424:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	2a06      	cmp	r2, #6
 8005428:	d008      	beq.n	800543c <HAL_TIM_Base_Start_IT+0x50>
 800542a:	3907      	subs	r1, #7
 800542c:	428a      	cmp	r2, r1
 800542e:	d007      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	2101      	movs	r1, #1
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005438:	2000      	movs	r0, #0
 800543a:	e7f0      	b.n	800541e <HAL_TIM_Base_Start_IT+0x32>
 800543c:	2000      	movs	r0, #0
 800543e:	e7ee      	b.n	800541e <HAL_TIM_Base_Start_IT+0x32>
 8005440:	2000      	movs	r0, #0
 8005442:	e7ec      	b.n	800541e <HAL_TIM_Base_Start_IT+0x32>
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40000400 	.word	0x40000400
 800544c:	00010007 	.word	0x00010007

08005450 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005450:	6802      	ldr	r2, [r0, #0]
 8005452:	68d3      	ldr	r3, [r2, #12]
 8005454:	2101      	movs	r1, #1
 8005456:	438b      	bics	r3, r1
 8005458:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800545a:	6803      	ldr	r3, [r0, #0]
 800545c:	6a19      	ldr	r1, [r3, #32]
 800545e:	4a08      	ldr	r2, [pc, #32]	@ (8005480 <HAL_TIM_Base_Stop_IT+0x30>)
 8005460:	4211      	tst	r1, r2
 8005462:	d107      	bne.n	8005474 <HAL_TIM_Base_Stop_IT+0x24>
 8005464:	6a19      	ldr	r1, [r3, #32]
 8005466:	4a07      	ldr	r2, [pc, #28]	@ (8005484 <HAL_TIM_Base_Stop_IT+0x34>)
 8005468:	4211      	tst	r1, r2
 800546a:	d103      	bne.n	8005474 <HAL_TIM_Base_Stop_IT+0x24>
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	2101      	movs	r1, #1
 8005470:	438a      	bics	r2, r1
 8005472:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005474:	233d      	movs	r3, #61	@ 0x3d
 8005476:	2201      	movs	r2, #1
 8005478:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 800547a:	2000      	movs	r0, #0
 800547c:	4770      	bx	lr
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	00001111 	.word	0x00001111
 8005484:	00000444 	.word	0x00000444

08005488 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005488:	4770      	bx	lr

0800548a <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548a:	4770      	bx	lr

0800548c <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005490:	4770      	bx	lr
	...

08005494 <HAL_TIM_IRQHandler>:
{
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005498:	6803      	ldr	r3, [r0, #0]
 800549a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800549c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800549e:	07aa      	lsls	r2, r5, #30
 80054a0:	d50e      	bpl.n	80054c0 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054a2:	07b2      	lsls	r2, r6, #30
 80054a4:	d50c      	bpl.n	80054c0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054a6:	2203      	movs	r2, #3
 80054a8:	4252      	negs	r2, r2
 80054aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054b0:	6803      	ldr	r3, [r0, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	079b      	lsls	r3, r3, #30
 80054b6:	d053      	beq.n	8005560 <HAL_TIM_IRQHandler+0xcc>
          HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	f7ff ffe8 	bl	800548c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054bc:	2300      	movs	r3, #0
 80054be:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c0:	076b      	lsls	r3, r5, #29
 80054c2:	d512      	bpl.n	80054ea <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054c4:	0773      	lsls	r3, r6, #29
 80054c6:	d510      	bpl.n	80054ea <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	2205      	movs	r2, #5
 80054cc:	4252      	negs	r2, r2
 80054ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d0:	2302      	movs	r3, #2
 80054d2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	23c0      	movs	r3, #192	@ 0xc0
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	421a      	tst	r2, r3
 80054de:	d045      	beq.n	800556c <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80054e0:	0020      	movs	r0, r4
 80054e2:	f7ff ffd3 	bl	800548c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	2300      	movs	r3, #0
 80054e8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054ea:	072b      	lsls	r3, r5, #28
 80054ec:	d510      	bpl.n	8005510 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ee:	0733      	lsls	r3, r6, #28
 80054f0:	d50e      	bpl.n	8005510 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	2209      	movs	r2, #9
 80054f6:	4252      	negs	r2, r2
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	2304      	movs	r3, #4
 80054fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	079b      	lsls	r3, r3, #30
 8005504:	d039      	beq.n	800557a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005506:	0020      	movs	r0, r4
 8005508:	f7ff ffc0 	bl	800548c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	2300      	movs	r3, #0
 800550e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005510:	06eb      	lsls	r3, r5, #27
 8005512:	d512      	bpl.n	800553a <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005514:	06f3      	lsls	r3, r6, #27
 8005516:	d510      	bpl.n	800553a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	2211      	movs	r2, #17
 800551c:	4252      	negs	r2, r2
 800551e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005520:	2308      	movs	r3, #8
 8005522:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	23c0      	movs	r3, #192	@ 0xc0
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	421a      	tst	r2, r3
 800552e:	d02b      	beq.n	8005588 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8005530:	0020      	movs	r0, r4
 8005532:	f7ff ffab 	bl	800548c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	2300      	movs	r3, #0
 8005538:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800553a:	07eb      	lsls	r3, r5, #31
 800553c:	d501      	bpl.n	8005542 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800553e:	07f3      	lsls	r3, r6, #31
 8005540:	d429      	bmi.n	8005596 <HAL_TIM_IRQHandler+0x102>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005542:	2382      	movs	r3, #130	@ 0x82
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	421d      	tst	r5, r3
 8005548:	d03c      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x130>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800554a:	0633      	lsls	r3, r6, #24
 800554c:	d42b      	bmi.n	80055a6 <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800554e:	066b      	lsls	r3, r5, #25
 8005550:	d501      	bpl.n	8005556 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005552:	0673      	lsls	r3, r6, #25
 8005554:	d43b      	bmi.n	80055ce <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005556:	06ad      	lsls	r5, r5, #26
 8005558:	d501      	bpl.n	800555e <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555a:	06b6      	lsls	r6, r6, #26
 800555c:	d43f      	bmi.n	80055de <HAL_TIM_IRQHandler+0x14a>
}
 800555e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005560:	f7ff ff93 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	0020      	movs	r0, r4
 8005566:	f7ff ff92 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
 800556a:	e7a7      	b.n	80054bc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556c:	0020      	movs	r0, r4
 800556e:	f7ff ff8c 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005572:	0020      	movs	r0, r4
 8005574:	f7ff ff8b 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
 8005578:	e7b5      	b.n	80054e6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	0020      	movs	r0, r4
 800557c:	f7ff ff85 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	0020      	movs	r0, r4
 8005582:	f7ff ff84 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
 8005586:	e7c1      	b.n	800550c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005588:	0020      	movs	r0, r4
 800558a:	f7ff ff7e 	bl	800548a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558e:	0020      	movs	r0, r4
 8005590:	f7ff ff7d 	bl	800548e <HAL_TIM_PWM_PulseFinishedCallback>
 8005594:	e7cf      	b.n	8005536 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	2202      	movs	r2, #2
 800559a:	4252      	negs	r2, r2
 800559c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800559e:	0020      	movs	r0, r4
 80055a0:	f7ff ff72 	bl	8005488 <HAL_TIM_PeriodElapsedCallback>
 80055a4:	e7cd      	b.n	8005542 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	4a11      	ldr	r2, [pc, #68]	@ (80055f0 <HAL_TIM_IRQHandler+0x15c>)
 80055aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055ac:	0020      	movs	r0, r4
 80055ae:	f000 f9c6 	bl	800593e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055b2:	05eb      	lsls	r3, r5, #23
 80055b4:	d5cb      	bpl.n	800554e <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	4a0e      	ldr	r2, [pc, #56]	@ (80055f4 <HAL_TIM_IRQHandler+0x160>)
 80055ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80055bc:	0020      	movs	r0, r4
 80055be:	f000 f9bf 	bl	8005940 <HAL_TIMEx_Break2Callback>
 80055c2:	e7c4      	b.n	800554e <HAL_TIM_IRQHandler+0xba>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055c4:	05eb      	lsls	r3, r5, #23
 80055c6:	d5c2      	bpl.n	800554e <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055c8:	0633      	lsls	r3, r6, #24
 80055ca:	d5c0      	bpl.n	800554e <HAL_TIM_IRQHandler+0xba>
 80055cc:	e7f3      	b.n	80055b6 <HAL_TIM_IRQHandler+0x122>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	2241      	movs	r2, #65	@ 0x41
 80055d2:	4252      	negs	r2, r2
 80055d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055d6:	0020      	movs	r0, r4
 80055d8:	f7ff ff5a 	bl	8005490 <HAL_TIM_TriggerCallback>
 80055dc:	e7bb      	b.n	8005556 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	2221      	movs	r2, #33	@ 0x21
 80055e2:	4252      	negs	r2, r2
 80055e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80055e6:	0020      	movs	r0, r4
 80055e8:	f000 f9a8 	bl	800593c <HAL_TIMEx_CommutCallback>
}
 80055ec:	e7b7      	b.n	800555e <HAL_TIM_IRQHandler+0xca>
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	ffffdf7f 	.word	0xffffdf7f
 80055f4:	fffffeff 	.word	0xfffffeff

080055f8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055fa:	4a31      	ldr	r2, [pc, #196]	@ (80056c0 <TIM_Base_SetConfig+0xc8>)
 80055fc:	4290      	cmp	r0, r2
 80055fe:	d015      	beq.n	800562c <TIM_Base_SetConfig+0x34>
 8005600:	4a30      	ldr	r2, [pc, #192]	@ (80056c4 <TIM_Base_SetConfig+0xcc>)
 8005602:	4290      	cmp	r0, r2
 8005604:	d012      	beq.n	800562c <TIM_Base_SetConfig+0x34>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005606:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <TIM_Base_SetConfig+0xd0>)
 8005608:	4290      	cmp	r0, r2
 800560a:	d03d      	beq.n	8005688 <TIM_Base_SetConfig+0x90>
 800560c:	4a2f      	ldr	r2, [pc, #188]	@ (80056cc <TIM_Base_SetConfig+0xd4>)
 800560e:	4290      	cmp	r0, r2
 8005610:	d048      	beq.n	80056a4 <TIM_Base_SetConfig+0xac>
 8005612:	4a2f      	ldr	r2, [pc, #188]	@ (80056d0 <TIM_Base_SetConfig+0xd8>)
 8005614:	4290      	cmp	r0, r2
 8005616:	d029      	beq.n	800566c <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	2280      	movs	r2, #128	@ 0x80
 800561a:	4393      	bics	r3, r2
 800561c:	694a      	ldr	r2, [r1, #20]
 800561e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005620:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005622:	688b      	ldr	r3, [r1, #8]
 8005624:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005626:	680b      	ldr	r3, [r1, #0]
 8005628:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562a:	e015      	b.n	8005658 <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562c:	2270      	movs	r2, #112	@ 0x70
 800562e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8005630:	684a      	ldr	r2, [r1, #4]
 8005632:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005634:	4a27      	ldr	r2, [pc, #156]	@ (80056d4 <TIM_Base_SetConfig+0xdc>)
 8005636:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005638:	68ca      	ldr	r2, [r1, #12]
 800563a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800563c:	2280      	movs	r2, #128	@ 0x80
 800563e:	4393      	bics	r3, r2
 8005640:	694a      	ldr	r2, [r1, #20]
 8005642:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005644:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005646:	688b      	ldr	r3, [r1, #8]
 8005648:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800564a:	680b      	ldr	r3, [r1, #0]
 800564c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564e:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <TIM_Base_SetConfig+0xc8>)
 8005650:	4298      	cmp	r0, r3
 8005652:	d101      	bne.n	8005658 <TIM_Base_SetConfig+0x60>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005654:	690b      	ldr	r3, [r1, #16]
 8005656:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005658:	2301      	movs	r3, #1
 800565a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800565c:	6902      	ldr	r2, [r0, #16]
 800565e:	4213      	tst	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x72>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005662:	6903      	ldr	r3, [r0, #16]
 8005664:	2201      	movs	r2, #1
 8005666:	4393      	bics	r3, r2
 8005668:	6103      	str	r3, [r0, #16]
  }
}
 800566a:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 800566c:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <TIM_Base_SetConfig+0xdc>)
 800566e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005670:	68ca      	ldr	r2, [r1, #12]
 8005672:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005674:	2280      	movs	r2, #128	@ 0x80
 8005676:	4393      	bics	r3, r2
 8005678:	694a      	ldr	r2, [r1, #20]
 800567a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800567c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800567e:	688b      	ldr	r3, [r1, #8]
 8005680:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005682:	680b      	ldr	r3, [r1, #0]
 8005684:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005686:	e7e5      	b.n	8005654 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005688:	4a12      	ldr	r2, [pc, #72]	@ (80056d4 <TIM_Base_SetConfig+0xdc>)
 800568a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568c:	68ca      	ldr	r2, [r1, #12]
 800568e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005690:	2280      	movs	r2, #128	@ 0x80
 8005692:	4393      	bics	r3, r2
 8005694:	694a      	ldr	r2, [r1, #20]
 8005696:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005698:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800569a:	688b      	ldr	r3, [r1, #8]
 800569c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800569e:	680b      	ldr	r3, [r1, #0]
 80056a0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a2:	e7d9      	b.n	8005658 <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a4:	4a0b      	ldr	r2, [pc, #44]	@ (80056d4 <TIM_Base_SetConfig+0xdc>)
 80056a6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a8:	68ca      	ldr	r2, [r1, #12]
 80056aa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ac:	2280      	movs	r2, #128	@ 0x80
 80056ae:	4393      	bics	r3, r2
 80056b0:	694a      	ldr	r2, [r1, #20]
 80056b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056b4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b6:	688b      	ldr	r3, [r1, #8]
 80056b8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ba:	680b      	ldr	r3, [r1, #0]
 80056bc:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056be:	e7c9      	b.n	8005654 <TIM_Base_SetConfig+0x5c>
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40002000 	.word	0x40002000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800
 80056d4:	fffffcff 	.word	0xfffffcff

080056d8 <HAL_TIM_Base_Init>:
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80056dc:	d02a      	beq.n	8005734 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	233d      	movs	r3, #61	@ 0x3d
 80056e0:	5cc3      	ldrb	r3, [r0, r3]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d020      	beq.n	8005728 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80056e6:	253d      	movs	r5, #61	@ 0x3d
 80056e8:	2302      	movs	r3, #2
 80056ea:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	0021      	movs	r1, r4
 80056ee:	c901      	ldmia	r1!, {r0}
 80056f0:	f7ff ff82 	bl	80055f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f4:	2301      	movs	r3, #1
 80056f6:	2248      	movs	r2, #72	@ 0x48
 80056f8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	3a0a      	subs	r2, #10
 80056fc:	54a3      	strb	r3, [r4, r2]
 80056fe:	3201      	adds	r2, #1
 8005700:	54a3      	strb	r3, [r4, r2]
 8005702:	3201      	adds	r2, #1
 8005704:	54a3      	strb	r3, [r4, r2]
 8005706:	3201      	adds	r2, #1
 8005708:	54a3      	strb	r3, [r4, r2]
 800570a:	3201      	adds	r2, #1
 800570c:	54a3      	strb	r3, [r4, r2]
 800570e:	3201      	adds	r2, #1
 8005710:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	3201      	adds	r2, #1
 8005714:	54a3      	strb	r3, [r4, r2]
 8005716:	3201      	adds	r2, #1
 8005718:	54a3      	strb	r3, [r4, r2]
 800571a:	3201      	adds	r2, #1
 800571c:	54a3      	strb	r3, [r4, r2]
 800571e:	3201      	adds	r2, #1
 8005720:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005722:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005724:	2000      	movs	r0, #0
}
 8005726:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005728:	333c      	adds	r3, #60	@ 0x3c
 800572a:	2200      	movs	r2, #0
 800572c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800572e:	f7fd f8d7 	bl	80028e0 <HAL_TIM_Base_MspInit>
 8005732:	e7d8      	b.n	80056e6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8005734:	2001      	movs	r0, #1
 8005736:	e7f6      	b.n	8005726 <HAL_TIM_Base_Init+0x4e>

08005738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005738:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800573a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573c:	4d03      	ldr	r5, [pc, #12]	@ (800574c <TIM_ETR_SetConfig+0x14>)
 800573e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	430a      	orrs	r2, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005748:	6083      	str	r3, [r0, #8]
}
 800574a:	bd30      	pop	{r4, r5, pc}
 800574c:	ffff00ff 	.word	0xffff00ff

08005750 <HAL_TIM_ConfigClockSource>:
{
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005754:	233c      	movs	r3, #60	@ 0x3c
 8005756:	5cc3      	ldrb	r3, [r0, r3]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d100      	bne.n	800575e <HAL_TIM_ConfigClockSource+0xe>
 800575c:	e0ad      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16a>
 800575e:	233c      	movs	r3, #60	@ 0x3c
 8005760:	2201      	movs	r2, #1
 8005762:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	3301      	adds	r3, #1
 8005766:	3201      	adds	r2, #1
 8005768:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800576a:	6802      	ldr	r2, [r0, #0]
 800576c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576e:	4854      	ldr	r0, [pc, #336]	@ (80058c0 <HAL_TIM_ConfigClockSource+0x170>)
 8005770:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005772:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005774:	680b      	ldr	r3, [r1, #0]
 8005776:	2b60      	cmp	r3, #96	@ 0x60
 8005778:	d064      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0xf4>
 800577a:	d838      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x9e>
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d100      	bne.n	8005782 <HAL_TIM_ConfigClockSource+0x32>
 8005780:	e07c      	b.n	800587c <HAL_TIM_ConfigClockSource+0x12c>
 8005782:	d816      	bhi.n	80057b2 <HAL_TIM_ConfigClockSource+0x62>
 8005784:	2b20      	cmp	r3, #32
 8005786:	d006      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x46>
 8005788:	d80f      	bhi.n	80057aa <HAL_TIM_ConfigClockSource+0x5a>
 800578a:	2210      	movs	r2, #16
 800578c:	0019      	movs	r1, r3
 800578e:	4391      	bics	r1, r2
 8005790:	2001      	movs	r0, #1
 8005792:	2900      	cmp	r1, #0
 8005794:	d141      	bne.n	800581a <HAL_TIM_ConfigClockSource+0xca>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005796:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005798:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800579a:	484a      	ldr	r0, [pc, #296]	@ (80058c4 <HAL_TIM_ConfigClockSource+0x174>)
 800579c:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579e:	4313      	orrs	r3, r2
 80057a0:	2207      	movs	r2, #7
 80057a2:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 80057a4:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2000      	movs	r0, #0
}
 80057a8:	e037      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 80057aa:	2001      	movs	r0, #1
 80057ac:	2b30      	cmp	r3, #48	@ 0x30
 80057ae:	d0f2      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x46>
 80057b0:	e033      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
 80057b2:	2001      	movs	r0, #1
 80057b4:	2b50      	cmp	r3, #80	@ 0x50
 80057b6:	d130      	bne.n	800581a <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b8:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ba:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80057bc:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80057be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c0:	6a1d      	ldr	r5, [r3, #32]
 80057c2:	2601      	movs	r6, #1
 80057c4:	43b5      	bics	r5, r6
 80057c6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c8:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ca:	36ef      	adds	r6, #239	@ 0xef
 80057cc:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ce:	0112      	lsls	r2, r2, #4
 80057d0:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d2:	250a      	movs	r5, #10
 80057d4:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80057d6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80057d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057da:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057dc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80057de:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e0:	4938      	ldr	r1, [pc, #224]	@ (80058c4 <HAL_TIM_ConfigClockSource+0x174>)
 80057e2:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e4:	2157      	movs	r1, #87	@ 0x57
 80057e6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80057e8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2000      	movs	r0, #0
}
 80057ec:	e015      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 80057ee:	2280      	movs	r2, #128	@ 0x80
 80057f0:	0152      	lsls	r2, r2, #5
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d05d      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x162>
 80057f6:	2280      	movs	r2, #128	@ 0x80
 80057f8:	0192      	lsls	r2, r2, #6
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d014      	beq.n	8005828 <HAL_TIM_ConfigClockSource+0xd8>
 80057fe:	2b70      	cmp	r3, #112	@ 0x70
 8005800:	d159      	bne.n	80058b6 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ETR_SetConfig(htim->Instance,
 8005802:	68cb      	ldr	r3, [r1, #12]
 8005804:	684a      	ldr	r2, [r1, #4]
 8005806:	6889      	ldr	r1, [r1, #8]
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	f7ff ff95 	bl	8005738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005812:	2177      	movs	r1, #119	@ 0x77
 8005814:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005816:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005818:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800581a:	233d      	movs	r3, #61	@ 0x3d
 800581c:	2201      	movs	r2, #1
 800581e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8005820:	3b01      	subs	r3, #1
 8005822:	2200      	movs	r2, #0
 8005824:	54e2      	strb	r2, [r4, r3]
}
 8005826:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	68cb      	ldr	r3, [r1, #12]
 800582a:	684a      	ldr	r2, [r1, #4]
 800582c:	6889      	ldr	r1, [r1, #8]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	f7ff ff82 	bl	8005738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	6891      	ldr	r1, [r2, #8]
 8005838:	2380      	movs	r3, #128	@ 0x80
 800583a:	01db      	lsls	r3, r3, #7
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2000      	movs	r0, #0
      break;
 8005842:	e7ea      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005844:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8005846:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005848:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 800584a:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584c:	6a1d      	ldr	r5, [r3, #32]
 800584e:	2610      	movs	r6, #16
 8005850:	43b5      	bics	r5, r6
 8005852:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005854:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005856:	4e1c      	ldr	r6, [pc, #112]	@ (80058c8 <HAL_TIM_ConfigClockSource+0x178>)
 8005858:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585a:	0309      	lsls	r1, r1, #12
 800585c:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585e:	25a0      	movs	r5, #160	@ 0xa0
 8005860:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8005862:	0112      	lsls	r2, r2, #4
 8005864:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8005866:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800586a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800586c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	4915      	ldr	r1, [pc, #84]	@ (80058c4 <HAL_TIM_ConfigClockSource+0x174>)
 8005870:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	2167      	movs	r1, #103	@ 0x67
 8005874:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005876:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2000      	movs	r0, #0
}
 800587a:	e7ce      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587c:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800587e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005880:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005882:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005884:	6a1d      	ldr	r5, [r3, #32]
 8005886:	2601      	movs	r6, #1
 8005888:	43b5      	bics	r5, r6
 800588a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588c:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588e:	36ef      	adds	r6, #239	@ 0xef
 8005890:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005892:	0112      	lsls	r2, r2, #4
 8005894:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005896:	250a      	movs	r5, #10
 8005898:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 800589a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800589c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80058a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a4:	4907      	ldr	r1, [pc, #28]	@ (80058c4 <HAL_TIM_ConfigClockSource+0x174>)
 80058a6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a8:	2147      	movs	r1, #71	@ 0x47
 80058aa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80058ac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2000      	movs	r0, #0
}
 80058b0:	e7b3      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2000      	movs	r0, #0
 80058b4:	e7b1      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 80058b6:	2001      	movs	r0, #1
 80058b8:	e7af      	b.n	800581a <HAL_TIM_ConfigClockSource+0xca>
  __HAL_LOCK(htim);
 80058ba:	2002      	movs	r0, #2
 80058bc:	e7b3      	b.n	8005826 <HAL_TIM_ConfigClockSource+0xd6>
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	ffce0088 	.word	0xffce0088
 80058c4:	ffcfff8f 	.word	0xffcfff8f
 80058c8:	ffff0fff 	.word	0xffff0fff

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ce:	233c      	movs	r3, #60	@ 0x3c
 80058d0:	5cc3      	ldrb	r3, [r0, r3]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d029      	beq.n	800592a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058d6:	233c      	movs	r3, #60	@ 0x3c
 80058d8:	2201      	movs	r2, #1
 80058da:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	3301      	adds	r3, #1
 80058de:	3201      	adds	r2, #1
 80058e0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e2:	6802      	ldr	r2, [r0, #0]
 80058e4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e6:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e8:	4d11      	ldr	r5, [pc, #68]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80058ea:	42aa      	cmp	r2, r5
 80058ec:	d018      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ee:	2570      	movs	r5, #112	@ 0x70
 80058f0:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f2:	680d      	ldr	r5, [r1, #0]
 80058f4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f8:	6803      	ldr	r3, [r0, #0]
 80058fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d002      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8005900:	4a0c      	ldr	r2, [pc, #48]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d104      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005906:	2280      	movs	r2, #128	@ 0x80
 8005908:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800590a:	688a      	ldr	r2, [r1, #8]
 800590c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005910:	233d      	movs	r3, #61	@ 0x3d
 8005912:	2201      	movs	r2, #1
 8005914:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005916:	3b01      	subs	r3, #1
 8005918:	2200      	movs	r2, #0
 800591a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800591c:	2000      	movs	r0, #0
}
 800591e:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005920:	4d05      	ldr	r5, [pc, #20]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005922:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005924:	684d      	ldr	r5, [r1, #4]
 8005926:	432b      	orrs	r3, r5
 8005928:	e7e1      	b.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800592a:	2002      	movs	r0, #2
 800592c:	e7f7      	b.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400
 8005938:	ff0fffff 	.word	0xff0fffff

0800593c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800593c:	4770      	bx	lr

0800593e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593e:	4770      	bx	lr

08005940 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005940:	4770      	bx	lr
	...

08005944 <sniprintf>:
 8005944:	b40c      	push	{r2, r3}
 8005946:	b530      	push	{r4, r5, lr}
 8005948:	4b18      	ldr	r3, [pc, #96]	@ (80059ac <sniprintf+0x68>)
 800594a:	000c      	movs	r4, r1
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	b09d      	sub	sp, #116	@ 0x74
 8005950:	2900      	cmp	r1, #0
 8005952:	da08      	bge.n	8005966 <sniprintf+0x22>
 8005954:	238b      	movs	r3, #139	@ 0x8b
 8005956:	2001      	movs	r0, #1
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	4240      	negs	r0, r0
 800595c:	b01d      	add	sp, #116	@ 0x74
 800595e:	bc30      	pop	{r4, r5}
 8005960:	bc08      	pop	{r3}
 8005962:	b002      	add	sp, #8
 8005964:	4718      	bx	r3
 8005966:	2382      	movs	r3, #130	@ 0x82
 8005968:	466a      	mov	r2, sp
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	8293      	strh	r3, [r2, #20]
 800596e:	2300      	movs	r3, #0
 8005970:	9002      	str	r0, [sp, #8]
 8005972:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005974:	9006      	str	r0, [sp, #24]
 8005976:	4299      	cmp	r1, r3
 8005978:	d000      	beq.n	800597c <sniprintf+0x38>
 800597a:	1e4b      	subs	r3, r1, #1
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	9307      	str	r3, [sp, #28]
 8005980:	2301      	movs	r3, #1
 8005982:	466a      	mov	r2, sp
 8005984:	425b      	negs	r3, r3
 8005986:	82d3      	strh	r3, [r2, #22]
 8005988:	0028      	movs	r0, r5
 800598a:	ab21      	add	r3, sp, #132	@ 0x84
 800598c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800598e:	a902      	add	r1, sp, #8
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	f000 f8c3 	bl	8005b1c <_svfiprintf_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	da01      	bge.n	800599e <sniprintf+0x5a>
 800599a:	238b      	movs	r3, #139	@ 0x8b
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	2c00      	cmp	r4, #0
 80059a0:	d0dc      	beq.n	800595c <sniprintf+0x18>
 80059a2:	2200      	movs	r2, #0
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e7d8      	b.n	800595c <sniprintf+0x18>
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	20000024 	.word	0x20000024

080059b0 <siprintf>:
 80059b0:	b40e      	push	{r1, r2, r3}
 80059b2:	b510      	push	{r4, lr}
 80059b4:	2400      	movs	r4, #0
 80059b6:	490c      	ldr	r1, [pc, #48]	@ (80059e8 <siprintf+0x38>)
 80059b8:	b09d      	sub	sp, #116	@ 0x74
 80059ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059bc:	9002      	str	r0, [sp, #8]
 80059be:	9006      	str	r0, [sp, #24]
 80059c0:	9107      	str	r1, [sp, #28]
 80059c2:	9104      	str	r1, [sp, #16]
 80059c4:	4809      	ldr	r0, [pc, #36]	@ (80059ec <siprintf+0x3c>)
 80059c6:	490a      	ldr	r1, [pc, #40]	@ (80059f0 <siprintf+0x40>)
 80059c8:	cb04      	ldmia	r3!, {r2}
 80059ca:	9105      	str	r1, [sp, #20]
 80059cc:	6800      	ldr	r0, [r0, #0]
 80059ce:	a902      	add	r1, sp, #8
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80059d4:	f000 f8a2 	bl	8005b1c <_svfiprintf_r>
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	701c      	strb	r4, [r3, #0]
 80059dc:	b01d      	add	sp, #116	@ 0x74
 80059de:	bc10      	pop	{r4}
 80059e0:	bc08      	pop	{r3}
 80059e2:	b003      	add	sp, #12
 80059e4:	4718      	bx	r3
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	7fffffff 	.word	0x7fffffff
 80059ec:	20000024 	.word	0x20000024
 80059f0:	ffff0208 	.word	0xffff0208

080059f4 <memset>:
 80059f4:	0003      	movs	r3, r0
 80059f6:	1882      	adds	r2, r0, r2
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d100      	bne.n	80059fe <memset+0xa>
 80059fc:	4770      	bx	lr
 80059fe:	7019      	strb	r1, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	e7f9      	b.n	80059f8 <memset+0x4>

08005a04 <__errno>:
 8005a04:	4b01      	ldr	r3, [pc, #4]	@ (8005a0c <__errno+0x8>)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	4770      	bx	lr
 8005a0a:	46c0      	nop			@ (mov r8, r8)
 8005a0c:	20000024 	.word	0x20000024

08005a10 <__libc_init_array>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	2600      	movs	r6, #0
 8005a14:	4c0c      	ldr	r4, [pc, #48]	@ (8005a48 <__libc_init_array+0x38>)
 8005a16:	4d0d      	ldr	r5, [pc, #52]	@ (8005a4c <__libc_init_array+0x3c>)
 8005a18:	1b64      	subs	r4, r4, r5
 8005a1a:	10a4      	asrs	r4, r4, #2
 8005a1c:	42a6      	cmp	r6, r4
 8005a1e:	d109      	bne.n	8005a34 <__libc_init_array+0x24>
 8005a20:	2600      	movs	r6, #0
 8005a22:	f000 fc61 	bl	80062e8 <_init>
 8005a26:	4c0a      	ldr	r4, [pc, #40]	@ (8005a50 <__libc_init_array+0x40>)
 8005a28:	4d0a      	ldr	r5, [pc, #40]	@ (8005a54 <__libc_init_array+0x44>)
 8005a2a:	1b64      	subs	r4, r4, r5
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	42a6      	cmp	r6, r4
 8005a30:	d105      	bne.n	8005a3e <__libc_init_array+0x2e>
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	00b3      	lsls	r3, r6, #2
 8005a36:	58eb      	ldr	r3, [r5, r3]
 8005a38:	4798      	blx	r3
 8005a3a:	3601      	adds	r6, #1
 8005a3c:	e7ee      	b.n	8005a1c <__libc_init_array+0xc>
 8005a3e:	00b3      	lsls	r3, r6, #2
 8005a40:	58eb      	ldr	r3, [r5, r3]
 8005a42:	4798      	blx	r3
 8005a44:	3601      	adds	r6, #1
 8005a46:	e7f2      	b.n	8005a2e <__libc_init_array+0x1e>
 8005a48:	08007a30 	.word	0x08007a30
 8005a4c:	08007a30 	.word	0x08007a30
 8005a50:	08007a34 	.word	0x08007a34
 8005a54:	08007a30 	.word	0x08007a30

08005a58 <__retarget_lock_acquire_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <__retarget_lock_release_recursive>:
 8005a5a:	4770      	bx	lr

08005a5c <__ssputs_r>:
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	688e      	ldr	r6, [r1, #8]
 8005a60:	b085      	sub	sp, #20
 8005a62:	001f      	movs	r7, r3
 8005a64:	000c      	movs	r4, r1
 8005a66:	680b      	ldr	r3, [r1, #0]
 8005a68:	9002      	str	r0, [sp, #8]
 8005a6a:	9203      	str	r2, [sp, #12]
 8005a6c:	42be      	cmp	r6, r7
 8005a6e:	d830      	bhi.n	8005ad2 <__ssputs_r+0x76>
 8005a70:	210c      	movs	r1, #12
 8005a72:	5e62      	ldrsh	r2, [r4, r1]
 8005a74:	2190      	movs	r1, #144	@ 0x90
 8005a76:	00c9      	lsls	r1, r1, #3
 8005a78:	420a      	tst	r2, r1
 8005a7a:	d028      	beq.n	8005ace <__ssputs_r+0x72>
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	6921      	ldr	r1, [r4, #16]
 8005a80:	1a5b      	subs	r3, r3, r1
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	6963      	ldr	r3, [r4, #20]
 8005a86:	4343      	muls	r3, r0
 8005a88:	9801      	ldr	r0, [sp, #4]
 8005a8a:	0fdd      	lsrs	r5, r3, #31
 8005a8c:	18ed      	adds	r5, r5, r3
 8005a8e:	1c7b      	adds	r3, r7, #1
 8005a90:	181b      	adds	r3, r3, r0
 8005a92:	106d      	asrs	r5, r5, #1
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	d900      	bls.n	8005a9a <__ssputs_r+0x3e>
 8005a98:	001d      	movs	r5, r3
 8005a9a:	0552      	lsls	r2, r2, #21
 8005a9c:	d528      	bpl.n	8005af0 <__ssputs_r+0x94>
 8005a9e:	0029      	movs	r1, r5
 8005aa0:	9802      	ldr	r0, [sp, #8]
 8005aa2:	f000 f95b 	bl	8005d5c <_malloc_r>
 8005aa6:	1e06      	subs	r6, r0, #0
 8005aa8:	d02c      	beq.n	8005b04 <__ssputs_r+0xa8>
 8005aaa:	9a01      	ldr	r2, [sp, #4]
 8005aac:	6921      	ldr	r1, [r4, #16]
 8005aae:	f000 fbc0 	bl	8006232 <memcpy>
 8005ab2:	89a2      	ldrh	r2, [r4, #12]
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <__ssputs_r+0xbc>)
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	2380      	movs	r3, #128	@ 0x80
 8005aba:	4313      	orrs	r3, r2
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	6126      	str	r6, [r4, #16]
 8005ac2:	18f6      	adds	r6, r6, r3
 8005ac4:	6026      	str	r6, [r4, #0]
 8005ac6:	003e      	movs	r6, r7
 8005ac8:	6165      	str	r5, [r4, #20]
 8005aca:	1aed      	subs	r5, r5, r3
 8005acc:	60a5      	str	r5, [r4, #8]
 8005ace:	42be      	cmp	r6, r7
 8005ad0:	d900      	bls.n	8005ad4 <__ssputs_r+0x78>
 8005ad2:	003e      	movs	r6, r7
 8005ad4:	0032      	movs	r2, r6
 8005ad6:	9903      	ldr	r1, [sp, #12]
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	f000 fb7b 	bl	80061d4 <memmove>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	1b9b      	subs	r3, r3, r6
 8005ae4:	60a3      	str	r3, [r4, #8]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	199b      	adds	r3, r3, r6
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	b005      	add	sp, #20
 8005aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af0:	002a      	movs	r2, r5
 8005af2:	9802      	ldr	r0, [sp, #8]
 8005af4:	f000 fb3e 	bl	8006174 <_realloc_r>
 8005af8:	1e06      	subs	r6, r0, #0
 8005afa:	d1e0      	bne.n	8005abe <__ssputs_r+0x62>
 8005afc:	6921      	ldr	r1, [r4, #16]
 8005afe:	9802      	ldr	r0, [sp, #8]
 8005b00:	f000 fba0 	bl	8006244 <_free_r>
 8005b04:	230c      	movs	r3, #12
 8005b06:	2001      	movs	r0, #1
 8005b08:	9a02      	ldr	r2, [sp, #8]
 8005b0a:	4240      	negs	r0, r0
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	89a2      	ldrh	r2, [r4, #12]
 8005b10:	3334      	adds	r3, #52	@ 0x34
 8005b12:	4313      	orrs	r3, r2
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	e7e9      	b.n	8005aec <__ssputs_r+0x90>
 8005b18:	fffffb7f 	.word	0xfffffb7f

08005b1c <_svfiprintf_r>:
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	b0a1      	sub	sp, #132	@ 0x84
 8005b20:	9003      	str	r0, [sp, #12]
 8005b22:	001d      	movs	r5, r3
 8005b24:	898b      	ldrh	r3, [r1, #12]
 8005b26:	000f      	movs	r7, r1
 8005b28:	0016      	movs	r6, r2
 8005b2a:	061b      	lsls	r3, r3, #24
 8005b2c:	d511      	bpl.n	8005b52 <_svfiprintf_r+0x36>
 8005b2e:	690b      	ldr	r3, [r1, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <_svfiprintf_r+0x36>
 8005b34:	2140      	movs	r1, #64	@ 0x40
 8005b36:	f000 f911 	bl	8005d5c <_malloc_r>
 8005b3a:	6038      	str	r0, [r7, #0]
 8005b3c:	6138      	str	r0, [r7, #16]
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d105      	bne.n	8005b4e <_svfiprintf_r+0x32>
 8005b42:	230c      	movs	r3, #12
 8005b44:	9a03      	ldr	r2, [sp, #12]
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	2001      	movs	r0, #1
 8005b4a:	4240      	negs	r0, r0
 8005b4c:	e0cf      	b.n	8005cee <_svfiprintf_r+0x1d2>
 8005b4e:	2340      	movs	r3, #64	@ 0x40
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	2300      	movs	r3, #0
 8005b54:	ac08      	add	r4, sp, #32
 8005b56:	6163      	str	r3, [r4, #20]
 8005b58:	3320      	adds	r3, #32
 8005b5a:	7663      	strb	r3, [r4, #25]
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	76a3      	strb	r3, [r4, #26]
 8005b60:	9507      	str	r5, [sp, #28]
 8005b62:	0035      	movs	r5, r6
 8005b64:	782b      	ldrb	r3, [r5, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <_svfiprintf_r+0x52>
 8005b6a:	2b25      	cmp	r3, #37	@ 0x25
 8005b6c:	d148      	bne.n	8005c00 <_svfiprintf_r+0xe4>
 8005b6e:	1bab      	subs	r3, r5, r6
 8005b70:	9305      	str	r3, [sp, #20]
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d00b      	beq.n	8005b8e <_svfiprintf_r+0x72>
 8005b76:	0032      	movs	r2, r6
 8005b78:	0039      	movs	r1, r7
 8005b7a:	9803      	ldr	r0, [sp, #12]
 8005b7c:	f7ff ff6e 	bl	8005a5c <__ssputs_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d100      	bne.n	8005b86 <_svfiprintf_r+0x6a>
 8005b84:	e0ae      	b.n	8005ce4 <_svfiprintf_r+0x1c8>
 8005b86:	6963      	ldr	r3, [r4, #20]
 8005b88:	9a05      	ldr	r2, [sp, #20]
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	6163      	str	r3, [r4, #20]
 8005b8e:	782b      	ldrb	r3, [r5, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d100      	bne.n	8005b96 <_svfiprintf_r+0x7a>
 8005b94:	e0a6      	b.n	8005ce4 <_svfiprintf_r+0x1c8>
 8005b96:	2201      	movs	r2, #1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4252      	negs	r2, r2
 8005b9c:	6062      	str	r2, [r4, #4]
 8005b9e:	a904      	add	r1, sp, #16
 8005ba0:	3254      	adds	r2, #84	@ 0x54
 8005ba2:	1852      	adds	r2, r2, r1
 8005ba4:	1c6e      	adds	r6, r5, #1
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	60e3      	str	r3, [r4, #12]
 8005baa:	60a3      	str	r3, [r4, #8]
 8005bac:	7013      	strb	r3, [r2, #0]
 8005bae:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005bb0:	4b54      	ldr	r3, [pc, #336]	@ (8005d04 <_svfiprintf_r+0x1e8>)
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	7831      	ldrb	r1, [r6, #0]
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	f000 fb2f 	bl	800621c <memchr>
 8005bbe:	1c75      	adds	r5, r6, #1
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d11f      	bne.n	8005c04 <_svfiprintf_r+0xe8>
 8005bc4:	6822      	ldr	r2, [r4, #0]
 8005bc6:	06d3      	lsls	r3, r2, #27
 8005bc8:	d504      	bpl.n	8005bd4 <_svfiprintf_r+0xb8>
 8005bca:	2353      	movs	r3, #83	@ 0x53
 8005bcc:	a904      	add	r1, sp, #16
 8005bce:	185b      	adds	r3, r3, r1
 8005bd0:	2120      	movs	r1, #32
 8005bd2:	7019      	strb	r1, [r3, #0]
 8005bd4:	0713      	lsls	r3, r2, #28
 8005bd6:	d504      	bpl.n	8005be2 <_svfiprintf_r+0xc6>
 8005bd8:	2353      	movs	r3, #83	@ 0x53
 8005bda:	a904      	add	r1, sp, #16
 8005bdc:	185b      	adds	r3, r3, r1
 8005bde:	212b      	movs	r1, #43	@ 0x2b
 8005be0:	7019      	strb	r1, [r3, #0]
 8005be2:	7833      	ldrb	r3, [r6, #0]
 8005be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be6:	d016      	beq.n	8005c16 <_svfiprintf_r+0xfa>
 8005be8:	0035      	movs	r5, r6
 8005bea:	2100      	movs	r1, #0
 8005bec:	200a      	movs	r0, #10
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	782a      	ldrb	r2, [r5, #0]
 8005bf2:	1c6e      	adds	r6, r5, #1
 8005bf4:	3a30      	subs	r2, #48	@ 0x30
 8005bf6:	2a09      	cmp	r2, #9
 8005bf8:	d950      	bls.n	8005c9c <_svfiprintf_r+0x180>
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	d111      	bne.n	8005c22 <_svfiprintf_r+0x106>
 8005bfe:	e017      	b.n	8005c30 <_svfiprintf_r+0x114>
 8005c00:	3501      	adds	r5, #1
 8005c02:	e7af      	b.n	8005b64 <_svfiprintf_r+0x48>
 8005c04:	9b05      	ldr	r3, [sp, #20]
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	1ac0      	subs	r0, r0, r3
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4083      	lsls	r3, r0
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	002e      	movs	r6, r5
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	e7cc      	b.n	8005bb0 <_svfiprintf_r+0x94>
 8005c16:	9b07      	ldr	r3, [sp, #28]
 8005c18:	1d19      	adds	r1, r3, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	9107      	str	r1, [sp, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	db01      	blt.n	8005c26 <_svfiprintf_r+0x10a>
 8005c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c24:	e004      	b.n	8005c30 <_svfiprintf_r+0x114>
 8005c26:	425b      	negs	r3, r3
 8005c28:	60e3      	str	r3, [r4, #12]
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	782b      	ldrb	r3, [r5, #0]
 8005c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c34:	d10c      	bne.n	8005c50 <_svfiprintf_r+0x134>
 8005c36:	786b      	ldrb	r3, [r5, #1]
 8005c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3a:	d134      	bne.n	8005ca6 <_svfiprintf_r+0x18a>
 8005c3c:	9b07      	ldr	r3, [sp, #28]
 8005c3e:	3502      	adds	r5, #2
 8005c40:	1d1a      	adds	r2, r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	9207      	str	r2, [sp, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da01      	bge.n	8005c4e <_svfiprintf_r+0x132>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c50:	4e2d      	ldr	r6, [pc, #180]	@ (8005d08 <_svfiprintf_r+0x1ec>)
 8005c52:	2203      	movs	r2, #3
 8005c54:	0030      	movs	r0, r6
 8005c56:	7829      	ldrb	r1, [r5, #0]
 8005c58:	f000 fae0 	bl	800621c <memchr>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d006      	beq.n	8005c6e <_svfiprintf_r+0x152>
 8005c60:	2340      	movs	r3, #64	@ 0x40
 8005c62:	1b80      	subs	r0, r0, r6
 8005c64:	4083      	lsls	r3, r0
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	3501      	adds	r5, #1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	7829      	ldrb	r1, [r5, #0]
 8005c70:	2206      	movs	r2, #6
 8005c72:	4826      	ldr	r0, [pc, #152]	@ (8005d0c <_svfiprintf_r+0x1f0>)
 8005c74:	1c6e      	adds	r6, r5, #1
 8005c76:	7621      	strb	r1, [r4, #24]
 8005c78:	f000 fad0 	bl	800621c <memchr>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d038      	beq.n	8005cf2 <_svfiprintf_r+0x1d6>
 8005c80:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <_svfiprintf_r+0x1f4>)
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d122      	bne.n	8005ccc <_svfiprintf_r+0x1b0>
 8005c86:	2207      	movs	r2, #7
 8005c88:	9b07      	ldr	r3, [sp, #28]
 8005c8a:	3307      	adds	r3, #7
 8005c8c:	4393      	bics	r3, r2
 8005c8e:	3308      	adds	r3, #8
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	6963      	ldr	r3, [r4, #20]
 8005c94:	9a04      	ldr	r2, [sp, #16]
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	6163      	str	r3, [r4, #20]
 8005c9a:	e762      	b.n	8005b62 <_svfiprintf_r+0x46>
 8005c9c:	4343      	muls	r3, r0
 8005c9e:	0035      	movs	r5, r6
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	189b      	adds	r3, r3, r2
 8005ca4:	e7a4      	b.n	8005bf0 <_svfiprintf_r+0xd4>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	200a      	movs	r0, #10
 8005caa:	0019      	movs	r1, r3
 8005cac:	3501      	adds	r5, #1
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	782a      	ldrb	r2, [r5, #0]
 8005cb2:	1c6e      	adds	r6, r5, #1
 8005cb4:	3a30      	subs	r2, #48	@ 0x30
 8005cb6:	2a09      	cmp	r2, #9
 8005cb8:	d903      	bls.n	8005cc2 <_svfiprintf_r+0x1a6>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0c8      	beq.n	8005c50 <_svfiprintf_r+0x134>
 8005cbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cc0:	e7c6      	b.n	8005c50 <_svfiprintf_r+0x134>
 8005cc2:	4341      	muls	r1, r0
 8005cc4:	0035      	movs	r5, r6
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	1889      	adds	r1, r1, r2
 8005cca:	e7f1      	b.n	8005cb0 <_svfiprintf_r+0x194>
 8005ccc:	aa07      	add	r2, sp, #28
 8005cce:	9200      	str	r2, [sp, #0]
 8005cd0:	0021      	movs	r1, r4
 8005cd2:	003a      	movs	r2, r7
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <_svfiprintf_r+0x1f8>)
 8005cd6:	9803      	ldr	r0, [sp, #12]
 8005cd8:	e000      	b.n	8005cdc <_svfiprintf_r+0x1c0>
 8005cda:	bf00      	nop
 8005cdc:	9004      	str	r0, [sp, #16]
 8005cde:	9b04      	ldr	r3, [sp, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	d1d6      	bne.n	8005c92 <_svfiprintf_r+0x176>
 8005ce4:	89bb      	ldrh	r3, [r7, #12]
 8005ce6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005ce8:	065b      	lsls	r3, r3, #25
 8005cea:	d500      	bpl.n	8005cee <_svfiprintf_r+0x1d2>
 8005cec:	e72c      	b.n	8005b48 <_svfiprintf_r+0x2c>
 8005cee:	b021      	add	sp, #132	@ 0x84
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf2:	aa07      	add	r2, sp, #28
 8005cf4:	9200      	str	r2, [sp, #0]
 8005cf6:	0021      	movs	r1, r4
 8005cf8:	003a      	movs	r2, r7
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <_svfiprintf_r+0x1f8>)
 8005cfc:	9803      	ldr	r0, [sp, #12]
 8005cfe:	f000 f91d 	bl	8005f3c <_printf_i>
 8005d02:	e7eb      	b.n	8005cdc <_svfiprintf_r+0x1c0>
 8005d04:	080079fc 	.word	0x080079fc
 8005d08:	08007a02 	.word	0x08007a02
 8005d0c:	08007a06 	.word	0x08007a06
 8005d10:	00000000 	.word	0x00000000
 8005d14:	08005a5d 	.word	0x08005a5d

08005d18 <sbrk_aligned>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005d58 <sbrk_aligned+0x40>)
 8005d1c:	000d      	movs	r5, r1
 8005d1e:	6831      	ldr	r1, [r6, #0]
 8005d20:	0004      	movs	r4, r0
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d102      	bne.n	8005d2c <sbrk_aligned+0x14>
 8005d26:	f000 fa67 	bl	80061f8 <_sbrk_r>
 8005d2a:	6030      	str	r0, [r6, #0]
 8005d2c:	0029      	movs	r1, r5
 8005d2e:	0020      	movs	r0, r4
 8005d30:	f000 fa62 	bl	80061f8 <_sbrk_r>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d103      	bne.n	8005d40 <sbrk_aligned+0x28>
 8005d38:	2501      	movs	r5, #1
 8005d3a:	426d      	negs	r5, r5
 8005d3c:	0028      	movs	r0, r5
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	2303      	movs	r3, #3
 8005d42:	1cc5      	adds	r5, r0, #3
 8005d44:	439d      	bics	r5, r3
 8005d46:	42a8      	cmp	r0, r5
 8005d48:	d0f8      	beq.n	8005d3c <sbrk_aligned+0x24>
 8005d4a:	1a29      	subs	r1, r5, r0
 8005d4c:	0020      	movs	r0, r4
 8005d4e:	f000 fa53 	bl	80061f8 <_sbrk_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	d1f2      	bne.n	8005d3c <sbrk_aligned+0x24>
 8005d56:	e7ef      	b.n	8005d38 <sbrk_aligned+0x20>
 8005d58:	2000092c 	.word	0x2000092c

08005d5c <_malloc_r>:
 8005d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5e:	2203      	movs	r2, #3
 8005d60:	1ccb      	adds	r3, r1, #3
 8005d62:	4393      	bics	r3, r2
 8005d64:	3308      	adds	r3, #8
 8005d66:	0005      	movs	r5, r0
 8005d68:	001f      	movs	r7, r3
 8005d6a:	2b0c      	cmp	r3, #12
 8005d6c:	d234      	bcs.n	8005dd8 <_malloc_r+0x7c>
 8005d6e:	270c      	movs	r7, #12
 8005d70:	42b9      	cmp	r1, r7
 8005d72:	d833      	bhi.n	8005ddc <_malloc_r+0x80>
 8005d74:	0028      	movs	r0, r5
 8005d76:	f000 f9ed 	bl	8006154 <__malloc_lock>
 8005d7a:	4e37      	ldr	r6, [pc, #220]	@ (8005e58 <_malloc_r+0xfc>)
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	001c      	movs	r4, r3
 8005d80:	2c00      	cmp	r4, #0
 8005d82:	d12f      	bne.n	8005de4 <_malloc_r+0x88>
 8005d84:	0039      	movs	r1, r7
 8005d86:	0028      	movs	r0, r5
 8005d88:	f7ff ffc6 	bl	8005d18 <sbrk_aligned>
 8005d8c:	0004      	movs	r4, r0
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d15f      	bne.n	8005e52 <_malloc_r+0xf6>
 8005d92:	6834      	ldr	r4, [r6, #0]
 8005d94:	9400      	str	r4, [sp, #0]
 8005d96:	9b00      	ldr	r3, [sp, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d14a      	bne.n	8005e32 <_malloc_r+0xd6>
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	d052      	beq.n	8005e46 <_malloc_r+0xea>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	0028      	movs	r0, r5
 8005da4:	18e3      	adds	r3, r4, r3
 8005da6:	9900      	ldr	r1, [sp, #0]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	f000 fa25 	bl	80061f8 <_sbrk_r>
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	4283      	cmp	r3, r0
 8005db2:	d148      	bne.n	8005e46 <_malloc_r+0xea>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	0028      	movs	r0, r5
 8005db8:	1aff      	subs	r7, r7, r3
 8005dba:	0039      	movs	r1, r7
 8005dbc:	f7ff ffac 	bl	8005d18 <sbrk_aligned>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d040      	beq.n	8005e46 <_malloc_r+0xea>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	19db      	adds	r3, r3, r7
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	6833      	ldr	r3, [r6, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d133      	bne.n	8005e3a <_malloc_r+0xde>
 8005dd2:	9b00      	ldr	r3, [sp, #0]
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	e019      	b.n	8005e0c <_malloc_r+0xb0>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dac9      	bge.n	8005d70 <_malloc_r+0x14>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	2000      	movs	r0, #0
 8005de2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	1bc9      	subs	r1, r1, r7
 8005de8:	d420      	bmi.n	8005e2c <_malloc_r+0xd0>
 8005dea:	290b      	cmp	r1, #11
 8005dec:	d90a      	bls.n	8005e04 <_malloc_r+0xa8>
 8005dee:	19e2      	adds	r2, r4, r7
 8005df0:	6027      	str	r7, [r4, #0]
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	d104      	bne.n	8005e00 <_malloc_r+0xa4>
 8005df6:	6032      	str	r2, [r6, #0]
 8005df8:	6863      	ldr	r3, [r4, #4]
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	6053      	str	r3, [r2, #4]
 8005dfe:	e005      	b.n	8005e0c <_malloc_r+0xb0>
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	e7f9      	b.n	8005df8 <_malloc_r+0x9c>
 8005e04:	6862      	ldr	r2, [r4, #4]
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	d10e      	bne.n	8005e28 <_malloc_r+0xcc>
 8005e0a:	6032      	str	r2, [r6, #0]
 8005e0c:	0028      	movs	r0, r5
 8005e0e:	f000 f9a9 	bl	8006164 <__malloc_unlock>
 8005e12:	0020      	movs	r0, r4
 8005e14:	2207      	movs	r2, #7
 8005e16:	300b      	adds	r0, #11
 8005e18:	1d23      	adds	r3, r4, #4
 8005e1a:	4390      	bics	r0, r2
 8005e1c:	1ac2      	subs	r2, r0, r3
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	d0df      	beq.n	8005de2 <_malloc_r+0x86>
 8005e22:	1a1b      	subs	r3, r3, r0
 8005e24:	50a3      	str	r3, [r4, r2]
 8005e26:	e7dc      	b.n	8005de2 <_malloc_r+0x86>
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	e7ef      	b.n	8005e0c <_malloc_r+0xb0>
 8005e2c:	0023      	movs	r3, r4
 8005e2e:	6864      	ldr	r4, [r4, #4]
 8005e30:	e7a6      	b.n	8005d80 <_malloc_r+0x24>
 8005e32:	9c00      	ldr	r4, [sp, #0]
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	e7ad      	b.n	8005d96 <_malloc_r+0x3a>
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	d1fb      	bne.n	8005e3a <_malloc_r+0xde>
 8005e42:	2300      	movs	r3, #0
 8005e44:	e7da      	b.n	8005dfc <_malloc_r+0xa0>
 8005e46:	230c      	movs	r3, #12
 8005e48:	0028      	movs	r0, r5
 8005e4a:	602b      	str	r3, [r5, #0]
 8005e4c:	f000 f98a 	bl	8006164 <__malloc_unlock>
 8005e50:	e7c6      	b.n	8005de0 <_malloc_r+0x84>
 8005e52:	6007      	str	r7, [r0, #0]
 8005e54:	e7da      	b.n	8005e0c <_malloc_r+0xb0>
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	20000930 	.word	0x20000930

08005e5c <_printf_common>:
 8005e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5e:	0016      	movs	r6, r2
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	688a      	ldr	r2, [r1, #8]
 8005e64:	690b      	ldr	r3, [r1, #16]
 8005e66:	000c      	movs	r4, r1
 8005e68:	9000      	str	r0, [sp, #0]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	da00      	bge.n	8005e70 <_printf_common+0x14>
 8005e6e:	0013      	movs	r3, r2
 8005e70:	0022      	movs	r2, r4
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	3243      	adds	r2, #67	@ 0x43
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	d001      	beq.n	8005e80 <_printf_common+0x24>
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	6033      	str	r3, [r6, #0]
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	069b      	lsls	r3, r3, #26
 8005e84:	d502      	bpl.n	8005e8c <_printf_common+0x30>
 8005e86:	6833      	ldr	r3, [r6, #0]
 8005e88:	3302      	adds	r3, #2
 8005e8a:	6033      	str	r3, [r6, #0]
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	2306      	movs	r3, #6
 8005e90:	0015      	movs	r5, r2
 8005e92:	401d      	ands	r5, r3
 8005e94:	421a      	tst	r2, r3
 8005e96:	d027      	beq.n	8005ee8 <_printf_common+0x8c>
 8005e98:	0023      	movs	r3, r4
 8005e9a:	3343      	adds	r3, #67	@ 0x43
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	1e5a      	subs	r2, r3, #1
 8005ea0:	4193      	sbcs	r3, r2
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	0692      	lsls	r2, r2, #26
 8005ea6:	d430      	bmi.n	8005f0a <_printf_common+0xae>
 8005ea8:	0022      	movs	r2, r4
 8005eaa:	9901      	ldr	r1, [sp, #4]
 8005eac:	9800      	ldr	r0, [sp, #0]
 8005eae:	9d08      	ldr	r5, [sp, #32]
 8005eb0:	3243      	adds	r2, #67	@ 0x43
 8005eb2:	47a8      	blx	r5
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d025      	beq.n	8005f04 <_printf_common+0xa8>
 8005eb8:	2206      	movs	r2, #6
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d105      	bne.n	8005ed0 <_printf_common+0x74>
 8005ec4:	6833      	ldr	r3, [r6, #0]
 8005ec6:	68e5      	ldr	r5, [r4, #12]
 8005ec8:	1aed      	subs	r5, r5, r3
 8005eca:	43eb      	mvns	r3, r5
 8005ecc:	17db      	asrs	r3, r3, #31
 8005ece:	401d      	ands	r5, r3
 8005ed0:	68a3      	ldr	r3, [r4, #8]
 8005ed2:	6922      	ldr	r2, [r4, #16]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	dd01      	ble.n	8005edc <_printf_common+0x80>
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	18ed      	adds	r5, r5, r3
 8005edc:	2600      	movs	r6, #0
 8005ede:	42b5      	cmp	r5, r6
 8005ee0:	d120      	bne.n	8005f24 <_printf_common+0xc8>
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	e010      	b.n	8005f08 <_printf_common+0xac>
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	68e3      	ldr	r3, [r4, #12]
 8005eea:	6832      	ldr	r2, [r6, #0]
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	42ab      	cmp	r3, r5
 8005ef0:	ddd2      	ble.n	8005e98 <_printf_common+0x3c>
 8005ef2:	0022      	movs	r2, r4
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	9901      	ldr	r1, [sp, #4]
 8005ef8:	9800      	ldr	r0, [sp, #0]
 8005efa:	9f08      	ldr	r7, [sp, #32]
 8005efc:	3219      	adds	r2, #25
 8005efe:	47b8      	blx	r7
 8005f00:	3001      	adds	r0, #1
 8005f02:	d1f0      	bne.n	8005ee6 <_printf_common+0x8a>
 8005f04:	2001      	movs	r0, #1
 8005f06:	4240      	negs	r0, r0
 8005f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f0a:	2030      	movs	r0, #48	@ 0x30
 8005f0c:	18e1      	adds	r1, r4, r3
 8005f0e:	3143      	adds	r1, #67	@ 0x43
 8005f10:	7008      	strb	r0, [r1, #0]
 8005f12:	0021      	movs	r1, r4
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	3145      	adds	r1, #69	@ 0x45
 8005f18:	7809      	ldrb	r1, [r1, #0]
 8005f1a:	18a2      	adds	r2, r4, r2
 8005f1c:	3243      	adds	r2, #67	@ 0x43
 8005f1e:	3302      	adds	r3, #2
 8005f20:	7011      	strb	r1, [r2, #0]
 8005f22:	e7c1      	b.n	8005ea8 <_printf_common+0x4c>
 8005f24:	0022      	movs	r2, r4
 8005f26:	2301      	movs	r3, #1
 8005f28:	9901      	ldr	r1, [sp, #4]
 8005f2a:	9800      	ldr	r0, [sp, #0]
 8005f2c:	9f08      	ldr	r7, [sp, #32]
 8005f2e:	321a      	adds	r2, #26
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa8>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d1      	b.n	8005ede <_printf_common+0x82>
	...

08005f3c <_printf_i>:
 8005f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f3e:	b08b      	sub	sp, #44	@ 0x2c
 8005f40:	9206      	str	r2, [sp, #24]
 8005f42:	000a      	movs	r2, r1
 8005f44:	3243      	adds	r2, #67	@ 0x43
 8005f46:	9307      	str	r3, [sp, #28]
 8005f48:	9005      	str	r0, [sp, #20]
 8005f4a:	9203      	str	r2, [sp, #12]
 8005f4c:	7e0a      	ldrb	r2, [r1, #24]
 8005f4e:	000c      	movs	r4, r1
 8005f50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f52:	2a78      	cmp	r2, #120	@ 0x78
 8005f54:	d809      	bhi.n	8005f6a <_printf_i+0x2e>
 8005f56:	2a62      	cmp	r2, #98	@ 0x62
 8005f58:	d80b      	bhi.n	8005f72 <_printf_i+0x36>
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d100      	bne.n	8005f60 <_printf_i+0x24>
 8005f5e:	e0ba      	b.n	80060d6 <_printf_i+0x19a>
 8005f60:	497a      	ldr	r1, [pc, #488]	@ (800614c <_printf_i+0x210>)
 8005f62:	9104      	str	r1, [sp, #16]
 8005f64:	2a58      	cmp	r2, #88	@ 0x58
 8005f66:	d100      	bne.n	8005f6a <_printf_i+0x2e>
 8005f68:	e08e      	b.n	8006088 <_printf_i+0x14c>
 8005f6a:	0025      	movs	r5, r4
 8005f6c:	3542      	adds	r5, #66	@ 0x42
 8005f6e:	702a      	strb	r2, [r5, #0]
 8005f70:	e022      	b.n	8005fb8 <_printf_i+0x7c>
 8005f72:	0010      	movs	r0, r2
 8005f74:	3863      	subs	r0, #99	@ 0x63
 8005f76:	2815      	cmp	r0, #21
 8005f78:	d8f7      	bhi.n	8005f6a <_printf_i+0x2e>
 8005f7a:	f7fa f8c1 	bl	8000100 <__gnu_thumb1_case_shi>
 8005f7e:	0016      	.short	0x0016
 8005f80:	fff6001f 	.word	0xfff6001f
 8005f84:	fff6fff6 	.word	0xfff6fff6
 8005f88:	001ffff6 	.word	0x001ffff6
 8005f8c:	fff6fff6 	.word	0xfff6fff6
 8005f90:	fff6fff6 	.word	0xfff6fff6
 8005f94:	0036009f 	.word	0x0036009f
 8005f98:	fff6007e 	.word	0xfff6007e
 8005f9c:	00b0fff6 	.word	0x00b0fff6
 8005fa0:	0036fff6 	.word	0x0036fff6
 8005fa4:	fff6fff6 	.word	0xfff6fff6
 8005fa8:	0082      	.short	0x0082
 8005faa:	0025      	movs	r5, r4
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	3542      	adds	r5, #66	@ 0x42
 8005fb0:	1d11      	adds	r1, r2, #4
 8005fb2:	6019      	str	r1, [r3, #0]
 8005fb4:	6813      	ldr	r3, [r2, #0]
 8005fb6:	702b      	strb	r3, [r5, #0]
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e09e      	b.n	80060fa <_printf_i+0x1be>
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	6809      	ldr	r1, [r1, #0]
 8005fc0:	1d02      	adds	r2, r0, #4
 8005fc2:	060d      	lsls	r5, r1, #24
 8005fc4:	d50b      	bpl.n	8005fde <_printf_i+0xa2>
 8005fc6:	6806      	ldr	r6, [r0, #0]
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	2e00      	cmp	r6, #0
 8005fcc:	da03      	bge.n	8005fd6 <_printf_i+0x9a>
 8005fce:	232d      	movs	r3, #45	@ 0x2d
 8005fd0:	9a03      	ldr	r2, [sp, #12]
 8005fd2:	4276      	negs	r6, r6
 8005fd4:	7013      	strb	r3, [r2, #0]
 8005fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800614c <_printf_i+0x210>)
 8005fd8:	270a      	movs	r7, #10
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	e018      	b.n	8006010 <_printf_i+0xd4>
 8005fde:	6806      	ldr	r6, [r0, #0]
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	0649      	lsls	r1, r1, #25
 8005fe4:	d5f1      	bpl.n	8005fca <_printf_i+0x8e>
 8005fe6:	b236      	sxth	r6, r6
 8005fe8:	e7ef      	b.n	8005fca <_printf_i+0x8e>
 8005fea:	6808      	ldr	r0, [r1, #0]
 8005fec:	6819      	ldr	r1, [r3, #0]
 8005fee:	c940      	ldmia	r1!, {r6}
 8005ff0:	0605      	lsls	r5, r0, #24
 8005ff2:	d402      	bmi.n	8005ffa <_printf_i+0xbe>
 8005ff4:	0640      	lsls	r0, r0, #25
 8005ff6:	d500      	bpl.n	8005ffa <_printf_i+0xbe>
 8005ff8:	b2b6      	uxth	r6, r6
 8005ffa:	6019      	str	r1, [r3, #0]
 8005ffc:	4b53      	ldr	r3, [pc, #332]	@ (800614c <_printf_i+0x210>)
 8005ffe:	270a      	movs	r7, #10
 8006000:	9304      	str	r3, [sp, #16]
 8006002:	2a6f      	cmp	r2, #111	@ 0x6f
 8006004:	d100      	bne.n	8006008 <_printf_i+0xcc>
 8006006:	3f02      	subs	r7, #2
 8006008:	0023      	movs	r3, r4
 800600a:	2200      	movs	r2, #0
 800600c:	3343      	adds	r3, #67	@ 0x43
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	db06      	blt.n	8006026 <_printf_i+0xea>
 8006018:	2104      	movs	r1, #4
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	9d03      	ldr	r5, [sp, #12]
 800601e:	438a      	bics	r2, r1
 8006020:	6022      	str	r2, [r4, #0]
 8006022:	4333      	orrs	r3, r6
 8006024:	d00c      	beq.n	8006040 <_printf_i+0x104>
 8006026:	9d03      	ldr	r5, [sp, #12]
 8006028:	0030      	movs	r0, r6
 800602a:	0039      	movs	r1, r7
 800602c:	f7fa f8f8 	bl	8000220 <__aeabi_uidivmod>
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	3d01      	subs	r5, #1
 8006034:	5c5b      	ldrb	r3, [r3, r1]
 8006036:	702b      	strb	r3, [r5, #0]
 8006038:	0033      	movs	r3, r6
 800603a:	0006      	movs	r6, r0
 800603c:	429f      	cmp	r7, r3
 800603e:	d9f3      	bls.n	8006028 <_printf_i+0xec>
 8006040:	2f08      	cmp	r7, #8
 8006042:	d109      	bne.n	8006058 <_printf_i+0x11c>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	07db      	lsls	r3, r3, #31
 8006048:	d506      	bpl.n	8006058 <_printf_i+0x11c>
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	429a      	cmp	r2, r3
 8006050:	dc02      	bgt.n	8006058 <_printf_i+0x11c>
 8006052:	2330      	movs	r3, #48	@ 0x30
 8006054:	3d01      	subs	r5, #1
 8006056:	702b      	strb	r3, [r5, #0]
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1b5b      	subs	r3, r3, r5
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	9b07      	ldr	r3, [sp, #28]
 8006060:	0021      	movs	r1, r4
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9805      	ldr	r0, [sp, #20]
 8006066:	9b06      	ldr	r3, [sp, #24]
 8006068:	aa09      	add	r2, sp, #36	@ 0x24
 800606a:	f7ff fef7 	bl	8005e5c <_printf_common>
 800606e:	3001      	adds	r0, #1
 8006070:	d148      	bne.n	8006104 <_printf_i+0x1c8>
 8006072:	2001      	movs	r0, #1
 8006074:	4240      	negs	r0, r0
 8006076:	b00b      	add	sp, #44	@ 0x2c
 8006078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607a:	2220      	movs	r2, #32
 800607c:	6809      	ldr	r1, [r1, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	6022      	str	r2, [r4, #0]
 8006082:	2278      	movs	r2, #120	@ 0x78
 8006084:	4932      	ldr	r1, [pc, #200]	@ (8006150 <_printf_i+0x214>)
 8006086:	9104      	str	r1, [sp, #16]
 8006088:	0021      	movs	r1, r4
 800608a:	3145      	adds	r1, #69	@ 0x45
 800608c:	700a      	strb	r2, [r1, #0]
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	c940      	ldmia	r1!, {r6}
 8006094:	0610      	lsls	r0, r2, #24
 8006096:	d402      	bmi.n	800609e <_printf_i+0x162>
 8006098:	0650      	lsls	r0, r2, #25
 800609a:	d500      	bpl.n	800609e <_printf_i+0x162>
 800609c:	b2b6      	uxth	r6, r6
 800609e:	6019      	str	r1, [r3, #0]
 80060a0:	07d3      	lsls	r3, r2, #31
 80060a2:	d502      	bpl.n	80060aa <_printf_i+0x16e>
 80060a4:	2320      	movs	r3, #32
 80060a6:	4313      	orrs	r3, r2
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d001      	beq.n	80060b2 <_printf_i+0x176>
 80060ae:	2710      	movs	r7, #16
 80060b0:	e7aa      	b.n	8006008 <_printf_i+0xcc>
 80060b2:	2220      	movs	r2, #32
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	4393      	bics	r3, r2
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	e7f8      	b.n	80060ae <_printf_i+0x172>
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	680d      	ldr	r5, [r1, #0]
 80060c0:	1d10      	adds	r0, r2, #4
 80060c2:	6949      	ldr	r1, [r1, #20]
 80060c4:	6018      	str	r0, [r3, #0]
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	062e      	lsls	r6, r5, #24
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0x194>
 80060cc:	6019      	str	r1, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <_printf_i+0x19a>
 80060d0:	066d      	lsls	r5, r5, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0x190>
 80060d4:	8019      	strh	r1, [r3, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9d03      	ldr	r5, [sp, #12]
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	e7bf      	b.n	800605e <_printf_i+0x122>
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	1d11      	adds	r1, r2, #4
 80060e2:	6019      	str	r1, [r3, #0]
 80060e4:	6815      	ldr	r5, [r2, #0]
 80060e6:	2100      	movs	r1, #0
 80060e8:	0028      	movs	r0, r5
 80060ea:	6862      	ldr	r2, [r4, #4]
 80060ec:	f000 f896 	bl	800621c <memchr>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d001      	beq.n	80060f8 <_printf_i+0x1bc>
 80060f4:	1b40      	subs	r0, r0, r5
 80060f6:	6060      	str	r0, [r4, #4]
 80060f8:	6863      	ldr	r3, [r4, #4]
 80060fa:	6123      	str	r3, [r4, #16]
 80060fc:	2300      	movs	r3, #0
 80060fe:	9a03      	ldr	r2, [sp, #12]
 8006100:	7013      	strb	r3, [r2, #0]
 8006102:	e7ac      	b.n	800605e <_printf_i+0x122>
 8006104:	002a      	movs	r2, r5
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	9906      	ldr	r1, [sp, #24]
 800610a:	9805      	ldr	r0, [sp, #20]
 800610c:	9d07      	ldr	r5, [sp, #28]
 800610e:	47a8      	blx	r5
 8006110:	3001      	adds	r0, #1
 8006112:	d0ae      	beq.n	8006072 <_printf_i+0x136>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	079b      	lsls	r3, r3, #30
 8006118:	d415      	bmi.n	8006146 <_printf_i+0x20a>
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	68e0      	ldr	r0, [r4, #12]
 800611e:	4298      	cmp	r0, r3
 8006120:	daa9      	bge.n	8006076 <_printf_i+0x13a>
 8006122:	0018      	movs	r0, r3
 8006124:	e7a7      	b.n	8006076 <_printf_i+0x13a>
 8006126:	0022      	movs	r2, r4
 8006128:	2301      	movs	r3, #1
 800612a:	9906      	ldr	r1, [sp, #24]
 800612c:	9805      	ldr	r0, [sp, #20]
 800612e:	9e07      	ldr	r6, [sp, #28]
 8006130:	3219      	adds	r2, #25
 8006132:	47b0      	blx	r6
 8006134:	3001      	adds	r0, #1
 8006136:	d09c      	beq.n	8006072 <_printf_i+0x136>
 8006138:	3501      	adds	r5, #1
 800613a:	68e3      	ldr	r3, [r4, #12]
 800613c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	42ab      	cmp	r3, r5
 8006142:	dcf0      	bgt.n	8006126 <_printf_i+0x1ea>
 8006144:	e7e9      	b.n	800611a <_printf_i+0x1de>
 8006146:	2500      	movs	r5, #0
 8006148:	e7f7      	b.n	800613a <_printf_i+0x1fe>
 800614a:	46c0      	nop			@ (mov r8, r8)
 800614c:	08007a0d 	.word	0x08007a0d
 8006150:	08007a1e 	.word	0x08007a1e

08006154 <__malloc_lock>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4802      	ldr	r0, [pc, #8]	@ (8006160 <__malloc_lock+0xc>)
 8006158:	f7ff fc7e 	bl	8005a58 <__retarget_lock_acquire_recursive>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	20000928 	.word	0x20000928

08006164 <__malloc_unlock>:
 8006164:	b510      	push	{r4, lr}
 8006166:	4802      	ldr	r0, [pc, #8]	@ (8006170 <__malloc_unlock+0xc>)
 8006168:	f7ff fc77 	bl	8005a5a <__retarget_lock_release_recursive>
 800616c:	bd10      	pop	{r4, pc}
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	20000928 	.word	0x20000928

08006174 <_realloc_r>:
 8006174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006176:	0006      	movs	r6, r0
 8006178:	000c      	movs	r4, r1
 800617a:	0015      	movs	r5, r2
 800617c:	2900      	cmp	r1, #0
 800617e:	d105      	bne.n	800618c <_realloc_r+0x18>
 8006180:	0011      	movs	r1, r2
 8006182:	f7ff fdeb 	bl	8005d5c <_malloc_r>
 8006186:	0004      	movs	r4, r0
 8006188:	0020      	movs	r0, r4
 800618a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800618c:	2a00      	cmp	r2, #0
 800618e:	d103      	bne.n	8006198 <_realloc_r+0x24>
 8006190:	f000 f858 	bl	8006244 <_free_r>
 8006194:	002c      	movs	r4, r5
 8006196:	e7f7      	b.n	8006188 <_realloc_r+0x14>
 8006198:	f000 f89e 	bl	80062d8 <_malloc_usable_size_r>
 800619c:	0007      	movs	r7, r0
 800619e:	4285      	cmp	r5, r0
 80061a0:	d802      	bhi.n	80061a8 <_realloc_r+0x34>
 80061a2:	0843      	lsrs	r3, r0, #1
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	d3ef      	bcc.n	8006188 <_realloc_r+0x14>
 80061a8:	0029      	movs	r1, r5
 80061aa:	0030      	movs	r0, r6
 80061ac:	f7ff fdd6 	bl	8005d5c <_malloc_r>
 80061b0:	9001      	str	r0, [sp, #4]
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d101      	bne.n	80061ba <_realloc_r+0x46>
 80061b6:	9c01      	ldr	r4, [sp, #4]
 80061b8:	e7e6      	b.n	8006188 <_realloc_r+0x14>
 80061ba:	002a      	movs	r2, r5
 80061bc:	42bd      	cmp	r5, r7
 80061be:	d900      	bls.n	80061c2 <_realloc_r+0x4e>
 80061c0:	003a      	movs	r2, r7
 80061c2:	0021      	movs	r1, r4
 80061c4:	9801      	ldr	r0, [sp, #4]
 80061c6:	f000 f834 	bl	8006232 <memcpy>
 80061ca:	0021      	movs	r1, r4
 80061cc:	0030      	movs	r0, r6
 80061ce:	f000 f839 	bl	8006244 <_free_r>
 80061d2:	e7f0      	b.n	80061b6 <_realloc_r+0x42>

080061d4 <memmove>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	4288      	cmp	r0, r1
 80061d8:	d902      	bls.n	80061e0 <memmove+0xc>
 80061da:	188b      	adds	r3, r1, r2
 80061dc:	4298      	cmp	r0, r3
 80061de:	d308      	bcc.n	80061f2 <memmove+0x1e>
 80061e0:	2300      	movs	r3, #0
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d007      	beq.n	80061f6 <memmove+0x22>
 80061e6:	5ccc      	ldrb	r4, [r1, r3]
 80061e8:	54c4      	strb	r4, [r0, r3]
 80061ea:	3301      	adds	r3, #1
 80061ec:	e7f9      	b.n	80061e2 <memmove+0xe>
 80061ee:	5c8b      	ldrb	r3, [r1, r2]
 80061f0:	5483      	strb	r3, [r0, r2]
 80061f2:	3a01      	subs	r2, #1
 80061f4:	d2fb      	bcs.n	80061ee <memmove+0x1a>
 80061f6:	bd10      	pop	{r4, pc}

080061f8 <_sbrk_r>:
 80061f8:	2300      	movs	r3, #0
 80061fa:	b570      	push	{r4, r5, r6, lr}
 80061fc:	4d06      	ldr	r5, [pc, #24]	@ (8006218 <_sbrk_r+0x20>)
 80061fe:	0004      	movs	r4, r0
 8006200:	0008      	movs	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fc fc82 	bl	8002b0c <_sbrk>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d103      	bne.n	8006214 <_sbrk_r+0x1c>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d000      	beq.n	8006214 <_sbrk_r+0x1c>
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	bd70      	pop	{r4, r5, r6, pc}
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	20000934 	.word	0x20000934

0800621c <memchr>:
 800621c:	b2c9      	uxtb	r1, r1
 800621e:	1882      	adds	r2, r0, r2
 8006220:	4290      	cmp	r0, r2
 8006222:	d101      	bne.n	8006228 <memchr+0xc>
 8006224:	2000      	movs	r0, #0
 8006226:	4770      	bx	lr
 8006228:	7803      	ldrb	r3, [r0, #0]
 800622a:	428b      	cmp	r3, r1
 800622c:	d0fb      	beq.n	8006226 <memchr+0xa>
 800622e:	3001      	adds	r0, #1
 8006230:	e7f6      	b.n	8006220 <memchr+0x4>

08006232 <memcpy>:
 8006232:	2300      	movs	r3, #0
 8006234:	b510      	push	{r4, lr}
 8006236:	429a      	cmp	r2, r3
 8006238:	d100      	bne.n	800623c <memcpy+0xa>
 800623a:	bd10      	pop	{r4, pc}
 800623c:	5ccc      	ldrb	r4, [r1, r3]
 800623e:	54c4      	strb	r4, [r0, r3]
 8006240:	3301      	adds	r3, #1
 8006242:	e7f8      	b.n	8006236 <memcpy+0x4>

08006244 <_free_r>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	0005      	movs	r5, r0
 8006248:	1e0c      	subs	r4, r1, #0
 800624a:	d010      	beq.n	800626e <_free_r+0x2a>
 800624c:	3c04      	subs	r4, #4
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	da00      	bge.n	8006256 <_free_r+0x12>
 8006254:	18e4      	adds	r4, r4, r3
 8006256:	0028      	movs	r0, r5
 8006258:	f7ff ff7c 	bl	8006154 <__malloc_lock>
 800625c:	4a1d      	ldr	r2, [pc, #116]	@ (80062d4 <_free_r+0x90>)
 800625e:	6813      	ldr	r3, [r2, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <_free_r+0x2c>
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	6014      	str	r4, [r2, #0]
 8006268:	0028      	movs	r0, r5
 800626a:	f7ff ff7b 	bl	8006164 <__malloc_unlock>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	42a3      	cmp	r3, r4
 8006272:	d908      	bls.n	8006286 <_free_r+0x42>
 8006274:	6820      	ldr	r0, [r4, #0]
 8006276:	1821      	adds	r1, r4, r0
 8006278:	428b      	cmp	r3, r1
 800627a:	d1f3      	bne.n	8006264 <_free_r+0x20>
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	1809      	adds	r1, r1, r0
 8006282:	6021      	str	r1, [r4, #0]
 8006284:	e7ee      	b.n	8006264 <_free_r+0x20>
 8006286:	001a      	movs	r2, r3
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <_free_r+0x4e>
 800628e:	42a3      	cmp	r3, r4
 8006290:	d9f9      	bls.n	8006286 <_free_r+0x42>
 8006292:	6811      	ldr	r1, [r2, #0]
 8006294:	1850      	adds	r0, r2, r1
 8006296:	42a0      	cmp	r0, r4
 8006298:	d10b      	bne.n	80062b2 <_free_r+0x6e>
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	1809      	adds	r1, r1, r0
 800629e:	1850      	adds	r0, r2, r1
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	4283      	cmp	r3, r0
 80062a4:	d1e0      	bne.n	8006268 <_free_r+0x24>
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	1841      	adds	r1, r0, r1
 80062ac:	6011      	str	r1, [r2, #0]
 80062ae:	6053      	str	r3, [r2, #4]
 80062b0:	e7da      	b.n	8006268 <_free_r+0x24>
 80062b2:	42a0      	cmp	r0, r4
 80062b4:	d902      	bls.n	80062bc <_free_r+0x78>
 80062b6:	230c      	movs	r3, #12
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	e7d5      	b.n	8006268 <_free_r+0x24>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	1821      	adds	r1, r4, r0
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d103      	bne.n	80062cc <_free_r+0x88>
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	1809      	adds	r1, r1, r0
 80062ca:	6021      	str	r1, [r4, #0]
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	6054      	str	r4, [r2, #4]
 80062d0:	e7ca      	b.n	8006268 <_free_r+0x24>
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	20000930 	.word	0x20000930

080062d8 <_malloc_usable_size_r>:
 80062d8:	1f0b      	subs	r3, r1, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1f18      	subs	r0, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da01      	bge.n	80062e6 <_malloc_usable_size_r+0xe>
 80062e2:	580b      	ldr	r3, [r1, r0]
 80062e4:	18c0      	adds	r0, r0, r3
 80062e6:	4770      	bx	lr

080062e8 <_init>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr

080062f4 <_fini>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr
