
Smart_Speedometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001650  08005bd4  08005bd4  00006bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007224  08007224  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007224  08007224  00009074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007224  08007224  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00008224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007228  08007228  00008228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800722c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  20000074  080072a0  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  080072a0  00009858  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeb2  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bd  00000000  00000000  00023f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00027610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000181be  00000000  00000000  000287b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d6a7  00000000  00000000  00040976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00098782  00000000  00000000  0005e01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f679f  2**0
                  CONTENTS, READONLY
 19 .debug_loclists 0000e725  00000000  00000000  000f67e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000fce  00000000  00000000  00104f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003688  00000000  00000000  00105ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00109560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005bbc 	.word	0x08005bbc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08005bbc 	.word	0x08005bbc

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_f2uiz>:
 8000400:	219e      	movs	r1, #158	@ 0x9e
 8000402:	b510      	push	{r4, lr}
 8000404:	05c9      	lsls	r1, r1, #23
 8000406:	1c04      	adds	r4, r0, #0
 8000408:	f000 fc70 	bl	8000cec <__aeabi_fcmpge>
 800040c:	2800      	cmp	r0, #0
 800040e:	d103      	bne.n	8000418 <__aeabi_f2uiz+0x18>
 8000410:	1c20      	adds	r0, r4, #0
 8000412:	f000 fbcb 	bl	8000bac <__aeabi_f2iz>
 8000416:	bd10      	pop	{r4, pc}
 8000418:	219e      	movs	r1, #158	@ 0x9e
 800041a:	1c20      	adds	r0, r4, #0
 800041c:	05c9      	lsls	r1, r1, #23
 800041e:	f000 f961 	bl	80006e4 <__aeabi_fsub>
 8000422:	f000 fbc3 	bl	8000bac <__aeabi_f2iz>
 8000426:	2380      	movs	r3, #128	@ 0x80
 8000428:	061b      	lsls	r3, r3, #24
 800042a:	469c      	mov	ip, r3
 800042c:	4460      	add	r0, ip
 800042e:	e7f2      	b.n	8000416 <__aeabi_f2uiz+0x16>

08000430 <__aeabi_fmul>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	0044      	lsls	r4, r0, #1
 800043a:	b5c0      	push	{r6, r7, lr}
 800043c:	0246      	lsls	r6, r0, #9
 800043e:	1c0f      	adds	r7, r1, #0
 8000440:	0a76      	lsrs	r6, r6, #9
 8000442:	0e24      	lsrs	r4, r4, #24
 8000444:	0fc5      	lsrs	r5, r0, #31
 8000446:	2c00      	cmp	r4, #0
 8000448:	d100      	bne.n	800044c <__aeabi_fmul+0x1c>
 800044a:	e0da      	b.n	8000602 <__aeabi_fmul+0x1d2>
 800044c:	2cff      	cmp	r4, #255	@ 0xff
 800044e:	d074      	beq.n	800053a <__aeabi_fmul+0x10a>
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	00f6      	lsls	r6, r6, #3
 8000454:	04db      	lsls	r3, r3, #19
 8000456:	431e      	orrs	r6, r3
 8000458:	2300      	movs	r3, #0
 800045a:	4699      	mov	r9, r3
 800045c:	469a      	mov	sl, r3
 800045e:	3c7f      	subs	r4, #127	@ 0x7f
 8000460:	027b      	lsls	r3, r7, #9
 8000462:	0a5b      	lsrs	r3, r3, #9
 8000464:	4698      	mov	r8, r3
 8000466:	007b      	lsls	r3, r7, #1
 8000468:	0e1b      	lsrs	r3, r3, #24
 800046a:	0fff      	lsrs	r7, r7, #31
 800046c:	2b00      	cmp	r3, #0
 800046e:	d074      	beq.n	800055a <__aeabi_fmul+0x12a>
 8000470:	2bff      	cmp	r3, #255	@ 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fmul+0x46>
 8000474:	e08e      	b.n	8000594 <__aeabi_fmul+0x164>
 8000476:	4642      	mov	r2, r8
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	00d2      	lsls	r2, r2, #3
 800047c:	04c9      	lsls	r1, r1, #19
 800047e:	4311      	orrs	r1, r2
 8000480:	3b7f      	subs	r3, #127	@ 0x7f
 8000482:	002a      	movs	r2, r5
 8000484:	18e4      	adds	r4, r4, r3
 8000486:	464b      	mov	r3, r9
 8000488:	407a      	eors	r2, r7
 800048a:	4688      	mov	r8, r1
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	2b0a      	cmp	r3, #10
 8000490:	dc75      	bgt.n	800057e <__aeabi_fmul+0x14e>
 8000492:	464b      	mov	r3, r9
 8000494:	2000      	movs	r0, #0
 8000496:	2b02      	cmp	r3, #2
 8000498:	dd0f      	ble.n	80004ba <__aeabi_fmul+0x8a>
 800049a:	4649      	mov	r1, r9
 800049c:	2301      	movs	r3, #1
 800049e:	408b      	lsls	r3, r1
 80004a0:	21a6      	movs	r1, #166	@ 0xa6
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	420b      	tst	r3, r1
 80004a6:	d169      	bne.n	800057c <__aeabi_fmul+0x14c>
 80004a8:	2190      	movs	r1, #144	@ 0x90
 80004aa:	0089      	lsls	r1, r1, #2
 80004ac:	420b      	tst	r3, r1
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fmul+0x82>
 80004b0:	e100      	b.n	80006b4 <__aeabi_fmul+0x284>
 80004b2:	2188      	movs	r1, #136	@ 0x88
 80004b4:	4219      	tst	r1, r3
 80004b6:	d000      	beq.n	80004ba <__aeabi_fmul+0x8a>
 80004b8:	e0f5      	b.n	80006a6 <__aeabi_fmul+0x276>
 80004ba:	4641      	mov	r1, r8
 80004bc:	0409      	lsls	r1, r1, #16
 80004be:	0c09      	lsrs	r1, r1, #16
 80004c0:	4643      	mov	r3, r8
 80004c2:	0008      	movs	r0, r1
 80004c4:	0c35      	lsrs	r5, r6, #16
 80004c6:	0436      	lsls	r6, r6, #16
 80004c8:	0c1b      	lsrs	r3, r3, #16
 80004ca:	0c36      	lsrs	r6, r6, #16
 80004cc:	4370      	muls	r0, r6
 80004ce:	4369      	muls	r1, r5
 80004d0:	435e      	muls	r6, r3
 80004d2:	435d      	muls	r5, r3
 80004d4:	1876      	adds	r6, r6, r1
 80004d6:	0c03      	lsrs	r3, r0, #16
 80004d8:	199b      	adds	r3, r3, r6
 80004da:	4299      	cmp	r1, r3
 80004dc:	d903      	bls.n	80004e6 <__aeabi_fmul+0xb6>
 80004de:	2180      	movs	r1, #128	@ 0x80
 80004e0:	0249      	lsls	r1, r1, #9
 80004e2:	468c      	mov	ip, r1
 80004e4:	4465      	add	r5, ip
 80004e6:	0400      	lsls	r0, r0, #16
 80004e8:	0419      	lsls	r1, r3, #16
 80004ea:	0c00      	lsrs	r0, r0, #16
 80004ec:	1809      	adds	r1, r1, r0
 80004ee:	018e      	lsls	r6, r1, #6
 80004f0:	1e70      	subs	r0, r6, #1
 80004f2:	4186      	sbcs	r6, r0
 80004f4:	0c1b      	lsrs	r3, r3, #16
 80004f6:	0e89      	lsrs	r1, r1, #26
 80004f8:	195b      	adds	r3, r3, r5
 80004fa:	430e      	orrs	r6, r1
 80004fc:	019b      	lsls	r3, r3, #6
 80004fe:	431e      	orrs	r6, r3
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	d46c      	bmi.n	80005de <__aeabi_fmul+0x1ae>
 8000504:	0023      	movs	r3, r4
 8000506:	337f      	adds	r3, #127	@ 0x7f
 8000508:	2b00      	cmp	r3, #0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fmul+0xde>
 800050c:	e0b1      	b.n	8000672 <__aeabi_fmul+0x242>
 800050e:	0015      	movs	r5, r2
 8000510:	0771      	lsls	r1, r6, #29
 8000512:	d00b      	beq.n	800052c <__aeabi_fmul+0xfc>
 8000514:	200f      	movs	r0, #15
 8000516:	0021      	movs	r1, r4
 8000518:	4030      	ands	r0, r6
 800051a:	2804      	cmp	r0, #4
 800051c:	d006      	beq.n	800052c <__aeabi_fmul+0xfc>
 800051e:	3604      	adds	r6, #4
 8000520:	0132      	lsls	r2, r6, #4
 8000522:	d503      	bpl.n	800052c <__aeabi_fmul+0xfc>
 8000524:	4b6e      	ldr	r3, [pc, #440]	@ (80006e0 <__aeabi_fmul+0x2b0>)
 8000526:	401e      	ands	r6, r3
 8000528:	000b      	movs	r3, r1
 800052a:	3380      	adds	r3, #128	@ 0x80
 800052c:	2bfe      	cmp	r3, #254	@ 0xfe
 800052e:	dd00      	ble.n	8000532 <__aeabi_fmul+0x102>
 8000530:	e0bd      	b.n	80006ae <__aeabi_fmul+0x27e>
 8000532:	01b2      	lsls	r2, r6, #6
 8000534:	0a52      	lsrs	r2, r2, #9
 8000536:	b2db      	uxtb	r3, r3
 8000538:	e048      	b.n	80005cc <__aeabi_fmul+0x19c>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fmul+0x110>
 800053e:	e092      	b.n	8000666 <__aeabi_fmul+0x236>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	469a      	mov	sl, r3
 8000548:	027b      	lsls	r3, r7, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	007b      	lsls	r3, r7, #1
 8000550:	24ff      	movs	r4, #255	@ 0xff
 8000552:	0e1b      	lsrs	r3, r3, #24
 8000554:	0fff      	lsrs	r7, r7, #31
 8000556:	2b00      	cmp	r3, #0
 8000558:	d18a      	bne.n	8000470 <__aeabi_fmul+0x40>
 800055a:	4642      	mov	r2, r8
 800055c:	2a00      	cmp	r2, #0
 800055e:	d164      	bne.n	800062a <__aeabi_fmul+0x1fa>
 8000560:	4649      	mov	r1, r9
 8000562:	3201      	adds	r2, #1
 8000564:	4311      	orrs	r1, r2
 8000566:	4689      	mov	r9, r1
 8000568:	290a      	cmp	r1, #10
 800056a:	dc08      	bgt.n	800057e <__aeabi_fmul+0x14e>
 800056c:	407d      	eors	r5, r7
 800056e:	2001      	movs	r0, #1
 8000570:	b2ea      	uxtb	r2, r5
 8000572:	2902      	cmp	r1, #2
 8000574:	dc91      	bgt.n	800049a <__aeabi_fmul+0x6a>
 8000576:	0015      	movs	r5, r2
 8000578:	2200      	movs	r2, #0
 800057a:	e027      	b.n	80005cc <__aeabi_fmul+0x19c>
 800057c:	0015      	movs	r5, r2
 800057e:	4653      	mov	r3, sl
 8000580:	2b02      	cmp	r3, #2
 8000582:	d100      	bne.n	8000586 <__aeabi_fmul+0x156>
 8000584:	e093      	b.n	80006ae <__aeabi_fmul+0x27e>
 8000586:	2b03      	cmp	r3, #3
 8000588:	d01a      	beq.n	80005c0 <__aeabi_fmul+0x190>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d12c      	bne.n	80005e8 <__aeabi_fmul+0x1b8>
 800058e:	2300      	movs	r3, #0
 8000590:	2200      	movs	r2, #0
 8000592:	e01b      	b.n	80005cc <__aeabi_fmul+0x19c>
 8000594:	4643      	mov	r3, r8
 8000596:	34ff      	adds	r4, #255	@ 0xff
 8000598:	2b00      	cmp	r3, #0
 800059a:	d055      	beq.n	8000648 <__aeabi_fmul+0x218>
 800059c:	2103      	movs	r1, #3
 800059e:	464b      	mov	r3, r9
 80005a0:	430b      	orrs	r3, r1
 80005a2:	0019      	movs	r1, r3
 80005a4:	2b0a      	cmp	r3, #10
 80005a6:	dc00      	bgt.n	80005aa <__aeabi_fmul+0x17a>
 80005a8:	e092      	b.n	80006d0 <__aeabi_fmul+0x2a0>
 80005aa:	2b0f      	cmp	r3, #15
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fmul+0x180>
 80005ae:	e08c      	b.n	80006ca <__aeabi_fmul+0x29a>
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	03d2      	lsls	r2, r2, #15
 80005b4:	4216      	tst	r6, r2
 80005b6:	d003      	beq.n	80005c0 <__aeabi_fmul+0x190>
 80005b8:	4643      	mov	r3, r8
 80005ba:	4213      	tst	r3, r2
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fmul+0x190>
 80005be:	e07d      	b.n	80006bc <__aeabi_fmul+0x28c>
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	03d2      	lsls	r2, r2, #15
 80005c4:	4332      	orrs	r2, r6
 80005c6:	0252      	lsls	r2, r2, #9
 80005c8:	0a52      	lsrs	r2, r2, #9
 80005ca:	23ff      	movs	r3, #255	@ 0xff
 80005cc:	05d8      	lsls	r0, r3, #23
 80005ce:	07ed      	lsls	r5, r5, #31
 80005d0:	4310      	orrs	r0, r2
 80005d2:	4328      	orrs	r0, r5
 80005d4:	bce0      	pop	{r5, r6, r7}
 80005d6:	46ba      	mov	sl, r7
 80005d8:	46b1      	mov	r9, r6
 80005da:	46a8      	mov	r8, r5
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	2301      	movs	r3, #1
 80005e0:	0015      	movs	r5, r2
 80005e2:	0871      	lsrs	r1, r6, #1
 80005e4:	401e      	ands	r6, r3
 80005e6:	430e      	orrs	r6, r1
 80005e8:	0023      	movs	r3, r4
 80005ea:	3380      	adds	r3, #128	@ 0x80
 80005ec:	1c61      	adds	r1, r4, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	dd41      	ble.n	8000676 <__aeabi_fmul+0x246>
 80005f2:	0772      	lsls	r2, r6, #29
 80005f4:	d094      	beq.n	8000520 <__aeabi_fmul+0xf0>
 80005f6:	220f      	movs	r2, #15
 80005f8:	4032      	ands	r2, r6
 80005fa:	2a04      	cmp	r2, #4
 80005fc:	d000      	beq.n	8000600 <__aeabi_fmul+0x1d0>
 80005fe:	e78e      	b.n	800051e <__aeabi_fmul+0xee>
 8000600:	e78e      	b.n	8000520 <__aeabi_fmul+0xf0>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d105      	bne.n	8000612 <__aeabi_fmul+0x1e2>
 8000606:	2304      	movs	r3, #4
 8000608:	4699      	mov	r9, r3
 800060a:	3b03      	subs	r3, #3
 800060c:	2400      	movs	r4, #0
 800060e:	469a      	mov	sl, r3
 8000610:	e726      	b.n	8000460 <__aeabi_fmul+0x30>
 8000612:	0030      	movs	r0, r6
 8000614:	f000 fb74 	bl	8000d00 <__clzsi2>
 8000618:	2476      	movs	r4, #118	@ 0x76
 800061a:	1f43      	subs	r3, r0, #5
 800061c:	409e      	lsls	r6, r3
 800061e:	2300      	movs	r3, #0
 8000620:	4264      	negs	r4, r4
 8000622:	4699      	mov	r9, r3
 8000624:	469a      	mov	sl, r3
 8000626:	1a24      	subs	r4, r4, r0
 8000628:	e71a      	b.n	8000460 <__aeabi_fmul+0x30>
 800062a:	4640      	mov	r0, r8
 800062c:	f000 fb68 	bl	8000d00 <__clzsi2>
 8000630:	464b      	mov	r3, r9
 8000632:	1a24      	subs	r4, r4, r0
 8000634:	3c76      	subs	r4, #118	@ 0x76
 8000636:	2b0a      	cmp	r3, #10
 8000638:	dca1      	bgt.n	800057e <__aeabi_fmul+0x14e>
 800063a:	4643      	mov	r3, r8
 800063c:	3805      	subs	r0, #5
 800063e:	4083      	lsls	r3, r0
 8000640:	407d      	eors	r5, r7
 8000642:	4698      	mov	r8, r3
 8000644:	b2ea      	uxtb	r2, r5
 8000646:	e724      	b.n	8000492 <__aeabi_fmul+0x62>
 8000648:	464a      	mov	r2, r9
 800064a:	3302      	adds	r3, #2
 800064c:	4313      	orrs	r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	407a      	eors	r2, r7
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	2b0a      	cmp	r3, #10
 8000656:	dc92      	bgt.n	800057e <__aeabi_fmul+0x14e>
 8000658:	4649      	mov	r1, r9
 800065a:	0015      	movs	r5, r2
 800065c:	2900      	cmp	r1, #0
 800065e:	d026      	beq.n	80006ae <__aeabi_fmul+0x27e>
 8000660:	4699      	mov	r9, r3
 8000662:	2002      	movs	r0, #2
 8000664:	e719      	b.n	800049a <__aeabi_fmul+0x6a>
 8000666:	230c      	movs	r3, #12
 8000668:	4699      	mov	r9, r3
 800066a:	3b09      	subs	r3, #9
 800066c:	24ff      	movs	r4, #255	@ 0xff
 800066e:	469a      	mov	sl, r3
 8000670:	e6f6      	b.n	8000460 <__aeabi_fmul+0x30>
 8000672:	0015      	movs	r5, r2
 8000674:	0021      	movs	r1, r4
 8000676:	2201      	movs	r2, #1
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dd00      	ble.n	8000680 <__aeabi_fmul+0x250>
 800067e:	e786      	b.n	800058e <__aeabi_fmul+0x15e>
 8000680:	319e      	adds	r1, #158	@ 0x9e
 8000682:	0032      	movs	r2, r6
 8000684:	408e      	lsls	r6, r1
 8000686:	40da      	lsrs	r2, r3
 8000688:	1e73      	subs	r3, r6, #1
 800068a:	419e      	sbcs	r6, r3
 800068c:	4332      	orrs	r2, r6
 800068e:	0753      	lsls	r3, r2, #29
 8000690:	d004      	beq.n	800069c <__aeabi_fmul+0x26c>
 8000692:	230f      	movs	r3, #15
 8000694:	4013      	ands	r3, r2
 8000696:	2b04      	cmp	r3, #4
 8000698:	d000      	beq.n	800069c <__aeabi_fmul+0x26c>
 800069a:	3204      	adds	r2, #4
 800069c:	0153      	lsls	r3, r2, #5
 800069e:	d510      	bpl.n	80006c2 <__aeabi_fmul+0x292>
 80006a0:	2301      	movs	r3, #1
 80006a2:	2200      	movs	r2, #0
 80006a4:	e792      	b.n	80005cc <__aeabi_fmul+0x19c>
 80006a6:	003d      	movs	r5, r7
 80006a8:	4646      	mov	r6, r8
 80006aa:	4682      	mov	sl, r0
 80006ac:	e767      	b.n	800057e <__aeabi_fmul+0x14e>
 80006ae:	23ff      	movs	r3, #255	@ 0xff
 80006b0:	2200      	movs	r2, #0
 80006b2:	e78b      	b.n	80005cc <__aeabi_fmul+0x19c>
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	2500      	movs	r5, #0
 80006b8:	03d2      	lsls	r2, r2, #15
 80006ba:	e786      	b.n	80005ca <__aeabi_fmul+0x19a>
 80006bc:	003d      	movs	r5, r7
 80006be:	431a      	orrs	r2, r3
 80006c0:	e783      	b.n	80005ca <__aeabi_fmul+0x19a>
 80006c2:	0192      	lsls	r2, r2, #6
 80006c4:	2300      	movs	r3, #0
 80006c6:	0a52      	lsrs	r2, r2, #9
 80006c8:	e780      	b.n	80005cc <__aeabi_fmul+0x19c>
 80006ca:	003d      	movs	r5, r7
 80006cc:	4646      	mov	r6, r8
 80006ce:	e777      	b.n	80005c0 <__aeabi_fmul+0x190>
 80006d0:	002a      	movs	r2, r5
 80006d2:	2301      	movs	r3, #1
 80006d4:	407a      	eors	r2, r7
 80006d6:	408b      	lsls	r3, r1
 80006d8:	2003      	movs	r0, #3
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	e6e9      	b.n	80004b2 <__aeabi_fmul+0x82>
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	f7ffffff 	.word	0xf7ffffff

080006e4 <__aeabi_fsub>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	4647      	mov	r7, r8
 80006e8:	46ce      	mov	lr, r9
 80006ea:	0243      	lsls	r3, r0, #9
 80006ec:	b580      	push	{r7, lr}
 80006ee:	0a5f      	lsrs	r7, r3, #9
 80006f0:	099b      	lsrs	r3, r3, #6
 80006f2:	0045      	lsls	r5, r0, #1
 80006f4:	004a      	lsls	r2, r1, #1
 80006f6:	469c      	mov	ip, r3
 80006f8:	024b      	lsls	r3, r1, #9
 80006fa:	0fc4      	lsrs	r4, r0, #31
 80006fc:	0fce      	lsrs	r6, r1, #31
 80006fe:	0e2d      	lsrs	r5, r5, #24
 8000700:	0a58      	lsrs	r0, r3, #9
 8000702:	0e12      	lsrs	r2, r2, #24
 8000704:	0999      	lsrs	r1, r3, #6
 8000706:	2aff      	cmp	r2, #255	@ 0xff
 8000708:	d06b      	beq.n	80007e2 <__aeabi_fsub+0xfe>
 800070a:	2301      	movs	r3, #1
 800070c:	405e      	eors	r6, r3
 800070e:	1aab      	subs	r3, r5, r2
 8000710:	42b4      	cmp	r4, r6
 8000712:	d04b      	beq.n	80007ac <__aeabi_fsub+0xc8>
 8000714:	2b00      	cmp	r3, #0
 8000716:	dc00      	bgt.n	800071a <__aeabi_fsub+0x36>
 8000718:	e0ff      	b.n	800091a <__aeabi_fsub+0x236>
 800071a:	2a00      	cmp	r2, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0x3c>
 800071e:	e088      	b.n	8000832 <__aeabi_fsub+0x14e>
 8000720:	2dff      	cmp	r5, #255	@ 0xff
 8000722:	d100      	bne.n	8000726 <__aeabi_fsub+0x42>
 8000724:	e0ef      	b.n	8000906 <__aeabi_fsub+0x222>
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	04d2      	lsls	r2, r2, #19
 800072a:	4311      	orrs	r1, r2
 800072c:	2001      	movs	r0, #1
 800072e:	2b1b      	cmp	r3, #27
 8000730:	dc08      	bgt.n	8000744 <__aeabi_fsub+0x60>
 8000732:	0008      	movs	r0, r1
 8000734:	2220      	movs	r2, #32
 8000736:	40d8      	lsrs	r0, r3
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4099      	lsls	r1, r3
 800073c:	000b      	movs	r3, r1
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	4193      	sbcs	r3, r2
 8000742:	4318      	orrs	r0, r3
 8000744:	4663      	mov	r3, ip
 8000746:	1a1b      	subs	r3, r3, r0
 8000748:	469c      	mov	ip, r3
 800074a:	4663      	mov	r3, ip
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	d400      	bmi.n	8000752 <__aeabi_fsub+0x6e>
 8000750:	e0cd      	b.n	80008ee <__aeabi_fsub+0x20a>
 8000752:	4663      	mov	r3, ip
 8000754:	019f      	lsls	r7, r3, #6
 8000756:	09bf      	lsrs	r7, r7, #6
 8000758:	0038      	movs	r0, r7
 800075a:	f000 fad1 	bl	8000d00 <__clzsi2>
 800075e:	003b      	movs	r3, r7
 8000760:	3805      	subs	r0, #5
 8000762:	4083      	lsls	r3, r0
 8000764:	4285      	cmp	r5, r0
 8000766:	dc00      	bgt.n	800076a <__aeabi_fsub+0x86>
 8000768:	e0a2      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 800076a:	4ab7      	ldr	r2, [pc, #732]	@ (8000a48 <__aeabi_fsub+0x364>)
 800076c:	1a2d      	subs	r5, r5, r0
 800076e:	401a      	ands	r2, r3
 8000770:	4694      	mov	ip, r2
 8000772:	075a      	lsls	r2, r3, #29
 8000774:	d100      	bne.n	8000778 <__aeabi_fsub+0x94>
 8000776:	e0c3      	b.n	8000900 <__aeabi_fsub+0x21c>
 8000778:	220f      	movs	r2, #15
 800077a:	4013      	ands	r3, r2
 800077c:	2b04      	cmp	r3, #4
 800077e:	d100      	bne.n	8000782 <__aeabi_fsub+0x9e>
 8000780:	e0be      	b.n	8000900 <__aeabi_fsub+0x21c>
 8000782:	2304      	movs	r3, #4
 8000784:	4698      	mov	r8, r3
 8000786:	44c4      	add	ip, r8
 8000788:	4663      	mov	r3, ip
 800078a:	015b      	lsls	r3, r3, #5
 800078c:	d400      	bmi.n	8000790 <__aeabi_fsub+0xac>
 800078e:	e0b7      	b.n	8000900 <__aeabi_fsub+0x21c>
 8000790:	1c68      	adds	r0, r5, #1
 8000792:	2dfe      	cmp	r5, #254	@ 0xfe
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0xb4>
 8000796:	e0a5      	b.n	80008e4 <__aeabi_fsub+0x200>
 8000798:	20ff      	movs	r0, #255	@ 0xff
 800079a:	2200      	movs	r2, #0
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	4310      	orrs	r0, r2
 80007a0:	07e4      	lsls	r4, r4, #31
 80007a2:	4320      	orrs	r0, r4
 80007a4:	bcc0      	pop	{r6, r7}
 80007a6:	46b9      	mov	r9, r7
 80007a8:	46b0      	mov	r8, r6
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fsub+0xce>
 80007b0:	e1eb      	b.n	8000b8a <__aeabi_fsub+0x4a6>
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d046      	beq.n	8000844 <__aeabi_fsub+0x160>
 80007b6:	2dff      	cmp	r5, #255	@ 0xff
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0xd8>
 80007ba:	e0a4      	b.n	8000906 <__aeabi_fsub+0x222>
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	04d2      	lsls	r2, r2, #19
 80007c0:	4311      	orrs	r1, r2
 80007c2:	2b1b      	cmp	r3, #27
 80007c4:	dc00      	bgt.n	80007c8 <__aeabi_fsub+0xe4>
 80007c6:	e0fb      	b.n	80009c0 <__aeabi_fsub+0x2dc>
 80007c8:	2305      	movs	r3, #5
 80007ca:	4698      	mov	r8, r3
 80007cc:	002b      	movs	r3, r5
 80007ce:	44c4      	add	ip, r8
 80007d0:	4662      	mov	r2, ip
 80007d2:	08d7      	lsrs	r7, r2, #3
 80007d4:	2bff      	cmp	r3, #255	@ 0xff
 80007d6:	d100      	bne.n	80007da <__aeabi_fsub+0xf6>
 80007d8:	e095      	b.n	8000906 <__aeabi_fsub+0x222>
 80007da:	027a      	lsls	r2, r7, #9
 80007dc:	0a52      	lsrs	r2, r2, #9
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	e7dc      	b.n	800079c <__aeabi_fsub+0xb8>
 80007e2:	002b      	movs	r3, r5
 80007e4:	3bff      	subs	r3, #255	@ 0xff
 80007e6:	4699      	mov	r9, r3
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d118      	bne.n	800081e <__aeabi_fsub+0x13a>
 80007ec:	2301      	movs	r3, #1
 80007ee:	405e      	eors	r6, r3
 80007f0:	42b4      	cmp	r4, r6
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x112>
 80007f4:	e0ca      	b.n	800098c <__aeabi_fsub+0x2a8>
 80007f6:	464b      	mov	r3, r9
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d02d      	beq.n	8000858 <__aeabi_fsub+0x174>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0x11e>
 8000800:	e13c      	b.n	8000a7c <__aeabi_fsub+0x398>
 8000802:	23ff      	movs	r3, #255	@ 0xff
 8000804:	4664      	mov	r4, ip
 8000806:	2c00      	cmp	r4, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x128>
 800080a:	e15f      	b.n	8000acc <__aeabi_fsub+0x3e8>
 800080c:	1e5d      	subs	r5, r3, #1
 800080e:	2b01      	cmp	r3, #1
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x130>
 8000812:	e174      	b.n	8000afe <__aeabi_fsub+0x41a>
 8000814:	0034      	movs	r4, r6
 8000816:	2bff      	cmp	r3, #255	@ 0xff
 8000818:	d074      	beq.n	8000904 <__aeabi_fsub+0x220>
 800081a:	002b      	movs	r3, r5
 800081c:	e103      	b.n	8000a26 <__aeabi_fsub+0x342>
 800081e:	42b4      	cmp	r4, r6
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x140>
 8000822:	e09c      	b.n	800095e <__aeabi_fsub+0x27a>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d017      	beq.n	8000858 <__aeabi_fsub+0x174>
 8000828:	2d00      	cmp	r5, #0
 800082a:	d0ea      	beq.n	8000802 <__aeabi_fsub+0x11e>
 800082c:	0007      	movs	r7, r0
 800082e:	0034      	movs	r4, r6
 8000830:	e06c      	b.n	800090c <__aeabi_fsub+0x228>
 8000832:	2900      	cmp	r1, #0
 8000834:	d0cc      	beq.n	80007d0 <__aeabi_fsub+0xec>
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	2b01      	cmp	r3, #1
 800083a:	d02b      	beq.n	8000894 <__aeabi_fsub+0x1b0>
 800083c:	2bff      	cmp	r3, #255	@ 0xff
 800083e:	d062      	beq.n	8000906 <__aeabi_fsub+0x222>
 8000840:	0013      	movs	r3, r2
 8000842:	e773      	b.n	800072c <__aeabi_fsub+0x48>
 8000844:	2900      	cmp	r1, #0
 8000846:	d0c3      	beq.n	80007d0 <__aeabi_fsub+0xec>
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	2b01      	cmp	r3, #1
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x16c>
 800084e:	e11e      	b.n	8000a8e <__aeabi_fsub+0x3aa>
 8000850:	2bff      	cmp	r3, #255	@ 0xff
 8000852:	d058      	beq.n	8000906 <__aeabi_fsub+0x222>
 8000854:	0013      	movs	r3, r2
 8000856:	e7b4      	b.n	80007c2 <__aeabi_fsub+0xde>
 8000858:	22fe      	movs	r2, #254	@ 0xfe
 800085a:	1c6b      	adds	r3, r5, #1
 800085c:	421a      	tst	r2, r3
 800085e:	d10d      	bne.n	800087c <__aeabi_fsub+0x198>
 8000860:	2d00      	cmp	r5, #0
 8000862:	d060      	beq.n	8000926 <__aeabi_fsub+0x242>
 8000864:	4663      	mov	r3, ip
 8000866:	2b00      	cmp	r3, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fsub+0x188>
 800086a:	e120      	b.n	8000aae <__aeabi_fsub+0x3ca>
 800086c:	2900      	cmp	r1, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fsub+0x18e>
 8000870:	e128      	b.n	8000ac4 <__aeabi_fsub+0x3e0>
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	2400      	movs	r4, #0
 8000876:	20ff      	movs	r0, #255	@ 0xff
 8000878:	03d2      	lsls	r2, r2, #15
 800087a:	e78f      	b.n	800079c <__aeabi_fsub+0xb8>
 800087c:	4663      	mov	r3, ip
 800087e:	1a5f      	subs	r7, r3, r1
 8000880:	017b      	lsls	r3, r7, #5
 8000882:	d500      	bpl.n	8000886 <__aeabi_fsub+0x1a2>
 8000884:	e0fe      	b.n	8000a84 <__aeabi_fsub+0x3a0>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fsub+0x1a8>
 800088a:	e765      	b.n	8000758 <__aeabi_fsub+0x74>
 800088c:	2400      	movs	r4, #0
 800088e:	2000      	movs	r0, #0
 8000890:	2200      	movs	r2, #0
 8000892:	e783      	b.n	800079c <__aeabi_fsub+0xb8>
 8000894:	4663      	mov	r3, ip
 8000896:	1a59      	subs	r1, r3, r1
 8000898:	014b      	lsls	r3, r1, #5
 800089a:	d400      	bmi.n	800089e <__aeabi_fsub+0x1ba>
 800089c:	e119      	b.n	8000ad2 <__aeabi_fsub+0x3ee>
 800089e:	018f      	lsls	r7, r1, #6
 80008a0:	09bf      	lsrs	r7, r7, #6
 80008a2:	0038      	movs	r0, r7
 80008a4:	f000 fa2c 	bl	8000d00 <__clzsi2>
 80008a8:	003b      	movs	r3, r7
 80008aa:	3805      	subs	r0, #5
 80008ac:	4083      	lsls	r3, r0
 80008ae:	2501      	movs	r5, #1
 80008b0:	2220      	movs	r2, #32
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	3001      	adds	r0, #1
 80008b6:	1a12      	subs	r2, r2, r0
 80008b8:	0019      	movs	r1, r3
 80008ba:	4093      	lsls	r3, r2
 80008bc:	40c1      	lsrs	r1, r0
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	4193      	sbcs	r3, r2
 80008c2:	4319      	orrs	r1, r3
 80008c4:	468c      	mov	ip, r1
 80008c6:	1e0b      	subs	r3, r1, #0
 80008c8:	d0e1      	beq.n	800088e <__aeabi_fsub+0x1aa>
 80008ca:	075b      	lsls	r3, r3, #29
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x1ec>
 80008ce:	e152      	b.n	8000b76 <__aeabi_fsub+0x492>
 80008d0:	230f      	movs	r3, #15
 80008d2:	2500      	movs	r5, #0
 80008d4:	400b      	ands	r3, r1
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d000      	beq.n	80008dc <__aeabi_fsub+0x1f8>
 80008da:	e752      	b.n	8000782 <__aeabi_fsub+0x9e>
 80008dc:	2001      	movs	r0, #1
 80008de:	014a      	lsls	r2, r1, #5
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_fsub+0x200>
 80008e2:	e092      	b.n	8000a0a <__aeabi_fsub+0x326>
 80008e4:	b2c0      	uxtb	r0, r0
 80008e6:	4663      	mov	r3, ip
 80008e8:	019a      	lsls	r2, r3, #6
 80008ea:	0a52      	lsrs	r2, r2, #9
 80008ec:	e756      	b.n	800079c <__aeabi_fsub+0xb8>
 80008ee:	4663      	mov	r3, ip
 80008f0:	075b      	lsls	r3, r3, #29
 80008f2:	d005      	beq.n	8000900 <__aeabi_fsub+0x21c>
 80008f4:	230f      	movs	r3, #15
 80008f6:	4662      	mov	r2, ip
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d000      	beq.n	8000900 <__aeabi_fsub+0x21c>
 80008fe:	e740      	b.n	8000782 <__aeabi_fsub+0x9e>
 8000900:	002b      	movs	r3, r5
 8000902:	e765      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000904:	0007      	movs	r7, r0
 8000906:	2f00      	cmp	r7, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0x228>
 800090a:	e745      	b.n	8000798 <__aeabi_fsub+0xb4>
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	433a      	orrs	r2, r7
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	20ff      	movs	r0, #255	@ 0xff
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e740      	b.n	800079c <__aeabi_fsub+0xb8>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d179      	bne.n	8000a12 <__aeabi_fsub+0x32e>
 800091e:	22fe      	movs	r2, #254	@ 0xfe
 8000920:	1c6b      	adds	r3, r5, #1
 8000922:	421a      	tst	r2, r3
 8000924:	d1aa      	bne.n	800087c <__aeabi_fsub+0x198>
 8000926:	4663      	mov	r3, ip
 8000928:	2b00      	cmp	r3, #0
 800092a:	d100      	bne.n	800092e <__aeabi_fsub+0x24a>
 800092c:	e0f5      	b.n	8000b1a <__aeabi_fsub+0x436>
 800092e:	2900      	cmp	r1, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x250>
 8000932:	e0d1      	b.n	8000ad8 <__aeabi_fsub+0x3f4>
 8000934:	1a5f      	subs	r7, r3, r1
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	04db      	lsls	r3, r3, #19
 800093a:	421f      	tst	r7, r3
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x25c>
 800093e:	e10e      	b.n	8000b5e <__aeabi_fsub+0x47a>
 8000940:	4662      	mov	r2, ip
 8000942:	2401      	movs	r4, #1
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4694      	mov	ip, r2
 8000948:	2000      	movs	r0, #0
 800094a:	4034      	ands	r4, r6
 800094c:	2a00      	cmp	r2, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_fsub+0x26e>
 8000950:	e724      	b.n	800079c <__aeabi_fsub+0xb8>
 8000952:	2001      	movs	r0, #1
 8000954:	421a      	tst	r2, r3
 8000956:	d1c6      	bne.n	80008e6 <__aeabi_fsub+0x202>
 8000958:	2300      	movs	r3, #0
 800095a:	08d7      	lsrs	r7, r2, #3
 800095c:	e73d      	b.n	80007da <__aeabi_fsub+0xf6>
 800095e:	2b00      	cmp	r3, #0
 8000960:	d017      	beq.n	8000992 <__aeabi_fsub+0x2ae>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d000      	beq.n	8000968 <__aeabi_fsub+0x284>
 8000966:	e0af      	b.n	8000ac8 <__aeabi_fsub+0x3e4>
 8000968:	23ff      	movs	r3, #255	@ 0xff
 800096a:	4665      	mov	r5, ip
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x28e>
 8000970:	e0ad      	b.n	8000ace <__aeabi_fsub+0x3ea>
 8000972:	1e5e      	subs	r6, r3, #1
 8000974:	2b01      	cmp	r3, #1
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x296>
 8000978:	e089      	b.n	8000a8e <__aeabi_fsub+0x3aa>
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d0c2      	beq.n	8000904 <__aeabi_fsub+0x220>
 800097e:	2e1b      	cmp	r6, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fsub+0x2a0>
 8000982:	e0ab      	b.n	8000adc <__aeabi_fsub+0x3f8>
 8000984:	1d4b      	adds	r3, r1, #5
 8000986:	469c      	mov	ip, r3
 8000988:	0013      	movs	r3, r2
 800098a:	e721      	b.n	80007d0 <__aeabi_fsub+0xec>
 800098c:	464b      	mov	r3, r9
 800098e:	2b00      	cmp	r3, #0
 8000990:	d170      	bne.n	8000a74 <__aeabi_fsub+0x390>
 8000992:	22fe      	movs	r2, #254	@ 0xfe
 8000994:	1c6b      	adds	r3, r5, #1
 8000996:	421a      	tst	r2, r3
 8000998:	d15e      	bne.n	8000a58 <__aeabi_fsub+0x374>
 800099a:	2d00      	cmp	r5, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_fsub+0x2bc>
 800099e:	e0c3      	b.n	8000b28 <__aeabi_fsub+0x444>
 80009a0:	4663      	mov	r3, ip
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x2c4>
 80009a6:	e0d0      	b.n	8000b4a <__aeabi_fsub+0x466>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fsub+0x2ca>
 80009ac:	e094      	b.n	8000ad8 <__aeabi_fsub+0x3f4>
 80009ae:	000a      	movs	r2, r1
 80009b0:	4462      	add	r2, ip
 80009b2:	0153      	lsls	r3, r2, #5
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_fsub+0x2d4>
 80009b6:	e0d8      	b.n	8000b6a <__aeabi_fsub+0x486>
 80009b8:	0192      	lsls	r2, r2, #6
 80009ba:	2001      	movs	r0, #1
 80009bc:	0a52      	lsrs	r2, r2, #9
 80009be:	e6ed      	b.n	800079c <__aeabi_fsub+0xb8>
 80009c0:	0008      	movs	r0, r1
 80009c2:	2220      	movs	r2, #32
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	4099      	lsls	r1, r3
 80009ca:	000b      	movs	r3, r1
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	4193      	sbcs	r3, r2
 80009d0:	4303      	orrs	r3, r0
 80009d2:	449c      	add	ip, r3
 80009d4:	4663      	mov	r3, ip
 80009d6:	015b      	lsls	r3, r3, #5
 80009d8:	d589      	bpl.n	80008ee <__aeabi_fsub+0x20a>
 80009da:	3501      	adds	r5, #1
 80009dc:	2dff      	cmp	r5, #255	@ 0xff
 80009de:	d100      	bne.n	80009e2 <__aeabi_fsub+0x2fe>
 80009e0:	e6da      	b.n	8000798 <__aeabi_fsub+0xb4>
 80009e2:	4662      	mov	r2, ip
 80009e4:	2301      	movs	r3, #1
 80009e6:	4919      	ldr	r1, [pc, #100]	@ (8000a4c <__aeabi_fsub+0x368>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	0852      	lsrs	r2, r2, #1
 80009ec:	400a      	ands	r2, r1
 80009ee:	431a      	orrs	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4694      	mov	ip, r2
 80009f4:	075b      	lsls	r3, r3, #29
 80009f6:	d004      	beq.n	8000a02 <__aeabi_fsub+0x31e>
 80009f8:	230f      	movs	r3, #15
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fsub+0x31e>
 8000a00:	e6bf      	b.n	8000782 <__aeabi_fsub+0x9e>
 8000a02:	4663      	mov	r3, ip
 8000a04:	015b      	lsls	r3, r3, #5
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_fsub+0x326>
 8000a08:	e6c2      	b.n	8000790 <__aeabi_fsub+0xac>
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	08df      	lsrs	r7, r3, #3
 8000a0e:	002b      	movs	r3, r5
 8000a10:	e6e3      	b.n	80007da <__aeabi_fsub+0xf6>
 8000a12:	1b53      	subs	r3, r2, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x336>
 8000a18:	e6f4      	b.n	8000804 <__aeabi_fsub+0x120>
 8000a1a:	2080      	movs	r0, #128	@ 0x80
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	04c0      	lsls	r0, r0, #19
 8000a20:	4304      	orrs	r4, r0
 8000a22:	46a4      	mov	ip, r4
 8000a24:	0034      	movs	r4, r6
 8000a26:	2001      	movs	r0, #1
 8000a28:	2b1b      	cmp	r3, #27
 8000a2a:	dc09      	bgt.n	8000a40 <__aeabi_fsub+0x35c>
 8000a2c:	2520      	movs	r5, #32
 8000a2e:	4660      	mov	r0, ip
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	1aeb      	subs	r3, r5, r3
 8000a34:	4665      	mov	r5, ip
 8000a36:	409d      	lsls	r5, r3
 8000a38:	002b      	movs	r3, r5
 8000a3a:	1e5d      	subs	r5, r3, #1
 8000a3c:	41ab      	sbcs	r3, r5
 8000a3e:	4318      	orrs	r0, r3
 8000a40:	1a0b      	subs	r3, r1, r0
 8000a42:	469c      	mov	ip, r3
 8000a44:	0015      	movs	r5, r2
 8000a46:	e680      	b.n	800074a <__aeabi_fsub+0x66>
 8000a48:	fbffffff 	.word	0xfbffffff
 8000a4c:	7dffffff 	.word	0x7dffffff
 8000a50:	22fe      	movs	r2, #254	@ 0xfe
 8000a52:	1c6b      	adds	r3, r5, #1
 8000a54:	4213      	tst	r3, r2
 8000a56:	d0a3      	beq.n	80009a0 <__aeabi_fsub+0x2bc>
 8000a58:	2bff      	cmp	r3, #255	@ 0xff
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x37a>
 8000a5c:	e69c      	b.n	8000798 <__aeabi_fsub+0xb4>
 8000a5e:	4461      	add	r1, ip
 8000a60:	0849      	lsrs	r1, r1, #1
 8000a62:	074a      	lsls	r2, r1, #29
 8000a64:	d049      	beq.n	8000afa <__aeabi_fsub+0x416>
 8000a66:	220f      	movs	r2, #15
 8000a68:	400a      	ands	r2, r1
 8000a6a:	2a04      	cmp	r2, #4
 8000a6c:	d045      	beq.n	8000afa <__aeabi_fsub+0x416>
 8000a6e:	1d0a      	adds	r2, r1, #4
 8000a70:	4694      	mov	ip, r2
 8000a72:	e6ad      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_fsub+0x396>
 8000a78:	e776      	b.n	8000968 <__aeabi_fsub+0x284>
 8000a7a:	e68d      	b.n	8000798 <__aeabi_fsub+0xb4>
 8000a7c:	0034      	movs	r4, r6
 8000a7e:	20ff      	movs	r0, #255	@ 0xff
 8000a80:	2200      	movs	r2, #0
 8000a82:	e68b      	b.n	800079c <__aeabi_fsub+0xb8>
 8000a84:	4663      	mov	r3, ip
 8000a86:	2401      	movs	r4, #1
 8000a88:	1acf      	subs	r7, r1, r3
 8000a8a:	4034      	ands	r4, r6
 8000a8c:	e664      	b.n	8000758 <__aeabi_fsub+0x74>
 8000a8e:	4461      	add	r1, ip
 8000a90:	014b      	lsls	r3, r1, #5
 8000a92:	d56d      	bpl.n	8000b70 <__aeabi_fsub+0x48c>
 8000a94:	0848      	lsrs	r0, r1, #1
 8000a96:	4944      	ldr	r1, [pc, #272]	@ (8000ba8 <__aeabi_fsub+0x4c4>)
 8000a98:	4001      	ands	r1, r0
 8000a9a:	0743      	lsls	r3, r0, #29
 8000a9c:	d02c      	beq.n	8000af8 <__aeabi_fsub+0x414>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	4003      	ands	r3, r0
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d028      	beq.n	8000af8 <__aeabi_fsub+0x414>
 8000aa6:	1d0b      	adds	r3, r1, #4
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e690      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_fsub+0x3d0>
 8000ab2:	e72b      	b.n	800090c <__aeabi_fsub+0x228>
 8000ab4:	2380      	movs	r3, #128	@ 0x80
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	429f      	cmp	r7, r3
 8000aba:	d200      	bcs.n	8000abe <__aeabi_fsub+0x3da>
 8000abc:	e726      	b.n	800090c <__aeabi_fsub+0x228>
 8000abe:	4298      	cmp	r0, r3
 8000ac0:	d300      	bcc.n	8000ac4 <__aeabi_fsub+0x3e0>
 8000ac2:	e723      	b.n	800090c <__aeabi_fsub+0x228>
 8000ac4:	2401      	movs	r4, #1
 8000ac6:	4034      	ands	r4, r6
 8000ac8:	0007      	movs	r7, r0
 8000aca:	e71f      	b.n	800090c <__aeabi_fsub+0x228>
 8000acc:	0034      	movs	r4, r6
 8000ace:	468c      	mov	ip, r1
 8000ad0:	e67e      	b.n	80007d0 <__aeabi_fsub+0xec>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	08cf      	lsrs	r7, r1, #3
 8000ad6:	e680      	b.n	80007da <__aeabi_fsub+0xf6>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e67e      	b.n	80007da <__aeabi_fsub+0xf6>
 8000adc:	2020      	movs	r0, #32
 8000ade:	4665      	mov	r5, ip
 8000ae0:	1b80      	subs	r0, r0, r6
 8000ae2:	4085      	lsls	r5, r0
 8000ae4:	4663      	mov	r3, ip
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	40f3      	lsrs	r3, r6
 8000aea:	1e45      	subs	r5, r0, #1
 8000aec:	41a8      	sbcs	r0, r5
 8000aee:	4303      	orrs	r3, r0
 8000af0:	469c      	mov	ip, r3
 8000af2:	0015      	movs	r5, r2
 8000af4:	448c      	add	ip, r1
 8000af6:	e76d      	b.n	80009d4 <__aeabi_fsub+0x2f0>
 8000af8:	2302      	movs	r3, #2
 8000afa:	08cf      	lsrs	r7, r1, #3
 8000afc:	e66d      	b.n	80007da <__aeabi_fsub+0xf6>
 8000afe:	1b0f      	subs	r7, r1, r4
 8000b00:	017b      	lsls	r3, r7, #5
 8000b02:	d528      	bpl.n	8000b56 <__aeabi_fsub+0x472>
 8000b04:	01bf      	lsls	r7, r7, #6
 8000b06:	09bf      	lsrs	r7, r7, #6
 8000b08:	0038      	movs	r0, r7
 8000b0a:	f000 f8f9 	bl	8000d00 <__clzsi2>
 8000b0e:	003b      	movs	r3, r7
 8000b10:	3805      	subs	r0, #5
 8000b12:	4083      	lsls	r3, r0
 8000b14:	0034      	movs	r4, r6
 8000b16:	2501      	movs	r5, #1
 8000b18:	e6ca      	b.n	80008b0 <__aeabi_fsub+0x1cc>
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x43c>
 8000b1e:	e6b5      	b.n	800088c <__aeabi_fsub+0x1a8>
 8000b20:	2401      	movs	r4, #1
 8000b22:	0007      	movs	r7, r0
 8000b24:	4034      	ands	r4, r6
 8000b26:	e658      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b28:	4663      	mov	r3, ip
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fsub+0x44c>
 8000b2e:	e6e9      	b.n	8000904 <__aeabi_fsub+0x220>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x452>
 8000b34:	e6ea      	b.n	800090c <__aeabi_fsub+0x228>
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	429f      	cmp	r7, r3
 8000b3c:	d200      	bcs.n	8000b40 <__aeabi_fsub+0x45c>
 8000b3e:	e6e5      	b.n	800090c <__aeabi_fsub+0x228>
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d300      	bcc.n	8000b46 <__aeabi_fsub+0x462>
 8000b44:	e6e2      	b.n	800090c <__aeabi_fsub+0x228>
 8000b46:	0007      	movs	r7, r0
 8000b48:	e6e0      	b.n	800090c <__aeabi_fsub+0x228>
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x46c>
 8000b4e:	e69e      	b.n	800088e <__aeabi_fsub+0x1aa>
 8000b50:	2300      	movs	r3, #0
 8000b52:	08cf      	lsrs	r7, r1, #3
 8000b54:	e641      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b56:	0034      	movs	r4, r6
 8000b58:	2301      	movs	r3, #1
 8000b5a:	08ff      	lsrs	r7, r7, #3
 8000b5c:	e63d      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x480>
 8000b62:	e693      	b.n	800088c <__aeabi_fsub+0x1a8>
 8000b64:	2300      	movs	r3, #0
 8000b66:	08ff      	lsrs	r7, r7, #3
 8000b68:	e637      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	08d7      	lsrs	r7, r2, #3
 8000b6e:	e634      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b70:	2301      	movs	r3, #1
 8000b72:	08cf      	lsrs	r7, r1, #3
 8000b74:	e631      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	000b      	movs	r3, r1
 8000b7a:	04d2      	lsls	r2, r2, #19
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	4211      	tst	r1, r2
 8000b82:	d000      	beq.n	8000b86 <__aeabi_fsub+0x4a2>
 8000b84:	e6ae      	b.n	80008e4 <__aeabi_fsub+0x200>
 8000b86:	08cf      	lsrs	r7, r1, #3
 8000b88:	e627      	b.n	80007da <__aeabi_fsub+0xf6>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0x4ac>
 8000b8e:	e75f      	b.n	8000a50 <__aeabi_fsub+0x36c>
 8000b90:	1b56      	subs	r6, r2, r5
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d101      	bne.n	8000b9a <__aeabi_fsub+0x4b6>
 8000b96:	0033      	movs	r3, r6
 8000b98:	e6e7      	b.n	800096a <__aeabi_fsub+0x286>
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	4660      	mov	r0, ip
 8000b9e:	04db      	lsls	r3, r3, #19
 8000ba0:	4318      	orrs	r0, r3
 8000ba2:	4684      	mov	ip, r0
 8000ba4:	e6eb      	b.n	800097e <__aeabi_fsub+0x29a>
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	7dffffff 	.word	0x7dffffff

08000bac <__aeabi_f2iz>:
 8000bac:	0241      	lsls	r1, r0, #9
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0fc3      	lsrs	r3, r0, #31
 8000bb2:	0a49      	lsrs	r1, r1, #9
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	0e12      	lsrs	r2, r2, #24
 8000bb8:	2a7e      	cmp	r2, #126	@ 0x7e
 8000bba:	dd03      	ble.n	8000bc4 <__aeabi_f2iz+0x18>
 8000bbc:	2a9d      	cmp	r2, #157	@ 0x9d
 8000bbe:	dd02      	ble.n	8000bc6 <__aeabi_f2iz+0x1a>
 8000bc0:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <__aeabi_f2iz+0x3c>)
 8000bc2:	1898      	adds	r0, r3, r2
 8000bc4:	4770      	bx	lr
 8000bc6:	2080      	movs	r0, #128	@ 0x80
 8000bc8:	0400      	lsls	r0, r0, #16
 8000bca:	4301      	orrs	r1, r0
 8000bcc:	2a95      	cmp	r2, #149	@ 0x95
 8000bce:	dc07      	bgt.n	8000be0 <__aeabi_f2iz+0x34>
 8000bd0:	2096      	movs	r0, #150	@ 0x96
 8000bd2:	1a82      	subs	r2, r0, r2
 8000bd4:	40d1      	lsrs	r1, r2
 8000bd6:	4248      	negs	r0, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f3      	bne.n	8000bc4 <__aeabi_f2iz+0x18>
 8000bdc:	0008      	movs	r0, r1
 8000bde:	e7f1      	b.n	8000bc4 <__aeabi_f2iz+0x18>
 8000be0:	3a96      	subs	r2, #150	@ 0x96
 8000be2:	4091      	lsls	r1, r2
 8000be4:	e7f7      	b.n	8000bd6 <__aeabi_f2iz+0x2a>
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	7fffffff 	.word	0x7fffffff

08000bec <__aeabi_i2f>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d012      	beq.n	8000c18 <__aeabi_i2f+0x2c>
 8000bf2:	17c3      	asrs	r3, r0, #31
 8000bf4:	18c5      	adds	r5, r0, r3
 8000bf6:	405d      	eors	r5, r3
 8000bf8:	0fc4      	lsrs	r4, r0, #31
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	f000 f880 	bl	8000d00 <__clzsi2>
 8000c00:	239e      	movs	r3, #158	@ 0x9e
 8000c02:	1a1b      	subs	r3, r3, r0
 8000c04:	2b96      	cmp	r3, #150	@ 0x96
 8000c06:	dc0f      	bgt.n	8000c28 <__aeabi_i2f+0x3c>
 8000c08:	2808      	cmp	r0, #8
 8000c0a:	d038      	beq.n	8000c7e <__aeabi_i2f+0x92>
 8000c0c:	3808      	subs	r0, #8
 8000c0e:	4085      	lsls	r5, r0
 8000c10:	026d      	lsls	r5, r5, #9
 8000c12:	0a6d      	lsrs	r5, r5, #9
 8000c14:	b2d8      	uxtb	r0, r3
 8000c16:	e002      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	05c0      	lsls	r0, r0, #23
 8000c20:	4328      	orrs	r0, r5
 8000c22:	07e4      	lsls	r4, r4, #31
 8000c24:	4320      	orrs	r0, r4
 8000c26:	bd70      	pop	{r4, r5, r6, pc}
 8000c28:	2b99      	cmp	r3, #153	@ 0x99
 8000c2a:	dc14      	bgt.n	8000c56 <__aeabi_i2f+0x6a>
 8000c2c:	1f42      	subs	r2, r0, #5
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	002a      	movs	r2, r5
 8000c32:	4915      	ldr	r1, [pc, #84]	@ (8000c88 <__aeabi_i2f+0x9c>)
 8000c34:	4011      	ands	r1, r2
 8000c36:	0755      	lsls	r5, r2, #29
 8000c38:	d01c      	beq.n	8000c74 <__aeabi_i2f+0x88>
 8000c3a:	250f      	movs	r5, #15
 8000c3c:	402a      	ands	r2, r5
 8000c3e:	2a04      	cmp	r2, #4
 8000c40:	d018      	beq.n	8000c74 <__aeabi_i2f+0x88>
 8000c42:	3104      	adds	r1, #4
 8000c44:	08ca      	lsrs	r2, r1, #3
 8000c46:	0149      	lsls	r1, r1, #5
 8000c48:	d515      	bpl.n	8000c76 <__aeabi_i2f+0x8a>
 8000c4a:	239f      	movs	r3, #159	@ 0x9f
 8000c4c:	0252      	lsls	r2, r2, #9
 8000c4e:	1a18      	subs	r0, r3, r0
 8000c50:	0a55      	lsrs	r5, r2, #9
 8000c52:	b2c0      	uxtb	r0, r0
 8000c54:	e7e3      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c56:	2205      	movs	r2, #5
 8000c58:	0029      	movs	r1, r5
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	40d1      	lsrs	r1, r2
 8000c5e:	0002      	movs	r2, r0
 8000c60:	321b      	adds	r2, #27
 8000c62:	4095      	lsls	r5, r2
 8000c64:	002a      	movs	r2, r5
 8000c66:	1e55      	subs	r5, r2, #1
 8000c68:	41aa      	sbcs	r2, r5
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	4906      	ldr	r1, [pc, #24]	@ (8000c88 <__aeabi_i2f+0x9c>)
 8000c6e:	4011      	ands	r1, r2
 8000c70:	0755      	lsls	r5, r2, #29
 8000c72:	d1e2      	bne.n	8000c3a <__aeabi_i2f+0x4e>
 8000c74:	08ca      	lsrs	r2, r1, #3
 8000c76:	0252      	lsls	r2, r2, #9
 8000c78:	0a55      	lsrs	r5, r2, #9
 8000c7a:	b2d8      	uxtb	r0, r3
 8000c7c:	e7cf      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c7e:	026d      	lsls	r5, r5, #9
 8000c80:	0a6d      	lsrs	r5, r5, #9
 8000c82:	308e      	adds	r0, #142	@ 0x8e
 8000c84:	e7cb      	b.n	8000c1e <__aeabi_i2f+0x32>
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	fbffffff 	.word	0xfbffffff

08000c8c <__aeabi_cfrcmple>:
 8000c8c:	4684      	mov	ip, r0
 8000c8e:	0008      	movs	r0, r1
 8000c90:	4661      	mov	r1, ip
 8000c92:	e7ff      	b.n	8000c94 <__aeabi_cfcmpeq>

08000c94 <__aeabi_cfcmpeq>:
 8000c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c96:	f000 f8c1 	bl	8000e1c <__lesf2>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d401      	bmi.n	8000ca2 <__aeabi_cfcmpeq+0xe>
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	42c8      	cmn	r0, r1
 8000ca2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ca4 <__aeabi_fcmpeq>:
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	f000 f849 	bl	8000d3c <__eqsf2>
 8000caa:	4240      	negs	r0, r0
 8000cac:	3001      	adds	r0, #1
 8000cae:	bd10      	pop	{r4, pc}

08000cb0 <__aeabi_fcmplt>:
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	f000 f8b3 	bl	8000e1c <__lesf2>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fcmplt+0xe>
 8000cba:	2000      	movs	r0, #0
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)

08000cc4 <__aeabi_fcmple>:
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	f000 f8a9 	bl	8000e1c <__lesf2>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	dd01      	ble.n	8000cd2 <__aeabi_fcmple+0xe>
 8000cce:	2000      	movs	r0, #0
 8000cd0:	bd10      	pop	{r4, pc}
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	bd10      	pop	{r4, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)

08000cd8 <__aeabi_fcmpgt>:
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	f000 f857 	bl	8000d8c <__gesf2>
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	dc01      	bgt.n	8000ce6 <__aeabi_fcmpgt+0xe>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	bd10      	pop	{r4, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)

08000cec <__aeabi_fcmpge>:
 8000cec:	b510      	push	{r4, lr}
 8000cee:	f000 f84d 	bl	8000d8c <__gesf2>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	da01      	bge.n	8000cfa <__aeabi_fcmpge+0xe>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	bd10      	pop	{r4, pc}
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	bd10      	pop	{r4, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)

08000d00 <__clzsi2>:
 8000d00:	211c      	movs	r1, #28
 8000d02:	2301      	movs	r3, #1
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d301      	bcc.n	8000d0e <__clzsi2+0xe>
 8000d0a:	0c00      	lsrs	r0, r0, #16
 8000d0c:	3910      	subs	r1, #16
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d301      	bcc.n	8000d18 <__clzsi2+0x18>
 8000d14:	0a00      	lsrs	r0, r0, #8
 8000d16:	3908      	subs	r1, #8
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d301      	bcc.n	8000d22 <__clzsi2+0x22>
 8000d1e:	0900      	lsrs	r0, r0, #4
 8000d20:	3904      	subs	r1, #4
 8000d22:	a202      	add	r2, pc, #8	@ (adr r2, 8000d2c <__clzsi2+0x2c>)
 8000d24:	5c10      	ldrb	r0, [r2, r0]
 8000d26:	1840      	adds	r0, r0, r1
 8000d28:	4770      	bx	lr
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	02020304 	.word	0x02020304
 8000d30:	01010101 	.word	0x01010101
	...

08000d3c <__eqsf2>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	024e      	lsls	r6, r1, #9
 8000d42:	004c      	lsls	r4, r1, #1
 8000d44:	0245      	lsls	r5, r0, #9
 8000d46:	0a6d      	lsrs	r5, r5, #9
 8000d48:	0e12      	lsrs	r2, r2, #24
 8000d4a:	0fc3      	lsrs	r3, r0, #31
 8000d4c:	0a76      	lsrs	r6, r6, #9
 8000d4e:	0e24      	lsrs	r4, r4, #24
 8000d50:	0fc9      	lsrs	r1, r1, #31
 8000d52:	2aff      	cmp	r2, #255	@ 0xff
 8000d54:	d010      	beq.n	8000d78 <__eqsf2+0x3c>
 8000d56:	2cff      	cmp	r4, #255	@ 0xff
 8000d58:	d00c      	beq.n	8000d74 <__eqsf2+0x38>
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	42a2      	cmp	r2, r4
 8000d5e:	d10a      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d60:	42b5      	cmp	r5, r6
 8000d62:	d108      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d00f      	beq.n	8000d88 <__eqsf2+0x4c>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d104      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d6c:	0028      	movs	r0, r5
 8000d6e:	1e43      	subs	r3, r0, #1
 8000d70:	4198      	sbcs	r0, r3
 8000d72:	e000      	b.n	8000d76 <__eqsf2+0x3a>
 8000d74:	2001      	movs	r0, #1
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	2001      	movs	r0, #1
 8000d7a:	2cff      	cmp	r4, #255	@ 0xff
 8000d7c:	d1fb      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d7e:	4335      	orrs	r5, r6
 8000d80:	d1f9      	bne.n	8000d76 <__eqsf2+0x3a>
 8000d82:	404b      	eors	r3, r1
 8000d84:	0018      	movs	r0, r3
 8000d86:	e7f6      	b.n	8000d76 <__eqsf2+0x3a>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7f4      	b.n	8000d76 <__eqsf2+0x3a>

08000d8c <__gesf2>:
 8000d8c:	b530      	push	{r4, r5, lr}
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0244      	lsls	r4, r0, #9
 8000d92:	024d      	lsls	r5, r1, #9
 8000d94:	0fc3      	lsrs	r3, r0, #31
 8000d96:	0048      	lsls	r0, r1, #1
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	0e12      	lsrs	r2, r2, #24
 8000d9c:	0a6d      	lsrs	r5, r5, #9
 8000d9e:	0e00      	lsrs	r0, r0, #24
 8000da0:	0fc9      	lsrs	r1, r1, #31
 8000da2:	2aff      	cmp	r2, #255	@ 0xff
 8000da4:	d018      	beq.n	8000dd8 <__gesf2+0x4c>
 8000da6:	28ff      	cmp	r0, #255	@ 0xff
 8000da8:	d00a      	beq.n	8000dc0 <__gesf2+0x34>
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d11e      	bne.n	8000dec <__gesf2+0x60>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d10a      	bne.n	8000dc8 <__gesf2+0x3c>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d029      	beq.n	8000e0a <__gesf2+0x7e>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d12d      	bne.n	8000e16 <__gesf2+0x8a>
 8000dba:	0048      	lsls	r0, r1, #1
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	bd30      	pop	{r4, r5, pc}
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d125      	bne.n	8000e10 <__gesf2+0x84>
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d101      	bne.n	8000dcc <__gesf2+0x40>
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d0f6      	beq.n	8000dba <__gesf2+0x2e>
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d019      	beq.n	8000e04 <__gesf2+0x78>
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	4318      	orrs	r0, r3
 8000dd6:	e7f2      	b.n	8000dbe <__gesf2+0x32>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d119      	bne.n	8000e10 <__gesf2+0x84>
 8000ddc:	28ff      	cmp	r0, #255	@ 0xff
 8000dde:	d1f7      	bne.n	8000dd0 <__gesf2+0x44>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d115      	bne.n	8000e10 <__gesf2+0x84>
 8000de4:	2000      	movs	r0, #0
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d1f2      	bne.n	8000dd0 <__gesf2+0x44>
 8000dea:	e7e8      	b.n	8000dbe <__gesf2+0x32>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d0ef      	beq.n	8000dd0 <__gesf2+0x44>
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d1ed      	bne.n	8000dd0 <__gesf2+0x44>
 8000df4:	4282      	cmp	r2, r0
 8000df6:	dceb      	bgt.n	8000dd0 <__gesf2+0x44>
 8000df8:	db04      	blt.n	8000e04 <__gesf2+0x78>
 8000dfa:	42ac      	cmp	r4, r5
 8000dfc:	d8e8      	bhi.n	8000dd0 <__gesf2+0x44>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	42ac      	cmp	r4, r5
 8000e02:	d2dc      	bcs.n	8000dbe <__gesf2+0x32>
 8000e04:	0058      	lsls	r0, r3, #1
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7d9      	b.n	8000dbe <__gesf2+0x32>
 8000e0a:	2c00      	cmp	r4, #0
 8000e0c:	d0d7      	beq.n	8000dbe <__gesf2+0x32>
 8000e0e:	e7df      	b.n	8000dd0 <__gesf2+0x44>
 8000e10:	2002      	movs	r0, #2
 8000e12:	4240      	negs	r0, r0
 8000e14:	e7d3      	b.n	8000dbe <__gesf2+0x32>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d1da      	bne.n	8000dd0 <__gesf2+0x44>
 8000e1a:	e7ee      	b.n	8000dfa <__gesf2+0x6e>

08000e1c <__lesf2>:
 8000e1c:	b530      	push	{r4, r5, lr}
 8000e1e:	0042      	lsls	r2, r0, #1
 8000e20:	0244      	lsls	r4, r0, #9
 8000e22:	024d      	lsls	r5, r1, #9
 8000e24:	0fc3      	lsrs	r3, r0, #31
 8000e26:	0048      	lsls	r0, r1, #1
 8000e28:	0a64      	lsrs	r4, r4, #9
 8000e2a:	0e12      	lsrs	r2, r2, #24
 8000e2c:	0a6d      	lsrs	r5, r5, #9
 8000e2e:	0e00      	lsrs	r0, r0, #24
 8000e30:	0fc9      	lsrs	r1, r1, #31
 8000e32:	2aff      	cmp	r2, #255	@ 0xff
 8000e34:	d017      	beq.n	8000e66 <__lesf2+0x4a>
 8000e36:	28ff      	cmp	r0, #255	@ 0xff
 8000e38:	d00a      	beq.n	8000e50 <__lesf2+0x34>
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d11b      	bne.n	8000e76 <__lesf2+0x5a>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d10a      	bne.n	8000e58 <__lesf2+0x3c>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d01d      	beq.n	8000e82 <__lesf2+0x66>
 8000e46:	2c00      	cmp	r4, #0
 8000e48:	d12d      	bne.n	8000ea6 <__lesf2+0x8a>
 8000e4a:	0048      	lsls	r0, r1, #1
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e011      	b.n	8000e74 <__lesf2+0x58>
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d10e      	bne.n	8000e72 <__lesf2+0x56>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d101      	bne.n	8000e5c <__lesf2+0x40>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d0f6      	beq.n	8000e4a <__lesf2+0x2e>
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d10c      	bne.n	8000e7a <__lesf2+0x5e>
 8000e60:	0058      	lsls	r0, r3, #1
 8000e62:	3801      	subs	r0, #1
 8000e64:	e006      	b.n	8000e74 <__lesf2+0x58>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d103      	bne.n	8000e72 <__lesf2+0x56>
 8000e6a:	28ff      	cmp	r0, #255	@ 0xff
 8000e6c:	d105      	bne.n	8000e7a <__lesf2+0x5e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d015      	beq.n	8000e9e <__lesf2+0x82>
 8000e72:	2002      	movs	r0, #2
 8000e74:	bd30      	pop	{r4, r5, pc}
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d106      	bne.n	8000e88 <__lesf2+0x6c>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	4318      	orrs	r0, r3
 8000e80:	e7f8      	b.n	8000e74 <__lesf2+0x58>
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d0f6      	beq.n	8000e74 <__lesf2+0x58>
 8000e86:	e7f8      	b.n	8000e7a <__lesf2+0x5e>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d1f6      	bne.n	8000e7a <__lesf2+0x5e>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	dcf4      	bgt.n	8000e7a <__lesf2+0x5e>
 8000e90:	dbe6      	blt.n	8000e60 <__lesf2+0x44>
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	d8f1      	bhi.n	8000e7a <__lesf2+0x5e>
 8000e96:	2000      	movs	r0, #0
 8000e98:	42ac      	cmp	r4, r5
 8000e9a:	d2eb      	bcs.n	8000e74 <__lesf2+0x58>
 8000e9c:	e7e0      	b.n	8000e60 <__lesf2+0x44>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d1ea      	bne.n	8000e7a <__lesf2+0x5e>
 8000ea4:	e7e6      	b.n	8000e74 <__lesf2+0x58>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d1e7      	bne.n	8000e7a <__lesf2+0x5e>
 8000eaa:	e7f2      	b.n	8000e92 <__lesf2+0x76>

08000eac <HAL_GPIO_EXTI_Falling_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == Sw1_Pin)
 8000eac:	2801      	cmp	r0, #1
 8000eae:	d007      	beq.n	8000ec0 <HAL_GPIO_EXTI_Falling_Callback+0x14>
		sw1 =1 ;

	if(GPIO_Pin == Sw2_Pin)
 8000eb0:	2880      	cmp	r0, #128	@ 0x80
 8000eb2:	d009      	beq.n	8000ec8 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
		sw2 = 1;

	if(GPIO_Pin == Sw3_Pin)
 8000eb4:	2840      	cmp	r0, #64	@ 0x40
 8000eb6:	d106      	bne.n	8000ec6 <HAL_GPIO_EXTI_Falling_Callback+0x1a>
		sw3 = 1;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]

}
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_EXTI_Falling_Callback+0x1a>
		sw1 =1 ;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
}
 8000ec6:	4770      	bx	lr
		sw2 = 1;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
	if(GPIO_Pin == Sw3_Pin)
 8000ece:	e7fa      	b.n	8000ec6 <HAL_GPIO_EXTI_Falling_Callback+0x1a>
 8000ed0:	2000009e 	.word	0x2000009e
 8000ed4:	200000a0 	.word	0x200000a0
 8000ed8:	2000009f 	.word	0x2000009f

08000edc <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == Sw1_Pin)
 8000edc:	2801      	cmp	r0, #1
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_EXTI_Rising_Callback+0x14>
		sw1 = 0;

	if(GPIO_Pin == Sw2_Pin)
 8000ee0:	2880      	cmp	r0, #128	@ 0x80
 8000ee2:	d009      	beq.n	8000ef8 <HAL_GPIO_EXTI_Rising_Callback+0x1c>
		sw2 = 0;

	if(GPIO_Pin == Sw3_Pin)
 8000ee4:	2840      	cmp	r0, #64	@ 0x40
 8000ee6:	d106      	bne.n	8000ef6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		sw3 = 0;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]

}
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		sw1 = 0;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
}
 8000ef6:	4770      	bx	lr
		sw2 = 0;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	if(GPIO_Pin == Sw3_Pin)
 8000efe:	e7fa      	b.n	8000ef6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
 8000f00:	2000009e 	.word	0x2000009e
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	2000009f 	.word	0x2000009f

08000f0c <HAL_ADC_LevelOutOfWindowCallback>:


void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{

	if(tim3)
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <HAL_ADC_LevelOutOfWindowCallback+0x10>)
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_ADC_LevelOutOfWindowCallback+0x14>)
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	1e51      	subs	r1, r2, #1
 8000f14:	418a      	sbcs	r2, r1
 8000f16:	701a      	strb	r2, [r3, #0]
	impuls = 1;
	else
	 impuls = 0;

}
 8000f18:	4770      	bx	lr
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	2000009c 	.word	0x2000009c
 8000f20:	20000014 	.word	0x20000014

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b500      	push	{lr}
 8000f26:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f28:	2234      	movs	r2, #52	@ 0x34
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	a805      	add	r0, sp, #20
 8000f2e:	f004 f9cb 	bl	80052c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f32:	2210      	movs	r2, #16
 8000f34:	2100      	movs	r1, #0
 8000f36:	a801      	add	r0, sp, #4
 8000f38:	f004 f9c6 	bl	80052c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	2080      	movs	r0, #128	@ 0x80
 8000f3e:	0080      	lsls	r0, r0, #2
 8000f40:	f003 f82e 	bl	8003fa0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f44:	f003 f822 	bl	8003f8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f48:	4a19      	ldr	r2, [pc, #100]	@ (8000fb0 <SystemClock_Config+0x8c>)
 8000f4a:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000f4c:	2118      	movs	r1, #24
 8000f4e:	438b      	bics	r3, r1
 8000f50:	65d3      	str	r3, [r2, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f52:	2306      	movs	r3, #6
 8000f54:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f56:	3b05      	subs	r3, #5
 8000f58:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5a:	33ff      	adds	r3, #255	@ 0xff
 8000f5c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2240      	movs	r2, #64	@ 0x40
 8000f64:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	3a3e      	subs	r2, #62	@ 0x3e
 8000f68:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6a:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f6c:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f6e:	3308      	adds	r3, #8
 8000f70:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000f72:	23e0      	movs	r3, #224	@ 0xe0
 8000f74:	031b      	lsls	r3, r3, #12
 8000f76:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000f78:	23e0      	movs	r3, #224	@ 0xe0
 8000f7a:	061b      	lsls	r3, r3, #24
 8000f7c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	a805      	add	r0, sp, #20
 8000f80:	f003 f840 	bl	8004004 <HAL_RCC_OscConfig>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d10e      	bne.n	8000fa6 <SystemClock_Config+0x82>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	2307      	movs	r3, #7
 8000f8a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8c:	3b05      	subs	r3, #5
 8000f8e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f94:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	a801      	add	r0, sp, #4
 8000f9a:	f003 fb19 	bl	80045d0 <HAL_RCC_ClockConfig>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d103      	bne.n	8000faa <SystemClock_Config+0x86>
  {
    Error_Handler();
  }
}
 8000fa2:	b013      	add	sp, #76	@ 0x4c
 8000fa4:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <SystemClock_Config+0x84>
 8000faa:	b672      	cpsid	i
 8000fac:	e7fe      	b.n	8000fac <SystemClock_Config+0x88>
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <WriteTime>:
void WriteTime(){
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b083      	sub	sp, #12
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fb8:	4c32      	ldr	r4, [pc, #200]	@ (8001084 <WriteTime+0xd0>)
 8000fba:	4d33      	ldr	r5, [pc, #204]	@ (8001088 <WriteTime+0xd4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0021      	movs	r1, r4
 8000fc0:	0028      	movs	r0, r5
 8000fc2:	f003 fded 	bl	8004ba0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fc6:	4931      	ldr	r1, [pc, #196]	@ (800108c <WriteTime+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	0028      	movs	r0, r5
 8000fcc:	f003 fe12 	bl	8004bf4 <HAL_RTC_GetDate>
		  if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
 8000fd0:	78a4      	ldrb	r4, [r4, #2]
 8000fd2:	2c09      	cmp	r4, #9
 8000fd4:	d831      	bhi.n	800103a <WriteTime+0x86>
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <WriteTime+0xd0>)
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	d83b      	bhi.n	8001056 <WriteTime+0xa2>
 8000fde:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <WriteTime+0xd0>)
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	2a09      	cmp	r2, #9
 8000fe4:	d907      	bls.n	8000ff6 <WriteTime+0x42>
			  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000fe6:	4a27      	ldr	r2, [pc, #156]	@ (8001084 <WriteTime+0xd0>)
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	4929      	ldr	r1, [pc, #164]	@ (8001090 <WriteTime+0xdc>)
 8000fec:	4829      	ldr	r0, [pc, #164]	@ (8001094 <WriteTime+0xe0>)
 8000fee:	9400      	str	r4, [sp, #0]
 8000ff0:	f004 f948 	bl	8005284 <siprintf>
 8000ff4:	e03a      	b.n	800106c <WriteTime+0xb8>
			  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ff6:	4928      	ldr	r1, [pc, #160]	@ (8001098 <WriteTime+0xe4>)
 8000ff8:	4826      	ldr	r0, [pc, #152]	@ (8001094 <WriteTime+0xe0>)
 8000ffa:	9400      	str	r4, [sp, #0]
 8000ffc:	f004 f942 	bl	8005284 <siprintf>
 8001000:	e034      	b.n	800106c <WriteTime+0xb8>
			  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001002:	4926      	ldr	r1, [pc, #152]	@ (800109c <WriteTime+0xe8>)
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <WriteTime+0xe0>)
 8001006:	9400      	str	r4, [sp, #0]
 8001008:	f004 f93c 	bl	8005284 <siprintf>
 800100c:	e02e      	b.n	800106c <WriteTime+0xb8>
			  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800100e:	4924      	ldr	r1, [pc, #144]	@ (80010a0 <WriteTime+0xec>)
 8001010:	4820      	ldr	r0, [pc, #128]	@ (8001094 <WriteTime+0xe0>)
 8001012:	9400      	str	r4, [sp, #0]
 8001014:	f004 f936 	bl	8005284 <siprintf>
 8001018:	e028      	b.n	800106c <WriteTime+0xb8>
		  else if(sTime.Minutes < 10)
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <WriteTime+0xd0>)
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d905      	bls.n	800102e <WriteTime+0x7a>
			  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001022:	4920      	ldr	r1, [pc, #128]	@ (80010a4 <WriteTime+0xf0>)
 8001024:	481b      	ldr	r0, [pc, #108]	@ (8001094 <WriteTime+0xe0>)
 8001026:	9400      	str	r4, [sp, #0]
 8001028:	f004 f92c 	bl	8005284 <siprintf>
 800102c:	e01e      	b.n	800106c <WriteTime+0xb8>
			  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800102e:	491e      	ldr	r1, [pc, #120]	@ (80010a8 <WriteTime+0xf4>)
 8001030:	4818      	ldr	r0, [pc, #96]	@ (8001094 <WriteTime+0xe0>)
 8001032:	9400      	str	r4, [sp, #0]
 8001034:	f004 f926 	bl	8005284 <siprintf>
 8001038:	e018      	b.n	800106c <WriteTime+0xb8>
		  else if(sTime.Hours < 10 && sTime.Minutes < 10)
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <WriteTime+0xd0>)
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	2a09      	cmp	r2, #9
 8001040:	d8eb      	bhi.n	800101a <WriteTime+0x66>
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <WriteTime+0xd0>)
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9e1      	bls.n	800100e <WriteTime+0x5a>
			  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800104a:	4918      	ldr	r1, [pc, #96]	@ (80010ac <WriteTime+0xf8>)
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <WriteTime+0xe0>)
 800104e:	9400      	str	r4, [sp, #0]
 8001050:	f004 f918 	bl	8005284 <siprintf>
 8001054:	e00a      	b.n	800106c <WriteTime+0xb8>
		  else if(sTime.Seconds < 10 && sTime.Hours < 10)
 8001056:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <WriteTime+0xd0>)
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	2a09      	cmp	r2, #9
 800105c:	d9d1      	bls.n	8001002 <WriteTime+0x4e>
			  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <WriteTime+0xd0>)
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	4913      	ldr	r1, [pc, #76]	@ (80010b0 <WriteTime+0xfc>)
 8001064:	480b      	ldr	r0, [pc, #44]	@ (8001094 <WriteTime+0xe0>)
 8001066:	9400      	str	r4, [sp, #0]
 8001068:	f004 f90c 	bl	8005284 <siprintf>
		  	  	ssd1306_SetCursor(28, 0);
 800106c:	2100      	movs	r1, #0
 800106e:	201c      	movs	r0, #28
 8001070:	f001 f808 	bl	8002084 <ssd1306_SetCursor>
		        ssd1306_WriteString(buf, Font_7x10);
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <WriteTime+0x100>)
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <WriteTime+0xe0>)
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	f000 ffec 	bl	8002058 <ssd1306_WriteString>
}
 8001080:	b003      	add	sp, #12
 8001082:	bd30      	pop	{r4, r5, pc}
 8001084:	200000c4 	.word	0x200000c4
 8001088:	200001bc 	.word	0x200001bc
 800108c:	200000c0 	.word	0x200000c0
 8001090:	080070f0 	.word	0x080070f0
 8001094:	200000ac 	.word	0x200000ac
 8001098:	0800709c 	.word	0x0800709c
 800109c:	080070a8 	.word	0x080070a8
 80010a0:	080070b4 	.word	0x080070b4
 80010a4:	080070cc 	.word	0x080070cc
 80010a8:	080070c0 	.word	0x080070c0
 80010ac:	080070d8 	.word	0x080070d8
 80010b0:	080070e4 	.word	0x080070e4
 80010b4:	20000008 	.word	0x20000008

080010b8 <BatteryCharge>:
uint16_t BatteryCharge(){
 80010b8:	b510      	push	{r4, lr}
	if(access){
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <BatteryCharge+0x68>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01b      	beq.n	80010fa <BatteryCharge+0x42>
		adc1 = adc[0];
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <BatteryCharge+0x6c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
		 if(adc1 > 2050){
 80010c8:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <BatteryCharge+0x70>)
		adc1 = 0;
 80010ca:	2000      	movs	r0, #0
		 if(adc1 > 2050){
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d90a      	bls.n	80010e6 <BatteryCharge+0x2e>
		 adc1 -= 2050;
 80010d0:	4a16      	ldr	r2, [pc, #88]	@ (800112c <BatteryCharge+0x74>)
 80010d2:	1898      	adds	r0, r3, r2
		 adc1 *= 0.175f;
 80010d4:	b280      	uxth	r0, r0
 80010d6:	f7ff fd89 	bl	8000bec <__aeabi_i2f>
 80010da:	4915      	ldr	r1, [pc, #84]	@ (8001130 <BatteryCharge+0x78>)
 80010dc:	f7ff f9a8 	bl	8000430 <__aeabi_fmul>
 80010e0:	f7ff f98e 	bl	8000400 <__aeabi_f2uiz>
 80010e4:	b280      	uxth	r0, r0
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <BatteryCharge+0x7c>)
 80010e8:	8018      	strh	r0, [r3, #0]
		 once_minute = sTime.Minutes;
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <BatteryCharge+0x80>)
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <BatteryCharge+0x84>)
 80010ee:	7852      	ldrb	r2, [r2, #1]
 80010f0:	701a      	strb	r2, [r3, #0]
		 access = 0;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <BatteryCharge+0x68>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
	if(sTime.Minutes != once_minute)
 80010f8:	e008      	b.n	800110c <BatteryCharge+0x54>
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <BatteryCharge+0x84>)
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <BatteryCharge+0x80>)
 80010fe:	7852      	ldrb	r2, [r2, #1]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d002      	beq.n	800110c <BatteryCharge+0x54>
			access = 1;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <BatteryCharge+0x68>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
	if(adc1 >= 100)
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <BatteryCharge+0x7c>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	2b63      	cmp	r3, #99	@ 0x63
 8001112:	d902      	bls.n	800111a <BatteryCharge+0x62>
	adc1 = 100;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <BatteryCharge+0x7c>)
 8001116:	2264      	movs	r2, #100	@ 0x64
 8001118:	801a      	strh	r2, [r3, #0]
	return adc1;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <BatteryCharge+0x7c>)
 800111c:	8818      	ldrh	r0, [r3, #0]
}
 800111e:	bd10      	pop	{r4, pc}
 8001120:	20000094 	.word	0x20000094
 8001124:	200000a8 	.word	0x200000a8
 8001128:	00000802 	.word	0x00000802
 800112c:	fffff7fe 	.word	0xfffff7fe
 8001130:	3e333333 	.word	0x3e333333
 8001134:	20000092 	.word	0x20000092
 8001138:	20000091 	.word	0x20000091
 800113c:	200000c4 	.word	0x200000c4

08001140 <WriteBatteryCharge>:
void WriteBatteryCharge(uint16_t adc){
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	0004      	movs	r4, r0
	ssd1306_SetCursor(100, 0);
 8001144:	2100      	movs	r1, #0
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f000 ff9c 	bl	8002084 <ssd1306_SetCursor>
		 sprintf(buf, "%d", adc);
 800114c:	4908      	ldr	r1, [pc, #32]	@ (8001170 <WriteBatteryCharge+0x30>)
 800114e:	4d09      	ldr	r5, [pc, #36]	@ (8001174 <WriteBatteryCharge+0x34>)
 8001150:	0022      	movs	r2, r4
 8001152:	0028      	movs	r0, r5
 8001154:	f004 f896 	bl	8005284 <siprintf>
		 ssd1306_WriteString(buf, Font_7x10);
 8001158:	4c07      	ldr	r4, [pc, #28]	@ (8001178 <WriteBatteryCharge+0x38>)
 800115a:	6821      	ldr	r1, [r4, #0]
 800115c:	6862      	ldr	r2, [r4, #4]
 800115e:	0028      	movs	r0, r5
 8001160:	f000 ff7a 	bl	8002058 <ssd1306_WriteString>
		 ssd1306_WriteChar('%', Font_7x10);
 8001164:	6821      	ldr	r1, [r4, #0]
 8001166:	6862      	ldr	r2, [r4, #4]
 8001168:	2025      	movs	r0, #37	@ 0x25
 800116a:	f000 fefd 	bl	8001f68 <ssd1306_WriteChar>
}
 800116e:	bd70      	pop	{r4, r5, r6, pc}
 8001170:	080070f8 	.word	0x080070f8
 8001174:	200000ac 	.word	0x200000ac
 8001178:	20000008 	.word	0x20000008

0800117c <ConfigTime>:
void ConfigTime(){
 800117c:	b510      	push	{r4, lr}
 800117e:	b082      	sub	sp, #8
	if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
 8001180:	4b6f      	ldr	r3, [pc, #444]	@ (8001340 <ConfigTime+0x1c4>)
 8001182:	789c      	ldrb	r4, [r3, #2]
 8001184:	2c09      	cmp	r4, #9
 8001186:	d900      	bls.n	800118a <ConfigTime+0xe>
 8001188:	e081      	b.n	800128e <ConfigTime+0x112>
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	2b09      	cmp	r3, #9
 800118e:	d900      	bls.n	8001192 <ConfigTime+0x16>
 8001190:	e096      	b.n	80012c0 <ConfigTime+0x144>
 8001192:	4a6b      	ldr	r2, [pc, #428]	@ (8001340 <ConfigTime+0x1c4>)
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	2a09      	cmp	r2, #9
 8001198:	d907      	bls.n	80011aa <ConfigTime+0x2e>
						  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800119a:	4a69      	ldr	r2, [pc, #420]	@ (8001340 <ConfigTime+0x1c4>)
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	4969      	ldr	r1, [pc, #420]	@ (8001344 <ConfigTime+0x1c8>)
 80011a0:	4869      	ldr	r0, [pc, #420]	@ (8001348 <ConfigTime+0x1cc>)
 80011a2:	9400      	str	r4, [sp, #0]
 80011a4:	f004 f86e 	bl	8005284 <siprintf>
 80011a8:	e096      	b.n	80012d8 <ConfigTime+0x15c>
						  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80011aa:	4968      	ldr	r1, [pc, #416]	@ (800134c <ConfigTime+0x1d0>)
 80011ac:	4866      	ldr	r0, [pc, #408]	@ (8001348 <ConfigTime+0x1cc>)
 80011ae:	9400      	str	r4, [sp, #0]
 80011b0:	f004 f868 	bl	8005284 <siprintf>
 80011b4:	e090      	b.n	80012d8 <ConfigTime+0x15c>
						  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80011b6:	4966      	ldr	r1, [pc, #408]	@ (8001350 <ConfigTime+0x1d4>)
 80011b8:	4863      	ldr	r0, [pc, #396]	@ (8001348 <ConfigTime+0x1cc>)
 80011ba:	9400      	str	r4, [sp, #0]
 80011bc:	f004 f862 	bl	8005284 <siprintf>
 80011c0:	e08a      	b.n	80012d8 <ConfigTime+0x15c>
						  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80011c2:	4964      	ldr	r1, [pc, #400]	@ (8001354 <ConfigTime+0x1d8>)
 80011c4:	4860      	ldr	r0, [pc, #384]	@ (8001348 <ConfigTime+0x1cc>)
 80011c6:	9400      	str	r4, [sp, #0]
 80011c8:	f004 f85c 	bl	8005284 <siprintf>
 80011cc:	e084      	b.n	80012d8 <ConfigTime+0x15c>
					  else if(sTime.Minutes < 10)
 80011ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001340 <ConfigTime+0x1c4>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	2b09      	cmp	r3, #9
 80011d4:	d905      	bls.n	80011e2 <ConfigTime+0x66>
						  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80011d6:	4960      	ldr	r1, [pc, #384]	@ (8001358 <ConfigTime+0x1dc>)
 80011d8:	485b      	ldr	r0, [pc, #364]	@ (8001348 <ConfigTime+0x1cc>)
 80011da:	9400      	str	r4, [sp, #0]
 80011dc:	f004 f852 	bl	8005284 <siprintf>
 80011e0:	e07a      	b.n	80012d8 <ConfigTime+0x15c>
						  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80011e2:	495e      	ldr	r1, [pc, #376]	@ (800135c <ConfigTime+0x1e0>)
 80011e4:	4858      	ldr	r0, [pc, #352]	@ (8001348 <ConfigTime+0x1cc>)
 80011e6:	9400      	str	r4, [sp, #0]
 80011e8:	f004 f84c 	bl	8005284 <siprintf>
 80011ec:	e074      	b.n	80012d8 <ConfigTime+0x15c>
					if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011ee:	4954      	ldr	r1, [pc, #336]	@ (8001340 <ConfigTime+0x1c4>)
 80011f0:	485b      	ldr	r0, [pc, #364]	@ (8001360 <ConfigTime+0x1e4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f003 fc5e 	bl	8004ab4 <HAL_RTC_SetTime>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d103      	bne.n	8001204 <ConfigTime+0x88>
					    config = 0;
 80011fc:	4b59      	ldr	r3, [pc, #356]	@ (8001364 <ConfigTime+0x1e8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e042      	b.n	800128a <ConfigTime+0x10e>
 8001204:	b672      	cpsid	i
  while (1)
 8001206:	e7fe      	b.n	8001206 <ConfigTime+0x8a>
					if(sw3 && tim3){
 8001208:	4a57      	ldr	r2, [pc, #348]	@ (8001368 <ConfigTime+0x1ec>)
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	2a00      	cmp	r2, #0
 800120e:	d052      	beq.n	80012b6 <ConfigTime+0x13a>
 8001210:	4a56      	ldr	r2, [pc, #344]	@ (800136c <ConfigTime+0x1f0>)
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	2a00      	cmp	r2, #0
 8001216:	d049      	beq.n	80012ac <ConfigTime+0x130>
						if(sTime.Seconds < 60)
 8001218:	4a49      	ldr	r2, [pc, #292]	@ (8001340 <ConfigTime+0x1c4>)
 800121a:	7892      	ldrb	r2, [r2, #2]
 800121c:	2a3b      	cmp	r2, #59	@ 0x3b
 800121e:	d801      	bhi.n	8001224 <ConfigTime+0xa8>
							sTime.Seconds++;
 8001220:	3201      	adds	r2, #1
 8001222:	b2d3      	uxtb	r3, r2
 8001224:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <ConfigTime+0x1c4>)
 8001226:	7093      	strb	r3, [r2, #2]
						tim3 = 0;
 8001228:	4b50      	ldr	r3, [pc, #320]	@ (800136c <ConfigTime+0x1f0>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
						TIM3->CNT = 0;
 800122e:	4b50      	ldr	r3, [pc, #320]	@ (8001370 <ConfigTime+0x1f4>)
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24
						TIM3->SR &= ~TIM_SR_UIF;
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
						TIM3->ARR = 200;
 800123a:	22c8      	movs	r2, #200	@ 0xc8
 800123c:	62da      	str	r2, [r3, #44]	@ 0x2c
						HAL_TIM_Base_Start_IT(&htim3);
 800123e:	484d      	ldr	r0, [pc, #308]	@ (8001374 <ConfigTime+0x1f8>)
 8001240:	f003 fd3e 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
					if(sw2  && tim3){
 8001244:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <ConfigTime+0x1fc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01a      	beq.n	8001282 <ConfigTime+0x106>
 800124c:	4b47      	ldr	r3, [pc, #284]	@ (800136c <ConfigTime+0x1f0>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01a      	beq.n	800128a <ConfigTime+0x10e>
						if(sTime.Minutes < 60)
 8001254:	4b3a      	ldr	r3, [pc, #232]	@ (8001340 <ConfigTime+0x1c4>)
 8001256:	785b      	ldrb	r3, [r3, #1]
							sTime.Minutes = 0;
 8001258:	2200      	movs	r2, #0
						if(sTime.Minutes < 60)
 800125a:	2b3b      	cmp	r3, #59	@ 0x3b
 800125c:	d801      	bhi.n	8001262 <ConfigTime+0xe6>
							sTime.Minutes++;
 800125e:	3301      	adds	r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <ConfigTime+0x1c4>)
 8001264:	705a      	strb	r2, [r3, #1]
						tim3 = 0;
 8001266:	4b41      	ldr	r3, [pc, #260]	@ (800136c <ConfigTime+0x1f0>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
						TIM3->CNT = 0;
 800126c:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <ConfigTime+0x1f4>)
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
						TIM3->SR &= ~TIM_SR_UIF;
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	2101      	movs	r1, #1
 8001274:	438a      	bics	r2, r1
 8001276:	611a      	str	r2, [r3, #16]
						TIM3->ARR = 200;
 8001278:	22c8      	movs	r2, #200	@ 0xc8
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
						HAL_TIM_Base_Start_IT(&htim3);
 800127c:	483d      	ldr	r0, [pc, #244]	@ (8001374 <ConfigTime+0x1f8>)
 800127e:	f003 fd1f 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
					if(sw1 && tim3){
 8001282:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <ConfigTime+0x200>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d13e      	bne.n	8001308 <ConfigTime+0x18c>
}
 800128a:	b002      	add	sp, #8
 800128c:	bd10      	pop	{r4, pc}
					  else if(sTime.Hours < 10 && sTime.Minutes < 10)
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <ConfigTime+0x1c4>)
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	2a09      	cmp	r2, #9
 8001294:	d89b      	bhi.n	80011ce <ConfigTime+0x52>
 8001296:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <ConfigTime+0x1c4>)
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	2b09      	cmp	r3, #9
 800129c:	d800      	bhi.n	80012a0 <ConfigTime+0x124>
 800129e:	e790      	b.n	80011c2 <ConfigTime+0x46>
						  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80012a0:	4937      	ldr	r1, [pc, #220]	@ (8001380 <ConfigTime+0x204>)
 80012a2:	4829      	ldr	r0, [pc, #164]	@ (8001348 <ConfigTime+0x1cc>)
 80012a4:	9400      	str	r4, [sp, #0]
 80012a6:	f003 ffed 	bl	8005284 <siprintf>
 80012aa:	e015      	b.n	80012d8 <ConfigTime+0x15c>
					if(sw2  && tim3){
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <ConfigTime+0x1fc>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ea      	bne.n	800128a <ConfigTime+0x10e>
 80012b4:	e7e5      	b.n	8001282 <ConfigTime+0x106>
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <ConfigTime+0x1fc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1c6      	bne.n	800124c <ConfigTime+0xd0>
 80012be:	e7e4      	b.n	800128a <ConfigTime+0x10e>
					  else if(sTime.Seconds < 10 && sTime.Hours < 10)
 80012c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <ConfigTime+0x1c4>)
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	2a09      	cmp	r2, #9
 80012c6:	d800      	bhi.n	80012ca <ConfigTime+0x14e>
 80012c8:	e775      	b.n	80011b6 <ConfigTime+0x3a>
						  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <ConfigTime+0x1c4>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	492d      	ldr	r1, [pc, #180]	@ (8001384 <ConfigTime+0x208>)
 80012d0:	481d      	ldr	r0, [pc, #116]	@ (8001348 <ConfigTime+0x1cc>)
 80012d2:	9400      	str	r4, [sp, #0]
 80012d4:	f003 ffd6 	bl	8005284 <siprintf>
					  	  	ssd1306_SetCursor(28, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	201c      	movs	r0, #28
 80012dc:	f000 fed2 	bl	8002084 <ssd1306_SetCursor>
					        ssd1306_WriteString(buf, Font_7x10);
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <ConfigTime+0x20c>)
 80012e2:	4819      	ldr	r0, [pc, #100]	@ (8001348 <ConfigTime+0x1cc>)
 80012e4:	6819      	ldr	r1, [r3, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	f000 feb6 	bl	8002058 <ssd1306_WriteString>
					if(sw1 && sw3){
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <ConfigTime+0x200>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d100      	bne.n	80012f6 <ConfigTime+0x17a>
 80012f4:	e788      	b.n	8001208 <ConfigTime+0x8c>
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <ConfigTime+0x1ec>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d000      	beq.n	8001300 <ConfigTime+0x184>
 80012fe:	e776      	b.n	80011ee <ConfigTime+0x72>
					if(sw2  && tim3){
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <ConfigTime+0x1fc>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1a1      	bne.n	800124c <ConfigTime+0xd0>
					if(sw1 && tim3){
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <ConfigTime+0x1f0>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0bc      	beq.n	800128a <ConfigTime+0x10e>
						if(sTime.Hours < 24)
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <ConfigTime+0x1c4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
							sTime.Hours = 0;
 8001314:	2200      	movs	r2, #0
						if(sTime.Hours < 24)
 8001316:	2b17      	cmp	r3, #23
 8001318:	d801      	bhi.n	800131e <ConfigTime+0x1a2>
							sTime.Hours++;
 800131a:	3301      	adds	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <ConfigTime+0x1c4>)
 8001320:	701a      	strb	r2, [r3, #0]
						tim3 = 0;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <ConfigTime+0x1f0>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
						TIM3->CNT = 0;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <ConfigTime+0x1f4>)
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
						TIM3->SR &= ~TIM_SR_UIF;
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	2101      	movs	r1, #1
 8001330:	438a      	bics	r2, r1
 8001332:	611a      	str	r2, [r3, #16]
						TIM3->ARR = 200;
 8001334:	22c8      	movs	r2, #200	@ 0xc8
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
						HAL_TIM_Base_Start_IT(&htim3);
 8001338:	480e      	ldr	r0, [pc, #56]	@ (8001374 <ConfigTime+0x1f8>)
 800133a:	f003 fcc1 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
}
 800133e:	e7a4      	b.n	800128a <ConfigTime+0x10e>
 8001340:	200000c4 	.word	0x200000c4
 8001344:	080070f0 	.word	0x080070f0
 8001348:	200000ac 	.word	0x200000ac
 800134c:	0800709c 	.word	0x0800709c
 8001350:	080070a8 	.word	0x080070a8
 8001354:	080070b4 	.word	0x080070b4
 8001358:	080070cc 	.word	0x080070cc
 800135c:	080070c0 	.word	0x080070c0
 8001360:	200001bc 	.word	0x200001bc
 8001364:	2000009d 	.word	0x2000009d
 8001368:	2000009e 	.word	0x2000009e
 800136c:	20000014 	.word	0x20000014
 8001370:	40000400 	.word	0x40000400
 8001374:	20000170 	.word	0x20000170
 8001378:	2000009f 	.word	0x2000009f
 800137c:	200000a0 	.word	0x200000a0
 8001380:	080070d8 	.word	0x080070d8
 8001384:	080070e4 	.word	0x080070e4
 8001388:	20000008 	.word	0x20000008

0800138c <DetectImpuls>:
void DetectImpuls(){
 800138c:	b510      	push	{r4, lr}
	if((impuls  && tim3) || (duration  > 6000)){
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <DetectImpuls+0x90>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <DetectImpuls+0x12>
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <DetectImpuls+0x94>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d110      	bne.n	80013c0 <DetectImpuls+0x34>
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <DetectImpuls+0x98>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <DetectImpuls+0x9c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d92a      	bls.n	80013fe <DetectImpuls+0x72>
					HAL_TIM_Base_Stop(&htim14);
 80013a8:	4820      	ldr	r0, [pc, #128]	@ (800142c <DetectImpuls+0xa0>)
 80013aa:	f003 fc73 	bl	8004c94 <HAL_TIM_Base_Stop>
					duration = 5000;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <DetectImpuls+0x98>)
 80013b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <DetectImpuls+0xa4>)
 80013b2:	801a      	strh	r2, [r3, #0]
					TIM14->CNT = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001434 <DetectImpuls+0xa8>)
 80013b8:	6253      	str	r3, [r2, #36]	@ 0x24
					timer = 0;
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <DetectImpuls+0xac>)
 80013bc:	7013      	strb	r3, [r2, #0]
 80013be:	e01e      	b.n	80013fe <DetectImpuls+0x72>
				if(duration > 6000){
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <DetectImpuls+0x98>)
 80013c2:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <DetectImpuls+0x9c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d8ee      	bhi.n	80013a8 <DetectImpuls+0x1c>
			if(timer){
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <DetectImpuls+0xac>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <DetectImpuls+0x74>
				duration = TIM14->CNT;
 80013d2:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <DetectImpuls+0xa8>)
 80013d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80013d6:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <DetectImpuls+0x98>)
 80013d8:	8011      	strh	r1, [r2, #0]
				TIM14->CNT = 0;
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
	tim3 = 0;
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <DetectImpuls+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	TIM3->CNT = 0;
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <DetectImpuls+0xb0>)
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->SR &= ~TIM_SR_UIF;
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	2001      	movs	r0, #1
 80013ec:	4381      	bics	r1, r0
 80013ee:	6119      	str	r1, [r3, #16]
	TIM3->ARR = 29;
 80013f0:	211d      	movs	r1, #29
 80013f2:	62d9      	str	r1, [r3, #44]	@ 0x2c
	impuls = 0;
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <DetectImpuls+0x90>)
 80013f6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 80013f8:	4811      	ldr	r0, [pc, #68]	@ (8001440 <DetectImpuls+0xb4>)
 80013fa:	f003 fc61 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
}
 80013fe:	bd10      	pop	{r4, pc}
				TIM14->CNT = 0;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <DetectImpuls+0xa8>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
				TIM14->SR &= ~TIM_SR_UIF;
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	2401      	movs	r4, #1
 800140a:	43a2      	bics	r2, r4
 800140c:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start(&htim14);
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <DetectImpuls+0xa0>)
 8001410:	f003 fc12 	bl	8004c38 <HAL_TIM_Base_Start>
				timer = 1;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <DetectImpuls+0xac>)
 8001416:	701c      	strb	r4, [r3, #0]
 8001418:	e7e1      	b.n	80013de <DetectImpuls+0x52>
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	2000009c 	.word	0x2000009c
 8001420:	20000014 	.word	0x20000014
 8001424:	20000010 	.word	0x20000010
 8001428:	00001770 	.word	0x00001770
 800142c:	20000124 	.word	0x20000124
 8001430:	00001388 	.word	0x00001388
 8001434:	40002000 	.word	0x40002000
 8001438:	20000090 	.word	0x20000090
 800143c:	40000400 	.word	0x40000400
 8001440:	20000170 	.word	0x20000170

08001444 <CalculateSpeed>:
void CalculateSpeed(){
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	b083      	sub	sp, #12
	if(TIM14->CNT > duration)
 8001448:	4b29      	ldr	r3, [pc, #164]	@ (80014f0 <CalculateSpeed+0xac>)
 800144a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <CalculateSpeed+0xb0>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d903      	bls.n	800145c <CalculateSpeed+0x18>
	 duration = TIM14->CNT;
 8001454:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <CalculateSpeed+0xac>)
 8001456:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001458:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <CalculateSpeed+0xb0>)
 800145a:	801a      	strh	r2, [r3, #0]
	if(duration < 5000){
 800145c:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <CalculateSpeed+0xb0>)
 800145e:	8819      	ldrh	r1, [r3, #0]
 8001460:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <CalculateSpeed+0xb4>)
 8001462:	4299      	cmp	r1, r3
 8001464:	d835      	bhi.n	80014d2 <CalculateSpeed+0x8e>
	speed = (size * 36)/duration  ;  // size = ? * 10^-3 ... speed = ... *10^3 -> del 10^+-3
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <CalculateSpeed+0xb8>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	00d8      	lsls	r0, r3, #3
 800146c:	18c0      	adds	r0, r0, r3
 800146e:	0080      	lsls	r0, r0, #2
 8001470:	f7fe feda 	bl	8000228 <__divsi3>
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <CalculateSpeed+0xbc>)
 8001476:	8018      	strh	r0, [r3, #0]
	smooth_speed = (SMOOTH_SPEED_A * speed + SMOOTH_SPEED_DEL * smooth_speed)/100;
 8001478:	4c22      	ldr	r4, [pc, #136]	@ (8001504 <CalculateSpeed+0xc0>)
 800147a:	8822      	ldrh	r2, [r4, #0]
 800147c:	0053      	lsls	r3, r2, #1
 800147e:	189b      	adds	r3, r3, r2
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	189b      	adds	r3, r3, r2
 8001484:	0400      	lsls	r0, r0, #16
 8001486:	0c00      	lsrs	r0, r0, #16
 8001488:	1818      	adds	r0, r3, r0
 800148a:	2164      	movs	r1, #100	@ 0x64
 800148c:	f7fe fecc 	bl	8000228 <__divsi3>
 8001490:	b285      	uxth	r5, r0
 8001492:	8025      	strh	r5, [r4, #0]
	ssd1306_SetCursor(9, 25);
 8001494:	2119      	movs	r1, #25
 8001496:	2009      	movs	r0, #9
 8001498:	f000 fdf4 	bl	8002084 <ssd1306_SetCursor>
	uint8_t real_speed1 = (uint16_t)smooth_speed / 10;
 800149c:	210a      	movs	r1, #10
 800149e:	0028      	movs	r0, r5
 80014a0:	f7fe fe38 	bl	8000114 <__udivsi3>
		 snprintf(buf, sizeof(buf), "%d.%dkh/h", real_speed1, real_speed2);
 80014a4:	b2c7      	uxtb	r7, r0
 80014a6:	4e18      	ldr	r6, [pc, #96]	@ (8001508 <CalculateSpeed+0xc4>)
 80014a8:	4c18      	ldr	r4, [pc, #96]	@ (800150c <CalculateSpeed+0xc8>)
	uint8_t real_speed2 = (uint16_t)smooth_speed % 10;
 80014aa:	210a      	movs	r1, #10
 80014ac:	0028      	movs	r0, r5
 80014ae:	f7fe feb7 	bl	8000220 <__aeabi_uidivmod>
		 snprintf(buf, sizeof(buf), "%d.%dkh/h", real_speed1, real_speed2);
 80014b2:	b2c9      	uxtb	r1, r1
 80014b4:	9100      	str	r1, [sp, #0]
 80014b6:	003b      	movs	r3, r7
 80014b8:	0032      	movs	r2, r6
 80014ba:	2114      	movs	r1, #20
 80014bc:	0020      	movs	r0, r4
 80014be:	f003 feab 	bl	8005218 <sniprintf>
		 ssd1306_WriteString(buf, Font_11x18);
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <CalculateSpeed+0xcc>)
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	0020      	movs	r0, r4
 80014ca:	f000 fdc5 	bl	8002058 <ssd1306_WriteString>
}
 80014ce:	b003      	add	sp, #12
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ssd1306_SetCursor(20, 25);
 80014d2:	2119      	movs	r1, #25
 80014d4:	2014      	movs	r0, #20
 80014d6:	f000 fdd5 	bl	8002084 <ssd1306_SetCursor>
		snprintf(buf, sizeof(buf), "0.0kh/h");
 80014da:	480c      	ldr	r0, [pc, #48]	@ (800150c <CalculateSpeed+0xc8>)
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <CalculateSpeed+0xd0>)
 80014de:	0002      	movs	r2, r0
 80014e0:	cb12      	ldmia	r3!, {r1, r4}
 80014e2:	c212      	stmia	r2!, {r1, r4}
		ssd1306_WriteString(buf, Font_11x18);
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <CalculateSpeed+0xcc>)
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	f000 fdb5 	bl	8002058 <ssd1306_WriteString>
}
 80014ee:	e7ee      	b.n	80014ce <CalculateSpeed+0x8a>
 80014f0:	40002000 	.word	0x40002000
 80014f4:	20000010 	.word	0x20000010
 80014f8:	00001387 	.word	0x00001387
 80014fc:	20000012 	.word	0x20000012
 8001500:	200000a2 	.word	0x200000a2
 8001504:	200000a4 	.word	0x200000a4
 8001508:	080070fc 	.word	0x080070fc
 800150c:	200000ac 	.word	0x200000ac
 8001510:	20000000 	.word	0x20000000
 8001514:	08007108 	.word	0x08007108

08001518 <main>:
 {
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	46d6      	mov	lr, sl
 800151c:	464f      	mov	r7, r9
 800151e:	4646      	mov	r6, r8
 8001520:	b5c0      	push	{r6, r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 8001524:	f001 f834 	bl	8002590 <HAL_Init>
  SystemClock_Config();
 8001528:	f7ff fcfc 	bl	8000f24 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	2208      	movs	r2, #8
 800152e:	2100      	movs	r1, #0
 8001530:	a80b      	add	r0, sp, #44	@ 0x2c
 8001532:	f003 fec9 	bl	80052c8 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4cb0      	ldr	r4, [pc, #704]	@ (80017f8 <main+0x2e0>)
 8001538:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800153a:	2302      	movs	r3, #2
 800153c:	431a      	orrs	r2, r3
 800153e:	6362      	str	r2, [r4, #52]	@ 0x34
 8001540:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001542:	4013      	ands	r3, r2
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800154a:	2304      	movs	r3, #4
 800154c:	431a      	orrs	r2, r3
 800154e:	6362      	str	r2, [r4, #52]	@ 0x34
 8001550:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001552:	4013      	ands	r3, r2
 8001554:	9303      	str	r3, [sp, #12]
 8001556:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800155a:	2501      	movs	r5, #1
 800155c:	432b      	orrs	r3, r5
 800155e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001562:	402b      	ands	r3, r5
 8001564:	9304      	str	r3, [sp, #16]
 8001566:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = Sw3_Pin|Sw2_Pin|STDBY_BAT_Pin|CHRG_BAT_Pin;
 8001568:	23c6      	movs	r3, #198	@ 0xc6
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800156e:	26c4      	movs	r6, #196	@ 0xc4
 8001570:	03b6      	lsls	r6, r6, #14
 8001572:	9609      	str	r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001574:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	20a0      	movs	r0, #160	@ 0xa0
 8001578:	a908      	add	r1, sp, #32
 800157a:	05c0      	lsls	r0, r0, #23
 800157c:	f002 f828 	bl	80035d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sw1_Pin;
 8001580:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001582:	9609      	str	r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(Sw1_GPIO_Port, &GPIO_InitStruct);
 8001586:	a908      	add	r1, sp, #32
 8001588:	489c      	ldr	r0, [pc, #624]	@ (80017fc <main+0x2e4>)
 800158a:	f002 f821 	bl	80035d0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2005      	movs	r0, #5
 8001594:	f001 fe6c 	bl	8003270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001598:	2005      	movs	r0, #5
 800159a:	f001 fe9b 	bl	80032d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2007      	movs	r0, #7
 80015a4:	f001 fe64 	bl	8003270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80015a8:	2007      	movs	r0, #7
 80015aa:	f001 fe93 	bl	80032d4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015b0:	432b      	orrs	r3, r5
 80015b2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80015b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015b6:	402b      	ands	r3, r5
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	2009      	movs	r0, #9
 80015c2:	f001 fe55 	bl	8003270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015c6:	2009      	movs	r0, #9
 80015c8:	f001 fe84 	bl	80032d4 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80015cc:	488c      	ldr	r0, [pc, #560]	@ (8001800 <main+0x2e8>)
 80015ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001804 <main+0x2ec>)
 80015d0:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00200105;
 80015d2:	4b8d      	ldr	r3, [pc, #564]	@ (8001808 <main+0x2f0>)
 80015d4:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015da:	60c5      	str	r5, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015de:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e6:	f002 fa5b 	bl	8003aa0 <HAL_I2C_Init>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d000      	beq.n	80015f0 <main+0xd8>
 80015ee:	e0e9      	b.n	80017c4 <main+0x2ac>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f0:	4883      	ldr	r0, [pc, #524]	@ (8001800 <main+0x2e8>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	f002 fc60 	bl	8003eb8 <HAL_I2CEx_ConfigAnalogFilter>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d000      	beq.n	80015fe <main+0xe6>
 80015fc:	e0e4      	b.n	80017c8 <main+0x2b0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015fe:	4880      	ldr	r0, [pc, #512]	@ (8001800 <main+0x2e8>)
 8001600:	2100      	movs	r1, #0
 8001602:	f002 fc85 	bl	8003f10 <HAL_I2CEx_ConfigDigitalFilter>
 8001606:	2800      	cmp	r0, #0
 8001608:	d000      	beq.n	800160c <main+0xf4>
 800160a:	e0df      	b.n	80017cc <main+0x2b4>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800160c:	2080      	movs	r0, #128	@ 0x80
 800160e:	0340      	lsls	r0, r0, #13
 8001610:	f002 fca8 	bl	8003f64 <HAL_I2CEx_EnableFastModePlus>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001614:	2218      	movs	r2, #24
 8001616:	2100      	movs	r1, #0
 8001618:	a808      	add	r0, sp, #32
 800161a:	f003 fe55 	bl	80052c8 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	220c      	movs	r2, #12
 8001620:	2100      	movs	r1, #0
 8001622:	a805      	add	r0, sp, #20
 8001624:	f003 fe50 	bl	80052c8 <memset>
  hadc1.Instance = ADC1;
 8001628:	4878      	ldr	r0, [pc, #480]	@ (800180c <main+0x2f4>)
 800162a:	4b79      	ldr	r3, [pc, #484]	@ (8001810 <main+0x2f8>)
 800162c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	031b      	lsls	r3, r3, #12
 8001632:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001634:	2300      	movs	r3, #0
 8001636:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001638:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	0392      	lsls	r2, r2, #14
 800163e:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001640:	2204      	movs	r2, #4
 8001642:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001644:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001646:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001648:	3a03      	subs	r2, #3
 800164a:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 2;
 800164c:	2102      	movs	r1, #2
 800164e:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001650:	311e      	adds	r1, #30
 8001652:	5443      	strb	r3, [r0, r1]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001654:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001656:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001658:	310c      	adds	r1, #12
 800165a:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800165c:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800165e:	3206      	adds	r2, #6
 8001660:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001662:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001664:	3235      	adds	r2, #53	@ 0x35
 8001666:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001668:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	f000 ffb7 	bl	80025dc <HAL_ADC_Init>
 800166e:	2800      	cmp	r0, #0
 8001670:	d000      	beq.n	8001674 <main+0x15c>
 8001672:	e0ad      	b.n	80017d0 <main+0x2b8>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001674:	a908      	add	r1, sp, #32
 8001676:	4b67      	ldr	r3, [pc, #412]	@ (8001814 <main+0x2fc>)
 8001678:	9308      	str	r3, [sp, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800167a:	23c0      	movs	r3, #192	@ 0xc0
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	604b      	str	r3, [r1, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8001680:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <main+0x300>)
 8001682:	608b      	str	r3, [r1, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	730b      	strb	r3, [r1, #12]
  AnalogWDGConfig.HighThreshold = 2800;
 8001688:	23af      	movs	r3, #175	@ 0xaf
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	610b      	str	r3, [r1, #16]
  AnalogWDGConfig.LowThreshold = 2000;
 800168e:	23fa      	movs	r3, #250	@ 0xfa
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	614b      	str	r3, [r1, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001694:	485d      	ldr	r0, [pc, #372]	@ (800180c <main+0x2f4>)
 8001696:	f001 fc0d 	bl	8002eb4 <HAL_ADC_AnalogWDGConfig>
 800169a:	2800      	cmp	r0, #0
 800169c:	d000      	beq.n	80016a0 <main+0x188>
 800169e:	e099      	b.n	80017d4 <main+0x2bc>
  sConfig.Channel = ADC_CHANNEL_3;
 80016a0:	4b5e      	ldr	r3, [pc, #376]	@ (800181c <main+0x304>)
 80016a2:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80016a8:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	4858      	ldr	r0, [pc, #352]	@ (800180c <main+0x2f4>)
 80016ac:	a905      	add	r1, sp, #20
 80016ae:	f001 f9b1 	bl	8002a14 <HAL_ADC_ConfigChannel>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d000      	beq.n	80016b8 <main+0x1a0>
 80016b6:	e08f      	b.n	80017d8 <main+0x2c0>
  sConfig.Channel = ADC_CHANNEL_5;
 80016b8:	4b57      	ldr	r3, [pc, #348]	@ (8001818 <main+0x300>)
 80016ba:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016bc:	2304      	movs	r3, #4
 80016be:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80016c0:	4b57      	ldr	r3, [pc, #348]	@ (8001820 <main+0x308>)
 80016c2:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	4851      	ldr	r0, [pc, #324]	@ (800180c <main+0x2f4>)
 80016c6:	a905      	add	r1, sp, #20
 80016c8:	f001 f9a4 	bl	8002a14 <HAL_ADC_ConfigChannel>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d000      	beq.n	80016d2 <main+0x1ba>
 80016d0:	e084      	b.n	80017dc <main+0x2c4>
  hrtc.Instance = RTC;
 80016d2:	4854      	ldr	r0, [pc, #336]	@ (8001824 <main+0x30c>)
 80016d4:	4b54      	ldr	r3, [pc, #336]	@ (8001828 <main+0x310>)
 80016d6:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016d8:	2300      	movs	r3, #0
 80016da:	6083      	str	r3, [r0, #8]
  hrtc.Init.AsynchPrediv = 127;
 80016dc:	227f      	movs	r2, #127	@ 0x7f
 80016de:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 80016e0:	3280      	adds	r2, #128	@ 0x80
 80016e2:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016e4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016e8:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	05d2      	lsls	r2, r2, #23
 80016ee:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016f0:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016f2:	f003 f975 	bl	80049e0 <HAL_RTC_Init>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d172      	bne.n	80017e0 <main+0x2c8>
  htim16.Instance = TIM16;
 80016fa:	484c      	ldr	r0, [pc, #304]	@ (800182c <main+0x314>)
 80016fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001830 <main+0x318>)
 80016fe:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 15999;
 8001700:	4b4c      	ldr	r3, [pc, #304]	@ (8001834 <main+0x31c>)
 8001702:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	2300      	movs	r3, #0
 8001706:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 0xFFFF;
 8001708:	4a4b      	ldr	r2, [pc, #300]	@ (8001838 <main+0x320>)
 800170a:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 800170e:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001712:	f003 fc4b 	bl	8004fac <HAL_TIM_Base_Init>
 8001716:	2800      	cmp	r0, #0
 8001718:	d164      	bne.n	80017e4 <main+0x2cc>
  htim14.Instance = TIM14;
 800171a:	4848      	ldr	r0, [pc, #288]	@ (800183c <main+0x324>)
 800171c:	4b48      	ldr	r3, [pc, #288]	@ (8001840 <main+0x328>)
 800171e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 15999;
 8001720:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <main+0x31c>)
 8001722:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	2300      	movs	r3, #0
 8001726:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 0xFFFF;
 8001728:	4a43      	ldr	r2, [pc, #268]	@ (8001838 <main+0x320>)
 800172a:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001730:	f003 fc3c 	bl	8004fac <HAL_TIM_Base_Init>
 8001734:	2800      	cmp	r0, #0
 8001736:	d157      	bne.n	80017e8 <main+0x2d0>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001738:	2210      	movs	r2, #16
 800173a:	2100      	movs	r1, #0
 800173c:	a808      	add	r0, sp, #32
 800173e:	f003 fdc3 	bl	80052c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	220c      	movs	r2, #12
 8001744:	2100      	movs	r1, #0
 8001746:	a805      	add	r0, sp, #20
 8001748:	f003 fdbe 	bl	80052c8 <memset>
  htim3.Instance = TIM3;
 800174c:	483d      	ldr	r0, [pc, #244]	@ (8001844 <main+0x32c>)
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <main+0x330>)
 8001750:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 15999;
 8001752:	4b38      	ldr	r3, [pc, #224]	@ (8001834 <main+0x31c>)
 8001754:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	2300      	movs	r3, #0
 8001758:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 59;
 800175a:	223b      	movs	r2, #59	@ 0x3b
 800175c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001762:	f003 fc23 	bl	8004fac <HAL_TIM_Base_Init>
 8001766:	2800      	cmp	r0, #0
 8001768:	d140      	bne.n	80017ec <main+0x2d4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	2380      	movs	r3, #128	@ 0x80
 800176c:	015b      	lsls	r3, r3, #5
 800176e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001770:	4834      	ldr	r0, [pc, #208]	@ (8001844 <main+0x32c>)
 8001772:	a908      	add	r1, sp, #32
 8001774:	f003 fc56 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8001778:	2800      	cmp	r0, #0
 800177a:	d139      	bne.n	80017f0 <main+0x2d8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001782:	4830      	ldr	r0, [pc, #192]	@ (8001844 <main+0x32c>)
 8001784:	a905      	add	r1, sp, #20
 8001786:	f003 fd0b 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	2800      	cmp	r0, #0
 800178c:	d132      	bne.n	80017f4 <main+0x2dc>
  ssd1306_Init();
 800178e:	f000 fc91 	bl	80020b4 <ssd1306_Init>
    ssd1306_FlipScreenVertically();
 8001792:	f000 fc7d 	bl	8002090 <ssd1306_FlipScreenVertically>
    ssd1306_Clear();
 8001796:	f000 fc83 	bl	80020a0 <ssd1306_Clear>
    ssd1306_SetColor(White);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fb88 	bl	8001eb0 <ssd1306_SetColor>
HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);
 80017a0:	4c2a      	ldr	r4, [pc, #168]	@ (800184c <main+0x334>)
 80017a2:	481a      	ldr	r0, [pc, #104]	@ (800180c <main+0x2f4>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	0021      	movs	r1, r4
 80017a8:	f001 fade 	bl	8002d68 <HAL_ADC_Start_DMA>
dead_zone = adc[1];
 80017ac:	8862      	ldrh	r2, [r4, #2]
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <main+0x338>)
 80017b0:	801a      	strh	r2, [r3, #0]
direct_zone = 250;
 80017b2:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <main+0x33c>)
 80017b4:	22fa      	movs	r2, #250	@ 0xfa
 80017b6:	801a      	strh	r2, [r3, #0]
	  if(sw1 && sw3){
 80017b8:	4c27      	ldr	r4, [pc, #156]	@ (8001858 <main+0x340>)
else if(sw3 && tim3){
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <main+0x344>)
 80017bc:	469a      	mov	sl, r3
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <main+0x348>)
 80017c0:	4698      	mov	r8, r3
 80017c2:	e2c7      	b.n	8001d54 <main+0x83c>
 80017c4:	b672      	cpsid	i
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <main+0x2ae>
 80017c8:	b672      	cpsid	i
 80017ca:	e7fe      	b.n	80017ca <main+0x2b2>
 80017cc:	b672      	cpsid	i
 80017ce:	e7fe      	b.n	80017ce <main+0x2b6>
 80017d0:	b672      	cpsid	i
 80017d2:	e7fe      	b.n	80017d2 <main+0x2ba>
 80017d4:	b672      	cpsid	i
 80017d6:	e7fe      	b.n	80017d6 <main+0x2be>
 80017d8:	b672      	cpsid	i
 80017da:	e7fe      	b.n	80017da <main+0x2c2>
 80017dc:	b672      	cpsid	i
 80017de:	e7fe      	b.n	80017de <main+0x2c6>
 80017e0:	b672      	cpsid	i
 80017e2:	e7fe      	b.n	80017e2 <main+0x2ca>
 80017e4:	b672      	cpsid	i
 80017e6:	e7fe      	b.n	80017e6 <main+0x2ce>
 80017e8:	b672      	cpsid	i
 80017ea:	e7fe      	b.n	80017ea <main+0x2d2>
 80017ec:	b672      	cpsid	i
 80017ee:	e7fe      	b.n	80017ee <main+0x2d6>
 80017f0:	b672      	cpsid	i
 80017f2:	e7fe      	b.n	80017f2 <main+0x2da>
 80017f4:	b672      	cpsid	i
 80017f6:	e7fe      	b.n	80017f6 <main+0x2de>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	50000400 	.word	0x50000400
 8001800:	200001e8 	.word	0x200001e8
 8001804:	40005400 	.word	0x40005400
 8001808:	00200105 	.word	0x00200105
 800180c:	20000298 	.word	0x20000298
 8001810:	40012400 	.word	0x40012400
 8001814:	7cc00000 	.word	0x7cc00000
 8001818:	14000020 	.word	0x14000020
 800181c:	0c000008 	.word	0x0c000008
 8001820:	07ffff04 	.word	0x07ffff04
 8001824:	200001bc 	.word	0x200001bc
 8001828:	40002800 	.word	0x40002800
 800182c:	200000d8 	.word	0x200000d8
 8001830:	40014400 	.word	0x40014400
 8001834:	00003e7f 	.word	0x00003e7f
 8001838:	0000ffff 	.word	0x0000ffff
 800183c:	20000124 	.word	0x20000124
 8001840:	40002000 	.word	0x40002000
 8001844:	20000170 	.word	0x20000170
 8001848:	40000400 	.word	0x40000400
 800184c:	200000a8 	.word	0x200000a8
 8001850:	2000009a 	.word	0x2000009a
 8001854:	20000098 	.word	0x20000098
 8001858:	200000a0 	.word	0x200000a0
 800185c:	2000009e 	.word	0x2000009e
 8001860:	20000014 	.word	0x20000014
		  HAL_TIM_Base_Start(&htim16);
 8001864:	48e0      	ldr	r0, [pc, #896]	@ (8001be8 <main+0x6d0>)
 8001866:	f003 f9e7 	bl	8004c38 <HAL_TIM_Base_Start>
		  if(TIM16->CNT >= 1500){
 800186a:	4be0      	ldr	r3, [pc, #896]	@ (8001bec <main+0x6d4>)
 800186c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800186e:	4be0      	ldr	r3, [pc, #896]	@ (8001bf0 <main+0x6d8>)
 8001870:	429a      	cmp	r2, r3
 8001872:	d800      	bhi.n	8001876 <main+0x35e>
 8001874:	e27c      	b.n	8001d70 <main+0x858>
			  config = 1;
 8001876:	4bdf      	ldr	r3, [pc, #892]	@ (8001bf4 <main+0x6dc>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
			  sw1 = 0;
 800187c:	4bde      	ldr	r3, [pc, #888]	@ (8001bf8 <main+0x6e0>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
			  sw3 = 0;
 8001882:	4bde      	ldr	r3, [pc, #888]	@ (8001bfc <main+0x6e4>)
 8001884:	701a      	strb	r2, [r3, #0]
else if(sw3 && tim3){
 8001886:	4653      	mov	r3, sl
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <main+0x37e>
 800188e:	4643      	mov	r3, r8
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d166      	bne.n	8001964 <main+0x44c>
if(con >= 3)
 8001896:	4bda      	ldr	r3, [pc, #872]	@ (8001c00 <main+0x6e8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b25b      	sxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	dd74      	ble.n	800198a <main+0x472>
	con = 0;
 80018a0:	4bd7      	ldr	r3, [pc, #860]	@ (8001c00 <main+0x6e8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(0, 0);
 80018a6:	2100      	movs	r1, #0
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 fbeb 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Set time");
 80018ae:	4fd5      	ldr	r7, [pc, #852]	@ (8001c04 <main+0x6ec>)
 80018b0:	4bd5      	ldr	r3, [pc, #852]	@ (8001c08 <main+0x6f0>)
 80018b2:	0038      	movs	r0, r7
 80018b4:	cb06      	ldmia	r3!, {r1, r2}
 80018b6:	c006      	stmia	r0!, {r1, r2}
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	7003      	strb	r3, [r0, #0]
		ssd1306_WriteString(buf, Font_11x18);
 80018bc:	4ed3      	ldr	r6, [pc, #844]	@ (8001c0c <main+0x6f4>)
 80018be:	6831      	ldr	r1, [r6, #0]
 80018c0:	6872      	ldr	r2, [r6, #4]
 80018c2:	0038      	movs	r0, r7
 80018c4:	f000 fbc8 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 19);
 80018c8:	2113      	movs	r1, #19
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 fbda 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Calibration");
 80018d0:	4bcf      	ldr	r3, [pc, #828]	@ (8001c10 <main+0x6f8>)
 80018d2:	003a      	movs	r2, r7
 80018d4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80018d6:	c223      	stmia	r2!, {r0, r1, r5}
		ssd1306_WriteString(buf, Font_11x18);
 80018d8:	6831      	ldr	r1, [r6, #0]
 80018da:	6872      	ldr	r2, [r6, #4]
 80018dc:	0038      	movs	r0, r7
 80018de:	f000 fbbb 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 38);
 80018e2:	2126      	movs	r1, #38	@ 0x26
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 fbcd 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Set size");
 80018ea:	4bca      	ldr	r3, [pc, #808]	@ (8001c14 <main+0x6fc>)
 80018ec:	003a      	movs	r2, r7
 80018ee:	cb03      	ldmia	r3!, {r0, r1}
 80018f0:	c203      	stmia	r2!, {r0, r1}
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	7013      	strb	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_11x18);
 80018f6:	6831      	ldr	r1, [r6, #0]
 80018f8:	6872      	ldr	r2, [r6, #4]
 80018fa:	0038      	movs	r0, r7
 80018fc:	f000 fbac 	bl	8002058 <ssd1306_WriteString>
		if(sw2 && tim3){
 8001900:	4bc5      	ldr	r3, [pc, #788]	@ (8001c18 <main+0x700>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d100      	bne.n	800190a <main+0x3f2>
 8001908:	e220      	b.n	8001d4c <main+0x834>
 800190a:	4bc4      	ldr	r3, [pc, #784]	@ (8001c1c <main+0x704>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d100      	bne.n	8001914 <main+0x3fc>
 8001912:	e21b      	b.n	8001d4c <main+0x834>
			config = 2;
 8001914:	4bb7      	ldr	r3, [pc, #732]	@ (8001bf4 <main+0x6dc>)
 8001916:	2202      	movs	r2, #2
 8001918:	701a      	strb	r2, [r3, #0]
			tim3 = 0;
 800191a:	4bc0      	ldr	r3, [pc, #768]	@ (8001c1c <main+0x704>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
			TIM3->CNT = 0;
 8001920:	4bbf      	ldr	r3, [pc, #764]	@ (8001c20 <main+0x708>)
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM3->SR &= ~TIM_SR_UIF;
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	611a      	str	r2, [r3, #16]
			TIM3->ARR = DELAY;
 800192c:	22c8      	movs	r2, #200	@ 0xc8
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_TIM_Base_Start_IT(&htim3);
 8001930:	48bc      	ldr	r0, [pc, #752]	@ (8001c24 <main+0x70c>)
 8001932:	f003 f9c5 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001936:	e209      	b.n	8001d4c <main+0x834>
WriteTime();
 8001938:	f7ff fb3c 	bl	8000fb4 <WriteTime>
WriteBatteryCharge(BatteryCharge());
 800193c:	f7ff fbbc 	bl	80010b8 <BatteryCharge>
 8001940:	f7ff fbfe 	bl	8001140 <WriteBatteryCharge>
DetectImpuls();
 8001944:	f7ff fd22 	bl	800138c <DetectImpuls>
CalculateSpeed();
 8001948:	f7ff fd7c 	bl	8001444 <CalculateSpeed>
	 break;
 800194c:	e1fe      	b.n	8001d4c <main+0x834>
if(sw1 && sw3)
 800194e:	4baa      	ldr	r3, [pc, #680]	@ (8001bf8 <main+0x6e0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d097      	beq.n	8001886 <main+0x36e>
 8001956:	4ba9      	ldr	r3, [pc, #676]	@ (8001bfc <main+0x6e4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d100      	bne.n	8001960 <main+0x448>
 800195e:	e224      	b.n	8001daa <main+0x892>
	__NOP();
 8001960:	46c0      	nop			@ (mov r8, r8)
 8001962:	e798      	b.n	8001896 <main+0x37e>
	con++;
 8001964:	4aa6      	ldr	r2, [pc, #664]	@ (8001c00 <main+0x6e8>)
 8001966:	7813      	ldrb	r3, [r2, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	7013      	strb	r3, [r2, #0]
	tim3 = 0;
 800196c:	4bab      	ldr	r3, [pc, #684]	@ (8001c1c <main+0x704>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	TIM3->CNT = 0;
 8001972:	4bab      	ldr	r3, [pc, #684]	@ (8001c20 <main+0x708>)
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->SR &= ~TIM_SR_UIF;
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	2101      	movs	r1, #1
 800197a:	438a      	bics	r2, r1
 800197c:	611a      	str	r2, [r3, #16]
	TIM3->ARR = DELAY;
 800197e:	22c8      	movs	r2, #200	@ 0xc8
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 8001982:	48a8      	ldr	r0, [pc, #672]	@ (8001c24 <main+0x70c>)
 8001984:	f003 f99c 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001988:	e785      	b.n	8001896 <main+0x37e>
else if(con < 0)
 800198a:	2b00      	cmp	r3, #0
 800198c:	db07      	blt.n	800199e <main+0x486>
switch (con) {
 800198e:	2b01      	cmp	r3, #1
 8001990:	d051      	beq.n	8001a36 <main+0x51e>
 8001992:	2b02      	cmp	r3, #2
 8001994:	d006      	beq.n	80019a4 <main+0x48c>
 8001996:	2b00      	cmp	r3, #0
 8001998:	d000      	beq.n	800199c <main+0x484>
 800199a:	e1d7      	b.n	8001d4c <main+0x834>
 800199c:	e783      	b.n	80018a6 <main+0x38e>
	con = 2;
 800199e:	4b98      	ldr	r3, [pc, #608]	@ (8001c00 <main+0x6e8>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	701a      	strb	r2, [r3, #0]
		ssd1306_SetCursor(0, 0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 fb6c 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Calibration");
 80019ac:	4f95      	ldr	r7, [pc, #596]	@ (8001c04 <main+0x6ec>)
 80019ae:	4b98      	ldr	r3, [pc, #608]	@ (8001c10 <main+0x6f8>)
 80019b0:	003a      	movs	r2, r7
 80019b2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80019b4:	c243      	stmia	r2!, {r0, r1, r6}
		ssd1306_WriteString(buf, Font_11x18);
 80019b6:	4e95      	ldr	r6, [pc, #596]	@ (8001c0c <main+0x6f4>)
 80019b8:	6831      	ldr	r1, [r6, #0]
 80019ba:	6872      	ldr	r2, [r6, #4]
 80019bc:	0038      	movs	r0, r7
 80019be:	f000 fb4b 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 19);
 80019c2:	2113      	movs	r1, #19
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 fb5d 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Set size");
 80019ca:	4b92      	ldr	r3, [pc, #584]	@ (8001c14 <main+0x6fc>)
 80019cc:	0038      	movs	r0, r7
 80019ce:	cb06      	ldmia	r3!, {r1, r2}
 80019d0:	c006      	stmia	r0!, {r1, r2}
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	7003      	strb	r3, [r0, #0]
		ssd1306_WriteString(buf, Font_11x18);
 80019d6:	6831      	ldr	r1, [r6, #0]
 80019d8:	6872      	ldr	r2, [r6, #4]
 80019da:	0038      	movs	r0, r7
 80019dc:	f000 fb3c 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 38);
 80019e0:	2126      	movs	r1, #38	@ 0x26
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 fb4e 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Set time");
 80019e8:	4b87      	ldr	r3, [pc, #540]	@ (8001c08 <main+0x6f0>)
 80019ea:	003a      	movs	r2, r7
 80019ec:	cb03      	ldmia	r3!, {r0, r1}
 80019ee:	c203      	stmia	r2!, {r0, r1}
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	7013      	strb	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_11x18);
 80019f4:	6831      	ldr	r1, [r6, #0]
 80019f6:	6872      	ldr	r2, [r6, #4]
 80019f8:	0038      	movs	r0, r7
 80019fa:	f000 fb2d 	bl	8002058 <ssd1306_WriteString>
		if(sw2 && tim3){
 80019fe:	4b86      	ldr	r3, [pc, #536]	@ (8001c18 <main+0x700>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d100      	bne.n	8001a08 <main+0x4f0>
 8001a06:	e1a1      	b.n	8001d4c <main+0x834>
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <main+0x704>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d100      	bne.n	8001a12 <main+0x4fa>
 8001a10:	e19c      	b.n	8001d4c <main+0x834>
			config = 4;
 8001a12:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <main+0x6dc>)
 8001a14:	2204      	movs	r2, #4
 8001a16:	701a      	strb	r2, [r3, #0]
			tim3 = 0;
 8001a18:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <main+0x704>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
			TIM3->CNT = 0;
 8001a1e:	4b80      	ldr	r3, [pc, #512]	@ (8001c20 <main+0x708>)
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM3->SR &= ~TIM_SR_UIF;
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	2101      	movs	r1, #1
 8001a26:	438a      	bics	r2, r1
 8001a28:	611a      	str	r2, [r3, #16]
			TIM3->ARR = DELAY;
 8001a2a:	22c8      	movs	r2, #200	@ 0xc8
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_TIM_Base_Start_IT(&htim3);
 8001a2e:	487d      	ldr	r0, [pc, #500]	@ (8001c24 <main+0x70c>)
 8001a30:	f003 f946 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001a34:	e18a      	b.n	8001d4c <main+0x834>
		ssd1306_SetCursor(0, 0);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 fb23 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Set size");
 8001a3e:	4f71      	ldr	r7, [pc, #452]	@ (8001c04 <main+0x6ec>)
 8001a40:	4b74      	ldr	r3, [pc, #464]	@ (8001c14 <main+0x6fc>)
 8001a42:	0038      	movs	r0, r7
 8001a44:	cb06      	ldmia	r3!, {r1, r2}
 8001a46:	c006      	stmia	r0!, {r1, r2}
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	7003      	strb	r3, [r0, #0]
		ssd1306_WriteString(buf, Font_11x18);
 8001a4c:	4e6f      	ldr	r6, [pc, #444]	@ (8001c0c <main+0x6f4>)
 8001a4e:	6831      	ldr	r1, [r6, #0]
 8001a50:	6872      	ldr	r2, [r6, #4]
 8001a52:	0038      	movs	r0, r7
 8001a54:	f000 fb00 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 19);
 8001a58:	2113      	movs	r1, #19
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 fb12 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Set time");
 8001a60:	4b69      	ldr	r3, [pc, #420]	@ (8001c08 <main+0x6f0>)
 8001a62:	003a      	movs	r2, r7
 8001a64:	cb03      	ldmia	r3!, {r0, r1}
 8001a66:	c203      	stmia	r2!, {r0, r1}
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	7013      	strb	r3, [r2, #0]
		ssd1306_WriteString(buf, Font_11x18);
 8001a6c:	6831      	ldr	r1, [r6, #0]
 8001a6e:	6872      	ldr	r2, [r6, #4]
 8001a70:	0038      	movs	r0, r7
 8001a72:	f000 faf1 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 38);
 8001a76:	2126      	movs	r1, #38	@ 0x26
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 fb03 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Calibration");
 8001a7e:	4b64      	ldr	r3, [pc, #400]	@ (8001c10 <main+0x6f8>)
 8001a80:	003a      	movs	r2, r7
 8001a82:	cb23      	ldmia	r3!, {r0, r1, r5}
 8001a84:	c223      	stmia	r2!, {r0, r1, r5}
		ssd1306_WriteString(buf, Font_11x18);
 8001a86:	6831      	ldr	r1, [r6, #0]
 8001a88:	6872      	ldr	r2, [r6, #4]
 8001a8a:	0038      	movs	r0, r7
 8001a8c:	f000 fae4 	bl	8002058 <ssd1306_WriteString>
		if(sw2 && tim3){
 8001a90:	4b61      	ldr	r3, [pc, #388]	@ (8001c18 <main+0x700>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d100      	bne.n	8001a9a <main+0x582>
 8001a98:	e158      	b.n	8001d4c <main+0x834>
 8001a9a:	4b60      	ldr	r3, [pc, #384]	@ (8001c1c <main+0x704>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d100      	bne.n	8001aa4 <main+0x58c>
 8001aa2:	e153      	b.n	8001d4c <main+0x834>
			config = 3;
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <main+0x6dc>)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	701a      	strb	r2, [r3, #0]
			size = 0;
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <main+0x710>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
			tim3 = 0;
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c1c <main+0x704>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	7019      	strb	r1, [r3, #0]
			TIM3->CNT = 0;
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c20 <main+0x708>)
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM3->SR &= ~TIM_SR_UIF;
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	2101      	movs	r1, #1
 8001abe:	438a      	bics	r2, r1
 8001ac0:	611a      	str	r2, [r3, #16]
			TIM3->ARR = DELAY;
 8001ac2:	22c8      	movs	r2, #200	@ 0xc8
 8001ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_TIM_Base_Start_IT(&htim3);
 8001ac6:	4857      	ldr	r0, [pc, #348]	@ (8001c24 <main+0x70c>)
 8001ac8:	f003 f8fa 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001acc:	e13e      	b.n	8001d4c <main+0x834>
		ConfigTime();
 8001ace:	f7ff fb55 	bl	800117c <ConfigTime>
		break;
 8001ad2:	e13b      	b.n	8001d4c <main+0x834>
uint8_t table_of_size[6] = {20, 24, 26, 27, 28, 29};
 8001ad4:	4b55      	ldr	r3, [pc, #340]	@ (8001c2c <main+0x714>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	9208      	str	r2, [sp, #32]
 8001ada:	889a      	ldrh	r2, [r3, #4]
 8001adc:	ab08      	add	r3, sp, #32
 8001ade:	809a      	strh	r2, [r3, #4]
		if(sw2 && tim3){
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c18 <main+0x700>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d035      	beq.n	8001b54 <main+0x63c>
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c1c <main+0x704>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d100      	bne.n	8001af2 <main+0x5da>
 8001af0:	e173      	b.n	8001dda <main+0x8c2>
			config = 0;
 8001af2:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <main+0x6dc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
			switch(sizes){
 8001af8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c30 <main+0x718>)
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	2a05      	cmp	r2, #5
 8001afe:	d806      	bhi.n	8001b0e <main+0x5f6>
 8001b00:	0093      	lsls	r3, r2, #2
 8001b02:	4a4c      	ldr	r2, [pc, #304]	@ (8001c34 <main+0x71c>)
 8001b04:	58d3      	ldr	r3, [r2, r3]
 8001b06:	469f      	mov	pc, r3
		size = INCH20_WHEEL;
 8001b08:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <main+0x710>)
 8001b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c38 <main+0x720>)
 8001b0c:	801a      	strh	r2, [r3, #0]
			tim3 = 0;
 8001b0e:	4b43      	ldr	r3, [pc, #268]	@ (8001c1c <main+0x704>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
			TIM3->CNT = 0;
 8001b14:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <main+0x708>)
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM3->SR &= ~TIM_SR_UIF;
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	611a      	str	r2, [r3, #16]
			TIM3->ARR = DELAY;
 8001b20:	22c8      	movs	r2, #200	@ 0xc8
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_TIM_Base_Start_IT(&htim3);
 8001b24:	483f      	ldr	r0, [pc, #252]	@ (8001c24 <main+0x70c>)
 8001b26:	f003 f8cb 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
			break;
 8001b2a:	e10f      	b.n	8001d4c <main+0x834>
		size = INCH24_WHEEL;
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c28 <main+0x710>)
 8001b2e:	4a43      	ldr	r2, [pc, #268]	@ (8001c3c <main+0x724>)
 8001b30:	801a      	strh	r2, [r3, #0]
				break;
 8001b32:	e7ec      	b.n	8001b0e <main+0x5f6>
		size = INCH26_WHEEL;
 8001b34:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <main+0x710>)
 8001b36:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <main+0x728>)
 8001b38:	801a      	strh	r2, [r3, #0]
				break;
 8001b3a:	e7e8      	b.n	8001b0e <main+0x5f6>
		size = INCH27_WHEEL;
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <main+0x710>)
 8001b3e:	4a41      	ldr	r2, [pc, #260]	@ (8001c44 <main+0x72c>)
 8001b40:	801a      	strh	r2, [r3, #0]
				break;
 8001b42:	e7e4      	b.n	8001b0e <main+0x5f6>
		size = INCH28_WHEEL;
 8001b44:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <main+0x710>)
 8001b46:	4a40      	ldr	r2, [pc, #256]	@ (8001c48 <main+0x730>)
 8001b48:	801a      	strh	r2, [r3, #0]
				break;
 8001b4a:	e7e0      	b.n	8001b0e <main+0x5f6>
		size = INCH29_WHEEL;
 8001b4c:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <main+0x710>)
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c4c <main+0x734>)
 8001b50:	801a      	strh	r2, [r3, #0]
				break;
 8001b52:	e7dc      	b.n	8001b0e <main+0x5f6>
		else if(sw3 && tim3){
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <main+0x6e4>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d100      	bne.n	8001b5e <main+0x646>
 8001b5c:	e142      	b.n	8001de4 <main+0x8cc>
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <main+0x704>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01a      	beq.n	8001b9c <main+0x684>
			sizes++;
 8001b66:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <main+0x718>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b25b      	sxtb	r3, r3
			if(sizes > 5)
 8001b6e:	2105      	movs	r1, #5
 8001b70:	0fda      	lsrs	r2, r3, #31
 8001b72:	17c8      	asrs	r0, r1, #31
 8001b74:	4299      	cmp	r1, r3
 8001b76:	4142      	adcs	r2, r0
 8001b78:	4252      	negs	r2, r2
 8001b7a:	4013      	ands	r3, r2
			sizes++;
 8001b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001c30 <main+0x718>)
 8001b7e:	7013      	strb	r3, [r2, #0]
			tim3 = 0;
 8001b80:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <main+0x704>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
			TIM3->CNT = 0;
 8001b86:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <main+0x708>)
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM3->SR &= ~TIM_SR_UIF;
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	3904      	subs	r1, #4
 8001b8e:	438a      	bics	r2, r1
 8001b90:	611a      	str	r2, [r3, #16]
			TIM3->ARR = DELAY;
 8001b92:	22c8      	movs	r2, #200	@ 0xc8
 8001b94:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_TIM_Base_Start_IT(&htim3);
 8001b96:	4823      	ldr	r0, [pc, #140]	@ (8001c24 <main+0x70c>)
 8001b98:	f003 f892 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
		ssd1306_SetCursor(33, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2021      	movs	r0, #33	@ 0x21
 8001ba0:	f000 fa70 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Wheel");
 8001ba4:	4f17      	ldr	r7, [pc, #92]	@ (8001c04 <main+0x6ec>)
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c50 <main+0x738>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	603a      	str	r2, [r7, #0]
 8001bac:	889b      	ldrh	r3, [r3, #4]
 8001bae:	80bb      	strh	r3, [r7, #4]
		ssd1306_WriteString(buf, Font_11x18);
 8001bb0:	4e16      	ldr	r6, [pc, #88]	@ (8001c0c <main+0x6f4>)
 8001bb2:	6831      	ldr	r1, [r6, #0]
 8001bb4:	6872      	ldr	r2, [r6, #4]
 8001bb6:	0038      	movs	r0, r7
 8001bb8:	f000 fa4e 	bl	8002058 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 39);
 8001bbc:	2127      	movs	r1, #39	@ 0x27
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 fa60 	bl	8002084 <ssd1306_SetCursor>
		sprintf(buf, "Size:%dinch", table_of_size[sizes]);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <main+0x718>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	aa08      	add	r2, sp, #32
 8001bcc:	5cd2      	ldrb	r2, [r2, r3]
 8001bce:	4921      	ldr	r1, [pc, #132]	@ (8001c54 <main+0x73c>)
 8001bd0:	0038      	movs	r0, r7
 8001bd2:	f003 fb57 	bl	8005284 <siprintf>
		ssd1306_WriteString(buf, Font_11x18);
 8001bd6:	6831      	ldr	r1, [r6, #0]
 8001bd8:	6872      	ldr	r2, [r6, #4]
 8001bda:	0038      	movs	r0, r7
 8001bdc:	f000 fa3c 	bl	8002058 <ssd1306_WriteString>
		break;
 8001be0:	e0b4      	b.n	8001d4c <main+0x834>
 8001be2:	2205      	movs	r2, #5
 8001be4:	e10f      	b.n	8001e06 <main+0x8ee>
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	200000d8 	.word	0x200000d8
 8001bec:	40014400 	.word	0x40014400
 8001bf0:	000005db 	.word	0x000005db
 8001bf4:	2000009d 	.word	0x2000009d
 8001bf8:	200000a0 	.word	0x200000a0
 8001bfc:	2000009e 	.word	0x2000009e
 8001c00:	20000097 	.word	0x20000097
 8001c04:	200000ac 	.word	0x200000ac
 8001c08:	08007110 	.word	0x08007110
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	0800711c 	.word	0x0800711c
 8001c14:	08007128 	.word	0x08007128
 8001c18:	2000009f 	.word	0x2000009f
 8001c1c:	20000014 	.word	0x20000014
 8001c20:	40000400 	.word	0x40000400
 8001c24:	20000170 	.word	0x20000170
 8001c28:	20000012 	.word	0x20000012
 8001c2c:	0800717c 	.word	0x0800717c
 8001c30:	20000096 	.word	0x20000096
 8001c34:	08007184 	.word	0x08007184
 8001c38:	0000063b 	.word	0x0000063b
 8001c3c:	0000077b 	.word	0x0000077b
 8001c40:	0000081a 	.word	0x0000081a
 8001c44:	0000086a 	.word	0x0000086a
 8001c48:	000008ba 	.word	0x000008ba
 8001c4c:	0000090a 	.word	0x0000090a
 8001c50:	08007134 	.word	0x08007134
 8001c54:	0800713c 	.word	0x0800713c
		if(zones){
 8001c58:	4b73      	ldr	r3, [pc, #460]	@ (8001e28 <main+0x910>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d039      	beq.n	8001cd4 <main+0x7bc>
			ssd1306_SetCursor(17, 0);
 8001c60:	2100      	movs	r1, #0
 8001c62:	2011      	movs	r0, #17
 8001c64:	f000 fa0e 	bl	8002084 <ssd1306_SetCursor>
			sprintf(buf, "Set direct zone");
 8001c68:	4870      	ldr	r0, [pc, #448]	@ (8001e2c <main+0x914>)
 8001c6a:	4b71      	ldr	r3, [pc, #452]	@ (8001e30 <main+0x918>)
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	cbc2      	ldmia	r3!, {r1, r6, r7}
 8001c70:	c2c2      	stmia	r2!, {r1, r6, r7}
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6013      	str	r3, [r2, #0]
			ssd1306_WriteString(buf, Font_7x10);
 8001c76:	4b6f      	ldr	r3, [pc, #444]	@ (8001e34 <main+0x91c>)
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	f000 f9ec 	bl	8002058 <ssd1306_WriteString>
			if(sw2 && tim3){
 8001c80:	4b6d      	ldr	r3, [pc, #436]	@ (8001e38 <main+0x920>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d03d      	beq.n	8001d04 <main+0x7ec>
 8001c88:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <main+0x924>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d039      	beq.n	8001d04 <main+0x7ec>
				direct_zone = adc[1];
 8001c90:	4b6b      	ldr	r3, [pc, #428]	@ (8001e40 <main+0x928>)
 8001c92:	885a      	ldrh	r2, [r3, #2]
 8001c94:	b292      	uxth	r2, r2
				zones = 0;
 8001c96:	4b64      	ldr	r3, [pc, #400]	@ (8001e28 <main+0x910>)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	7019      	strb	r1, [r3, #0]
				config = 0;
 8001c9c:	4b69      	ldr	r3, [pc, #420]	@ (8001e44 <main+0x92c>)
 8001c9e:	7019      	strb	r1, [r3, #0]
				direct_zone = (direct_zone > dead_zone)?(direct_zone - dead_zone) : (dead_zone - direct_zone);
 8001ca0:	4b69      	ldr	r3, [pc, #420]	@ (8001e48 <main+0x930>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d912      	bls.n	8001cce <main+0x7b6>
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4a67      	ldr	r2, [pc, #412]	@ (8001e4c <main+0x934>)
 8001cae:	8013      	strh	r3, [r2, #0]
				tim3 = 0;
 8001cb0:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <main+0x924>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
				TIM3->CNT = 0;
 8001cb6:	4b66      	ldr	r3, [pc, #408]	@ (8001e50 <main+0x938>)
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
				TIM3->SR &= ~TIM_SR_UIF;
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
				TIM3->ARR = DELAY;
 8001cc2:	22c8      	movs	r2, #200	@ 0xc8
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
				HAL_TIM_Base_Start_IT(&htim3);
 8001cc6:	4863      	ldr	r0, [pc, #396]	@ (8001e54 <main+0x93c>)
 8001cc8:	f002 fffa 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001ccc:	e01a      	b.n	8001d04 <main+0x7ec>
				direct_zone = (direct_zone > dead_zone)?(direct_zone - dead_zone) : (dead_zone - direct_zone);
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	e7eb      	b.n	8001cac <main+0x794>
			ssd1306_SetCursor(17, 0);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2011      	movs	r0, #17
 8001cd8:	f000 f9d4 	bl	8002084 <ssd1306_SetCursor>
			sprintf(buf, "Set dead zone");
 8001cdc:	4853      	ldr	r0, [pc, #332]	@ (8001e2c <main+0x914>)
 8001cde:	4b5e      	ldr	r3, [pc, #376]	@ (8001e58 <main+0x940>)
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	cbc2      	ldmia	r3!, {r1, r6, r7}
 8001ce4:	c2c2      	stmia	r2!, {r1, r6, r7}
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	8013      	strh	r3, [r2, #0]
			ssd1306_WriteString(buf, Font_7x10);
 8001cea:	4b52      	ldr	r3, [pc, #328]	@ (8001e34 <main+0x91c>)
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	f000 f9b2 	bl	8002058 <ssd1306_WriteString>
			if(sw2 && tim3){
 8001cf4:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <main+0x920>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <main+0x7ec>
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <main+0x924>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d13d      	bne.n	8001d80 <main+0x868>
			ssd1306_SetCursor(6, 24);
 8001d04:	2118      	movs	r1, #24
 8001d06:	2006      	movs	r0, #6
 8001d08:	f000 f9bc 	bl	8002084 <ssd1306_SetCursor>
			sprintf(buf, "%d", adc[1]);
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e40 <main+0x928>)
 8001d0e:	885a      	ldrh	r2, [r3, #2]
 8001d10:	b292      	uxth	r2, r2
 8001d12:	4952      	ldr	r1, [pc, #328]	@ (8001e5c <main+0x944>)
 8001d14:	4f45      	ldr	r7, [pc, #276]	@ (8001e2c <main+0x914>)
 8001d16:	0038      	movs	r0, r7
 8001d18:	f003 fab4 	bl	8005284 <siprintf>
			ssd1306_WriteString(buf, Font_11x18);
 8001d1c:	4b50      	ldr	r3, [pc, #320]	@ (8001e60 <main+0x948>)
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	0038      	movs	r0, r7
 8001d24:	f000 f998 	bl	8002058 <ssd1306_WriteString>
			ssd1306_SetCursor(6, 48);
 8001d28:	2130      	movs	r1, #48	@ 0x30
 8001d2a:	2006      	movs	r0, #6
 8001d2c:	f000 f9aa 	bl	8002084 <ssd1306_SetCursor>
			sprintf(buf, "Put middle button");
 8001d30:	4b4c      	ldr	r3, [pc, #304]	@ (8001e64 <main+0x94c>)
 8001d32:	003a      	movs	r2, r7
 8001d34:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001d36:	c243      	stmia	r2!, {r0, r1, r6}
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	6011      	str	r1, [r2, #0]
 8001d3c:	889b      	ldrh	r3, [r3, #4]
 8001d3e:	8093      	strh	r3, [r2, #4]
			ssd1306_WriteString(buf, Font_7x10);
 8001d40:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <main+0x91c>)
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	0038      	movs	r0, r7
 8001d48:	f000 f986 	bl	8002058 <ssd1306_WriteString>
	 ssd1306_UpdateScreen();
 8001d4c:	f000 f8b6 	bl	8001ebc <ssd1306_UpdateScreen>
	 ssd1306_Clear();
 8001d50:	f000 f9a6 	bl	80020a0 <ssd1306_Clear>
	  if(sw1 && sw3){
 8001d54:	7823      	ldrb	r3, [r4, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <main+0x84c>
 8001d5a:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <main+0x950>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d000      	beq.n	8001d64 <main+0x84c>
 8001d62:	e57f      	b.n	8001864 <main+0x34c>
		  HAL_TIM_Base_Stop(&htim16);
 8001d64:	4841      	ldr	r0, [pc, #260]	@ (8001e6c <main+0x954>)
 8001d66:	f002 ff95 	bl	8004c94 <HAL_TIM_Base_Stop>
		  TIM16->CNT = 0;
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <main+0x958>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
switch (config){
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <main+0x92c>)
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	2a04      	cmp	r2, #4
 8001d76:	d8e9      	bhi.n	8001d4c <main+0x834>
 8001d78:	0093      	lsls	r3, r2, #2
 8001d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e74 <main+0x95c>)
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	469f      	mov	pc, r3
				dead_zone = adc[1];
 8001d80:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <main+0x928>)
 8001d82:	885a      	ldrh	r2, [r3, #2]
 8001d84:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <main+0x930>)
 8001d86:	801a      	strh	r2, [r3, #0]
				zones = 1;
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <main+0x910>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	7019      	strb	r1, [r3, #0]
				tim3 = 0;
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <main+0x924>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
				TIM3->CNT = 0;
 8001d94:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <main+0x938>)
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24
				TIM3->SR &= ~TIM_SR_UIF;
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	611a      	str	r2, [r3, #16]
				TIM3->ARR = DELAY;
 8001d9e:	22c8      	movs	r2, #200	@ 0xc8
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c
				HAL_TIM_Base_Start_IT(&htim3);
 8001da2:	482c      	ldr	r0, [pc, #176]	@ (8001e54 <main+0x93c>)
 8001da4:	f002 ff8c 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001da8:	e7ac      	b.n	8001d04 <main+0x7ec>
else if(sw1 && tim3){
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <main+0x924>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <main+0x89c>
 8001db2:	e570      	b.n	8001896 <main+0x37e>
	con--;
 8001db4:	4a30      	ldr	r2, [pc, #192]	@ (8001e78 <main+0x960>)
 8001db6:	7813      	ldrb	r3, [r2, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	7013      	strb	r3, [r2, #0]
	tim3 = 0;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <main+0x924>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	TIM3->CNT = 0;
 8001dc2:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <main+0x938>)
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->SR &= ~TIM_SR_UIF;
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	438a      	bics	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
	TIM3->ARR = DELAY;
 8001dce:	22c8      	movs	r2, #200	@ 0xc8
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 8001dd2:	4820      	ldr	r0, [pc, #128]	@ (8001e54 <main+0x93c>)
 8001dd4:	f002 ff74 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001dd8:	e55d      	b.n	8001896 <main+0x37e>
		else if(sw3 && tim3){
 8001dda:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <main+0x950>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d000      	beq.n	8001de4 <main+0x8cc>
 8001de2:	e6db      	b.n	8001b9c <main+0x684>
		else if(sw1 && tim3){
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <main+0x964>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d100      	bne.n	8001dee <main+0x8d6>
 8001dec:	e6d6      	b.n	8001b9c <main+0x684>
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <main+0x924>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <main+0x8e0>
 8001df6:	e6d1      	b.n	8001b9c <main+0x684>
			sizes--;
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <main+0x968>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b25a      	sxtb	r2, r3
			if(sizes < 0)
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	d500      	bpl.n	8001e06 <main+0x8ee>
 8001e04:	e6ed      	b.n	8001be2 <main+0x6ca>
			sizes--;
 8001e06:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <main+0x968>)
 8001e08:	701a      	strb	r2, [r3, #0]
			tim3 = 0;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <main+0x924>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
			TIM3->CNT = 0;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <main+0x938>)
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24
			TIM3->SR &= ~TIM_SR_UIF;
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	2101      	movs	r1, #1
 8001e18:	438a      	bics	r2, r1
 8001e1a:	611a      	str	r2, [r3, #16]
			TIM3->ARR = DELAY;
 8001e1c:	22c8      	movs	r2, #200	@ 0xc8
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_TIM_Base_Start_IT(&htim3);
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <main+0x93c>)
 8001e22:	f002 ff4d 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001e26:	e6b9      	b.n	8001b9c <main+0x684>
 8001e28:	20000095 	.word	0x20000095
 8001e2c:	200000ac 	.word	0x200000ac
 8001e30:	08007148 	.word	0x08007148
 8001e34:	20000008 	.word	0x20000008
 8001e38:	2000009f 	.word	0x2000009f
 8001e3c:	20000014 	.word	0x20000014
 8001e40:	200000a8 	.word	0x200000a8
 8001e44:	2000009d 	.word	0x2000009d
 8001e48:	2000009a 	.word	0x2000009a
 8001e4c:	20000098 	.word	0x20000098
 8001e50:	40000400 	.word	0x40000400
 8001e54:	20000170 	.word	0x20000170
 8001e58:	08007158 	.word	0x08007158
 8001e5c:	080070f8 	.word	0x080070f8
 8001e60:	20000000 	.word	0x20000000
 8001e64:	08007168 	.word	0x08007168
 8001e68:	2000009e 	.word	0x2000009e
 8001e6c:	200000d8 	.word	0x200000d8
 8001e70:	40014400 	.word	0x40014400
 8001e74:	0800719c 	.word	0x0800719c
 8001e78:	20000097 	.word	0x20000097
 8001e7c:	200000a0 	.word	0x200000a0
 8001e80:	20000096 	.word	0x20000096

08001e84 <Error_Handler>:
 8001e84:	b672      	cpsid	i
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <Error_Handler+0x2>

08001e88 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001e88:	b500      	push	{lr}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	2317      	movs	r3, #23
 8001e8e:	446b      	add	r3, sp
 8001e90:	7018      	strb	r0, [r3, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001e92:	4806      	ldr	r0, [pc, #24]	@ (8001eac <ssd1306_WriteCommand+0x24>)
 8001e94:	220a      	movs	r2, #10
 8001e96:	9202      	str	r2, [sp, #8]
 8001e98:	3a09      	subs	r2, #9
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2178      	movs	r1, #120	@ 0x78
 8001ea4:	f001 fe6a 	bl	8003b7c <HAL_I2C_Mem_Write>
#endif
}
 8001ea8:	b007      	add	sp, #28
 8001eaa:	bd00      	pop	{pc}
 8001eac:	200001e8 	.word	0x200001e8

08001eb0 <ssd1306_SetColor>:
	SSD1306.Color = color;
 8001eb0:	4b01      	ldr	r3, [pc, #4]	@ (8001eb8 <ssd1306_SetColor+0x8>)
 8001eb2:	7158      	strb	r0, [r3, #5]
}
 8001eb4:	4770      	bx	lr
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	20000700 	.word	0x20000700

08001ebc <ssd1306_UpdateScreen>:
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	46c6      	mov	lr, r8
 8001ec0:	b500      	push	{lr}
 8001ec2:	b084      	sub	sp, #16
	for (i = 0; i < 8; i++)
 8001ec4:	4d10      	ldr	r5, [pc, #64]	@ (8001f08 <ssd1306_UpdateScreen+0x4c>)
{
 8001ec6:	24b0      	movs	r4, #176	@ 0xb0
{
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8001ec8:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <ssd1306_UpdateScreen+0x50>)
 8001eca:	4698      	mov	r8, r3
 8001ecc:	2764      	movs	r7, #100	@ 0x64
 8001ece:	2680      	movs	r6, #128	@ 0x80
		ssd1306_WriteCommand(0xB0 + i);
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	f7ff ffd9 	bl	8001e88 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff ffd6 	bl	8001e88 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001edc:	2010      	movs	r0, #16
 8001ede:	f7ff ffd3 	bl	8001e88 <ssd1306_WriteCommand>
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8001ee2:	9702      	str	r7, [sp, #8]
 8001ee4:	9601      	str	r6, [sp, #4]
 8001ee6:	9500      	str	r5, [sp, #0]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	2178      	movs	r1, #120	@ 0x78
 8001eee:	4640      	mov	r0, r8
 8001ef0:	f001 fe44 	bl	8003b7c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++)
 8001ef4:	3401      	adds	r4, #1
 8001ef6:	b2e4      	uxtb	r4, r4
 8001ef8:	3580      	adds	r5, #128	@ 0x80
 8001efa:	2cb8      	cmp	r4, #184	@ 0xb8
 8001efc:	d1e8      	bne.n	8001ed0 <ssd1306_UpdateScreen+0x14>
}
 8001efe:	b004      	add	sp, #16
 8001f00:	bc80      	pop	{r7}
 8001f02:	46b8      	mov	r8, r7
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	20000300 	.word	0x20000300
 8001f0c:	200001e8 	.word	0x200001e8

08001f10 <ssd1306_DrawPixel>:
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001f10:	b243      	sxtb	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db13      	blt.n	8001f3e <ssd1306_DrawPixel+0x2e>
 8001f16:	293f      	cmp	r1, #63	@ 0x3f
 8001f18:	d811      	bhi.n	8001f3e <ssd1306_DrawPixel+0x2e>
	SSD1306_COLOR color = SSD1306.Color;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <ssd1306_DrawPixel+0x50>)
 8001f1c:	795a      	ldrb	r2, [r3, #5]
	if (SSD1306.Inverted)
 8001f1e:	791b      	ldrb	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <ssd1306_DrawPixel+0x30>
	if (color == White)
 8001f24:	2a00      	cmp	r2, #0
 8001f26:	d00d      	beq.n	8001f44 <ssd1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001f28:	08cb      	lsrs	r3, r1, #3
 8001f2a:	01db      	lsls	r3, r3, #7
 8001f2c:	1818      	adds	r0, r3, r0
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <ssd1306_DrawPixel+0x54>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	400a      	ands	r2, r1
 8001f34:	2101      	movs	r1, #1
 8001f36:	4091      	lsls	r1, r2
 8001f38:	5c1a      	ldrb	r2, [r3, r0]
 8001f3a:	438a      	bics	r2, r1
 8001f3c:	541a      	strb	r2, [r3, r0]
}
 8001f3e:	4770      	bx	lr
	if (color == White)
 8001f40:	2a01      	cmp	r2, #1
 8001f42:	d1f1      	bne.n	8001f28 <ssd1306_DrawPixel+0x18>
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001f44:	08cb      	lsrs	r3, r1, #3
 8001f46:	01db      	lsls	r3, r3, #7
 8001f48:	181b      	adds	r3, r3, r0
 8001f4a:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <ssd1306_DrawPixel+0x54>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	4011      	ands	r1, r2
 8001f50:	3a06      	subs	r2, #6
 8001f52:	408a      	lsls	r2, r1
 8001f54:	0001      	movs	r1, r0
 8001f56:	5cc0      	ldrb	r0, [r0, r3]
 8001f58:	4302      	orrs	r2, r0
 8001f5a:	54ca      	strb	r2, [r1, r3]
 8001f5c:	e7ef      	b.n	8001f3e <ssd1306_DrawPixel+0x2e>
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	20000700 	.word	0x20000700
 8001f64:	20000300 	.word	0x20000300

08001f68 <ssd1306_WriteChar>:
{
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	46de      	mov	lr, fp
 8001f6c:	4657      	mov	r7, sl
 8001f6e:	464e      	mov	r6, r9
 8001f70:	4645      	mov	r5, r8
 8001f72:	b5e0      	push	{r5, r6, r7, lr}
 8001f74:	b089      	sub	sp, #36	@ 0x24
 8001f76:	0005      	movs	r5, r0
 8001f78:	9005      	str	r0, [sp, #20]
 8001f7a:	9106      	str	r1, [sp, #24]
 8001f7c:	9207      	str	r2, [sp, #28]
 8001f7e:	b2c9      	uxtb	r1, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f80:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <ssd1306_WriteChar+0xec>)
 8001f82:	881c      	ldrh	r4, [r3, #0]
 8001f84:	1862      	adds	r2, r4, r1
 8001f86:	2a7f      	cmp	r2, #127	@ 0x7f
 8001f88:	dc5f      	bgt.n	800204a <ssd1306_WriteChar+0xe2>
 8001f8a:	ab06      	add	r3, sp, #24
 8001f8c:	785a      	ldrb	r2, [r3, #1]
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001f8e:	4831      	ldr	r0, [pc, #196]	@ (8002054 <ssd1306_WriteChar+0xec>)
 8001f90:	8846      	ldrh	r6, [r0, #2]
 8001f92:	18b0      	adds	r0, r6, r2
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f94:	283f      	cmp	r0, #63	@ 0x3f
 8001f96:	dc5a      	bgt.n	800204e <ssd1306_WriteChar+0xe6>
	for (i = 0; i < Font.FontHeight; i++)
 8001f98:	9204      	str	r2, [sp, #16]
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	d04a      	beq.n	8002034 <ssd1306_WriteChar+0xcc>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f9e:	0028      	movs	r0, r5
 8001fa0:	3820      	subs	r0, #32
 8001fa2:	4342      	muls	r2, r0
 8001fa4:	0053      	lsls	r3, r2, #1
 8001fa6:	469b      	mov	fp, r3
 8001fa8:	b2f3      	uxtb	r3, r6
	for (i = 0; i < Font.FontHeight; i++)
 8001faa:	2200      	movs	r2, #0
 8001fac:	4692      	mov	sl, r2
		for (j = 0; j < Font.FontWidth; j++)
 8001fae:	9101      	str	r1, [sp, #4]
				SSD1306.Color = !SSD1306.Color;
 8001fb0:	4f28      	ldr	r7, [pc, #160]	@ (8002054 <ssd1306_WriteChar+0xec>)
 8001fb2:	465a      	mov	r2, fp
 8001fb4:	9202      	str	r2, [sp, #8]
 8001fb6:	9103      	str	r1, [sp, #12]
 8001fb8:	46d3      	mov	fp, sl
 8001fba:	46a2      	mov	sl, r4
 8001fbc:	001c      	movs	r4, r3
 8001fbe:	e028      	b.n	8002012 <ssd1306_WriteChar+0xaa>
 8001fc0:	797e      	ldrb	r6, [r7, #5]
 8001fc2:	4273      	negs	r3, r6
 8001fc4:	4173      	adcs	r3, r6
 8001fc6:	717b      	strb	r3, [r7, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001fc8:	1960      	adds	r0, r4, r5
 8001fca:	b2c0      	uxtb	r0, r0
 8001fcc:	4651      	mov	r1, sl
 8001fce:	f7ff ff9f 	bl	8001f10 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001fd2:	1e73      	subs	r3, r6, #1
 8001fd4:	419e      	sbcs	r6, r3
 8001fd6:	717e      	strb	r6, [r7, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001fd8:	3501      	adds	r5, #1
 8001fda:	9b01      	ldr	r3, [sp, #4]
 8001fdc:	42ab      	cmp	r3, r5
 8001fde:	d90a      	bls.n	8001ff6 <ssd1306_WriteChar+0x8e>
			if ((b << j) & 0x8000)
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	40ab      	lsls	r3, r5
 8001fe4:	464a      	mov	r2, r9
 8001fe6:	4213      	tst	r3, r2
 8001fe8:	d0ea      	beq.n	8001fc0 <ssd1306_WriteChar+0x58>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001fea:	1960      	adds	r0, r4, r5
 8001fec:	b2c0      	uxtb	r0, r0
 8001fee:	4651      	mov	r1, sl
 8001ff0:	f7ff ff8e 	bl	8001f10 <ssd1306_DrawPixel>
 8001ff4:	e7f0      	b.n	8001fd8 <ssd1306_WriteChar+0x70>
 8001ff6:	4653      	mov	r3, sl
 8001ff8:	46a2      	mov	sl, r4
 8001ffa:	001c      	movs	r4, r3
	for (i = 0; i < Font.FontHeight; i++)
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	469c      	mov	ip, r3
 8002000:	44e3      	add	fp, ip
 8002002:	9b02      	ldr	r3, [sp, #8]
 8002004:	3302      	adds	r3, #2
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	3401      	adds	r4, #1
 800200a:	b2e4      	uxtb	r4, r4
 800200c:	9b04      	ldr	r3, [sp, #16]
 800200e:	455b      	cmp	r3, fp
 8002010:	d90e      	bls.n	8002030 <ssd1306_WriteChar+0xc8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002012:	9b07      	ldr	r3, [sp, #28]
 8002014:	9a02      	ldr	r2, [sp, #8]
 8002016:	5a9b      	ldrh	r3, [r3, r2]
 8002018:	4698      	mov	r8, r3
		for (j = 0; j < Font.FontWidth; j++)
 800201a:	9b03      	ldr	r3, [sp, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ed      	beq.n	8001ffc <ssd1306_WriteChar+0x94>
 8002020:	2500      	movs	r5, #0
			if ((b << j) & 0x8000)
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4699      	mov	r9, r3
 8002028:	0023      	movs	r3, r4
 800202a:	4654      	mov	r4, sl
 800202c:	469a      	mov	sl, r3
 800202e:	e7d7      	b.n	8001fe0 <ssd1306_WriteChar+0x78>
 8002030:	4654      	mov	r4, sl
 8002032:	9903      	ldr	r1, [sp, #12]
	SSD1306.CurrentX += Font.FontWidth;
 8002034:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <ssd1306_WriteChar+0xec>)
 8002036:	1909      	adds	r1, r1, r4
 8002038:	8011      	strh	r1, [r2, #0]
	return ch;
 800203a:	9805      	ldr	r0, [sp, #20]
}
 800203c:	b009      	add	sp, #36	@ 0x24
 800203e:	bcf0      	pop	{r4, r5, r6, r7}
 8002040:	46bb      	mov	fp, r7
 8002042:	46b2      	mov	sl, r6
 8002044:	46a9      	mov	r9, r5
 8002046:	46a0      	mov	r8, r4
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
 800204a:	2000      	movs	r0, #0
 800204c:	e7f6      	b.n	800203c <ssd1306_WriteChar+0xd4>
 800204e:	2000      	movs	r0, #0
 8002050:	e7f4      	b.n	800203c <ssd1306_WriteChar+0xd4>
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	20000700 	.word	0x20000700

08002058 <ssd1306_WriteString>:
{
 8002058:	b510      	push	{r4, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	0004      	movs	r4, r0
 800205e:	9100      	str	r1, [sp, #0]
 8002060:	9201      	str	r2, [sp, #4]
	while (*str)
 8002062:	7800      	ldrb	r0, [r0, #0]
 8002064:	2800      	cmp	r0, #0
 8002066:	d00b      	beq.n	8002080 <ssd1306_WriteString+0x28>
		if (ssd1306_WriteChar(*str, Font) != *str)
 8002068:	9900      	ldr	r1, [sp, #0]
 800206a:	9a01      	ldr	r2, [sp, #4]
 800206c:	f7ff ff7c 	bl	8001f68 <ssd1306_WriteChar>
 8002070:	0003      	movs	r3, r0
 8002072:	7820      	ldrb	r0, [r4, #0]
 8002074:	4283      	cmp	r3, r0
 8002076:	d103      	bne.n	8002080 <ssd1306_WriteString+0x28>
		str++;
 8002078:	3401      	adds	r4, #1
	while (*str)
 800207a:	7820      	ldrb	r0, [r4, #0]
 800207c:	2800      	cmp	r0, #0
 800207e:	d1f3      	bne.n	8002068 <ssd1306_WriteString+0x10>
}
 8002080:	b002      	add	sp, #8
 8002082:	bd10      	pop	{r4, pc}

08002084 <ssd1306_SetCursor>:
	SSD1306.CurrentX = x;
 8002084:	4b01      	ldr	r3, [pc, #4]	@ (800208c <ssd1306_SetCursor+0x8>)
 8002086:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002088:	8059      	strh	r1, [r3, #2]
}
 800208a:	4770      	bx	lr
 800208c:	20000700 	.word	0x20000700

08002090 <ssd1306_FlipScreenVertically>:
{
 8002090:	b510      	push	{r4, lr}
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8002092:	20a1      	movs	r0, #161	@ 0xa1
 8002094:	f7ff fef8 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8002098:	20c8      	movs	r0, #200	@ 0xc8
 800209a:	f7ff fef5 	bl	8001e88 <ssd1306_WriteCommand>
}
 800209e:	bd10      	pop	{r4, pc}

080020a0 <ssd1306_Clear>:
{
 80020a0:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 80020a2:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <ssd1306_Clear+0x10>)
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	00d2      	lsls	r2, r2, #3
 80020a8:	2100      	movs	r1, #0
 80020aa:	f003 f90d 	bl	80052c8 <memset>
}
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	20000300 	.word	0x20000300

080020b4 <ssd1306_Init>:
{
 80020b4:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80020b6:	23fa      	movs	r3, #250	@ 0xfa
 80020b8:	483d      	ldr	r0, [pc, #244]	@ (80021b0 <ssd1306_Init+0xfc>)
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	2205      	movs	r2, #5
 80020be:	2178      	movs	r1, #120	@ 0x78
 80020c0:	f001 fe52 	bl	8003d68 <HAL_I2C_IsDeviceReady>
		return 0;
 80020c4:	2300      	movs	r3, #0
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d003      	beq.n	80020d2 <ssd1306_Init+0x1e>
		SSD1306.Initialized = 0;
 80020ca:	4a3a      	ldr	r2, [pc, #232]	@ (80021b4 <ssd1306_Init+0x100>)
 80020cc:	7193      	strb	r3, [r2, #6]
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	bd10      	pop	{r4, pc}
	ssd1306_WriteCommand(DISPLAYOFF);
 80020d2:	30ae      	adds	r0, #174	@ 0xae
 80020d4:	f7ff fed8 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 80020d8:	20d5      	movs	r0, #213	@ 0xd5
 80020da:	f7ff fed5 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 80020de:	20f0      	movs	r0, #240	@ 0xf0
 80020e0:	f7ff fed2 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 80020e4:	20a8      	movs	r0, #168	@ 0xa8
 80020e6:	f7ff fecf 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 80020ea:	203f      	movs	r0, #63	@ 0x3f
 80020ec:	f7ff fecc 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80020f0:	20d3      	movs	r0, #211	@ 0xd3
 80020f2:	f7ff fec9 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff fec6 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 80020fc:	2040      	movs	r0, #64	@ 0x40
 80020fe:	f7ff fec3 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8002102:	208d      	movs	r0, #141	@ 0x8d
 8002104:	f7ff fec0 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8002108:	2014      	movs	r0, #20
 800210a:	f7ff febd 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 800210e:	2020      	movs	r0, #32
 8002110:	f7ff feba 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff feb7 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 800211a:	20a0      	movs	r0, #160	@ 0xa0
 800211c:	f7ff feb4 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8002120:	20c0      	movs	r0, #192	@ 0xc0
 8002122:	f7ff feb1 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8002126:	20da      	movs	r0, #218	@ 0xda
 8002128:	f7ff feae 	bl	8001e88 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 800212c:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <ssd1306_Init+0x104>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02d      	beq.n	8002190 <ssd1306_Init+0xdc>
	else if (display_geometry == GEOMETRY_128_32)
 8002134:	2b01      	cmp	r3, #1
 8002136:	d02f      	beq.n	8002198 <ssd1306_Init+0xe4>
	ssd1306_WriteCommand(SETCONTRAST);
 8002138:	2081      	movs	r0, #129	@ 0x81
 800213a:	f7ff fea5 	bl	8001e88 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 800213e:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <ssd1306_Init+0x104>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02c      	beq.n	80021a0 <ssd1306_Init+0xec>
	else if (display_geometry == GEOMETRY_128_32)
 8002146:	2b01      	cmp	r3, #1
 8002148:	d02e      	beq.n	80021a8 <ssd1306_Init+0xf4>
	ssd1306_WriteCommand(SETPRECHARGE);
 800214a:	20d9      	movs	r0, #217	@ 0xd9
 800214c:	f7ff fe9c 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8002150:	20f1      	movs	r0, #241	@ 0xf1
 8002152:	f7ff fe99 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8002156:	20db      	movs	r0, #219	@ 0xdb
 8002158:	f7ff fe96 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 800215c:	2040      	movs	r0, #64	@ 0x40
 800215e:	f7ff fe93 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8002162:	20a4      	movs	r0, #164	@ 0xa4
 8002164:	f7ff fe90 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8002168:	20a6      	movs	r0, #166	@ 0xa6
 800216a:	f7ff fe8d 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 800216e:	202e      	movs	r0, #46	@ 0x2e
 8002170:	f7ff fe8a 	bl	8001e88 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8002174:	20af      	movs	r0, #175	@ 0xaf
 8002176:	f7ff fe87 	bl	8001e88 <ssd1306_WriteCommand>
	SSD1306.CurrentX = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <ssd1306_Init+0x100>)
 800217c:	2200      	movs	r2, #0
 800217e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002180:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8002182:	715a      	strb	r2, [r3, #5]
	ssd1306_Clear();
 8002184:	f7ff ff8c 	bl	80020a0 <ssd1306_Clear>
	ssd1306_UpdateScreen();
 8002188:	f7ff fe98 	bl	8001ebc <ssd1306_UpdateScreen>
	return 1;
 800218c:	2301      	movs	r3, #1
 800218e:	e79c      	b.n	80020ca <ssd1306_Init+0x16>
	  ssd1306_WriteCommand(0x12);
 8002190:	2012      	movs	r0, #18
 8002192:	f7ff fe79 	bl	8001e88 <ssd1306_WriteCommand>
 8002196:	e7cf      	b.n	8002138 <ssd1306_Init+0x84>
	  ssd1306_WriteCommand(0x02);
 8002198:	2002      	movs	r0, #2
 800219a:	f7ff fe75 	bl	8001e88 <ssd1306_WriteCommand>
 800219e:	e7cb      	b.n	8002138 <ssd1306_Init+0x84>
	  ssd1306_WriteCommand(0xCF);
 80021a0:	20cf      	movs	r0, #207	@ 0xcf
 80021a2:	f7ff fe71 	bl	8001e88 <ssd1306_WriteCommand>
 80021a6:	e7d0      	b.n	800214a <ssd1306_Init+0x96>
	  ssd1306_WriteCommand(0x8F);
 80021a8:	208f      	movs	r0, #143	@ 0x8f
 80021aa:	f7ff fe6d 	bl	8001e88 <ssd1306_WriteCommand>
 80021ae:	e7cc      	b.n	800214a <ssd1306_Init+0x96>
 80021b0:	200001e8 	.word	0x200001e8
 80021b4:	20000700 	.word	0x20000700
 80021b8:	200002fc 	.word	0x200002fc

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_MspInit+0x2c>)
 80021c0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80021c2:	2201      	movs	r2, #1
 80021c4:	4311      	orrs	r1, r2
 80021c6:	6419      	str	r1, [r3, #64]	@ 0x40
 80021c8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80021ca:	400a      	ands	r2, r1
 80021cc:	9200      	str	r2, [sp, #0]
 80021ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d2:	2180      	movs	r1, #128	@ 0x80
 80021d4:	0549      	lsls	r1, r1, #21
 80021d6:	430a      	orrs	r2, r1
 80021d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	400b      	ands	r3, r1
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	b002      	add	sp, #8
 80021e4:	4770      	bx	lr
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ec:	b530      	push	{r4, r5, lr}
 80021ee:	b08f      	sub	sp, #60	@ 0x3c
 80021f0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	2214      	movs	r2, #20
 80021f4:	2100      	movs	r1, #0
 80021f6:	a809      	add	r0, sp, #36	@ 0x24
 80021f8:	f003 f866 	bl	80052c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021fc:	2218      	movs	r2, #24
 80021fe:	2100      	movs	r1, #0
 8002200:	a803      	add	r0, sp, #12
 8002202:	f003 f861 	bl	80052c8 <memset>
  if(hadc->Instance==ADC1)
 8002206:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <HAL_ADC_MspInit+0xc4>)
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800220e:	b00f      	add	sp, #60	@ 0x3c
 8002210:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	01db      	lsls	r3, r3, #7
 8002216:	9303      	str	r3, [sp, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221e:	a803      	add	r0, sp, #12
 8002220:	f002 faaa 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8002224:	2800      	cmp	r0, #0
 8002226:	d13d      	bne.n	80022a4 <HAL_ADC_MspInit+0xb8>
    __HAL_RCC_ADC_CLK_ENABLE();
 8002228:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <HAL_ADC_MspInit+0xc8>)
 800222a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800222c:	2180      	movs	r1, #128	@ 0x80
 800222e:	0349      	lsls	r1, r1, #13
 8002230:	430a      	orrs	r2, r1
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40
 8002234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002236:	400a      	ands	r2, r1
 8002238:	9201      	str	r2, [sp, #4]
 800223a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800223e:	2201      	movs	r2, #1
 8002240:	4311      	orrs	r1, r2
 8002242:	6359      	str	r1, [r3, #52]	@ 0x34
 8002244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002246:	401a      	ands	r2, r3
 8002248:	9202      	str	r2, [sp, #8]
 800224a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BAT_Pin|HALL_Pin;
 800224c:	2328      	movs	r3, #40	@ 0x28
 800224e:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002250:	3b25      	subs	r3, #37	@ 0x25
 8002252:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2500      	movs	r5, #0
 8002256:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	20a0      	movs	r0, #160	@ 0xa0
 800225a:	a909      	add	r1, sp, #36	@ 0x24
 800225c:	05c0      	lsls	r0, r0, #23
 800225e:	f001 f9b7 	bl	80035d0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002262:	4815      	ldr	r0, [pc, #84]	@ (80022b8 <HAL_ADC_MspInit+0xcc>)
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <HAL_ADC_MspInit+0xd0>)
 8002266:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002268:	2305      	movs	r3, #5
 800226a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226c:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800226e:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002270:	337b      	adds	r3, #123	@ 0x7b
 8002272:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002274:	3380      	adds	r3, #128	@ 0x80
 8002276:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800227e:	2320      	movs	r3, #32
 8002280:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002282:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002284:	f001 f88c 	bl	80033a0 <HAL_DMA_Init>
 8002288:	2800      	cmp	r0, #0
 800228a:	d10e      	bne.n	80022aa <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800228c:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_ADC_MspInit+0xcc>)
 800228e:	6523      	str	r3, [r4, #80]	@ 0x50
 8002290:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	200c      	movs	r0, #12
 8002298:	f000 ffea 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800229c:	200c      	movs	r0, #12
 800229e:	f001 f819 	bl	80032d4 <HAL_NVIC_EnableIRQ>
}
 80022a2:	e7b4      	b.n	800220e <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80022a4:	f7ff fdee 	bl	8001e84 <Error_Handler>
 80022a8:	e7be      	b.n	8002228 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 80022aa:	f7ff fdeb 	bl	8001e84 <Error_Handler>
 80022ae:	e7ed      	b.n	800228c <HAL_ADC_MspInit+0xa0>
 80022b0:	40012400 	.word	0x40012400
 80022b4:	40021000 	.word	0x40021000
 80022b8:	2000023c 	.word	0x2000023c
 80022bc:	40020008 	.word	0x40020008

080022c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c0:	b510      	push	{r4, lr}
 80022c2:	b08e      	sub	sp, #56	@ 0x38
 80022c4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	2214      	movs	r2, #20
 80022c8:	2100      	movs	r1, #0
 80022ca:	a809      	add	r0, sp, #36	@ 0x24
 80022cc:	f002 fffc 	bl	80052c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d0:	2218      	movs	r2, #24
 80022d2:	2100      	movs	r1, #0
 80022d4:	a803      	add	r0, sp, #12
 80022d6:	f002 fff7 	bl	80052c8 <memset>
  if(hi2c->Instance==I2C1)
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_I2C_MspInit+0x7c>)
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_MspInit+0x26>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022e2:	b00e      	add	sp, #56	@ 0x38
 80022e4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022e6:	2320      	movs	r3, #32
 80022e8:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ea:	a803      	add	r0, sp, #12
 80022ec:	f002 fa44 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d11f      	bne.n	8002334 <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4c12      	ldr	r4, [pc, #72]	@ (8002340 <HAL_I2C_MspInit+0x80>)
 80022f6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80022f8:	2302      	movs	r3, #2
 80022fa:	431a      	orrs	r2, r3
 80022fc:	6362      	str	r2, [r4, #52]	@ 0x34
 80022fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002300:	4013      	ands	r3, r2
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002306:	23c0      	movs	r3, #192	@ 0xc0
 8002308:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800230a:	3bae      	subs	r3, #174	@ 0xae
 800230c:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002314:	3306      	adds	r3, #6
 8002316:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	a909      	add	r1, sp, #36	@ 0x24
 800231a:	480a      	ldr	r0, [pc, #40]	@ (8002344 <HAL_I2C_MspInit+0x84>)
 800231c:	f001 f958 	bl	80035d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002320:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002322:	2280      	movs	r2, #128	@ 0x80
 8002324:	0392      	lsls	r2, r2, #14
 8002326:	4313      	orrs	r3, r2
 8002328:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800232a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800232c:	4013      	ands	r3, r2
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	9b02      	ldr	r3, [sp, #8]
}
 8002332:	e7d6      	b.n	80022e2 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002334:	f7ff fda6 	bl	8001e84 <Error_Handler>
 8002338:	e7dc      	b.n	80022f4 <HAL_I2C_MspInit+0x34>
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	40005400 	.word	0x40005400
 8002340:	40021000 	.word	0x40021000
 8002344:	50000400 	.word	0x50000400

08002348 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002348:	b510      	push	{r4, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	0004      	movs	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234e:	2218      	movs	r2, #24
 8002350:	2100      	movs	r1, #0
 8002352:	a802      	add	r0, sp, #8
 8002354:	f002 ffb8 	bl	80052c8 <memset>
  if(hrtc->Instance==RTC)
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_RTC_MspInit+0x58>)
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RTC_MspInit+0x1c>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002360:	b008      	add	sp, #32
 8002362:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	a802      	add	r0, sp, #8
 8002372:	f002 fa01 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	2800      	cmp	r0, #0
 8002378:	d10f      	bne.n	800239a <HAL_RTC_MspInit+0x52>
    __HAL_RCC_RTC_ENABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RTC_MspInit+0x5c>)
 800237c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800237e:	2280      	movs	r2, #128	@ 0x80
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	430a      	orrs	r2, r1
 8002384:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	400b      	ands	r3, r1
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9b01      	ldr	r3, [sp, #4]
}
 8002398:	e7e2      	b.n	8002360 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800239a:	f7ff fd73 	bl	8001e84 <Error_Handler>
 800239e:	e7ec      	b.n	800237a <HAL_RTC_MspInit+0x32>
 80023a0:	40002800 	.word	0x40002800
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a8:	b500      	push	{lr}
 80023aa:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM3)
 80023ac:	6803      	ldr	r3, [r0, #0]
 80023ae:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <HAL_TIM_Base_MspInit+0x6c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80023b4:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_TIM_Base_MspInit+0x70>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d016      	beq.n	80023e8 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM14_CLK_ENABLE();
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_TIM_Base_MspInit+0x74>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01e      	beq.n	80023fe <HAL_TIM_Base_MspInit+0x56>
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023c0:	b005      	add	sp, #20
 80023c2:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023c4:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_TIM_Base_MspInit+0x78>)
 80023c6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023c8:	2302      	movs	r3, #2
 80023ca:	4319      	orrs	r1, r3
 80023cc:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80023ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023d0:	4013      	ands	r3, r2
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2010      	movs	r0, #16
 80023dc:	f000 ff48 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023e0:	2010      	movs	r0, #16
 80023e2:	f000 ff77 	bl	80032d4 <HAL_NVIC_EnableIRQ>
 80023e6:	e7eb      	b.n	80023c0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_TIM_Base_MspInit+0x78>)
 80023ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ec:	2180      	movs	r1, #128	@ 0x80
 80023ee:	0209      	lsls	r1, r1, #8
 80023f0:	430a      	orrs	r2, r1
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	400b      	ands	r3, r1
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	9b02      	ldr	r3, [sp, #8]
 80023fc:	e7e0      	b.n	80023c0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_TIM_Base_MspInit+0x78>)
 8002400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002402:	2180      	movs	r1, #128	@ 0x80
 8002404:	0289      	lsls	r1, r1, #10
 8002406:	430a      	orrs	r2, r1
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	400b      	ands	r3, r1
 800240e:	9303      	str	r3, [sp, #12]
 8002410:	9b03      	ldr	r3, [sp, #12]
}
 8002412:	e7d5      	b.n	80023c0 <HAL_TIM_Base_MspInit+0x18>
 8002414:	40000400 	.word	0x40000400
 8002418:	40002000 	.word	0x40002000
 800241c:	40014400 	.word	0x40014400
 8002420:	40021000 	.word	0x40021000

08002424 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002424:	e7fe      	b.n	8002424 <NMI_Handler>

08002426 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <HardFault_Handler>

08002428 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002428:	4770      	bx	lr

0800242a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242e:	f000 f8c3 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002432:	bd10      	pop	{r4, pc}

08002434 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002434:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sw1_Pin);
 8002436:	2001      	movs	r0, #1
 8002438:	f001 f9b6 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800243c:	bd10      	pop	{r4, pc}

0800243e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800243e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sw3_Pin);
 8002440:	2040      	movs	r0, #64	@ 0x40
 8002442:	f001 f9b1 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Sw2_Pin);
 8002446:	2080      	movs	r0, #128	@ 0x80
 8002448:	f001 f9ae 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STDBY_BAT_Pin);
 800244c:	2080      	movs	r0, #128	@ 0x80
 800244e:	0100      	lsls	r0, r0, #4
 8002450:	f001 f9aa 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHRG_BAT_Pin);
 8002454:	2080      	movs	r0, #128	@ 0x80
 8002456:	0140      	lsls	r0, r0, #5
 8002458:	f001 f9a6 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800245c:	bd10      	pop	{r4, pc}
	...

08002460 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002460:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002462:	4802      	ldr	r0, [pc, #8]	@ (800246c <DMA1_Channel1_IRQHandler+0xc>)
 8002464:	f001 f84e 	bl	8003504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002468:	bd10      	pop	{r4, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	2000023c 	.word	0x2000023c

08002470 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002470:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002472:	4802      	ldr	r0, [pc, #8]	@ (800247c <ADC1_IRQHandler+0xc>)
 8002474:	f000 fa22 	bl	80028bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002478:	bd10      	pop	{r4, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	20000298 	.word	0x20000298

08002480 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002480:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
tim3 = 1;
 8002482:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <TIM3_IRQHandler+0x18>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
//if(tim3 > 1)
HAL_TIM_Base_Stop_IT(&htim3);
 8002488:	4c04      	ldr	r4, [pc, #16]	@ (800249c <TIM3_IRQHandler+0x1c>)
 800248a:	0020      	movs	r0, r4
 800248c:	f002 fc4a 	bl	8004d24 <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002490:	0020      	movs	r0, r4
 8002492:	f002 fc69 	bl	8004d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002496:	bd10      	pop	{r4, pc}
 8002498:	20000014 	.word	0x20000014
 800249c:	20000170 	.word	0x20000170

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b510      	push	{r4, lr}
 80024a2:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a4:	4a0c      	ldr	r2, [pc, #48]	@ (80024d8 <_sbrk+0x38>)
 80024a6:	490d      	ldr	r1, [pc, #52]	@ (80024dc <_sbrk+0x3c>)
 80024a8:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <_sbrk+0x40>)
 80024ac:	6809      	ldr	r1, [r1, #0]
 80024ae:	2900      	cmp	r1, #0
 80024b0:	d007      	beq.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	490b      	ldr	r1, [pc, #44]	@ (80024e0 <_sbrk+0x40>)
 80024b4:	6808      	ldr	r0, [r1, #0]
 80024b6:	18c3      	adds	r3, r0, r3
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d806      	bhi.n	80024ca <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024bc:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <_sbrk+0x40>)
 80024be:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80024c0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80024c2:	4907      	ldr	r1, [pc, #28]	@ (80024e0 <_sbrk+0x40>)
 80024c4:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <_sbrk+0x44>)
 80024c6:	6008      	str	r0, [r1, #0]
 80024c8:	e7f3      	b.n	80024b2 <_sbrk+0x12>
    errno = ENOMEM;
 80024ca:	f002 ff05 	bl	80052d8 <__errno>
 80024ce:	230c      	movs	r3, #12
 80024d0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80024d2:	2001      	movs	r0, #1
 80024d4:	4240      	negs	r0, r0
 80024d6:	e7f3      	b.n	80024c0 <_sbrk+0x20>
 80024d8:	20002000 	.word	0x20002000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	20000708 	.word	0x20000708
 80024e4:	20000858 	.word	0x20000858

080024e8 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e8:	4770      	bx	lr
	...

080024ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024ec:	480d      	ldr	r0, [pc, #52]	@ (8002524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024f0:	f7ff fffa 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	@ (800252c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <LoopForever+0xe>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	@ (8002538 <LoopForever+0x16>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800251a:	f002 fee3 	bl	80052e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800251e:	f7fe fffb 	bl	8001518 <main>

08002522 <LoopForever>:

LoopForever:
  b LoopForever
 8002522:	e7fe      	b.n	8002522 <LoopForever>
  ldr   r0, =_estack
 8002524:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002530:	0800722c 	.word	0x0800722c
  ldr r2, =_sbss
 8002534:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002538:	20000858 	.word	0x20000858

0800253c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800253c:	e7fe      	b.n	800253c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08002540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <HAL_InitTick+0x44>)
 8002546:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002548:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 800254a:	2900      	cmp	r1, #0
 800254c:	d100      	bne.n	8002550 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 800254e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002550:	4d0d      	ldr	r5, [pc, #52]	@ (8002588 <HAL_InitTick+0x48>)
 8002552:	20fa      	movs	r0, #250	@ 0xfa
 8002554:	0080      	lsls	r0, r0, #2
 8002556:	f7fd fddd 	bl	8000114 <__udivsi3>
 800255a:	0001      	movs	r1, r0
 800255c:	6828      	ldr	r0, [r5, #0]
 800255e:	f7fd fdd9 	bl	8000114 <__udivsi3>
 8002562:	f000 fec3 	bl	80032ec <HAL_SYSTICK_Config>
 8002566:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8002568:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ef      	bne.n	800254e <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256e:	2c03      	cmp	r4, #3
 8002570:	d8ed      	bhi.n	800254e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002572:	2200      	movs	r2, #0
 8002574:	0021      	movs	r1, r4
 8002576:	4240      	negs	r0, r0
 8002578:	f000 fe7a 	bl	8003270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_InitTick+0x4c>)
 800257e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002580:	2000      	movs	r0, #0
 8002582:	e7e4      	b.n	800254e <HAL_InitTick+0xe>
 8002584:	2000001c 	.word	0x2000001c
 8002588:	20000018 	.word	0x20000018
 800258c:	20000020 	.word	0x20000020

08002590 <HAL_Init>:
{
 8002590:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <HAL_Init+0x24>)
 8002594:	6811      	ldr	r1, [r2, #0]
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	430b      	orrs	r3, r1
 800259c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800259e:	2003      	movs	r0, #3
 80025a0:	f7ff ffce 	bl	8002540 <HAL_InitTick>
 80025a4:	1e04      	subs	r4, r0, #0
 80025a6:	d002      	beq.n	80025ae <HAL_Init+0x1e>
    status = HAL_ERROR;
 80025a8:	2401      	movs	r4, #1
}
 80025aa:	0020      	movs	r0, r4
 80025ac:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80025ae:	f7ff fe05 	bl	80021bc <HAL_MspInit>
 80025b2:	e7fa      	b.n	80025aa <HAL_Init+0x1a>
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80025b8:	4a03      	ldr	r2, [pc, #12]	@ (80025c8 <HAL_IncTick+0x10>)
 80025ba:	6811      	ldr	r1, [r2, #0]
 80025bc:	4b03      	ldr	r3, [pc, #12]	@ (80025cc <HAL_IncTick+0x14>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	185b      	adds	r3, r3, r1
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	4770      	bx	lr
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	2000070c 	.word	0x2000070c
 80025cc:	2000001c 	.word	0x2000001c

080025d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025d0:	4b01      	ldr	r3, [pc, #4]	@ (80025d8 <HAL_GetTick+0x8>)
 80025d2:	6818      	ldr	r0, [r3, #0]
}
 80025d4:	4770      	bx	lr
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	2000070c 	.word	0x2000070c

080025dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b083      	sub	sp, #12
 80025e0:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d100      	bne.n	80025ec <HAL_ADC_Init+0x10>
 80025ea:	e0ff      	b.n	80027ec <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ec:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <HAL_ADC_Init+0x18>
 80025f2:	e0b6      	b.n	8002762 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	00d2      	lsls	r2, r2, #3
 80025fa:	d417      	bmi.n	800262c <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	4a7c      	ldr	r2, [pc, #496]	@ (80027f0 <HAL_ADC_Init+0x214>)
 8002600:	4011      	ands	r1, r2
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	0552      	lsls	r2, r2, #21
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260a:	4b7a      	ldr	r3, [pc, #488]	@ (80027f4 <HAL_ADC_Init+0x218>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	497a      	ldr	r1, [pc, #488]	@ (80027f8 <HAL_ADC_Init+0x21c>)
 8002610:	f7fd fd80 	bl	8000114 <__udivsi3>
 8002614:	3001      	adds	r0, #1
 8002616:	0040      	lsls	r0, r0, #1
 8002618:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8002620:	9b01      	ldr	r3, [sp, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002626:	9b01      	ldr	r3, [sp, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800262e:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002630:	2000      	movs	r0, #0
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	d408      	bmi.n	8002648 <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002638:	2210      	movs	r2, #16
 800263a:	4313      	orrs	r3, r2
 800263c:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002640:	3a0f      	subs	r2, #15
 8002642:	4313      	orrs	r3, r2
 8002644:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002646:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002648:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800264a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800264c:	2310      	movs	r3, #16
 800264e:	4013      	ands	r3, r2
 8002650:	2204      	movs	r2, #4
 8002652:	402a      	ands	r2, r5
 8002654:	4313      	orrs	r3, r2
 8002656:	d000      	beq.n	800265a <HAL_ADC_Init+0x7e>
 8002658:	e0c1      	b.n	80027de <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800265c:	4a67      	ldr	r2, [pc, #412]	@ (80027fc <HAL_ADC_Init+0x220>)
 800265e:	4013      	ands	r3, r2
 8002660:	3206      	adds	r2, #6
 8002662:	32ff      	adds	r2, #255	@ 0xff
 8002664:	4313      	orrs	r3, r2
 8002666:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002668:	688b      	ldr	r3, [r1, #8]
 800266a:	07db      	lsls	r3, r3, #31
 800266c:	d44f      	bmi.n	800270e <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800266e:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002670:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8002672:	1e73      	subs	r3, r6, #1
 8002674:	419e      	sbcs	r6, r3
 8002676:	0336      	lsls	r6, r6, #12
 8002678:	68a2      	ldr	r2, [r4, #8]
 800267a:	68e3      	ldr	r3, [r4, #12]
 800267c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800267e:	7e23      	ldrb	r3, [r4, #24]
 8002680:	039b      	lsls	r3, r3, #14
 8002682:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002684:	7e63      	ldrb	r3, [r4, #25]
 8002686:	03db      	lsls	r3, r3, #15
 8002688:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800268a:	036b      	lsls	r3, r5, #13
 800268c:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db6d      	blt.n	8002770 <HAL_ADC_Init+0x194>
 8002694:	2780      	movs	r7, #128	@ 0x80
 8002696:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002698:	232c      	movs	r3, #44	@ 0x2c
 800269a:	5ce3      	ldrb	r3, [r4, r3]
 800269c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800269e:	4313      	orrs	r3, r2
 80026a0:	4333      	orrs	r3, r6
 80026a2:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a4:	2220      	movs	r2, #32
 80026a6:	5ca2      	ldrb	r2, [r4, r2]
 80026a8:	2a01      	cmp	r2, #1
 80026aa:	d064      	beq.n	8002776 <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	d005      	beq.n	80026be <HAL_ADC_Init+0xe2>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026b2:	25e0      	movs	r5, #224	@ 0xe0
 80026b4:	006d      	lsls	r5, r5, #1
 80026b6:	402a      	ands	r2, r5
 80026b8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80026ba:	432a      	orrs	r2, r5
 80026bc:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026be:	68ca      	ldr	r2, [r1, #12]
 80026c0:	4d4f      	ldr	r5, [pc, #316]	@ (8002800 <HAL_ADC_Init+0x224>)
 80026c2:	402a      	ands	r2, r5
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026c8:	6863      	ldr	r3, [r4, #4]
 80026ca:	0f9b      	lsrs	r3, r3, #30
 80026cc:	079b      	lsls	r3, r3, #30
 80026ce:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80026d0:	431a      	orrs	r2, r3
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d2:	213c      	movs	r1, #60	@ 0x3c
 80026d4:	5c61      	ldrb	r1, [r4, r1]
 80026d6:	2901      	cmp	r1, #1
 80026d8:	d05c      	beq.n	8002794 <HAL_ADC_Init+0x1b8>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80026da:	6821      	ldr	r1, [r4, #0]
 80026dc:	690b      	ldr	r3, [r1, #16]
 80026de:	4d49      	ldr	r5, [pc, #292]	@ (8002804 <HAL_ADC_Init+0x228>)
 80026e0:	402b      	ands	r3, r5
 80026e2:	4313      	orrs	r3, r2
 80026e4:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026e6:	6862      	ldr	r2, [r4, #4]
 80026e8:	0053      	lsls	r3, r2, #1
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	2180      	movs	r1, #128	@ 0x80
 80026ee:	05c9      	lsls	r1, r1, #23
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d00c      	beq.n	800270e <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d008      	beq.n	800270e <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80026fc:	4942      	ldr	r1, [pc, #264]	@ (8002808 <HAL_ADC_Init+0x22c>)
 80026fe:	680b      	ldr	r3, [r1, #0]
 8002700:	4d42      	ldr	r5, [pc, #264]	@ (800280c <HAL_ADC_Init+0x230>)
 8002702:	402b      	ands	r3, r5
 8002704:	25f0      	movs	r5, #240	@ 0xf0
 8002706:	03ad      	lsls	r5, r5, #14
 8002708:	402a      	ands	r2, r5
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800270e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002710:	6953      	ldr	r3, [r2, #20]
 8002712:	2107      	movs	r1, #7
 8002714:	438b      	bics	r3, r1
 8002716:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002718:	430b      	orrs	r3, r1
 800271a:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800271c:	6821      	ldr	r1, [r4, #0]
 800271e:	694a      	ldr	r2, [r1, #20]
 8002720:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	2570      	movs	r5, #112	@ 0x70
 8002726:	43aa      	bics	r2, r5
 8002728:	4313      	orrs	r3, r2
 800272a:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800272c:	6923      	ldr	r3, [r4, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d13a      	bne.n	80027a8 <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002732:	6822      	ldr	r2, [r4, #0]
 8002734:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002736:	3b10      	subs	r3, #16
 8002738:	430b      	orrs	r3, r1
 800273a:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800273c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	2307      	movs	r3, #7
 8002742:	4013      	ands	r3, r2
 8002744:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002746:	429a      	cmp	r2, r3
 8002748:	d040      	beq.n	80027cc <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800274a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800274c:	2212      	movs	r2, #18
 800274e:	4393      	bics	r3, r2
 8002750:	3a02      	subs	r2, #2
 8002752:	4313      	orrs	r3, r2
 8002754:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002758:	3a0f      	subs	r2, #15
 800275a:	4313      	orrs	r3, r2
 800275c:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800275e:	2001      	movs	r0, #1
 8002760:	e042      	b.n	80027e8 <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 8002762:	f7ff fd43 	bl	80021ec <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002766:	2300      	movs	r3, #0
 8002768:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800276a:	2254      	movs	r2, #84	@ 0x54
 800276c:	54a3      	strb	r3, [r4, r2]
 800276e:	e741      	b.n	80025f4 <HAL_ADC_Init+0x18>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	085f      	lsrs	r7, r3, #1
 8002774:	e790      	b.n	8002698 <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002776:	2d00      	cmp	r5, #0
 8002778:	d103      	bne.n	8002782 <HAL_ADC_Init+0x1a6>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800277a:	2280      	movs	r2, #128	@ 0x80
 800277c:	0252      	lsls	r2, r2, #9
 800277e:	4313      	orrs	r3, r2
 8002780:	e794      	b.n	80026ac <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002782:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002784:	2520      	movs	r5, #32
 8002786:	432a      	orrs	r2, r5
 8002788:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800278c:	3d1f      	subs	r5, #31
 800278e:	432a      	orrs	r2, r5
 8002790:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002792:	e78b      	b.n	80026ac <HAL_ADC_Init+0xd0>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002794:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002796:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8002798:	4329      	orrs	r1, r5
 800279a:	430a      	orrs	r2, r1
 800279c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800279e:	430a      	orrs	r2, r1
 80027a0:	4313      	orrs	r3, r2
 80027a2:	2201      	movs	r2, #1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	e798      	b.n	80026da <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	0392      	lsls	r2, r2, #14
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d1c5      	bne.n	800273c <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 80027b0:	6821      	ldr	r1, [r4, #0]
 80027b2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80027b4:	69e3      	ldr	r3, [r4, #28]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	221c      	movs	r2, #28
 80027bc:	401a      	ands	r2, r3
 80027be:	2310      	movs	r3, #16
 80027c0:	425b      	negs	r3, r3
 80027c2:	4093      	lsls	r3, r2
 80027c4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80027c6:	4313      	orrs	r3, r2
 80027c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80027ca:	e7b7      	b.n	800273c <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	2300      	movs	r3, #0
 80027ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80027d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027d2:	2203      	movs	r2, #3
 80027d4:	4393      	bics	r3, r2
 80027d6:	3a02      	subs	r2, #2
 80027d8:	4313      	orrs	r3, r2
 80027da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80027dc:	e004      	b.n	80027e8 <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027e0:	2210      	movs	r2, #16
 80027e2:	4313      	orrs	r3, r2
 80027e4:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80027e8:	b003      	add	sp, #12
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e7fb      	b.n	80027e8 <HAL_ADC_Init+0x20c>
 80027f0:	6fffffe8 	.word	0x6fffffe8
 80027f4:	20000018 	.word	0x20000018
 80027f8:	00030d40 	.word	0x00030d40
 80027fc:	fffffefd 	.word	0xfffffefd
 8002800:	ffde0201 	.word	0xffde0201
 8002804:	1ffffc02 	.word	0x1ffffc02
 8002808:	40012708 	.word	0x40012708
 800280c:	ffc3ffff 	.word	0xffc3ffff

08002810 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002810:	4770      	bx	lr

08002812 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002812:	4770      	bx	lr

08002814 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002814:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002816:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002818:	f7ff fffb 	bl	8002812 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281c:	bd10      	pop	{r4, pc}

0800281e <HAL_ADC_ErrorCallback>:
}
 800281e:	4770      	bx	lr

08002820 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002820:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002822:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002824:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002826:	2240      	movs	r2, #64	@ 0x40
 8002828:	4313      	orrs	r3, r2
 800282a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800282c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800282e:	3a3c      	subs	r2, #60	@ 0x3c
 8002830:	4313      	orrs	r3, r2
 8002832:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002834:	f7ff fff3 	bl	800281e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002838:	bd10      	pop	{r4, pc}
	...

0800283c <ADC_DMAConvCplt>:
{
 800283c:	b510      	push	{r4, lr}
 800283e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002840:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002842:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002844:	2150      	movs	r1, #80	@ 0x50
 8002846:	4211      	tst	r1, r2
 8002848:	d12a      	bne.n	80028a0 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4313      	orrs	r3, r2
 8002852:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002854:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002856:	68d9      	ldr	r1, [r3, #12]
 8002858:	22c0      	movs	r2, #192	@ 0xc0
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	4211      	tst	r1, r2
 800285e:	d113      	bne.n	8002888 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002860:	7e82      	ldrb	r2, [r0, #26]
 8002862:	2a00      	cmp	r2, #0
 8002864:	d110      	bne.n	8002888 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	0712      	lsls	r2, r2, #28
 800286a:	d50d      	bpl.n	8002888 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	0752      	lsls	r2, r2, #29
 8002870:	d40d      	bmi.n	800288e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	210c      	movs	r1, #12
 8002876:	438a      	bics	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800287a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800287c:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <ADC_DMAConvCplt+0x7c>)
 800287e:	4013      	ands	r3, r2
 8002880:	3204      	adds	r2, #4
 8002882:	32ff      	adds	r2, #255	@ 0xff
 8002884:	4313      	orrs	r3, r2
 8002886:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002888:	f7ff ffc2 	bl	8002810 <HAL_ADC_ConvCpltCallback>
}
 800288c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002890:	2220      	movs	r2, #32
 8002892:	4313      	orrs	r3, r2
 8002894:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002896:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002898:	3a1f      	subs	r2, #31
 800289a:	4313      	orrs	r3, r2
 800289c:	65c3      	str	r3, [r0, #92]	@ 0x5c
 800289e:	e7f3      	b.n	8002888 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028a0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80028a2:	06d2      	lsls	r2, r2, #27
 80028a4:	d404      	bmi.n	80028b0 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028a6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80028a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028aa:	0018      	movs	r0, r3
 80028ac:	4790      	blx	r2
}
 80028ae:	e7ed      	b.n	800288c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 80028b0:	f7ff ffb5 	bl	800281e <HAL_ADC_ErrorCallback>
 80028b4:	e7ea      	b.n	800288c <ADC_DMAConvCplt+0x50>
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	fffffefe 	.word	0xfffffefe

080028bc <HAL_ADC_IRQHandler>:
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028c0:	6803      	ldr	r3, [r0, #0]
 80028c2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028c4:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028c6:	07ab      	lsls	r3, r5, #30
 80028c8:	d50f      	bpl.n	80028ea <HAL_ADC_IRQHandler+0x2e>
 80028ca:	07b3      	lsls	r3, r6, #30
 80028cc:	d50d      	bpl.n	80028ea <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ce:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80028d0:	06db      	lsls	r3, r3, #27
 80028d2:	d404      	bmi.n	80028de <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028d4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4313      	orrs	r3, r2
 80028dc:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80028de:	0020      	movs	r0, r4
 80028e0:	f000 fcc4 	bl	800326c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	2202      	movs	r2, #2
 80028e8:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028ea:	076b      	lsls	r3, r5, #29
 80028ec:	d501      	bpl.n	80028f2 <HAL_ADC_IRQHandler+0x36>
 80028ee:	0773      	lsls	r3, r6, #29
 80028f0:	d403      	bmi.n	80028fa <HAL_ADC_IRQHandler+0x3e>
 80028f2:	072b      	lsls	r3, r5, #28
 80028f4:	d529      	bpl.n	800294a <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80028f6:	0733      	lsls	r3, r6, #28
 80028f8:	d527      	bpl.n	800294a <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028fc:	06db      	lsls	r3, r3, #27
 80028fe:	d404      	bmi.n	800290a <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002900:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4313      	orrs	r3, r2
 8002908:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800290a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800290c:	68d9      	ldr	r1, [r3, #12]
 800290e:	22c0      	movs	r2, #192	@ 0xc0
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	4211      	tst	r1, r2
 8002914:	d113      	bne.n	800293e <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002916:	7ea2      	ldrb	r2, [r4, #26]
 8002918:	2a00      	cmp	r2, #0
 800291a:	d110      	bne.n	800293e <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	0712      	lsls	r2, r2, #28
 8002920:	d50d      	bpl.n	800293e <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	0752      	lsls	r2, r2, #29
 8002926:	d43b      	bmi.n	80029a0 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	210c      	movs	r1, #12
 800292c:	438a      	bics	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002932:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <HAL_ADC_IRQHandler+0x154>)
 8002934:	4013      	ands	r3, r2
 8002936:	3204      	adds	r2, #4
 8002938:	32ff      	adds	r2, #255	@ 0xff
 800293a:	4313      	orrs	r3, r2
 800293c:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800293e:	0020      	movs	r0, r4
 8002940:	f7ff ff66 	bl	8002810 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800294a:	062b      	lsls	r3, r5, #24
 800294c:	d501      	bpl.n	8002952 <HAL_ADC_IRQHandler+0x96>
 800294e:	0633      	lsls	r3, r6, #24
 8002950:	d42f      	bmi.n	80029b2 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002952:	05eb      	lsls	r3, r5, #23
 8002954:	d501      	bpl.n	800295a <HAL_ADC_IRQHandler+0x9e>
 8002956:	05f3      	lsls	r3, r6, #23
 8002958:	d437      	bmi.n	80029ca <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800295a:	05ab      	lsls	r3, r5, #22
 800295c:	d501      	bpl.n	8002962 <HAL_ADC_IRQHandler+0xa6>
 800295e:	05b3      	lsls	r3, r6, #22
 8002960:	d440      	bmi.n	80029e4 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002962:	06eb      	lsls	r3, r5, #27
 8002964:	d517      	bpl.n	8002996 <HAL_ADC_IRQHandler+0xda>
 8002966:	06f3      	lsls	r3, r6, #27
 8002968:	d515      	bpl.n	8002996 <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800296a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002970:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	079b      	lsls	r3, r3, #30
 8002976:	d00b      	beq.n	8002990 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002978:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4313      	orrs	r3, r2
 8002980:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002982:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002984:	2202      	movs	r2, #2
 8002986:	4313      	orrs	r3, r2
 8002988:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800298a:	0020      	movs	r0, r4
 800298c:	f7ff ff47 	bl	800281e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002996:	04ad      	lsls	r5, r5, #18
 8002998:	d501      	bpl.n	800299e <HAL_ADC_IRQHandler+0xe2>
 800299a:	04b6      	lsls	r6, r6, #18
 800299c:	d42f      	bmi.n	80029fe <HAL_ADC_IRQHandler+0x142>
}
 800299e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029a2:	2220      	movs	r2, #32
 80029a4:	4313      	orrs	r3, r2
 80029a6:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80029aa:	3a1f      	subs	r2, #31
 80029ac:	4313      	orrs	r3, r2
 80029ae:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80029b0:	e7c5      	b.n	800293e <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029b2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	4313      	orrs	r3, r2
 80029ba:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029bc:	0020      	movs	r0, r4
 80029be:	f7fe faa5 	bl	8000f0c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e7c3      	b.n	8002952 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80029ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	4313      	orrs	r3, r2
 80029d2:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80029d4:	0020      	movs	r0, r4
 80029d6:	f000 fc47 	bl	8003268 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	0052      	lsls	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e7ba      	b.n	800295a <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029e4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	02db      	lsls	r3, r3, #11
 80029ea:	4313      	orrs	r3, r2
 80029ec:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029ee:	0020      	movs	r0, r4
 80029f0:	f000 fc3b 	bl	800326a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e7b1      	b.n	8002962 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80029fe:	0020      	movs	r0, r4
 8002a00:	f000 fc35 	bl	800326e <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	2280      	movs	r2, #128	@ 0x80
 8002a08:	0192      	lsls	r2, r2, #6
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	e7c7      	b.n	800299e <HAL_ADC_IRQHandler+0xe2>
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	fffffefe 	.word	0xfffffefe

08002a14 <HAL_ADC_ConfigChannel>:
{
 8002a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a16:	b083      	sub	sp, #12
 8002a18:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a1e:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8002a20:	3354      	adds	r3, #84	@ 0x54
 8002a22:	5cc3      	ldrb	r3, [r0, r3]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d100      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x16>
 8002a28:	e11e      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x254>
 8002a2a:	2354      	movs	r3, #84	@ 0x54
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a30:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a32:	6883      	ldr	r3, [r0, #8]
 8002a34:	3203      	adds	r2, #3
 8002a36:	0017      	movs	r7, r2
 8002a38:	401f      	ands	r7, r3
 8002a3a:	421a      	tst	r2, r3
 8002a3c:	d009      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002a40:	321c      	adds	r2, #28
 8002a42:	4313      	orrs	r3, r2
 8002a44:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002a48:	2354      	movs	r3, #84	@ 0x54
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	54e2      	strb	r2, [r4, r3]
}
 8002a4e:	b003      	add	sp, #12
 8002a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8002a52:	684a      	ldr	r2, [r1, #4]
 8002a54:	2a02      	cmp	r2, #2
 8002a56:	d100      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x46>
 8002a58:	e0c4      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	439d      	bics	r5, r3
 8002a5e:	2680      	movs	r6, #128	@ 0x80
 8002a60:	0636      	lsls	r6, r6, #24
 8002a62:	42b5      	cmp	r5, r6
 8002a64:	d021      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a66:	231f      	movs	r3, #31
 8002a68:	401a      	ands	r2, r3
 8002a6a:	3b10      	subs	r3, #16
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8002a70:	439e      	bics	r6, r3
 8002a72:	680b      	ldr	r3, [r1, #0]
 8002a74:	035d      	lsls	r5, r3, #13
 8002a76:	d148      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0xf6>
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	0edf      	lsrs	r7, r3, #27
 8002a7c:	003b      	movs	r3, r7
 8002a7e:	4093      	lsls	r3, r2
 8002a80:	4333      	orrs	r3, r6
 8002a82:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a84:	684a      	ldr	r2, [r1, #4]
 8002a86:	0893      	lsrs	r3, r2, #2
 8002a88:	3301      	adds	r3, #1
 8002a8a:	69e5      	ldr	r5, [r4, #28]
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	d812      	bhi.n	8002ab6 <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 8002a90:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 8002a92:	251f      	movs	r5, #31
 8002a94:	4015      	ands	r5, r2
 8002a96:	680b      	ldr	r3, [r1, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	40ab      	lsls	r3, r5
 8002aa0:	40aa      	lsls	r2, r5
 8002aa2:	4396      	bics	r6, r2
 8002aa4:	4333      	orrs	r3, r6
 8002aa6:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8002aa8:	e005      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002aaa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	035b      	lsls	r3, r3, #13
 8002ab0:	0b5b      	lsrs	r3, r3, #13
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ab6:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002ab8:	6968      	ldr	r0, [r5, #20]
 8002aba:	680a      	ldr	r2, [r1, #0]
 8002abc:	0212      	lsls	r2, r2, #8
 8002abe:	688b      	ldr	r3, [r1, #8]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	4e6a      	ldr	r6, [pc, #424]	@ (8002c6c <HAL_ADC_ConfigChannel+0x258>)
 8002ac4:	4033      	ands	r3, r6
 8002ac6:	4390      	bics	r0, r2
 8002ac8:	4303      	orrs	r3, r0
 8002aca:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002acc:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ace:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	dab9      	bge.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ad4:	4a66      	ldr	r2, [pc, #408]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	25e0      	movs	r5, #224	@ 0xe0
 8002ada:	046d      	lsls	r5, r5, #17
 8002adc:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ade:	4965      	ldr	r1, [pc, #404]	@ (8002c74 <HAL_ADC_ConfigChannel+0x260>)
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d050      	beq.n	8002b86 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ae4:	4864      	ldr	r0, [pc, #400]	@ (8002c78 <HAL_ADC_ConfigChannel+0x264>)
 8002ae6:	4283      	cmp	r3, r0
 8002ae8:	d06e      	beq.n	8002bc8 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002aea:	4964      	ldr	r1, [pc, #400]	@ (8002c7c <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002aee:	428b      	cmp	r3, r1
 8002af0:	d1aa      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
 8002af2:	0252      	lsls	r2, r2, #9
 8002af4:	d4a8      	bmi.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002af6:	495e      	ldr	r1, [pc, #376]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002af8:	680b      	ldr	r3, [r1, #0]
 8002afa:	4a61      	ldr	r2, [pc, #388]	@ (8002c80 <HAL_ADC_ConfigChannel+0x26c>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	432b      	orrs	r3, r5
 8002b00:	2280      	movs	r2, #128	@ 0x80
 8002b02:	03d2      	lsls	r2, r2, #15
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
}
 8002b08:	e79e      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b0a:	07dd      	lsls	r5, r3, #31
 8002b0c:	d4b6      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b0e:	2701      	movs	r7, #1
 8002b10:	079d      	lsls	r5, r3, #30
 8002b12:	d4b3      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b14:	3701      	adds	r7, #1
 8002b16:	075d      	lsls	r5, r3, #29
 8002b18:	d4b0      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b1a:	3701      	adds	r7, #1
 8002b1c:	071d      	lsls	r5, r3, #28
 8002b1e:	d4ad      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b20:	3701      	adds	r7, #1
 8002b22:	06dd      	lsls	r5, r3, #27
 8002b24:	d4aa      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b26:	3701      	adds	r7, #1
 8002b28:	069d      	lsls	r5, r3, #26
 8002b2a:	d4a7      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b2c:	3701      	adds	r7, #1
 8002b2e:	065d      	lsls	r5, r3, #25
 8002b30:	d4a4      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b32:	3701      	adds	r7, #1
 8002b34:	061d      	lsls	r5, r3, #24
 8002b36:	d4a1      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b38:	3701      	adds	r7, #1
 8002b3a:	05dd      	lsls	r5, r3, #23
 8002b3c:	d49e      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b3e:	3701      	adds	r7, #1
 8002b40:	059d      	lsls	r5, r3, #22
 8002b42:	d49b      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b44:	3701      	adds	r7, #1
 8002b46:	055d      	lsls	r5, r3, #21
 8002b48:	d498      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b4a:	3701      	adds	r7, #1
 8002b4c:	051d      	lsls	r5, r3, #20
 8002b4e:	d495      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b50:	3701      	adds	r7, #1
 8002b52:	04dd      	lsls	r5, r3, #19
 8002b54:	d492      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b56:	3701      	adds	r7, #1
 8002b58:	049d      	lsls	r5, r3, #18
 8002b5a:	d48f      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b5c:	3701      	adds	r7, #1
 8002b5e:	045d      	lsls	r5, r3, #17
 8002b60:	d48c      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b62:	3701      	adds	r7, #1
 8002b64:	041d      	lsls	r5, r3, #16
 8002b66:	d489      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b68:	3701      	adds	r7, #1
 8002b6a:	03dd      	lsls	r5, r3, #15
 8002b6c:	d486      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b6e:	3701      	adds	r7, #1
 8002b70:	039d      	lsls	r5, r3, #14
 8002b72:	d483      	bmi.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b74:	2580      	movs	r5, #128	@ 0x80
 8002b76:	02ed      	lsls	r5, r5, #11
 8002b78:	001f      	movs	r7, r3
 8002b7a:	402f      	ands	r7, r5
 8002b7c:	422b      	tst	r3, r5
 8002b7e:	d100      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x16e>
 8002b80:	e77c      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
 8002b82:	2712      	movs	r7, #18
 8002b84:	e77a      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b86:	0212      	lsls	r2, r2, #8
 8002b88:	d500      	bpl.n	8002b8c <HAL_ADC_ConfigChannel+0x178>
 8002b8a:	e75d      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b8c:	4938      	ldr	r1, [pc, #224]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002b8e:	680b      	ldr	r3, [r1, #0]
 8002b90:	4a3b      	ldr	r2, [pc, #236]	@ (8002c80 <HAL_ADC_ConfigChannel+0x26c>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	432b      	orrs	r3, r5
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0412      	lsls	r2, r2, #16
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9e:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <HAL_ADC_ConfigChannel+0x270>)
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	4939      	ldr	r1, [pc, #228]	@ (8002c88 <HAL_ADC_ConfigChannel+0x274>)
 8002ba4:	f7fd fab6 	bl	8000114 <__udivsi3>
 8002ba8:	3001      	adds	r0, #1
 8002baa:	0043      	lsls	r3, r0, #1
 8002bac:	181b      	adds	r3, r3, r0
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d055      	beq.n	8002c64 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8002bb8:	9b01      	ldr	r3, [sp, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002bbe:	9b01      	ldr	r3, [sp, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	e73f      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
 8002bc8:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bca:	01d2      	lsls	r2, r2, #7
 8002bcc:	d500      	bpl.n	8002bd0 <HAL_ADC_ConfigChannel+0x1bc>
 8002bce:	e73b      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
 8002bd0:	4927      	ldr	r1, [pc, #156]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002bd2:	680b      	ldr	r3, [r1, #0]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <HAL_ADC_ConfigChannel+0x26c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	432b      	orrs	r3, r5
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	0452      	lsls	r2, r2, #17
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
}
 8002be2:	e731      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002be4:	2304      	movs	r3, #4
 8002be6:	439d      	bics	r5, r3
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	429d      	cmp	r5, r3
 8002bee:	d01c      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bf0:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf2:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db00      	blt.n	8002bfa <HAL_ADC_ConfigChannel+0x1e6>
 8002bf8:	e726      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002bfc:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfe:	491d      	ldr	r1, [pc, #116]	@ (8002c74 <HAL_ADC_ConfigChannel+0x260>)
 8002c00:	428b      	cmp	r3, r1
 8002c02:	d019      	beq.n	8002c38 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c04:	491c      	ldr	r1, [pc, #112]	@ (8002c78 <HAL_ADC_ConfigChannel+0x264>)
 8002c06:	428b      	cmp	r3, r1
 8002c08:	d021      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c0a:	491c      	ldr	r1, [pc, #112]	@ (8002c7c <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0c:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c0e:	428b      	cmp	r3, r1
 8002c10:	d000      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0x200>
 8002c12:	e719      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c14:	4816      	ldr	r0, [pc, #88]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002c16:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c18:	23c0      	movs	r3, #192	@ 0xc0
 8002c1a:	045b      	lsls	r3, r3, #17
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <HAL_ADC_ConfigChannel+0x26c>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	4313      	orrs	r3, r2
 8002c24:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c26:	2000      	movs	r0, #0
}
 8002c28:	e70e      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c2a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002c2c:	680b      	ldr	r3, [r1, #0]
 8002c2e:	035b      	lsls	r3, r3, #13
 8002c30:	0b5b      	lsrs	r3, r3, #13
 8002c32:	439a      	bics	r2, r3
 8002c34:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8002c36:	e7db      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c38:	480d      	ldr	r0, [pc, #52]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002c3a:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c3c:	23a0      	movs	r3, #160	@ 0xa0
 8002c3e:	045b      	lsls	r3, r3, #17
 8002c40:	4013      	ands	r3, r2
 8002c42:	4a0f      	ldr	r2, [pc, #60]	@ (8002c80 <HAL_ADC_ConfigChannel+0x26c>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	4313      	orrs	r3, r2
 8002c48:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4a:	2000      	movs	r0, #0
}
 8002c4c:	e6fc      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c4e:	4808      	ldr	r0, [pc, #32]	@ (8002c70 <HAL_ADC_ConfigChannel+0x25c>)
 8002c50:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c52:	23c0      	movs	r3, #192	@ 0xc0
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	4013      	ands	r3, r2
 8002c58:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <HAL_ADC_ConfigChannel+0x26c>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c60:	2000      	movs	r0, #0
}
 8002c62:	e6f1      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
 8002c64:	2000      	movs	r0, #0
 8002c66:	e6ef      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8002c68:	2002      	movs	r0, #2
 8002c6a:	e6f0      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x3a>
 8002c6c:	07ffff00 	.word	0x07ffff00
 8002c70:	40012708 	.word	0x40012708
 8002c74:	b0001000 	.word	0xb0001000
 8002c78:	b8004000 	.word	0xb8004000
 8002c7c:	b4002000 	.word	0xb4002000
 8002c80:	fe3fffff 	.word	0xfe3fffff
 8002c84:	20000018 	.word	0x20000018
 8002c88:	00030d40 	.word	0x00030d40

08002c8c <ADC_Enable>:
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c96:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c98:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	07d2      	lsls	r2, r2, #31
 8002c9e:	d434      	bmi.n	8002d0a <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d54 <ADC_Enable+0xc8>)
 8002ca4:	4211      	tst	r1, r2
 8002ca6:	d127      	bne.n	8002cf8 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	492b      	ldr	r1, [pc, #172]	@ (8002d58 <ADC_Enable+0xcc>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cb4:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <ADC_Enable+0xd0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	d50f      	bpl.n	8002cdc <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbc:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <ADC_Enable+0xd4>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	4928      	ldr	r1, [pc, #160]	@ (8002d64 <ADC_Enable+0xd8>)
 8002cc2:	f7fd fa27 	bl	8000114 <__udivsi3>
 8002cc6:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002cc8:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8002cca:	9b01      	ldr	r3, [sp, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <ADC_Enable+0x50>
        wait_loop_index--;
 8002cd0:	9b01      	ldr	r3, [sp, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002cdc:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8002cde:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d012      	beq.n	8002d0a <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8002ce4:	f7ff fc74 	bl	80025d0 <HAL_GetTick>
 8002ce8:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	07d2      	lsls	r2, r2, #31
 8002cf0:	d42d      	bmi.n	8002d4e <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf2:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8002cf4:	4f18      	ldr	r7, [pc, #96]	@ (8002d58 <ADC_Enable+0xcc>)
 8002cf6:	e00e      	b.n	8002d16 <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d00:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d02:	3a0f      	subs	r2, #15
 8002d04:	4313      	orrs	r3, r2
 8002d06:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8002d08:	3001      	adds	r0, #1
}
 8002d0a:	b003      	add	sp, #12
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4215      	tst	r5, r2
 8002d14:	d119      	bne.n	8002d4a <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4215      	tst	r5, r2
 8002d1a:	d103      	bne.n	8002d24 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	403a      	ands	r2, r7
 8002d20:	432a      	orrs	r2, r5
 8002d22:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d24:	f7ff fc54 	bl	80025d0 <HAL_GetTick>
 8002d28:	1b80      	subs	r0, r0, r6
 8002d2a:	2802      	cmp	r0, #2
 8002d2c:	d9ef      	bls.n	8002d0e <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	421d      	tst	r5, r3
 8002d34:	d1eb      	bne.n	8002d0e <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d38:	2210      	movs	r2, #16
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d40:	3a0f      	subs	r2, #15
 8002d42:	4313      	orrs	r3, r2
 8002d44:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
 8002d48:	e7df      	b.n	8002d0a <ADC_Enable+0x7e>
  return HAL_OK;
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e7dd      	b.n	8002d0a <ADC_Enable+0x7e>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e7db      	b.n	8002d0a <ADC_Enable+0x7e>
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	80000017 	.word	0x80000017
 8002d58:	7fffffe8 	.word	0x7fffffe8
 8002d5c:	40012708 	.word	0x40012708
 8002d60:	20000018 	.word	0x20000018
 8002d64:	00030d40 	.word	0x00030d40

08002d68 <HAL_ADC_Start_DMA>:
{
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	0004      	movs	r4, r0
 8002d6c:	000d      	movs	r5, r1
 8002d6e:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d70:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d72:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 8002d74:	2002      	movs	r0, #2
 8002d76:	075b      	lsls	r3, r3, #29
 8002d78:	d41c      	bmi.n	8002db4 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8002d7a:	2354      	movs	r3, #84	@ 0x54
 8002d7c:	5ce3      	ldrb	r3, [r4, r3]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d044      	beq.n	8002e0c <HAL_ADC_Start_DMA+0xa4>
 8002d82:	2301      	movs	r3, #1
 8002d84:	2154      	movs	r1, #84	@ 0x54
 8002d86:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002d88:	68d1      	ldr	r1, [r2, #12]
 8002d8a:	420b      	tst	r3, r1
 8002d8c:	d10d      	bne.n	8002daa <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8e:	6893      	ldr	r3, [r2, #8]
 8002d90:	07db      	lsls	r3, r3, #31
 8002d92:	d505      	bpl.n	8002da0 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 8002d94:	6893      	ldr	r3, [r2, #8]
 8002d96:	491e      	ldr	r1, [pc, #120]	@ (8002e10 <HAL_ADC_Start_DMA+0xa8>)
 8002d98:	400b      	ands	r3, r1
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	68d3      	ldr	r3, [r2, #12]
 8002da4:	2101      	movs	r1, #1
 8002da6:	430b      	orrs	r3, r1
 8002da8:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8002daa:	0020      	movs	r0, r4
 8002dac:	f7ff ff6e 	bl	8002c8c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d000      	beq.n	8002db6 <HAL_ADC_Start_DMA+0x4e>
}
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002db6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <HAL_ADC_Start_DMA+0xac>)
 8002dba:	401a      	ands	r2, r3
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dc8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002dca:	4913      	ldr	r1, [pc, #76]	@ (8002e18 <HAL_ADC_Start_DMA+0xb0>)
 8002dcc:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dce:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002dd0:	4912      	ldr	r1, [pc, #72]	@ (8002e1c <HAL_ADC_Start_DMA+0xb4>)
 8002dd2:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dd4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002dd6:	4912      	ldr	r1, [pc, #72]	@ (8002e20 <HAL_ADC_Start_DMA+0xb8>)
 8002dd8:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	211c      	movs	r1, #28
 8002dde:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002de0:	2254      	movs	r2, #84	@ 0x54
 8002de2:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	6853      	ldr	r3, [r2, #4]
 8002de8:	390c      	subs	r1, #12
 8002dea:	430b      	orrs	r3, r1
 8002dec:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dee:	6821      	ldr	r1, [r4, #0]
 8002df0:	3140      	adds	r1, #64	@ 0x40
 8002df2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002df4:	0033      	movs	r3, r6
 8002df6:	002a      	movs	r2, r5
 8002df8:	f000 fb36 	bl	8003468 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002dfc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002dfe:	6893      	ldr	r3, [r2, #8]
 8002e00:	4903      	ldr	r1, [pc, #12]	@ (8002e10 <HAL_ADC_Start_DMA+0xa8>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	2104      	movs	r1, #4
 8002e06:	430b      	orrs	r3, r1
 8002e08:	6093      	str	r3, [r2, #8]
}
 8002e0a:	e7d3      	b.n	8002db4 <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8002e0c:	2002      	movs	r0, #2
 8002e0e:	e7d1      	b.n	8002db4 <HAL_ADC_Start_DMA+0x4c>
 8002e10:	7fffffe8 	.word	0x7fffffe8
 8002e14:	fffff0fe 	.word	0xfffff0fe
 8002e18:	0800283d 	.word	0x0800283d
 8002e1c:	08002815 	.word	0x08002815
 8002e20:	08002821 	.word	0x08002821

08002e24 <ADC_Disable>:
{
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e28:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e2a:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e2c:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002e2e:	2000      	movs	r0, #0
 8002e30:	07d2      	lsls	r2, r2, #31
 8002e32:	d50f      	bpl.n	8002e54 <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e34:	0789      	lsls	r1, r1, #30
 8002e36:	d40d      	bmi.n	8002e54 <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	2205      	movs	r2, #5
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	2a01      	cmp	r2, #1
 8002e40:	d009      	beq.n	8002e56 <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e44:	2210      	movs	r2, #16
 8002e46:	4313      	orrs	r3, r2
 8002e48:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e4c:	3a0f      	subs	r2, #15
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
}
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4915      	ldr	r1, [pc, #84]	@ (8002eb0 <ADC_Disable+0x8c>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	2203      	movs	r2, #3
 8002e66:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002e68:	f7ff fbb2 	bl	80025d0 <HAL_GetTick>
 8002e6c:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e72:	2501      	movs	r5, #1
  return HAL_OK;
 8002e74:	2000      	movs	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e76:	07db      	lsls	r3, r3, #31
 8002e78:	d404      	bmi.n	8002e84 <ADC_Disable+0x60>
 8002e7a:	e7eb      	b.n	8002e54 <ADC_Disable+0x30>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	421d      	tst	r5, r3
 8002e82:	d012      	beq.n	8002eaa <ADC_Disable+0x86>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e84:	f7ff fba4 	bl	80025d0 <HAL_GetTick>
 8002e88:	1b80      	subs	r0, r0, r6
 8002e8a:	2802      	cmp	r0, #2
 8002e8c:	d9f6      	bls.n	8002e7c <ADC_Disable+0x58>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	421d      	tst	r5, r3
 8002e94:	d0f2      	beq.n	8002e7c <ADC_Disable+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e98:	2210      	movs	r2, #16
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002ea0:	3a0f      	subs	r2, #15
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	e7d4      	b.n	8002e54 <ADC_Disable+0x30>
  return HAL_OK;
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e7d2      	b.n	8002e54 <ADC_Disable+0x30>
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	7fffffe8 	.word	0x7fffffe8

08002eb4 <HAL_ADC_AnalogWDGConfig>:
{
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	0004      	movs	r4, r0
 8002eb8:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8002eba:	2354      	movs	r3, #84	@ 0x54
 8002ebc:	5cc3      	ldrb	r3, [r0, r3]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d100      	bne.n	8002ec4 <HAL_ADC_AnalogWDGConfig+0x10>
 8002ec2:	e1bc      	b.n	800323e <HAL_ADC_AnalogWDGConfig+0x38a>
 8002ec4:	2354      	movs	r3, #84	@ 0x54
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eca:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ecc:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ece:	2000      	movs	r0, #0
 8002ed0:	0752      	lsls	r2, r2, #29
 8002ed2:	d500      	bpl.n	8002ed6 <HAL_ADC_AnalogWDGConfig+0x22>
 8002ed4:	e15e      	b.n	8003194 <HAL_ADC_AnalogWDGConfig+0x2e0>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ed6:	680a      	ldr	r2, [r1, #0]
 8002ed8:	4998      	ldr	r1, [pc, #608]	@ (800313c <HAL_ADC_AnalogWDGConfig+0x288>)
 8002eda:	428a      	cmp	r2, r1
 8002edc:	d01b      	beq.n	8002f16 <HAL_ADC_AnalogWDGConfig+0x62>
      switch (pAnalogWDGConfig->WatchdogMode)
 8002ede:	6869      	ldr	r1, [r5, #4]
 8002ee0:	2080      	movs	r0, #128	@ 0x80
 8002ee2:	0400      	lsls	r0, r0, #16
 8002ee4:	4281      	cmp	r1, r0
 8002ee6:	d100      	bne.n	8002eea <HAL_ADC_AnalogWDGConfig+0x36>
 8002ee8:	e132      	b.n	8003150 <HAL_ADC_AnalogWDGConfig+0x29c>
 8002eea:	20c0      	movs	r0, #192	@ 0xc0
 8002eec:	0400      	lsls	r0, r0, #16
 8002eee:	4281      	cmp	r1, r0
 8002ef0:	d000      	beq.n	8002ef4 <HAL_ADC_AnalogWDGConfig+0x40>
 8002ef2:	e169      	b.n	80031c8 <HAL_ADC_AnalogWDGConfig+0x314>
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002ef4:	4992      	ldr	r1, [pc, #584]	@ (8003140 <HAL_ADC_AnalogWDGConfig+0x28c>)
 8002ef6:	428a      	cmp	r2, r1
 8002ef8:	d059      	beq.n	8002fae <HAL_ADC_AnalogWDGConfig+0xfa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8002efa:	22a4      	movs	r2, #164	@ 0xa4
 8002efc:	589e      	ldr	r6, [r3, r2]
 8002efe:	68aa      	ldr	r2, [r5, #8]
 8002f00:	0351      	lsls	r1, r2, #13
 8002f02:	d000      	beq.n	8002f06 <HAL_ADC_AnalogWDGConfig+0x52>
 8002f04:	e0b9      	b.n	800307a <HAL_ADC_AnalogWDGConfig+0x1c6>
 8002f06:	0050      	lsls	r0, r2, #1
 8002f08:	0ec0      	lsrs	r0, r0, #27
 8002f0a:	3101      	adds	r1, #1
 8002f0c:	4081      	lsls	r1, r0
 8002f0e:	430e      	orrs	r6, r1
 8002f10:	21a4      	movs	r1, #164	@ 0xa4
 8002f12:	505e      	str	r6, [r3, r1]
 8002f14:	e129      	b.n	800316a <HAL_ADC_AnalogWDGConfig+0x2b6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	0016      	movs	r6, r2
 8002f1c:	401e      	ands	r6, r3
 8002f1e:	421a      	tst	r2, r3
 8002f20:	d002      	beq.n	8002f28 <HAL_ADC_AnalogWDGConfig+0x74>
        tmp_hal_status = ADC_Disable(hadc);
 8002f22:	0020      	movs	r0, r4
 8002f24:	f7ff ff7e 	bl	8002e24 <ADC_Disable>
      switch (pAnalogWDGConfig->WatchdogMode)
 8002f28:	686b      	ldr	r3, [r5, #4]
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	0412      	lsls	r2, r2, #16
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_ADC_AnalogWDGConfig+0xc4>
 8002f32:	22c0      	movs	r2, #192	@ 0xc0
 8002f34:	0412      	lsls	r2, r2, #16
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d127      	bne.n	8002f8a <HAL_ADC_AnalogWDGConfig+0xd6>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8002f3a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(*preg,
 8002f3c:	68ca      	ldr	r2, [r1, #12]
 8002f3e:	68ab      	ldr	r3, [r5, #8]
 8002f40:	27f8      	movs	r7, #248	@ 0xf8
 8002f42:	05ff      	lsls	r7, r7, #23
 8002f44:	403b      	ands	r3, r7
 8002f46:	4f7f      	ldr	r7, [pc, #508]	@ (8003144 <HAL_ADC_AnalogWDGConfig+0x290>)
 8002f48:	403a      	ands	r2, r7
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	22c0      	movs	r2, #192	@ 0xc0
 8002f4e:	0412      	lsls	r2, r2, #16
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
      if (backup_setting_adc_enable_state == 1UL)
 8002f54:	2e01      	cmp	r6, #1
 8002f56:	d01e      	beq.n	8002f96 <HAL_ADC_AnalogWDGConfig+0xe2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8003148 <HAL_ADC_AnalogWDGConfig+0x294>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	65a3      	str	r3, [r4, #88]	@ 0x58
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002f60:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	601a      	str	r2, [r3, #0]
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8002f66:	7b2b      	ldrb	r3, [r5, #12]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_ADC_AnalogWDGConfig+0xee>
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002f6c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002f6e:	6853      	ldr	r3, [r2, #4]
 8002f70:	2180      	movs	r1, #128	@ 0x80
 8002f72:	438b      	bics	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]
}
 8002f76:	e10d      	b.n	8003194 <HAL_ADC_AnalogWDGConfig+0x2e0>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002f78:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(*preg,
 8002f7a:	68ca      	ldr	r2, [r1, #12]
 8002f7c:	4b71      	ldr	r3, [pc, #452]	@ (8003144 <HAL_ADC_AnalogWDGConfig+0x290>)
 8002f7e:	401a      	ands	r2, r3
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
}
 8002f88:	e7e4      	b.n	8002f54 <HAL_ADC_AnalogWDGConfig+0xa0>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002f8a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(*preg,
 8002f8c:	68d3      	ldr	r3, [r2, #12]
 8002f8e:	496d      	ldr	r1, [pc, #436]	@ (8003144 <HAL_ADC_AnalogWDGConfig+0x290>)
 8002f90:	400b      	ands	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	e7de      	b.n	8002f54 <HAL_ADC_AnalogWDGConfig+0xa0>
        if (tmp_hal_status == HAL_OK)
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d1de      	bne.n	8002f58 <HAL_ADC_AnalogWDGConfig+0xa4>
          tmp_hal_status = ADC_Enable(hadc);
 8002f9a:	0020      	movs	r0, r4
 8002f9c:	f7ff fe76 	bl	8002c8c <ADC_Enable>
 8002fa0:	e7da      	b.n	8002f58 <HAL_ADC_AnalogWDGConfig+0xa4>
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002fa2:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002fa4:	6853      	ldr	r3, [r2, #4]
 8002fa6:	2180      	movs	r1, #128	@ 0x80
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6053      	str	r3, [r2, #4]
}
 8002fac:	e0f2      	b.n	8003194 <HAL_ADC_AnalogWDGConfig+0x2e0>
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8002fae:	22a0      	movs	r2, #160	@ 0xa0
 8002fb0:	589e      	ldr	r6, [r3, r2]
 8002fb2:	68aa      	ldr	r2, [r5, #8]
 8002fb4:	0351      	lsls	r1, r2, #13
 8002fb6:	d107      	bne.n	8002fc8 <HAL_ADC_AnalogWDGConfig+0x114>
 8002fb8:	0050      	lsls	r0, r2, #1
 8002fba:	0ec0      	lsrs	r0, r0, #27
 8002fbc:	3101      	adds	r1, #1
 8002fbe:	4081      	lsls	r1, r0
 8002fc0:	430e      	orrs	r6, r1
 8002fc2:	21a0      	movs	r1, #160	@ 0xa0
 8002fc4:	505e      	str	r6, [r3, r1]
 8002fc6:	e0d0      	b.n	800316a <HAL_ADC_AnalogWDGConfig+0x2b6>
 8002fc8:	2001      	movs	r0, #1
 8002fca:	0001      	movs	r1, r0
 8002fcc:	4011      	ands	r1, r2
 8002fce:	4210      	tst	r0, r2
 8002fd0:	d1f6      	bne.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	0790      	lsls	r0, r2, #30
 8002fd6:	d4f3      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002fd8:	3102      	adds	r1, #2
 8002fda:	0750      	lsls	r0, r2, #29
 8002fdc:	d4f0      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002fde:	3104      	adds	r1, #4
 8002fe0:	0710      	lsls	r0, r2, #28
 8002fe2:	d4ed      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002fe4:	3108      	adds	r1, #8
 8002fe6:	06d0      	lsls	r0, r2, #27
 8002fe8:	d4ea      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002fea:	3110      	adds	r1, #16
 8002fec:	0690      	lsls	r0, r2, #26
 8002fee:	d4e7      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002ff0:	3120      	adds	r1, #32
 8002ff2:	0650      	lsls	r0, r2, #25
 8002ff4:	d4e4      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002ff6:	3140      	adds	r1, #64	@ 0x40
 8002ff8:	0610      	lsls	r0, r2, #24
 8002ffa:	d4e1      	bmi.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8002ffc:	05d1      	lsls	r1, r2, #23
 8002ffe:	d41e      	bmi.n	800303e <HAL_ADC_AnalogWDGConfig+0x18a>
 8003000:	0591      	lsls	r1, r2, #22
 8003002:	d41f      	bmi.n	8003044 <HAL_ADC_AnalogWDGConfig+0x190>
 8003004:	0551      	lsls	r1, r2, #21
 8003006:	d420      	bmi.n	800304a <HAL_ADC_AnalogWDGConfig+0x196>
 8003008:	0511      	lsls	r1, r2, #20
 800300a:	d421      	bmi.n	8003050 <HAL_ADC_AnalogWDGConfig+0x19c>
 800300c:	04d1      	lsls	r1, r2, #19
 800300e:	d422      	bmi.n	8003056 <HAL_ADC_AnalogWDGConfig+0x1a2>
 8003010:	0491      	lsls	r1, r2, #18
 8003012:	d423      	bmi.n	800305c <HAL_ADC_AnalogWDGConfig+0x1a8>
 8003014:	0451      	lsls	r1, r2, #17
 8003016:	d424      	bmi.n	8003062 <HAL_ADC_AnalogWDGConfig+0x1ae>
 8003018:	0411      	lsls	r1, r2, #16
 800301a:	d425      	bmi.n	8003068 <HAL_ADC_AnalogWDGConfig+0x1b4>
 800301c:	03d1      	lsls	r1, r2, #15
 800301e:	d426      	bmi.n	800306e <HAL_ADC_AnalogWDGConfig+0x1ba>
 8003020:	0391      	lsls	r1, r2, #14
 8003022:	d427      	bmi.n	8003074 <HAL_ADC_AnalogWDGConfig+0x1c0>
 8003024:	2180      	movs	r1, #128	@ 0x80
 8003026:	02c9      	lsls	r1, r1, #11
 8003028:	400a      	ands	r2, r1
 800302a:	4251      	negs	r1, r2
 800302c:	414a      	adcs	r2, r1
 800302e:	4252      	negs	r2, r2
 8003030:	4946      	ldr	r1, [pc, #280]	@ (800314c <HAL_ADC_AnalogWDGConfig+0x298>)
 8003032:	4011      	ands	r1, r2
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	02d2      	lsls	r2, r2, #11
 8003038:	4694      	mov	ip, r2
 800303a:	4461      	add	r1, ip
 800303c:	e7c0      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 800303e:	2180      	movs	r1, #128	@ 0x80
 8003040:	0049      	lsls	r1, r1, #1
 8003042:	e7bd      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	0089      	lsls	r1, r1, #2
 8003048:	e7ba      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 800304a:	2180      	movs	r1, #128	@ 0x80
 800304c:	00c9      	lsls	r1, r1, #3
 800304e:	e7b7      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8003050:	2180      	movs	r1, #128	@ 0x80
 8003052:	0109      	lsls	r1, r1, #4
 8003054:	e7b4      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8003056:	2180      	movs	r1, #128	@ 0x80
 8003058:	0149      	lsls	r1, r1, #5
 800305a:	e7b1      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 800305c:	2180      	movs	r1, #128	@ 0x80
 800305e:	0189      	lsls	r1, r1, #6
 8003060:	e7ae      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8003062:	2180      	movs	r1, #128	@ 0x80
 8003064:	01c9      	lsls	r1, r1, #7
 8003066:	e7ab      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8003068:	2180      	movs	r1, #128	@ 0x80
 800306a:	0209      	lsls	r1, r1, #8
 800306c:	e7a8      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 800306e:	2180      	movs	r1, #128	@ 0x80
 8003070:	0249      	lsls	r1, r1, #9
 8003072:	e7a5      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	0289      	lsls	r1, r1, #10
 8003078:	e7a2      	b.n	8002fc0 <HAL_ADC_AnalogWDGConfig+0x10c>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800307a:	2001      	movs	r0, #1
 800307c:	0001      	movs	r1, r0
 800307e:	4011      	ands	r1, r2
 8003080:	4210      	tst	r0, r2
 8003082:	d000      	beq.n	8003086 <HAL_ADC_AnalogWDGConfig+0x1d2>
 8003084:	e743      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003086:	2102      	movs	r1, #2
 8003088:	0790      	lsls	r0, r2, #30
 800308a:	d500      	bpl.n	800308e <HAL_ADC_AnalogWDGConfig+0x1da>
 800308c:	e73f      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 800308e:	3102      	adds	r1, #2
 8003090:	0750      	lsls	r0, r2, #29
 8003092:	d500      	bpl.n	8003096 <HAL_ADC_AnalogWDGConfig+0x1e2>
 8003094:	e73b      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003096:	3104      	adds	r1, #4
 8003098:	0710      	lsls	r0, r2, #28
 800309a:	d500      	bpl.n	800309e <HAL_ADC_AnalogWDGConfig+0x1ea>
 800309c:	e737      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 800309e:	3108      	adds	r1, #8
 80030a0:	06d0      	lsls	r0, r2, #27
 80030a2:	d500      	bpl.n	80030a6 <HAL_ADC_AnalogWDGConfig+0x1f2>
 80030a4:	e733      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 80030a6:	3110      	adds	r1, #16
 80030a8:	0690      	lsls	r0, r2, #26
 80030aa:	d500      	bpl.n	80030ae <HAL_ADC_AnalogWDGConfig+0x1fa>
 80030ac:	e72f      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 80030ae:	3120      	adds	r1, #32
 80030b0:	0650      	lsls	r0, r2, #25
 80030b2:	d500      	bpl.n	80030b6 <HAL_ADC_AnalogWDGConfig+0x202>
 80030b4:	e72b      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 80030b6:	3140      	adds	r1, #64	@ 0x40
 80030b8:	0610      	lsls	r0, r2, #24
 80030ba:	d500      	bpl.n	80030be <HAL_ADC_AnalogWDGConfig+0x20a>
 80030bc:	e727      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 80030be:	05d1      	lsls	r1, r2, #23
 80030c0:	d41e      	bmi.n	8003100 <HAL_ADC_AnalogWDGConfig+0x24c>
 80030c2:	0591      	lsls	r1, r2, #22
 80030c4:	d41f      	bmi.n	8003106 <HAL_ADC_AnalogWDGConfig+0x252>
 80030c6:	0551      	lsls	r1, r2, #21
 80030c8:	d420      	bmi.n	800310c <HAL_ADC_AnalogWDGConfig+0x258>
 80030ca:	0511      	lsls	r1, r2, #20
 80030cc:	d421      	bmi.n	8003112 <HAL_ADC_AnalogWDGConfig+0x25e>
 80030ce:	04d1      	lsls	r1, r2, #19
 80030d0:	d422      	bmi.n	8003118 <HAL_ADC_AnalogWDGConfig+0x264>
 80030d2:	0491      	lsls	r1, r2, #18
 80030d4:	d423      	bmi.n	800311e <HAL_ADC_AnalogWDGConfig+0x26a>
 80030d6:	0451      	lsls	r1, r2, #17
 80030d8:	d424      	bmi.n	8003124 <HAL_ADC_AnalogWDGConfig+0x270>
 80030da:	0411      	lsls	r1, r2, #16
 80030dc:	d425      	bmi.n	800312a <HAL_ADC_AnalogWDGConfig+0x276>
 80030de:	03d1      	lsls	r1, r2, #15
 80030e0:	d426      	bmi.n	8003130 <HAL_ADC_AnalogWDGConfig+0x27c>
 80030e2:	0391      	lsls	r1, r2, #14
 80030e4:	d427      	bmi.n	8003136 <HAL_ADC_AnalogWDGConfig+0x282>
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	02c9      	lsls	r1, r1, #11
 80030ea:	400a      	ands	r2, r1
 80030ec:	4251      	negs	r1, r2
 80030ee:	414a      	adcs	r2, r1
 80030f0:	4252      	negs	r2, r2
 80030f2:	4916      	ldr	r1, [pc, #88]	@ (800314c <HAL_ADC_AnalogWDGConfig+0x298>)
 80030f4:	4011      	ands	r1, r2
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	02d2      	lsls	r2, r2, #11
 80030fa:	4694      	mov	ip, r2
 80030fc:	4461      	add	r1, ip
 80030fe:	e706      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	0049      	lsls	r1, r1, #1
 8003104:	e703      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	0089      	lsls	r1, r1, #2
 800310a:	e700      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 800310c:	2180      	movs	r1, #128	@ 0x80
 800310e:	00c9      	lsls	r1, r1, #3
 8003110:	e6fd      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003112:	2180      	movs	r1, #128	@ 0x80
 8003114:	0109      	lsls	r1, r1, #4
 8003116:	e6fa      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003118:	2180      	movs	r1, #128	@ 0x80
 800311a:	0149      	lsls	r1, r1, #5
 800311c:	e6f7      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 800311e:	2180      	movs	r1, #128	@ 0x80
 8003120:	0189      	lsls	r1, r1, #6
 8003122:	e6f4      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	01c9      	lsls	r1, r1, #7
 8003128:	e6f1      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	0209      	lsls	r1, r1, #8
 800312e:	e6ee      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	0249      	lsls	r1, r1, #9
 8003134:	e6eb      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	0289      	lsls	r1, r1, #10
 800313a:	e6e8      	b.n	8002f0e <HAL_ADC_AnalogWDGConfig+0x5a>
 800313c:	7cc00000 	.word	0x7cc00000
 8003140:	0017ffff 	.word	0x0017ffff
 8003144:	833fffff 	.word	0x833fffff
 8003148:	fffeffff 	.word	0xfffeffff
 800314c:	fffc0001 	.word	0xfffc0001
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8003150:	0cd1      	lsrs	r1, r2, #19
 8003152:	2004      	movs	r0, #4
 8003154:	4001      	ands	r1, r0
 8003156:	33a0      	adds	r3, #160	@ 0xa0
 8003158:	18cb      	adds	r3, r1, r3
  MODIFY_REG(*preg,
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	4839      	ldr	r0, [pc, #228]	@ (8003244 <HAL_ADC_AnalogWDGConfig+0x390>)
 800315e:	4010      	ands	r0, r2
 8003160:	4381      	bics	r1, r0
 8003162:	4839      	ldr	r0, [pc, #228]	@ (8003248 <HAL_ADC_AnalogWDGConfig+0x394>)
 8003164:	4002      	ands	r2, r0
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800316a:	4b38      	ldr	r3, [pc, #224]	@ (800324c <HAL_ADC_AnalogWDGConfig+0x398>)
 800316c:	682a      	ldr	r2, [r5, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d035      	beq.n	80031de <HAL_ADC_AnalogWDGConfig+0x32a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003172:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003174:	4a36      	ldr	r2, [pc, #216]	@ (8003250 <HAL_ADC_AnalogWDGConfig+0x39c>)
 8003176:	4013      	ands	r3, r2
 8003178:	65a3      	str	r3, [r4, #88]	@ 0x58
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800317a:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	601a      	str	r2, [r3, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8003182:	7b2b      	ldrb	r3, [r5, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d043      	beq.n	8003210 <HAL_ADC_AnalogWDGConfig+0x35c>
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8003188:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800318a:	6853      	ldr	r3, [r2, #4]
 800318c:	4931      	ldr	r1, [pc, #196]	@ (8003254 <HAL_ADC_AnalogWDGConfig+0x3a0>)
 800318e:	400b      	ands	r3, r1
 8003190:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003192:	2000      	movs	r0, #0
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003194:	682a      	ldr	r2, [r5, #0]
 8003196:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <HAL_ADC_AnalogWDGConfig+0x3a4>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d041      	beq.n	8003220 <HAL_ADC_AnalogWDGConfig+0x36c>
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 800319c:	6929      	ldr	r1, [r5, #16]
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 800319e:	696d      	ldr	r5, [r5, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 80031a0:	0293      	lsls	r3, r2, #10
 80031a2:	0f9b      	lsrs	r3, r3, #30
 80031a4:	0292      	lsls	r2, r2, #10
 80031a6:	0fd2      	lsrs	r2, r2, #31
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	3220      	adds	r2, #32
 80031b0:	189b      	adds	r3, r3, r2
  MODIFY_REG(*preg,
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4e29      	ldr	r6, [pc, #164]	@ (800325c <HAL_ADC_AnalogWDGConfig+0x3a8>)
 80031b6:	4032      	ands	r2, r6
 80031b8:	432a      	orrs	r2, r5
 80031ba:	0409      	lsls	r1, r1, #16
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hadc);
 80031c0:	2354      	movs	r3, #84	@ 0x54
 80031c2:	2200      	movs	r2, #0
 80031c4:	54e2      	strb	r2, [r4, r3]
}
 80031c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 80031c8:	0cd1      	lsrs	r1, r2, #19
 80031ca:	2004      	movs	r0, #4
 80031cc:	4001      	ands	r1, r0
 80031ce:	33a0      	adds	r3, #160	@ 0xa0
 80031d0:	18cb      	adds	r3, r1, r3
  MODIFY_REG(*preg,
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	481b      	ldr	r0, [pc, #108]	@ (8003244 <HAL_ADC_AnalogWDGConfig+0x390>)
 80031d6:	4002      	ands	r2, r0
 80031d8:	4391      	bics	r1, r2
 80031da:	6019      	str	r1, [r3, #0]
}
 80031dc:	e7c5      	b.n	800316a <HAL_ADC_AnalogWDGConfig+0x2b6>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80031de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_ADC_AnalogWDGConfig+0x3ac>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	65a3      	str	r3, [r4, #88]	@ 0x58
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80031e6:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80031e8:	2280      	movs	r2, #128	@ 0x80
 80031ea:	0052      	lsls	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80031ee:	7b2b      	ldrb	r3, [r5, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d006      	beq.n	8003202 <HAL_ADC_AnalogWDGConfig+0x34e>
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80031f4:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80031f6:	6853      	ldr	r3, [r2, #4]
 80031f8:	491a      	ldr	r1, [pc, #104]	@ (8003264 <HAL_ADC_AnalogWDGConfig+0x3b0>)
 80031fa:	400b      	ands	r3, r1
 80031fc:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fe:	2000      	movs	r0, #0
}
 8003200:	e7c8      	b.n	8003194 <HAL_ADC_AnalogWDGConfig+0x2e0>
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8003202:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003204:	6851      	ldr	r1, [r2, #4]
 8003206:	33ff      	adds	r3, #255	@ 0xff
 8003208:	430b      	orrs	r3, r1
 800320a:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320c:	2000      	movs	r0, #0
}
 800320e:	e7c1      	b.n	8003194 <HAL_ADC_AnalogWDGConfig+0x2e0>
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8003210:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003212:	6851      	ldr	r1, [r2, #4]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	430b      	orrs	r3, r1
 800321a:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321c:	2000      	movs	r0, #0
}
 800321e:	e7b9      	b.n	8003194 <HAL_ADC_AnalogWDGConfig+0x2e0>
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8003220:	6827      	ldr	r7, [r4, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	08db      	lsrs	r3, r3, #3
 8003226:	2603      	movs	r6, #3
 8003228:	4033      	ands	r3, r6
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	6929      	ldr	r1, [r5, #16]
 800322e:	4099      	lsls	r1, r3
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	401e      	ands	r6, r3
 8003236:	0076      	lsls	r6, r6, #1
 8003238:	696d      	ldr	r5, [r5, #20]
 800323a:	40b5      	lsls	r5, r6
 800323c:	e7b0      	b.n	80031a0 <HAL_ADC_AnalogWDGConfig+0x2ec>
  __HAL_LOCK(hadc);
 800323e:	2002      	movs	r0, #2
 8003240:	e7c1      	b.n	80031c6 <HAL_ADC_AnalogWDGConfig+0x312>
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	7cc7ffff 	.word	0x7cc7ffff
 8003248:	0087ffff 	.word	0x0087ffff
 800324c:	0017ffff 	.word	0x0017ffff
 8003250:	fffbffff 	.word	0xfffbffff
 8003254:	fffffdff 	.word	0xfffffdff
 8003258:	7cc00000 	.word	0x7cc00000
 800325c:	f000f000 	.word	0xf000f000
 8003260:	fffdffff 	.word	0xfffdffff
 8003264:	fffffeff 	.word	0xfffffeff

08003268 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003268:	4770      	bx	lr

0800326a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800326a:	4770      	bx	lr

0800326c <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800326c:	4770      	bx	lr

0800326e <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800326e:	4770      	bx	lr

08003270 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003270:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003272:	2800      	cmp	r0, #0
 8003274:	db14      	blt.n	80032a0 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003276:	0884      	lsrs	r4, r0, #2
 8003278:	00a4      	lsls	r4, r4, #2
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <HAL_NVIC_SetPriority+0x5c>)
 800327c:	469c      	mov	ip, r3
 800327e:	4464      	add	r4, ip
 8003280:	26c0      	movs	r6, #192	@ 0xc0
 8003282:	00b6      	lsls	r6, r6, #2
 8003284:	59a5      	ldr	r5, [r4, r6]
 8003286:	2203      	movs	r2, #3
 8003288:	4002      	ands	r2, r0
 800328a:	00d2      	lsls	r2, r2, #3
 800328c:	23ff      	movs	r3, #255	@ 0xff
 800328e:	0018      	movs	r0, r3
 8003290:	4090      	lsls	r0, r2
 8003292:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003294:	0189      	lsls	r1, r1, #6
 8003296:	400b      	ands	r3, r1
 8003298:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800329a:	432b      	orrs	r3, r5
 800329c:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800329e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a0:	230f      	movs	r3, #15
 80032a2:	4003      	ands	r3, r0
 80032a4:	3b08      	subs	r3, #8
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_NVIC_SetPriority+0x60>)
 80032ac:	4694      	mov	ip, r2
 80032ae:	4463      	add	r3, ip
 80032b0:	69dc      	ldr	r4, [r3, #28]
 80032b2:	2203      	movs	r2, #3
 80032b4:	4010      	ands	r0, r2
 80032b6:	00c0      	lsls	r0, r0, #3
 80032b8:	32fc      	adds	r2, #252	@ 0xfc
 80032ba:	0015      	movs	r5, r2
 80032bc:	4085      	lsls	r5, r0
 80032be:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032c0:	0189      	lsls	r1, r1, #6
 80032c2:	400a      	ands	r2, r1
 80032c4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c6:	4322      	orrs	r2, r4
 80032c8:	61da      	str	r2, [r3, #28]
 80032ca:	e7e8      	b.n	800329e <HAL_NVIC_SetPriority+0x2e>
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032d4:	2800      	cmp	r0, #0
 80032d6:	db05      	blt.n	80032e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d8:	221f      	movs	r2, #31
 80032da:	4002      	ands	r2, r0
 80032dc:	2301      	movs	r3, #1
 80032de:	4093      	lsls	r3, r2
 80032e0:	4a01      	ldr	r2, [pc, #4]	@ (80032e8 <HAL_NVIC_EnableIRQ+0x14>)
 80032e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032e4:	4770      	bx	lr
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	e000e100 	.word	0xe000e100

080032ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ec:	3801      	subs	r0, #1
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	045b      	lsls	r3, r3, #17
 80032f2:	4298      	cmp	r0, r3
 80032f4:	d20f      	bcs.n	8003316 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <HAL_SYSTICK_Config+0x30>)
 80032f8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fa:	4809      	ldr	r0, [pc, #36]	@ (8003320 <HAL_SYSTICK_Config+0x34>)
 80032fc:	6a03      	ldr	r3, [r0, #32]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	21c0      	movs	r1, #192	@ 0xc0
 8003304:	0609      	lsls	r1, r1, #24
 8003306:	430b      	orrs	r3, r1
 8003308:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330a:	2300      	movs	r3, #0
 800330c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	3307      	adds	r3, #7
 8003310:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003312:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003314:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003316:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8003318:	e7fc      	b.n	8003314 <HAL_SYSTICK_Config+0x28>
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	e000e010 	.word	0xe000e010
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003326:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003328:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 800332a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800332c:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800332e:	2c00      	cmp	r4, #0
 8003330:	d002      	beq.n	8003338 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003332:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003334:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003336:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003338:	4e0b      	ldr	r6, [pc, #44]	@ (8003368 <DMA_SetConfig+0x44>)
 800333a:	6877      	ldr	r7, [r6, #4]
 800333c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800333e:	241c      	movs	r4, #28
 8003340:	4025      	ands	r5, r4
 8003342:	3c1b      	subs	r4, #27
 8003344:	40ac      	lsls	r4, r5
 8003346:	433c      	orrs	r4, r7
 8003348:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800334a:	6804      	ldr	r4, [r0, #0]
 800334c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800334e:	6883      	ldr	r3, [r0, #8]
 8003350:	2b10      	cmp	r3, #16
 8003352:	d004      	beq.n	800335e <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003354:	6803      	ldr	r3, [r0, #0]
 8003356:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	60da      	str	r2, [r3, #12]
  }
}
 800335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003362:	6803      	ldr	r3, [r0, #0]
 8003364:	60d9      	str	r1, [r3, #12]
 8003366:	e7f9      	b.n	800335c <DMA_SetConfig+0x38>
 8003368:	40020000 	.word	0x40020000

0800336c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800336c:	b510      	push	{r4, lr}
 800336e:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003370:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8003376:	4694      	mov	ip, r2
 8003378:	4463      	add	r3, ip
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800337e:	7800      	ldrb	r0, [r0, #0]
 8003380:	3808      	subs	r0, #8
 8003382:	2114      	movs	r1, #20
 8003384:	f7fc fec6 	bl	8000114 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800338a:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800338c:	231f      	movs	r3, #31
 800338e:	4018      	ands	r0, r3
 8003390:	3b1e      	subs	r3, #30
 8003392:	4083      	lsls	r3, r0
 8003394:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8003396:	bd10      	pop	{r4, pc}
 8003398:	10008200 	.word	0x10008200
 800339c:	40020880 	.word	0x40020880

080033a0 <HAL_DMA_Init>:
{
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 80033a4:	d055      	beq.n	8003452 <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033a6:	6805      	ldr	r5, [r0, #0]
 80033a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_DMA_Init+0xb8>)
 80033aa:	18e8      	adds	r0, r5, r3
 80033ac:	2114      	movs	r1, #20
 80033ae:	f7fc feb1 	bl	8000114 <__udivsi3>
 80033b2:	0080      	lsls	r0, r0, #2
 80033b4:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b6:	2325      	movs	r3, #37	@ 0x25
 80033b8:	2202      	movs	r2, #2
 80033ba:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	4a27      	ldr	r2, [pc, #156]	@ (800345c <HAL_DMA_Init+0xbc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	6811      	ldr	r1, [r2, #0]
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	68e0      	ldr	r0, [r4, #12]
 80033cc:	4303      	orrs	r3, r0
 80033ce:	6920      	ldr	r0, [r4, #16]
 80033d0:	4303      	orrs	r3, r0
 80033d2:	6960      	ldr	r0, [r4, #20]
 80033d4:	4303      	orrs	r3, r0
 80033d6:	69a0      	ldr	r0, [r4, #24]
 80033d8:	4303      	orrs	r3, r0
 80033da:	69e0      	ldr	r0, [r4, #28]
 80033dc:	4303      	orrs	r3, r0
 80033de:	6a20      	ldr	r0, [r4, #32]
 80033e0:	4303      	orrs	r3, r0
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7ff ffc0 	bl	800336c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	01db      	lsls	r3, r3, #7
 80033f0:	68a2      	ldr	r2, [r4, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	213f      	movs	r1, #63	@ 0x3f
 80033fc:	400b      	ands	r3, r1
 80033fe:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003400:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003402:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003404:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	2a03      	cmp	r2, #3
 800340c:	d90f      	bls.n	800342e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003412:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003414:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003416:	2300      	movs	r3, #0
 8003418:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800341a:	2225      	movs	r2, #37	@ 0x25
 800341c:	2101      	movs	r1, #1
 800341e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003420:	3a01      	subs	r2, #1
 8003422:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003424:	2000      	movs	r0, #0
}
 8003426:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003428:	2300      	movs	r3, #0
 800342a:	6063      	str	r3, [r4, #4]
 800342c:	e7e3      	b.n	80033f6 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800342e:	223f      	movs	r2, #63	@ 0x3f
 8003430:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003432:	4a0b      	ldr	r2, [pc, #44]	@ (8003460 <HAL_DMA_Init+0xc0>)
 8003434:	189a      	adds	r2, r3, r2
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800343a:	490a      	ldr	r1, [pc, #40]	@ (8003464 <HAL_DMA_Init+0xc4>)
 800343c:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800343e:	3b01      	subs	r3, #1
 8003440:	2101      	movs	r1, #1
 8003442:	4099      	lsls	r1, r3
 8003444:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800344a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800344c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	e7e1      	b.n	8003416 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8003452:	2001      	movs	r0, #1
 8003454:	e7e7      	b.n	8003426 <HAL_DMA_Init+0x86>
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	bffdfff8 	.word	0xbffdfff8
 800345c:	ffff800f 	.word	0xffff800f
 8003460:	1000823f 	.word	0x1000823f
 8003464:	40020940 	.word	0x40020940

08003468 <HAL_DMA_Start_IT>:
{
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800346c:	2024      	movs	r0, #36	@ 0x24
 800346e:	5c20      	ldrb	r0, [r4, r0]
 8003470:	2801      	cmp	r0, #1
 8003472:	d045      	beq.n	8003500 <HAL_DMA_Start_IT+0x98>
 8003474:	2024      	movs	r0, #36	@ 0x24
 8003476:	2501      	movs	r5, #1
 8003478:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 800347a:	3001      	adds	r0, #1
 800347c:	5c20      	ldrb	r0, [r4, r0]
 800347e:	2801      	cmp	r0, #1
 8003480:	d006      	beq.n	8003490 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003486:	3b5c      	subs	r3, #92	@ 0x5c
 8003488:	2200      	movs	r2, #0
 800348a:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 800348c:	2001      	movs	r0, #1
}
 800348e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003490:	3024      	adds	r0, #36	@ 0x24
 8003492:	3501      	adds	r5, #1
 8003494:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003496:	2000      	movs	r0, #0
 8003498:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800349a:	6825      	ldr	r5, [r4, #0]
 800349c:	6828      	ldr	r0, [r5, #0]
 800349e:	2601      	movs	r6, #1
 80034a0:	43b0      	bics	r0, r6
 80034a2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a4:	0020      	movs	r0, r4
 80034a6:	f7ff ff3d 	bl	8003324 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80034aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01c      	beq.n	80034ea <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	210e      	movs	r1, #14
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034ba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	03db      	lsls	r3, r3, #15
 80034c0:	d504      	bpl.n	80034cc <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034c2:	6811      	ldr	r1, [r2, #0]
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80034cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	2280      	movs	r2, #128	@ 0x80
 80034d6:	0052      	lsls	r2, r2, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80034dc:	6822      	ldr	r2, [r4, #0]
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	430b      	orrs	r3, r1
 80034e4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2000      	movs	r0, #0
 80034e8:	e7d1      	b.n	800348e <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	2104      	movs	r1, #4
 80034f0:	438b      	bics	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	3106      	adds	r1, #6
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e7dc      	b.n	80034ba <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003500:	2002      	movs	r0, #2
 8003502:	e7c4      	b.n	800348e <HAL_DMA_Start_IT+0x26>

08003504 <HAL_DMA_IRQHandler>:
{
 8003504:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8003506:	4b31      	ldr	r3, [pc, #196]	@ (80035cc <HAL_DMA_IRQHandler+0xc8>)
 8003508:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800350a:	6804      	ldr	r4, [r0, #0]
 800350c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800350e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003510:	221c      	movs	r2, #28
 8003512:	4013      	ands	r3, r2
 8003514:	3a18      	subs	r2, #24
 8003516:	409a      	lsls	r2, r3
 8003518:	4211      	tst	r1, r2
 800351a:	d016      	beq.n	800354a <HAL_DMA_IRQHandler+0x46>
 800351c:	076a      	lsls	r2, r5, #29
 800351e:	d514      	bpl.n	800354a <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	069b      	lsls	r3, r3, #26
 8003524:	d403      	bmi.n	800352e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	2204      	movs	r2, #4
 800352a:	4393      	bics	r3, r2
 800352c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800352e:	4927      	ldr	r1, [pc, #156]	@ (80035cc <HAL_DMA_IRQHandler+0xc8>)
 8003530:	684c      	ldr	r4, [r1, #4]
 8003532:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003534:	231c      	movs	r3, #28
 8003536:	401a      	ands	r2, r3
 8003538:	3b18      	subs	r3, #24
 800353a:	4093      	lsls	r3, r2
 800353c:	4323      	orrs	r3, r4
 800353e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003540:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003542:	2b00      	cmp	r3, #0
 8003544:	d000      	beq.n	8003548 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8003546:	4798      	blx	r3
}
 8003548:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800354a:	2202      	movs	r2, #2
 800354c:	409a      	lsls	r2, r3
 800354e:	4211      	tst	r1, r2
 8003550:	d01c      	beq.n	800358c <HAL_DMA_IRQHandler+0x88>
 8003552:	07aa      	lsls	r2, r5, #30
 8003554:	d51a      	bpl.n	800358c <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	d406      	bmi.n	800356a <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	220a      	movs	r2, #10
 8003560:	4393      	bics	r3, r2
 8003562:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003564:	2325      	movs	r3, #37	@ 0x25
 8003566:	3a09      	subs	r2, #9
 8003568:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800356a:	4918      	ldr	r1, [pc, #96]	@ (80035cc <HAL_DMA_IRQHandler+0xc8>)
 800356c:	684c      	ldr	r4, [r1, #4]
 800356e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003570:	231c      	movs	r3, #28
 8003572:	401a      	ands	r2, r3
 8003574:	3b1a      	subs	r3, #26
 8003576:	4093      	lsls	r3, r2
 8003578:	4323      	orrs	r3, r4
 800357a:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 800357c:	2324      	movs	r3, #36	@ 0x24
 800357e:	2200      	movs	r2, #0
 8003580:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8003582:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0df      	beq.n	8003548 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8003588:	4798      	blx	r3
 800358a:	e7dd      	b.n	8003548 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800358c:	2208      	movs	r2, #8
 800358e:	409a      	lsls	r2, r3
 8003590:	4211      	tst	r1, r2
 8003592:	d0d9      	beq.n	8003548 <HAL_DMA_IRQHandler+0x44>
 8003594:	072d      	lsls	r5, r5, #28
 8003596:	d5d7      	bpl.n	8003548 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	220e      	movs	r2, #14
 800359c:	4393      	bics	r3, r2
 800359e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80035a0:	490a      	ldr	r1, [pc, #40]	@ (80035cc <HAL_DMA_IRQHandler+0xc8>)
 80035a2:	684c      	ldr	r4, [r1, #4]
 80035a4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80035a6:	231c      	movs	r3, #28
 80035a8:	401a      	ands	r2, r3
 80035aa:	3b1b      	subs	r3, #27
 80035ac:	001d      	movs	r5, r3
 80035ae:	4095      	lsls	r5, r2
 80035b0:	002a      	movs	r2, r5
 80035b2:	4322      	orrs	r2, r4
 80035b4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035b6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80035b8:	2225      	movs	r2, #37	@ 0x25
 80035ba:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80035bc:	3323      	adds	r3, #35	@ 0x23
 80035be:	2200      	movs	r2, #0
 80035c0:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80035c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0bf      	beq.n	8003548 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80035c8:	4798      	blx	r3
  return;
 80035ca:	e7bd      	b.n	8003548 <HAL_DMA_IRQHandler+0x44>
 80035cc:	40020000 	.word	0x40020000

080035d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	46de      	mov	lr, fp
 80035d4:	4657      	mov	r7, sl
 80035d6:	464e      	mov	r6, r9
 80035d8:	4645      	mov	r5, r8
 80035da:	b5e0      	push	{r5, r6, r7, lr}
 80035dc:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035de:	680f      	ldr	r7, [r1, #0]
 80035e0:	2f00      	cmp	r7, #0
 80035e2:	d100      	bne.n	80035e6 <HAL_GPIO_Init+0x16>
 80035e4:	e0d1      	b.n	800378a <HAL_GPIO_Init+0x1ba>
 80035e6:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80035e8:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035ea:	2401      	movs	r4, #1
 80035ec:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ee:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035f0:	4d69      	ldr	r5, [pc, #420]	@ (8003798 <HAL_GPIO_Init+0x1c8>)
 80035f2:	46ab      	mov	fp, r5
 80035f4:	e052      	b.n	800369c <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 80035f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035f8:	0025      	movs	r5, r4
 80035fa:	4095      	lsls	r5, r2
 80035fc:	43af      	bics	r7, r5
 80035fe:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003600:	68cf      	ldr	r7, [r1, #12]
 8003602:	4097      	lsls	r7, r2
 8003604:	464d      	mov	r5, r9
 8003606:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8003608:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800360a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360c:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360e:	684e      	ldr	r6, [r1, #4]
 8003610:	0936      	lsrs	r6, r6, #4
 8003612:	4645      	mov	r5, r8
 8003614:	402e      	ands	r6, r5
 8003616:	409e      	lsls	r6, r3
 8003618:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800361a:	6046      	str	r6, [r0, #4]
 800361c:	e04a      	b.n	80036b4 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800361e:	2600      	movs	r6, #0
 8003620:	4655      	mov	r5, sl
 8003622:	40ae      	lsls	r6, r5
 8003624:	464d      	mov	r5, r9
 8003626:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 8003628:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 800362a:	465d      	mov	r5, fp
 800362c:	682d      	ldr	r5, [r5, #0]
 800362e:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 8003630:	4665      	mov	r5, ip
 8003632:	43ed      	mvns	r5, r5
 8003634:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003636:	684d      	ldr	r5, [r1, #4]
 8003638:	2680      	movs	r6, #128	@ 0x80
 800363a:	0376      	lsls	r6, r6, #13
 800363c:	4235      	tst	r5, r6
 800363e:	d000      	beq.n	8003642 <HAL_GPIO_Init+0x72>
 8003640:	e094      	b.n	800376c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003642:	4656      	mov	r6, sl
 8003644:	9d01      	ldr	r5, [sp, #4]
 8003646:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003648:	465d      	mov	r5, fp
 800364a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800364c:	686d      	ldr	r5, [r5, #4]
 800364e:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003650:	684d      	ldr	r5, [r1, #4]
 8003652:	2680      	movs	r6, #128	@ 0x80
 8003654:	03b6      	lsls	r6, r6, #14
 8003656:	4235      	tst	r5, r6
 8003658:	d000      	beq.n	800365c <HAL_GPIO_Init+0x8c>
 800365a:	e08b      	b.n	8003774 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 800365c:	4656      	mov	r6, sl
 800365e:	9d01      	ldr	r5, [sp, #4]
 8003660:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003662:	465d      	mov	r5, fp
 8003664:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003666:	2684      	movs	r6, #132	@ 0x84
 8003668:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800366a:	684d      	ldr	r5, [r1, #4]
 800366c:	03ad      	lsls	r5, r5, #14
 800366e:	d500      	bpl.n	8003672 <HAL_GPIO_Init+0xa2>
 8003670:	e084      	b.n	800377c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8003672:	9d01      	ldr	r5, [sp, #4]
 8003674:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003676:	2584      	movs	r5, #132	@ 0x84
 8003678:	465f      	mov	r7, fp
 800367a:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 800367c:	2680      	movs	r6, #128	@ 0x80
 800367e:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003680:	684d      	ldr	r5, [r1, #4]
 8003682:	03ed      	lsls	r5, r5, #15
 8003684:	d47d      	bmi.n	8003782 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8003686:	9d01      	ldr	r5, [sp, #4]
 8003688:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800368a:	2780      	movs	r7, #128	@ 0x80
 800368c:	465d      	mov	r5, fp
 800368e:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 8003690:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003692:	680f      	ldr	r7, [r1, #0]
 8003694:	3202      	adds	r2, #2
 8003696:	003e      	movs	r6, r7
 8003698:	40de      	lsrs	r6, r3
 800369a:	d076      	beq.n	800378a <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800369c:	4646      	mov	r6, r8
 800369e:	409e      	lsls	r6, r3
 80036a0:	003d      	movs	r5, r7
 80036a2:	4035      	ands	r5, r6
 80036a4:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 80036a6:	4237      	tst	r7, r6
 80036a8:	d0f2      	beq.n	8003690 <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036aa:	684f      	ldr	r7, [r1, #4]
 80036ac:	4027      	ands	r7, r4
 80036ae:	3f01      	subs	r7, #1
 80036b0:	2f01      	cmp	r7, #1
 80036b2:	d9a0      	bls.n	80035f6 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b4:	684e      	ldr	r6, [r1, #4]
 80036b6:	4026      	ands	r6, r4
 80036b8:	2e03      	cmp	r6, #3
 80036ba:	d022      	beq.n	8003702 <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 80036bc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036be:	0026      	movs	r6, r4
 80036c0:	4096      	lsls	r6, r2
 80036c2:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036c4:	688e      	ldr	r6, [r1, #8]
 80036c6:	4096      	lsls	r6, r2
 80036c8:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80036ca:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036cc:	684e      	ldr	r6, [r1, #4]
 80036ce:	4026      	ands	r6, r4
 80036d0:	2e02      	cmp	r6, #2
 80036d2:	d116      	bne.n	8003702 <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 80036d4:	08de      	lsrs	r6, r3, #3
 80036d6:	00b6      	lsls	r6, r6, #2
 80036d8:	1985      	adds	r5, r0, r6
 80036da:	9501      	str	r5, [sp, #4]
 80036dc:	6a2d      	ldr	r5, [r5, #32]
 80036de:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e0:	2707      	movs	r7, #7
 80036e2:	401f      	ands	r7, r3
 80036e4:	00bf      	lsls	r7, r7, #2
 80036e6:	250f      	movs	r5, #15
 80036e8:	40bd      	lsls	r5, r7
 80036ea:	46a9      	mov	r9, r5
 80036ec:	4655      	mov	r5, sl
 80036ee:	464e      	mov	r6, r9
 80036f0:	43b5      	bics	r5, r6
 80036f2:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036f4:	690d      	ldr	r5, [r1, #16]
 80036f6:	40bd      	lsls	r5, r7
 80036f8:	002f      	movs	r7, r5
 80036fa:	4655      	mov	r5, sl
 80036fc:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80036fe:	9d01      	ldr	r5, [sp, #4]
 8003700:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 8003702:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003704:	0026      	movs	r6, r4
 8003706:	4096      	lsls	r6, r2
 8003708:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800370a:	684e      	ldr	r6, [r1, #4]
 800370c:	4026      	ands	r6, r4
 800370e:	4096      	lsls	r6, r2
 8003710:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003712:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003714:	684e      	ldr	r6, [r1, #4]
 8003716:	25c0      	movs	r5, #192	@ 0xc0
 8003718:	02ad      	lsls	r5, r5, #10
 800371a:	422e      	tst	r6, r5
 800371c:	d0b8      	beq.n	8003690 <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 800371e:	089f      	lsrs	r7, r3, #2
 8003720:	00bf      	lsls	r7, r7, #2
 8003722:	4d1d      	ldr	r5, [pc, #116]	@ (8003798 <HAL_GPIO_Init+0x1c8>)
 8003724:	46a9      	mov	r9, r5
 8003726:	444f      	add	r7, r9
 8003728:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 800372a:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800372c:	0025      	movs	r5, r4
 800372e:	401d      	ands	r5, r3
 8003730:	00ed      	lsls	r5, r5, #3
 8003732:	46aa      	mov	sl, r5
 8003734:	250f      	movs	r5, #15
 8003736:	4656      	mov	r6, sl
 8003738:	40b5      	lsls	r5, r6
 800373a:	9e01      	ldr	r6, [sp, #4]
 800373c:	43ae      	bics	r6, r5
 800373e:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003740:	25a0      	movs	r5, #160	@ 0xa0
 8003742:	05ed      	lsls	r5, r5, #23
 8003744:	42a8      	cmp	r0, r5
 8003746:	d100      	bne.n	800374a <HAL_GPIO_Init+0x17a>
 8003748:	e769      	b.n	800361e <HAL_GPIO_Init+0x4e>
 800374a:	4e14      	ldr	r6, [pc, #80]	@ (800379c <HAL_GPIO_Init+0x1cc>)
 800374c:	42b0      	cmp	r0, r6
 800374e:	d009      	beq.n	8003764 <HAL_GPIO_Init+0x194>
 8003750:	4e13      	ldr	r6, [pc, #76]	@ (80037a0 <HAL_GPIO_Init+0x1d0>)
 8003752:	42b0      	cmp	r0, r6
 8003754:	d008      	beq.n	8003768 <HAL_GPIO_Init+0x198>
 8003756:	4d13      	ldr	r5, [pc, #76]	@ (80037a4 <HAL_GPIO_Init+0x1d4>)
 8003758:	1946      	adds	r6, r0, r5
 800375a:	1e75      	subs	r5, r6, #1
 800375c:	41ae      	sbcs	r6, r5
 800375e:	0076      	lsls	r6, r6, #1
 8003760:	3603      	adds	r6, #3
 8003762:	e75d      	b.n	8003620 <HAL_GPIO_Init+0x50>
 8003764:	2601      	movs	r6, #1
 8003766:	e75b      	b.n	8003620 <HAL_GPIO_Init+0x50>
 8003768:	2602      	movs	r6, #2
 800376a:	e759      	b.n	8003620 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 800376c:	4665      	mov	r5, ip
 800376e:	4656      	mov	r6, sl
 8003770:	432e      	orrs	r6, r5
 8003772:	e769      	b.n	8003648 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8003774:	4665      	mov	r5, ip
 8003776:	4656      	mov	r6, sl
 8003778:	432e      	orrs	r6, r5
 800377a:	e772      	b.n	8003662 <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 800377c:	4665      	mov	r5, ip
 800377e:	432e      	orrs	r6, r5
 8003780:	e779      	b.n	8003676 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 8003782:	4665      	mov	r5, ip
 8003784:	4335      	orrs	r5, r6
 8003786:	002e      	movs	r6, r5
 8003788:	e77f      	b.n	800368a <HAL_GPIO_Init+0xba>
  }
}
 800378a:	b003      	add	sp, #12
 800378c:	bcf0      	pop	{r4, r5, r6, r7}
 800378e:	46bb      	mov	fp, r7
 8003790:	46b2      	mov	sl, r6
 8003792:	46a9      	mov	r9, r5
 8003794:	46a0      	mov	r8, r4
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003798:	40021800 	.word	0x40021800
 800379c:	50000400 	.word	0x50000400
 80037a0:	50000800 	.word	0x50000800
 80037a4:	affff400 	.word	0xaffff400

080037a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a8:	b510      	push	{r4, lr}
 80037aa:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4218      	tst	r0, r3
 80037b2:	d104      	bne.n	80037be <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	4223      	tst	r3, r4
 80037ba:	d105      	bne.n	80037c8 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 80037bc:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80037c2:	f7fd fb8b 	bl	8000edc <HAL_GPIO_EXTI_Rising_Callback>
 80037c6:	e7f5      	b.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037c8:	4b02      	ldr	r3, [pc, #8]	@ (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ca:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037cc:	0020      	movs	r0, r4
 80037ce:	f7fd fb6d 	bl	8000eac <HAL_GPIO_EXTI_Falling_Callback>
}
 80037d2:	e7f3      	b.n	80037bc <HAL_GPIO_EXTI_IRQHandler+0x14>
 80037d4:	40021800 	.word	0x40021800

080037d8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037d8:	6802      	ldr	r2, [r0, #0]
 80037da:	6993      	ldr	r3, [r2, #24]
 80037dc:	079b      	lsls	r3, r3, #30
 80037de:	d501      	bpl.n	80037e4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e4:	6803      	ldr	r3, [r0, #0]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	07d2      	lsls	r2, r2, #31
 80037ea:	d403      	bmi.n	80037f4 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	2101      	movs	r1, #1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
  }
}
 80037f4:	4770      	bx	lr
	...

080037f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037f8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037fa:	6800      	ldr	r0, [r0, #0]
 80037fc:	6844      	ldr	r4, [r0, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fe:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003800:	9d03      	ldr	r5, [sp, #12]
 8003802:	432b      	orrs	r3, r5
 8003804:	431a      	orrs	r2, r3
 8003806:	0589      	lsls	r1, r1, #22
 8003808:	0d89      	lsrs	r1, r1, #22
 800380a:	430a      	orrs	r2, r1
 800380c:	0052      	lsls	r2, r2, #1
 800380e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003810:	0d6b      	lsrs	r3, r5, #21
 8003812:	2180      	movs	r1, #128	@ 0x80
 8003814:	00c9      	lsls	r1, r1, #3
 8003816:	400b      	ands	r3, r1
 8003818:	4902      	ldr	r1, [pc, #8]	@ (8003824 <I2C_TransferConfig+0x2c>)
 800381a:	430b      	orrs	r3, r1
 800381c:	439c      	bics	r4, r3
 800381e:	4322      	orrs	r2, r4
 8003820:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003822:	bd30      	pop	{r4, r5, pc}
 8003824:	03ff63ff 	.word	0x03ff63ff

08003828 <I2C_IsErrorOccurred>:
{
 8003828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382a:	46d6      	mov	lr, sl
 800382c:	464f      	mov	r7, r9
 800382e:	4646      	mov	r6, r8
 8003830:	b5c0      	push	{r6, r7, lr}
 8003832:	0004      	movs	r4, r0
 8003834:	000d      	movs	r5, r1
 8003836:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003838:	6801      	ldr	r1, [r0, #0]
 800383a:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800383c:	2210      	movs	r2, #16
 800383e:	0016      	movs	r6, r2
 8003840:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003844:	421a      	tst	r2, r3
 8003846:	d044      	beq.n	80038d2 <I2C_IsErrorOccurred+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003848:	2310      	movs	r3, #16
 800384a:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003852:	2720      	movs	r7, #32
 8003854:	6821      	ldr	r1, [r4, #0]
 8003856:	698b      	ldr	r3, [r1, #24]
 8003858:	421f      	tst	r7, r3
 800385a:	d131      	bne.n	80038c0 <I2C_IsErrorOccurred+0x98>
 800385c:	2e00      	cmp	r6, #0
 800385e:	d133      	bne.n	80038c8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8003860:	1c6b      	adds	r3, r5, #1
 8003862:	d0f8      	beq.n	8003856 <I2C_IsErrorOccurred+0x2e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003864:	f7fe feb4 	bl	80025d0 <HAL_GetTick>
 8003868:	4643      	mov	r3, r8
 800386a:	1ac0      	subs	r0, r0, r3
 800386c:	42a8      	cmp	r0, r5
 800386e:	d801      	bhi.n	8003874 <I2C_IsErrorOccurred+0x4c>
 8003870:	2d00      	cmp	r5, #0
 8003872:	d1ef      	bne.n	8003854 <I2C_IsErrorOccurred+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8003878:	2342      	movs	r3, #66	@ 0x42
 800387a:	5ce3      	ldrb	r3, [r4, r3]
 800387c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800387e:	6991      	ldr	r1, [r2, #24]
 8003880:	0409      	lsls	r1, r1, #16
 8003882:	d503      	bpl.n	800388c <I2C_IsErrorOccurred+0x64>
 8003884:	0440      	lsls	r0, r0, #17
 8003886:	d401      	bmi.n	800388c <I2C_IsErrorOccurred+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8003888:	2b20      	cmp	r3, #32
 800388a:	d110      	bne.n	80038ae <I2C_IsErrorOccurred+0x86>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800388c:	2320      	movs	r3, #32
 800388e:	469a      	mov	sl, r3
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	4652      	mov	r2, sl
 8003896:	421a      	tst	r2, r3
 8003898:	d1dc      	bne.n	8003854 <I2C_IsErrorOccurred+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800389a:	f7fe fe99 	bl	80025d0 <HAL_GetTick>
 800389e:	4643      	mov	r3, r8
 80038a0:	1ac0      	subs	r0, r0, r3
 80038a2:	2819      	cmp	r0, #25
 80038a4:	d9f4      	bls.n	8003890 <I2C_IsErrorOccurred+0x68>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	2320      	movs	r3, #32
 80038a8:	4699      	mov	r9, r3
              status = HAL_ERROR;
 80038aa:	2601      	movs	r6, #1
 80038ac:	e7d2      	b.n	8003854 <I2C_IsErrorOccurred+0x2c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ae:	6851      	ldr	r1, [r2, #4]
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 80038b8:	f7fe fe8a 	bl	80025d0 <HAL_GetTick>
 80038bc:	4680      	mov	r8, r0
 80038be:	e7e5      	b.n	800388c <I2C_IsErrorOccurred+0x64>
    if (status == HAL_OK)
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	d101      	bne.n	80038c8 <I2C_IsErrorOccurred+0xa0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c4:	2320      	movs	r3, #32
 80038c6:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80038c8:	2604      	movs	r6, #4
 80038ca:	464b      	mov	r3, r9
 80038cc:	4333      	orrs	r3, r6
 80038ce:	001e      	movs	r6, r3
    status = HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038d6:	05d9      	lsls	r1, r3, #23
 80038d8:	d504      	bpl.n	80038e4 <I2C_IsErrorOccurred+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 80038da:	2101      	movs	r1, #1
 80038dc:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038de:	31ff      	adds	r1, #255	@ 0xff
 80038e0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80038e2:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038e4:	055a      	lsls	r2, r3, #21
 80038e6:	d526      	bpl.n	8003936 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_OVR;
 80038e8:	2208      	movs	r2, #8
 80038ea:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	2180      	movs	r1, #128	@ 0x80
 80038f0:	00c9      	lsls	r1, r1, #3
 80038f2:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038f4:	059b      	lsls	r3, r3, #22
 80038f6:	d505      	bpl.n	8003904 <I2C_IsErrorOccurred+0xdc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80038f8:	2302      	movs	r3, #2
 80038fa:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	2280      	movs	r2, #128	@ 0x80
 8003900:	0092      	lsls	r2, r2, #2
 8003902:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003904:	0020      	movs	r0, r4
 8003906:	f7ff ff67 	bl	80037d8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	6853      	ldr	r3, [r2, #4]
 800390e:	490c      	ldr	r1, [pc, #48]	@ (8003940 <I2C_IsErrorOccurred+0x118>)
 8003910:	400b      	ands	r3, r1
 8003912:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003914:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003916:	4333      	orrs	r3, r6
 8003918:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	2341      	movs	r3, #65	@ 0x41
 800391c:	2220      	movs	r2, #32
 800391e:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	2300      	movs	r3, #0
 8003922:	3222      	adds	r2, #34	@ 0x22
 8003924:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003926:	3a02      	subs	r2, #2
 8003928:	54a3      	strb	r3, [r4, r2]
 800392a:	2001      	movs	r0, #1
}
 800392c:	bce0      	pop	{r5, r6, r7}
 800392e:	46ba      	mov	sl, r7
 8003930:	46b1      	mov	r9, r6
 8003932:	46a8      	mov	r8, r5
 8003934:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003936:	059b      	lsls	r3, r3, #22
 8003938:	d4de      	bmi.n	80038f8 <I2C_IsErrorOccurred+0xd0>
  if (status != HAL_OK)
 800393a:	2800      	cmp	r0, #0
 800393c:	d0f6      	beq.n	800392c <I2C_IsErrorOccurred+0x104>
 800393e:	e7e1      	b.n	8003904 <I2C_IsErrorOccurred+0xdc>
 8003940:	fe00e800 	.word	0xfe00e800

08003944 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	0004      	movs	r4, r0
 8003948:	000d      	movs	r5, r1
 800394a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800394c:	2702      	movs	r7, #2
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	421f      	tst	r7, r3
 8003954:	d120      	bne.n	8003998 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	0032      	movs	r2, r6
 8003958:	0029      	movs	r1, r5
 800395a:	0020      	movs	r0, r4
 800395c:	f7ff ff64 	bl	8003828 <I2C_IsErrorOccurred>
 8003960:	2800      	cmp	r0, #0
 8003962:	d11b      	bne.n	800399c <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8003964:	1c6b      	adds	r3, r5, #1
 8003966:	d0f2      	beq.n	800394e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003968:	f7fe fe32 	bl	80025d0 <HAL_GetTick>
 800396c:	1b80      	subs	r0, r0, r6
 800396e:	42a8      	cmp	r0, r5
 8003970:	d801      	bhi.n	8003976 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003972:	2d00      	cmp	r5, #0
 8003974:	d1eb      	bne.n	800394e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d4e7      	bmi.n	800394e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800397e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003980:	2220      	movs	r2, #32
 8003982:	4313      	orrs	r3, r2
 8003984:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003986:	2341      	movs	r3, #65	@ 0x41
 8003988:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	2300      	movs	r3, #0
 800398c:	3222      	adds	r2, #34	@ 0x22
 800398e:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8003990:	3a02      	subs	r2, #2
 8003992:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8003994:	2001      	movs	r0, #1
 8003996:	e000      	b.n	800399a <I2C_WaitOnTXISFlagUntilTimeout+0x56>
  return HAL_OK;
 8003998:	2000      	movs	r0, #0
}
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
 800399e:	e7fc      	b.n	800399a <I2C_WaitOnTXISFlagUntilTimeout+0x56>

080039a0 <I2C_WaitOnFlagUntilTimeout>:
{
 80039a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a2:	46d6      	mov	lr, sl
 80039a4:	4647      	mov	r7, r8
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b083      	sub	sp, #12
 80039aa:	0007      	movs	r7, r0
 80039ac:	000d      	movs	r5, r1
 80039ae:	0016      	movs	r6, r2
 80039b0:	4698      	mov	r8, r3
 80039b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039b4:	469a      	mov	sl, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b6:	9201      	str	r2, [sp, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	699c      	ldr	r4, [r3, #24]
 80039bc:	402c      	ands	r4, r5
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	4263      	negs	r3, r4
 80039c2:	415c      	adcs	r4, r3
 80039c4:	42b4      	cmp	r4, r6
 80039c6:	d128      	bne.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c8:	4652      	mov	r2, sl
 80039ca:	4641      	mov	r1, r8
 80039cc:	0038      	movs	r0, r7
 80039ce:	f7ff ff2b 	bl	8003828 <I2C_IsErrorOccurred>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	d127      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80039d6:	4643      	mov	r3, r8
 80039d8:	3301      	adds	r3, #1
 80039da:	d0ed      	beq.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039dc:	f7fe fdf8 	bl	80025d0 <HAL_GetTick>
 80039e0:	4653      	mov	r3, sl
 80039e2:	1ac0      	subs	r0, r0, r3
 80039e4:	4540      	cmp	r0, r8
 80039e6:	d802      	bhi.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x4e>
 80039e8:	4643      	mov	r3, r8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e4      	bne.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	402b      	ands	r3, r5
 80039f4:	1b5b      	subs	r3, r3, r5
 80039f6:	425a      	negs	r2, r3
 80039f8:	4153      	adcs	r3, r2
 80039fa:	9a01      	ldr	r2, [sp, #4]
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d1db      	bne.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a02:	2220      	movs	r2, #32
 8003a04:	4313      	orrs	r3, r2
 8003a06:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	2341      	movs	r3, #65	@ 0x41
 8003a0a:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	3222      	adds	r2, #34	@ 0x22
 8003a10:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 8003a12:	3a02      	subs	r2, #2
 8003a14:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 8003a16:	2001      	movs	r0, #1
 8003a18:	e000      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8003a1a:	2000      	movs	r0, #0
}
 8003a1c:	b003      	add	sp, #12
 8003a1e:	bcc0      	pop	{r6, r7}
 8003a20:	46ba      	mov	sl, r7
 8003a22:	46b0      	mov	r8, r6
 8003a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003a26:	2001      	movs	r0, #1
 8003a28:	e7f8      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x7c>

08003a2a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2c:	46c6      	mov	lr, r8
 8003a2e:	b500      	push	{lr}
 8003a30:	0005      	movs	r5, r0
 8003a32:	000e      	movs	r6, r1
 8003a34:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a36:	6803      	ldr	r3, [r0, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	069b      	lsls	r3, r3, #26
 8003a3c:	d428      	bmi.n	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a3e:	2320      	movs	r3, #32
 8003a40:	4698      	mov	r8, r3
 8003a42:	e009      	b.n	8003a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	4642      	mov	r2, r8
 8003a4a:	421a      	tst	r2, r3
 8003a4c:	d013      	beq.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4642      	mov	r2, r8
 8003a54:	421a      	tst	r2, r3
 8003a56:	d11e      	bne.n	8003a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a58:	003a      	movs	r2, r7
 8003a5a:	0031      	movs	r1, r6
 8003a5c:	0028      	movs	r0, r5
 8003a5e:	f7ff fee3 	bl	8003828 <I2C_IsErrorOccurred>
 8003a62:	1e04      	subs	r4, r0, #0
 8003a64:	d116      	bne.n	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe fdb3 	bl	80025d0 <HAL_GetTick>
 8003a6a:	1bc0      	subs	r0, r0, r7
 8003a6c:	42b0      	cmp	r0, r6
 8003a6e:	d8e9      	bhi.n	8003a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
 8003a70:	2e00      	cmp	r6, #0
 8003a72:	d1ec      	bne.n	8003a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
 8003a74:	e7e6      	b.n	8003a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a76:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003a78:	2220      	movs	r2, #32
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	2341      	movs	r3, #65	@ 0x41
 8003a80:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	3222      	adds	r2, #34	@ 0x22
 8003a86:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8003a88:	3a02      	subs	r2, #2
 8003a8a:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8003a8c:	2401      	movs	r4, #1
 8003a8e:	e002      	b.n	8003a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  return HAL_OK;
 8003a90:	2400      	movs	r4, #0
 8003a92:	e000      	b.n	8003a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
      return HAL_ERROR;
 8003a94:	2401      	movs	r4, #1
}
 8003a96:	0020      	movs	r0, r4
 8003a98:	bc80      	pop	{r7}
 8003a9a:	46b8      	mov	r8, r7
 8003a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003aa0 <HAL_I2C_Init>:
{
 8003aa0:	b510      	push	{r4, lr}
 8003aa2:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8003aa4:	d060      	beq.n	8003b68 <HAL_I2C_Init+0xc8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa6:	2341      	movs	r3, #65	@ 0x41
 8003aa8:	5cc3      	ldrb	r3, [r0, r3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d048      	beq.n	8003b40 <HAL_I2C_Init+0xa0>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aae:	2341      	movs	r3, #65	@ 0x41
 8003ab0:	2224      	movs	r2, #36	@ 0x24
 8003ab2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8003ab4:	6822      	ldr	r2, [r4, #0]
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	2101      	movs	r1, #1
 8003aba:	438b      	bics	r3, r1
 8003abc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	492a      	ldr	r1, [pc, #168]	@ (8003b6c <HAL_I2C_Init+0xcc>)
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	6893      	ldr	r3, [r2, #8]
 8003acc:	4928      	ldr	r1, [pc, #160]	@ (8003b70 <HAL_I2C_Init+0xd0>)
 8003ace:	400b      	ands	r3, r1
 8003ad0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad2:	68e3      	ldr	r3, [r4, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d039      	beq.n	8003b4c <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ad8:	6822      	ldr	r2, [r4, #0]
 8003ada:	68a1      	ldr	r1, [r4, #8]
 8003adc:	2384      	movs	r3, #132	@ 0x84
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ae4:	68e3      	ldr	r3, [r4, #12]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d037      	beq.n	8003b5a <HAL_I2C_Init+0xba>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	6853      	ldr	r3, [r2, #4]
 8003aee:	4921      	ldr	r1, [pc, #132]	@ (8003b74 <HAL_I2C_Init+0xd4>)
 8003af0:	400b      	ands	r3, r1
 8003af2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	6851      	ldr	r1, [r2, #4]
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <HAL_I2C_Init+0xd8>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	68d3      	ldr	r3, [r2, #12]
 8003b02:	491b      	ldr	r1, [pc, #108]	@ (8003b70 <HAL_I2C_Init+0xd0>)
 8003b04:	400b      	ands	r3, r1
 8003b06:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b08:	6821      	ldr	r1, [r4, #0]
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	6962      	ldr	r2, [r4, #20]
 8003b0e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b10:	69a2      	ldr	r2, [r4, #24]
 8003b12:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	69e3      	ldr	r3, [r4, #28]
 8003b1c:	6a21      	ldr	r1, [r4, #32]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	2101      	movs	r1, #1
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	2241      	movs	r2, #65	@ 0x41
 8003b32:	311f      	adds	r1, #31
 8003b34:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b36:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	3201      	adds	r2, #1
 8003b3a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003b3c:	2000      	movs	r0, #0
}
 8003b3e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003b40:	3340      	adds	r3, #64	@ 0x40
 8003b42:	2200      	movs	r2, #0
 8003b44:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003b46:	f7fe fbbb 	bl	80022c0 <HAL_I2C_MspInit>
 8003b4a:	e7b0      	b.n	8003aae <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	68a1      	ldr	r1, [r4, #8]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e7c4      	b.n	8003ae4 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	6851      	ldr	r1, [r2, #4]
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6053      	str	r3, [r2, #4]
 8003b66:	e7c5      	b.n	8003af4 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e7e8      	b.n	8003b3e <HAL_I2C_Init+0x9e>
 8003b6c:	f0ffffff 	.word	0xf0ffffff
 8003b70:	ffff7fff 	.word	0xffff7fff
 8003b74:	fffff7ff 	.word	0xfffff7ff
 8003b78:	02008000 	.word	0x02008000

08003b7c <HAL_I2C_Mem_Write>:
{
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	0004      	movs	r4, r0
 8003b82:	9103      	str	r1, [sp, #12]
 8003b84:	9205      	str	r2, [sp, #20]
 8003b86:	9304      	str	r3, [sp, #16]
 8003b88:	ab0c      	add	r3, sp, #48	@ 0x30
 8003b8a:	cb20      	ldmia	r3!, {r5}
 8003b8c:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	2341      	movs	r3, #65	@ 0x41
 8003b90:	5cc3      	ldrb	r3, [r0, r3]
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d000      	beq.n	8003b98 <HAL_I2C_Mem_Write+0x1c>
 8003b96:	e0d8      	b.n	8003d4a <HAL_I2C_Mem_Write+0x1ce>
    if ((pData == NULL) || (Size == 0U))
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	d054      	beq.n	8003c46 <HAL_I2C_Mem_Write+0xca>
 8003b9c:	2e00      	cmp	r6, #0
 8003b9e:	d052      	beq.n	8003c46 <HAL_I2C_Mem_Write+0xca>
    __HAL_LOCK(hi2c);
 8003ba0:	2340      	movs	r3, #64	@ 0x40
 8003ba2:	5cc3      	ldrb	r3, [r0, r3]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d100      	bne.n	8003baa <HAL_I2C_Mem_Write+0x2e>
 8003ba8:	e0d2      	b.n	8003d50 <HAL_I2C_Mem_Write+0x1d4>
 8003baa:	2340      	movs	r3, #64	@ 0x40
 8003bac:	2201      	movs	r2, #1
 8003bae:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fd0e 	bl	80025d0 <HAL_GetTick>
 8003bb4:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bb6:	2180      	movs	r1, #128	@ 0x80
 8003bb8:	9000      	str	r0, [sp, #0]
 8003bba:	2319      	movs	r3, #25
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	0209      	lsls	r1, r1, #8
 8003bc0:	0020      	movs	r0, r4
 8003bc2:	f7ff feed 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	0003      	movs	r3, r0
      return HAL_ERROR;
 8003bc8:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d000      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0x54>
 8003bce:	e0bd      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd0:	3341      	adds	r3, #65	@ 0x41
 8003bd2:	2221      	movs	r2, #33	@ 0x21
 8003bd4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	321f      	adds	r2, #31
 8003bda:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003be0:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003be2:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003be4:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003be6:	3380      	adds	r3, #128	@ 0x80
 8003be8:	9d04      	ldr	r5, [sp, #16]
 8003bea:	b2ea      	uxtb	r2, r5
 8003bec:	495c      	ldr	r1, [pc, #368]	@ (8003d60 <HAL_I2C_Mem_Write+0x1e4>)
 8003bee:	9100      	str	r1, [sp, #0]
 8003bf0:	045b      	lsls	r3, r3, #17
 8003bf2:	9903      	ldr	r1, [sp, #12]
 8003bf4:	0020      	movs	r0, r4
 8003bf6:	f7ff fdff 	bl	80037f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfa:	003a      	movs	r2, r7
 8003bfc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003bfe:	0020      	movs	r0, r4
 8003c00:	f7ff fea0 	bl	8003944 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d132      	bne.n	8003c6e <HAL_I2C_Mem_Write+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c08:	2d01      	cmp	r5, #1
 8003c0a:	d121      	bne.n	8003c50 <HAL_I2C_Mem_Write+0xd4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	466a      	mov	r2, sp
 8003c10:	7d16      	ldrb	r6, [r2, #20]
 8003c12:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c14:	9700      	str	r7, [sp, #0]
 8003c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2180      	movs	r1, #128	@ 0x80
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f7ff febf 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d123      	bne.n	8003c6e <HAL_I2C_Mem_Write+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c26:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2bff      	cmp	r3, #255	@ 0xff
 8003c2c:	d924      	bls.n	8003c78 <HAL_I2C_Mem_Write+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2e:	23ff      	movs	r3, #255	@ 0xff
 8003c30:	8523      	strh	r3, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c32:	3b7f      	subs	r3, #127	@ 0x7f
 8003c34:	2200      	movs	r2, #0
 8003c36:	9200      	str	r2, [sp, #0]
 8003c38:	045b      	lsls	r3, r3, #17
 8003c3a:	32ff      	adds	r2, #255	@ 0xff
 8003c3c:	9903      	ldr	r1, [sp, #12]
 8003c3e:	0020      	movs	r0, r4
 8003c40:	f7ff fdda 	bl	80037f8 <I2C_TransferConfig>
 8003c44:	e035      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x136>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	e07d      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	9d05      	ldr	r5, [sp, #20]
 8003c54:	0a2a      	lsrs	r2, r5, #8
 8003c56:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c58:	003a      	movs	r2, r7
 8003c5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003c5c:	0020      	movs	r0, r4
 8003c5e:	f7ff fe71 	bl	8003944 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_I2C_Mem_Write+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	b2ee      	uxtb	r6, r5
 8003c6a:	629e      	str	r6, [r3, #40]	@ 0x28
 8003c6c:	e7d2      	b.n	8003c14 <HAL_I2C_Mem_Write+0x98>
      __HAL_UNLOCK(hi2c);
 8003c6e:	2340      	movs	r3, #64	@ 0x40
 8003c70:	2200      	movs	r2, #0
 8003c72:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003c74:	2001      	movs	r0, #1
 8003c76:	e069      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
      hi2c->XferSize = hi2c->XferCount;
 8003c78:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	2100      	movs	r1, #0
 8003c84:	9100      	str	r1, [sp, #0]
 8003c86:	049b      	lsls	r3, r3, #18
 8003c88:	9903      	ldr	r1, [sp, #12]
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	f7ff fdb4 	bl	80037f8 <I2C_TransferConfig>
 8003c90:	e00f      	b.n	8003cb2 <HAL_I2C_Mem_Write+0x136>
          hi2c->XferSize = hi2c->XferCount;
 8003c92:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003c94:	b292      	uxth	r2, r2
 8003c96:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	9100      	str	r1, [sp, #0]
 8003ca0:	049b      	lsls	r3, r3, #18
 8003ca2:	9903      	ldr	r1, [sp, #12]
 8003ca4:	0020      	movs	r0, r4
 8003ca6:	f7ff fda7 	bl	80037f8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003caa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d034      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x1a0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	003a      	movs	r2, r7
 8003cb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003cb6:	0020      	movs	r0, r4
 8003cb8:	f7ff fe44 	bl	8003944 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d149      	bne.n	8003d54 <HAL_I2C_Mem_Write+0x1d8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003cc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cca:	3301      	adds	r3, #1
 8003ccc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003cce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cd6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cde:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	2a00      	cmp	r2, #0
 8003ce4:	d0e1      	beq.n	8003caa <HAL_I2C_Mem_Write+0x12e>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1df      	bne.n	8003caa <HAL_I2C_Mem_Write+0x12e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cea:	9700      	str	r7, [sp, #0]
 8003cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	@ 0x80
 8003cf2:	0020      	movs	r0, r4
 8003cf4:	f7ff fe54 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d12d      	bne.n	8003d58 <HAL_I2C_Mem_Write+0x1dc>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cfc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2bff      	cmp	r3, #255	@ 0xff
 8003d02:	d9c6      	bls.n	8003c92 <HAL_I2C_Mem_Write+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d04:	23ff      	movs	r3, #255	@ 0xff
 8003d06:	8523      	strh	r3, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d08:	3b7f      	subs	r3, #127	@ 0x7f
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	9200      	str	r2, [sp, #0]
 8003d0e:	045b      	lsls	r3, r3, #17
 8003d10:	32ff      	adds	r2, #255	@ 0xff
 8003d12:	9903      	ldr	r1, [sp, #12]
 8003d14:	0020      	movs	r0, r4
 8003d16:	f7ff fd6f 	bl	80037f8 <I2C_TransferConfig>
 8003d1a:	e7c6      	b.n	8003caa <HAL_I2C_Mem_Write+0x12e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1c:	003a      	movs	r2, r7
 8003d1e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003d20:	0020      	movs	r0, r4
 8003d22:	f7ff fe82 	bl	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x1e0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d30:	6821      	ldr	r1, [r4, #0]
 8003d32:	684b      	ldr	r3, [r1, #4]
 8003d34:	4d0b      	ldr	r5, [pc, #44]	@ (8003d64 <HAL_I2C_Mem_Write+0x1e8>)
 8003d36:	402b      	ands	r3, r5
 8003d38:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	2341      	movs	r3, #65	@ 0x41
 8003d3c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	3222      	adds	r2, #34	@ 0x22
 8003d42:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003d44:	3a02      	subs	r2, #2
 8003d46:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8003d48:	e000      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
    return HAL_BUSY;
 8003d4a:	2002      	movs	r0, #2
}
 8003d4c:	b007      	add	sp, #28
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003d50:	2002      	movs	r0, #2
 8003d52:	e7fb      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
        return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
 8003d56:	e7f9      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
          return HAL_ERROR;
 8003d58:	2001      	movs	r0, #1
 8003d5a:	e7f7      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
      return HAL_ERROR;
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	e7f5      	b.n	8003d4c <HAL_I2C_Mem_Write+0x1d0>
 8003d60:	80002000 	.word	0x80002000
 8003d64:	fe00e800 	.word	0xfe00e800

08003d68 <HAL_I2C_IsDeviceReady>:
{
 8003d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6a:	46de      	mov	lr, fp
 8003d6c:	464f      	mov	r7, r9
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b087      	sub	sp, #28
 8003d72:	0005      	movs	r5, r0
 8003d74:	9103      	str	r1, [sp, #12]
 8003d76:	9202      	str	r2, [sp, #8]
 8003d78:	001c      	movs	r4, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	3341      	adds	r3, #65	@ 0x41
 8003d80:	5cc3      	ldrb	r3, [r0, r3]
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d000      	beq.n	8003d88 <HAL_I2C_IsDeviceReady+0x20>
 8003d86:	e089      	b.n	8003e9c <HAL_I2C_IsDeviceReady+0x134>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	d500      	bpl.n	8003d92 <HAL_I2C_IsDeviceReady+0x2a>
 8003d90:	e086      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x138>
    __HAL_LOCK(hi2c);
 8003d92:	2340      	movs	r3, #64	@ 0x40
 8003d94:	5cc3      	ldrb	r3, [r0, r3]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d100      	bne.n	8003d9c <HAL_I2C_IsDeviceReady+0x34>
 8003d9a:	e083      	b.n	8003ea4 <HAL_I2C_IsDeviceReady+0x13c>
 8003d9c:	2340      	movs	r3, #64	@ 0x40
 8003d9e:	2201      	movs	r2, #1
 8003da0:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da2:	3301      	adds	r3, #1
 8003da4:	3223      	adds	r2, #35	@ 0x23
 8003da6:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003dac:	058b      	lsls	r3, r1, #22
 8003dae:	0d9b      	lsrs	r3, r3, #22
 8003db0:	469b      	mov	fp, r3
 8003db2:	68eb      	ldr	r3, [r5, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d014      	beq.n	8003de2 <HAL_I2C_IsDeviceReady+0x7a>
 8003db8:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_I2C_IsDeviceReady+0x148>)
 8003dba:	465a      	mov	r2, fp
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	682a      	ldr	r2, [r5, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fc05 	bl	80025d0 <HAL_GetTick>
 8003dc6:	0007      	movs	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	699a      	ldr	r2, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dcc:	6999      	ldr	r1, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dce:	2320      	movs	r3, #32
 8003dd0:	4013      	ands	r3, r2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d129      	bne.n	8003e2e <HAL_I2C_IsDeviceReady+0xc6>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dda:	3320      	adds	r3, #32
 8003ddc:	4699      	mov	r9, r3
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dde:	2610      	movs	r6, #16
 8003de0:	e00d      	b.n	8003dfe <HAL_I2C_IsDeviceReady+0x96>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	059a      	lsls	r2, r3, #22
 8003de6:	0d92      	lsrs	r2, r2, #22
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_I2C_IsDeviceReady+0x14c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	e7e7      	b.n	8003dbe <HAL_I2C_IsDeviceReady+0x56>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dee:	682a      	ldr	r2, [r5, #0]
 8003df0:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	4649      	mov	r1, r9
 8003df6:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d117      	bne.n	8003e2e <HAL_I2C_IsDeviceReady+0xc6>
        if (Timeout != HAL_MAX_DELAY)
 8003dfe:	1c63      	adds	r3, r4, #1
 8003e00:	d0f5      	beq.n	8003dee <HAL_I2C_IsDeviceReady+0x86>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fe fbe5 	bl	80025d0 <HAL_GetTick>
 8003e06:	1bc0      	subs	r0, r0, r7
 8003e08:	42a0      	cmp	r0, r4
 8003e0a:	d801      	bhi.n	8003e10 <HAL_I2C_IsDeviceReady+0xa8>
 8003e0c:	2c00      	cmp	r4, #0
 8003e0e:	d1ee      	bne.n	8003dee <HAL_I2C_IsDeviceReady+0x86>
            hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	2220      	movs	r2, #32
 8003e12:	2341      	movs	r3, #65	@ 0x41
 8003e14:	54ea      	strb	r2, [r5, r3]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e16:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	646b      	str	r3, [r5, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8003e1c:	2340      	movs	r3, #64	@ 0x40
 8003e1e:	2200      	movs	r2, #0
 8003e20:	54ea      	strb	r2, [r5, r3]
            return HAL_ERROR;
 8003e22:	2001      	movs	r0, #1
}
 8003e24:	b007      	add	sp, #28
 8003e26:	bcc0      	pop	{r6, r7}
 8003e28:	46bb      	mov	fp, r7
 8003e2a:	46b1      	mov	r9, r6
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	06db      	lsls	r3, r3, #27
 8003e34:	d520      	bpl.n	8003e78 <HAL_I2C_IsDeviceReady+0x110>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e36:	9700      	str	r7, [sp, #0]
 8003e38:	0023      	movs	r3, r4
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2120      	movs	r1, #32
 8003e3e:	0028      	movs	r0, r5
 8003e40:	f7ff fdae 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d131      	bne.n	8003eac <HAL_I2C_IsDeviceReady+0x144>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e4e:	682b      	ldr	r3, [r5, #0]
 8003e50:	3210      	adds	r2, #16
 8003e52:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 8003e54:	9b05      	ldr	r3, [sp, #20]
 8003e56:	3301      	adds	r3, #1
 8003e58:	9305      	str	r3, [sp, #20]
    } while (I2C_Trials < Trials);
 8003e5a:	9b05      	ldr	r3, [sp, #20]
 8003e5c:	9a02      	ldr	r2, [sp, #8]
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d3a7      	bcc.n	8003db2 <HAL_I2C_IsDeviceReady+0x4a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e62:	2220      	movs	r2, #32
 8003e64:	2341      	movs	r3, #65	@ 0x41
 8003e66:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e68:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8003e6e:	2340      	movs	r3, #64	@ 0x40
 8003e70:	2200      	movs	r2, #0
 8003e72:	54ea      	strb	r2, [r5, r3]
    return HAL_ERROR;
 8003e74:	3001      	adds	r0, #1
 8003e76:	e7d5      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e78:	9700      	str	r7, [sp, #0]
 8003e7a:	0023      	movs	r3, r4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2120      	movs	r1, #32
 8003e80:	0028      	movs	r0, r5
 8003e82:	f7ff fd8d 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d10e      	bne.n	8003ea8 <HAL_I2C_IsDeviceReady+0x140>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e8a:	682a      	ldr	r2, [r5, #0]
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	2241      	movs	r2, #65	@ 0x41
 8003e92:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8003e94:	3320      	adds	r3, #32
 8003e96:	2200      	movs	r2, #0
 8003e98:	54ea      	strb	r2, [r5, r3]
        return HAL_OK;
 8003e9a:	e7c3      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_BUSY;
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	e7c1      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
      return HAL_BUSY;
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	e7bf      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
    __HAL_LOCK(hi2c);
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	e7bd      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	e7bb      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
 8003eae:	e7b9      	b.n	8003e24 <HAL_I2C_IsDeviceReady+0xbc>
 8003eb0:	02002800 	.word	0x02002800
 8003eb4:	02002000 	.word	0x02002000

08003eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	2341      	movs	r3, #65	@ 0x41
 8003ebc:	5cc3      	ldrb	r3, [r0, r3]
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d120      	bne.n	8003f04 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	5cc3      	ldrb	r3, [r0, r3]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d01e      	beq.n	8003f08 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003eca:	2440      	movs	r4, #64	@ 0x40
 8003ecc:	2201      	movs	r2, #1
 8003ece:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	2541      	movs	r5, #65	@ 0x41
 8003ed2:	2324      	movs	r3, #36	@ 0x24
 8003ed4:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed6:	6806      	ldr	r6, [r0, #0]
 8003ed8:	6833      	ldr	r3, [r6, #0]
 8003eda:	4393      	bics	r3, r2
 8003edc:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ede:	6806      	ldr	r6, [r0, #0]
 8003ee0:	6833      	ldr	r3, [r6, #0]
 8003ee2:	4f0a      	ldr	r7, [pc, #40]	@ (8003f0c <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003ee4:	403b      	ands	r3, r7
 8003ee6:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee8:	6806      	ldr	r6, [r0, #0]
 8003eea:	6833      	ldr	r3, [r6, #0]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef0:	6801      	ldr	r1, [r0, #0]
 8003ef2:	680b      	ldr	r3, [r1, #0]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003f00:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003f04:	2002      	movs	r0, #2
 8003f06:	e7fc      	b.n	8003f02 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8003f08:	2002      	movs	r0, #2
 8003f0a:	e7fa      	b.n	8003f02 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8003f0c:	ffffefff 	.word	0xffffefff

08003f10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f12:	2341      	movs	r3, #65	@ 0x41
 8003f14:	5cc3      	ldrb	r3, [r0, r3]
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d11e      	bne.n	8003f58 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	5cc3      	ldrb	r3, [r0, r3]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d01c      	beq.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8003f22:	2440      	movs	r4, #64	@ 0x40
 8003f24:	2201      	movs	r2, #1
 8003f26:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f28:	2541      	movs	r5, #65	@ 0x41
 8003f2a:	2324      	movs	r3, #36	@ 0x24
 8003f2c:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f2e:	6806      	ldr	r6, [r0, #0]
 8003f30:	6833      	ldr	r3, [r6, #0]
 8003f32:	4393      	bics	r3, r2
 8003f34:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f36:	6806      	ldr	r6, [r0, #0]
 8003f38:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f3a:	4f09      	ldr	r7, [pc, #36]	@ (8003f60 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003f3c:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3e:	0209      	lsls	r1, r1, #8
 8003f40:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f42:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f44:	6801      	ldr	r1, [r0, #0]
 8003f46:	680b      	ldr	r3, [r1, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003f54:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003f58:	2002      	movs	r0, #2
 8003f5a:	e7fc      	b.n	8003f56 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8003f5c:	2002      	movs	r0, #2
 8003f5e:	e7fa      	b.n	8003f56 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8003f60:	fffff0ff 	.word	0xfffff0ff

08003f64 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8003f64:	b082      	sub	sp, #8
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	4a07      	ldr	r2, [pc, #28]	@ (8003f84 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8003f68:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4319      	orrs	r1, r3
 8003f6e:	6411      	str	r1, [r2, #64]	@ 0x40
 8003f70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f72:	4013      	ands	r3, r2
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	9b01      	ldr	r3, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003f78:	4a03      	ldr	r2, [pc, #12]	@ (8003f88 <HAL_I2CEx_EnableFastModePlus+0x24>)
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	4303      	orrs	r3, r0
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	b002      	add	sp, #8
 8003f82:	4770      	bx	lr
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40010000 	.word	0x40010000

08003f8c <HAL_PWR_EnableBkUpAccess>:
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4a03      	ldr	r2, [pc, #12]	@ (8003f9c <HAL_PWR_EnableBkUpAccess+0x10>)
 8003f8e:	6811      	ldr	r1, [r2, #0]
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	4770      	bx	lr
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003fa4:	4913      	ldr	r1, [pc, #76]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003fa6:	680b      	ldr	r3, [r1, #0]
 8003fa8:	4813      	ldr	r0, [pc, #76]	@ (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8003faa:	4003      	ands	r3, r0
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb0:	2380      	movs	r3, #128	@ 0x80
 8003fb2:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003fb4:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d000      	beq.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003fba:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0058      	lsls	r0, r3, #1
 8003fc2:	18c0      	adds	r0, r0, r3
 8003fc4:	0040      	lsls	r0, r0, #1
 8003fc6:	490e      	ldr	r1, [pc, #56]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8003fc8:	f7fc f8a4 	bl	8000114 <__udivsi3>
 8003fcc:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fce:	4b09      	ldr	r3, [pc, #36]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	055b      	lsls	r3, r3, #21
 8003fd4:	d50a      	bpl.n	8003fec <HAL_PWREx_ControlVoltageScaling+0x4c>
 8003fd6:	4907      	ldr	r1, [pc, #28]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003fd8:	2280      	movs	r2, #128	@ 0x80
 8003fda:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8003fdc:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fde:	694b      	ldr	r3, [r1, #20]
 8003fe0:	4213      	tst	r3, r2
 8003fe2:	d005      	beq.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d1f9      	bne.n	8003fdc <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8003fe8:	2003      	movs	r0, #3
 8003fea:	e7e6      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8003fec:	2000      	movs	r0, #0
 8003fee:	e7e4      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x1a>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e7e2      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x1a>
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	fffff9ff 	.word	0xfffff9ff
 8003ffc:	20000018 	.word	0x20000018
 8004000:	000f4240 	.word	0x000f4240

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004006:	46ce      	mov	lr, r9
 8004008:	4647      	mov	r7, r8
 800400a:	b580      	push	{r7, lr}
 800400c:	b083      	sub	sp, #12
 800400e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004010:	d100      	bne.n	8004014 <HAL_RCC_OscConfig+0x10>
 8004012:	e23e      	b.n	8004492 <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004014:	6803      	ldr	r3, [r0, #0]
 8004016:	07db      	lsls	r3, r3, #31
 8004018:	d538      	bpl.n	800408c <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401a:	4ac7      	ldr	r2, [pc, #796]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800401c:	6891      	ldr	r1, [r2, #8]
 800401e:	2338      	movs	r3, #56	@ 0x38
 8004020:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004022:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004024:	2b10      	cmp	r3, #16
 8004026:	d026      	beq.n	8004076 <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004028:	2b08      	cmp	r3, #8
 800402a:	d027      	beq.n	800407c <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	2280      	movs	r2, #128	@ 0x80
 8004030:	0252      	lsls	r2, r2, #9
 8004032:	4293      	cmp	r3, r2
 8004034:	d07a      	beq.n	800412c <HAL_RCC_OscConfig+0x128>
 8004036:	22a0      	movs	r2, #160	@ 0xa0
 8004038:	02d2      	lsls	r2, r2, #11
 800403a:	4293      	cmp	r3, r2
 800403c:	d07d      	beq.n	800413a <HAL_RCC_OscConfig+0x136>
 800403e:	4bbe      	ldr	r3, [pc, #760]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	49be      	ldr	r1, [pc, #760]	@ (800433c <HAL_RCC_OscConfig+0x338>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	49bd      	ldr	r1, [pc, #756]	@ (8004340 <HAL_RCC_OscConfig+0x33c>)
 800404c:	400a      	ands	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d07d      	beq.n	8004152 <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fe fabb 	bl	80025d0 <HAL_GetTick>
 800405a:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405c:	4fb6      	ldr	r7, [pc, #728]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800405e:	2680      	movs	r6, #128	@ 0x80
 8004060:	02b6      	lsls	r6, r6, #10
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	4233      	tst	r3, r6
 8004066:	d111      	bne.n	800408c <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe fab2 	bl	80025d0 <HAL_GetTick>
 800406c:	1b40      	subs	r0, r0, r5
 800406e:	2864      	cmp	r0, #100	@ 0x64
 8004070:	d9f7      	bls.n	8004062 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8004072:	2003      	movs	r0, #3
 8004074:	e20e      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004076:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004078:	0792      	lsls	r2, r2, #30
 800407a:	d1d7      	bne.n	800402c <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	4bae      	ldr	r3, [pc, #696]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	039b      	lsls	r3, r3, #14
 8004082:	d503      	bpl.n	800408c <HAL_RCC_OscConfig+0x88>
 8004084:	6863      	ldr	r3, [r4, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d100      	bne.n	800408c <HAL_RCC_OscConfig+0x88>
 800408a:	e208      	b.n	800449e <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	079b      	lsls	r3, r3, #30
 8004090:	d52a      	bpl.n	80040e8 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004092:	4aa9      	ldr	r2, [pc, #676]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004094:	6891      	ldr	r1, [r2, #8]
 8004096:	2338      	movs	r3, #56	@ 0x38
 8004098:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800409a:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800409c:	2b10      	cmp	r3, #16
 800409e:	d068      	beq.n	8004172 <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d16b      	bne.n	800417c <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a4:	4ba4      	ldr	r3, [pc, #656]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	055b      	lsls	r3, r3, #21
 80040aa:	d500      	bpl.n	80040ae <HAL_RCC_OscConfig+0xaa>
 80040ac:	e21a      	b.n	80044e4 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ae:	49a2      	ldr	r1, [pc, #648]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80040b0:	684a      	ldr	r2, [r1, #4]
 80040b2:	6963      	ldr	r3, [r4, #20]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	48a3      	ldr	r0, [pc, #652]	@ (8004344 <HAL_RCC_OscConfig+0x340>)
 80040b8:	4002      	ands	r2, r0
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040be:	4a9e      	ldr	r2, [pc, #632]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80040c0:	6813      	ldr	r3, [r2, #0]
 80040c2:	49a1      	ldr	r1, [pc, #644]	@ (8004348 <HAL_RCC_OscConfig+0x344>)
 80040c4:	400b      	ands	r3, r1
 80040c6:	6921      	ldr	r1, [r4, #16]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	499f      	ldr	r1, [pc, #636]	@ (800434c <HAL_RCC_OscConfig+0x348>)
 80040d0:	049b      	lsls	r3, r3, #18
 80040d2:	0f5b      	lsrs	r3, r3, #29
 80040d4:	4a9e      	ldr	r2, [pc, #632]	@ (8004350 <HAL_RCC_OscConfig+0x34c>)
 80040d6:	40da      	lsrs	r2, r3
 80040d8:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040da:	4b9e      	ldr	r3, [pc, #632]	@ (8004354 <HAL_RCC_OscConfig+0x350>)
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	f7fe fa2f 	bl	8002540 <HAL_InitTick>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d000      	beq.n	80040e8 <HAL_RCC_OscConfig+0xe4>
 80040e6:	e1dc      	b.n	80044a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	071b      	lsls	r3, r3, #28
 80040ec:	d400      	bmi.n	80040f0 <HAL_RCC_OscConfig+0xec>
 80040ee:	e08b      	b.n	8004208 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040f0:	4b91      	ldr	r3, [pc, #580]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	2338      	movs	r3, #56	@ 0x38
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b18      	cmp	r3, #24
 80040fa:	d07d      	beq.n	80041f8 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040fc:	69a3      	ldr	r3, [r4, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d100      	bne.n	8004104 <HAL_RCC_OscConfig+0x100>
 8004102:	e0c4      	b.n	800428e <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004104:	4a8c      	ldr	r2, [pc, #560]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004106:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004108:	2101      	movs	r1, #1
 800410a:	430b      	orrs	r3, r1
 800410c:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fe fa5f 	bl	80025d0 <HAL_GetTick>
 8004112:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004114:	4f88      	ldr	r7, [pc, #544]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004116:	2602      	movs	r6, #2
 8004118:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800411a:	421e      	tst	r6, r3
 800411c:	d174      	bne.n	8004208 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411e:	f7fe fa57 	bl	80025d0 <HAL_GetTick>
 8004122:	1b40      	subs	r0, r0, r5
 8004124:	2802      	cmp	r0, #2
 8004126:	d9f7      	bls.n	8004118 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 8004128:	2003      	movs	r0, #3
 800412a:	e1b3      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	4a82      	ldr	r2, [pc, #520]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800412e:	6811      	ldr	r1, [r2, #0]
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	025b      	lsls	r3, r3, #9
 8004134:	430b      	orrs	r3, r1
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e78a      	b.n	8004050 <HAL_RCC_OscConfig+0x4c>
 800413a:	4b7f      	ldr	r3, [pc, #508]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	2280      	movs	r2, #128	@ 0x80
 8004140:	02d2      	lsls	r2, r2, #11
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	6819      	ldr	r1, [r3, #0]
 8004148:	2280      	movs	r2, #128	@ 0x80
 800414a:	0252      	lsls	r2, r2, #9
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e77e      	b.n	8004050 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004152:	f7fe fa3d 	bl	80025d0 <HAL_GetTick>
 8004156:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004158:	4f77      	ldr	r7, [pc, #476]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800415a:	2680      	movs	r6, #128	@ 0x80
 800415c:	02b6      	lsls	r6, r6, #10
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	4233      	tst	r3, r6
 8004162:	d093      	beq.n	800408c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fa34 	bl	80025d0 <HAL_GetTick>
 8004168:	1b40      	subs	r0, r0, r5
 800416a:	2864      	cmp	r0, #100	@ 0x64
 800416c:	d9f7      	bls.n	800415e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 800416e:	2003      	movs	r0, #3
 8004170:	e190      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004172:	3b0d      	subs	r3, #13
 8004174:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004176:	2b02      	cmp	r3, #2
 8004178:	d100      	bne.n	800417c <HAL_RCC_OscConfig+0x178>
 800417a:	e1a3      	b.n	80044c4 <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417c:	68e3      	ldr	r3, [r4, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d024      	beq.n	80041cc <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004182:	4a6d      	ldr	r2, [pc, #436]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004184:	6813      	ldr	r3, [r2, #0]
 8004186:	4970      	ldr	r1, [pc, #448]	@ (8004348 <HAL_RCC_OscConfig+0x344>)
 8004188:	400b      	ands	r3, r1
 800418a:	6921      	ldr	r1, [r4, #16]
 800418c:	430b      	orrs	r3, r1
 800418e:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004190:	6811      	ldr	r1, [r2, #0]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	430b      	orrs	r3, r1
 8004198:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800419a:	f7fe fa19 	bl	80025d0 <HAL_GetTick>
 800419e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4f65      	ldr	r7, [pc, #404]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80041a2:	2680      	movs	r6, #128	@ 0x80
 80041a4:	00f6      	lsls	r6, r6, #3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	4233      	tst	r3, r6
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fe fa10 	bl	80025d0 <HAL_GetTick>
 80041b0:	1b40      	subs	r0, r0, r5
 80041b2:	2802      	cmp	r0, #2
 80041b4:	d9f7      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 80041b6:	2003      	movs	r0, #3
 80041b8:	e16c      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	495f      	ldr	r1, [pc, #380]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80041bc:	684a      	ldr	r2, [r1, #4]
 80041be:	6963      	ldr	r3, [r4, #20]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	4860      	ldr	r0, [pc, #384]	@ (8004344 <HAL_RCC_OscConfig+0x340>)
 80041c4:	4002      	ands	r2, r0
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 80041ca:	e78d      	b.n	80040e8 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 80041cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	4961      	ldr	r1, [pc, #388]	@ (8004358 <HAL_RCC_OscConfig+0x354>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041d6:	f7fe f9fb 	bl	80025d0 <HAL_GetTick>
 80041da:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041dc:	4f56      	ldr	r7, [pc, #344]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80041de:	2680      	movs	r6, #128	@ 0x80
 80041e0:	00f6      	lsls	r6, r6, #3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	4233      	tst	r3, r6
 80041e6:	d100      	bne.n	80041ea <HAL_RCC_OscConfig+0x1e6>
 80041e8:	e77e      	b.n	80040e8 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fe f9f1 	bl	80025d0 <HAL_GetTick>
 80041ee:	1b40      	subs	r0, r0, r5
 80041f0:	2802      	cmp	r0, #2
 80041f2:	d9f6      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 80041f4:	2003      	movs	r0, #3
 80041f6:	e14d      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80041fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fc:	079b      	lsls	r3, r3, #30
 80041fe:	d503      	bpl.n	8004208 <HAL_RCC_OscConfig+0x204>
 8004200:	69a3      	ldr	r3, [r4, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d100      	bne.n	8004208 <HAL_RCC_OscConfig+0x204>
 8004206:	e14e      	b.n	80044a6 <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	075b      	lsls	r3, r3, #29
 800420c:	d400      	bmi.n	8004210 <HAL_RCC_OscConfig+0x20c>
 800420e:	e0ac      	b.n	800436a <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004210:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	2338      	movs	r3, #56	@ 0x38
 8004216:	4013      	ands	r3, r2
 8004218:	2b20      	cmp	r3, #32
 800421a:	d04c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800421c:	4b46      	ldr	r3, [pc, #280]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004220:	2200      	movs	r2, #0
 8004222:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	d40b      	bmi.n	8004240 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004228:	4b43      	ldr	r3, [pc, #268]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800422a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800422c:	2180      	movs	r1, #128	@ 0x80
 800422e:	0549      	lsls	r1, r1, #21
 8004230:	430a      	orrs	r2, r1
 8004232:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004236:	400b      	ands	r3, r1
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800423c:	2301      	movs	r3, #1
 800423e:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	4b46      	ldr	r3, [pc, #280]	@ (800435c <HAL_RCC_OscConfig+0x358>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	d53f      	bpl.n	80042c8 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	68a3      	ldr	r3, [r4, #8]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d052      	beq.n	80042f4 <HAL_RCC_OscConfig+0x2f0>
 800424e:	2b05      	cmp	r3, #5
 8004250:	d056      	beq.n	8004300 <HAL_RCC_OscConfig+0x2fc>
 8004252:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004254:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004256:	2101      	movs	r1, #1
 8004258:	438a      	bics	r2, r1
 800425a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800425c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800425e:	3103      	adds	r1, #3
 8004260:	438a      	bics	r2, r1
 8004262:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d054      	beq.n	8004314 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fe f9b1 	bl	80025d0 <HAL_GetTick>
 800426e:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004270:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004272:	4698      	mov	r8, r3
 8004274:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	4d3a      	ldr	r5, [pc, #232]	@ (8004360 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004278:	4643      	mov	r3, r8
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	421f      	tst	r7, r3
 800427e:	d171      	bne.n	8004364 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fe f9a6 	bl	80025d0 <HAL_GetTick>
 8004284:	1b80      	subs	r0, r0, r6
 8004286:	42a8      	cmp	r0, r5
 8004288:	d9f6      	bls.n	8004278 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800428a:	2003      	movs	r0, #3
 800428c:	e102      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 800428e:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004290:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8004292:	2101      	movs	r1, #1
 8004294:	438b      	bics	r3, r1
 8004296:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004298:	f7fe f99a 	bl	80025d0 <HAL_GetTick>
 800429c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800429e:	4f26      	ldr	r7, [pc, #152]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80042a0:	2602      	movs	r6, #2
 80042a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a4:	421e      	tst	r6, r3
 80042a6:	d0af      	beq.n	8004208 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a8:	f7fe f992 	bl	80025d0 <HAL_GetTick>
 80042ac:	1b40      	subs	r0, r0, r5
 80042ae:	2802      	cmp	r0, #2
 80042b0:	d9f7      	bls.n	80042a2 <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 80042b2:	2003      	movs	r0, #3
 80042b4:	e0ee      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	079b      	lsls	r3, r3, #30
 80042bc:	d555      	bpl.n	800436a <HAL_RCC_OscConfig+0x366>
 80042be:	68a3      	ldr	r3, [r4, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d152      	bne.n	800436a <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 80042c4:	2001      	movs	r0, #1
 80042c6:	e0e5      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c8:	4a24      	ldr	r2, [pc, #144]	@ (800435c <HAL_RCC_OscConfig+0x358>)
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042d4:	f7fe f97c 	bl	80025d0 <HAL_GetTick>
 80042d8:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042da:	4d20      	ldr	r5, [pc, #128]	@ (800435c <HAL_RCC_OscConfig+0x358>)
 80042dc:	2780      	movs	r7, #128	@ 0x80
 80042de:	007f      	lsls	r7, r7, #1
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	423b      	tst	r3, r7
 80042e4:	d1b0      	bne.n	8004248 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e6:	f7fe f973 	bl	80025d0 <HAL_GetTick>
 80042ea:	1b80      	subs	r0, r0, r6
 80042ec:	2802      	cmp	r0, #2
 80042ee:	d9f7      	bls.n	80042e0 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 80042f0:	2003      	movs	r0, #3
 80042f2:	e0cf      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80042f6:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80042f8:	2101      	movs	r1, #1
 80042fa:	430b      	orrs	r3, r1
 80042fc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80042fe:	e7b1      	b.n	8004264 <HAL_RCC_OscConfig+0x260>
 8004300:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 8004302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004304:	2104      	movs	r1, #4
 8004306:	430a      	orrs	r2, r1
 8004308:	65da      	str	r2, [r3, #92]	@ 0x5c
 800430a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800430c:	3903      	subs	r1, #3
 800430e:	430a      	orrs	r2, r1
 8004310:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004312:	e7a7      	b.n	8004264 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe f95c 	bl	80025d0 <HAL_GetTick>
 8004318:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431a:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 800431c:	4698      	mov	r8, r3
 800431e:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	4d0f      	ldr	r5, [pc, #60]	@ (8004360 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004322:	4643      	mov	r3, r8
 8004324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004326:	421f      	tst	r7, r3
 8004328:	d01c      	beq.n	8004364 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fe f951 	bl	80025d0 <HAL_GetTick>
 800432e:	1b80      	subs	r0, r0, r6
 8004330:	42a8      	cmp	r0, r5
 8004332:	d9f6      	bls.n	8004322 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004334:	2003      	movs	r0, #3
 8004336:	e0ad      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
 8004338:	40021000 	.word	0x40021000
 800433c:	fffeffff 	.word	0xfffeffff
 8004340:	fffbffff 	.word	0xfffbffff
 8004344:	ffff80ff 	.word	0xffff80ff
 8004348:	ffffc7ff 	.word	0xffffc7ff
 800434c:	20000018 	.word	0x20000018
 8004350:	00f42400 	.word	0x00f42400
 8004354:	20000020 	.word	0x20000020
 8004358:	fffffeff 	.word	0xfffffeff
 800435c:	40007000 	.word	0x40007000
 8004360:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004364:	464b      	mov	r3, r9
 8004366:	2b01      	cmp	r3, #1
 8004368:	d021      	beq.n	80043ae <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800436a:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800436e:	2b00      	cmp	r3, #0
 8004370:	d100      	bne.n	8004374 <HAL_RCC_OscConfig+0x370>
 8004372:	e08f      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	4a62      	ldr	r2, [pc, #392]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 8004376:	6891      	ldr	r1, [r2, #8]
 8004378:	2238      	movs	r2, #56	@ 0x38
 800437a:	400a      	ands	r2, r1
 800437c:	2a10      	cmp	r2, #16
 800437e:	d064      	beq.n	800444a <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004380:	2b02      	cmp	r3, #2
 8004382:	d01a      	beq.n	80043ba <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8004384:	4a5e      	ldr	r2, [pc, #376]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	495e      	ldr	r1, [pc, #376]	@ (8004504 <HAL_RCC_OscConfig+0x500>)
 800438a:	400b      	ands	r3, r1
 800438c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800438e:	f7fe f91f 	bl	80025d0 <HAL_GetTick>
 8004392:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4e5a      	ldr	r6, [pc, #360]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 8004396:	2580      	movs	r5, #128	@ 0x80
 8004398:	04ad      	lsls	r5, r5, #18
 800439a:	6833      	ldr	r3, [r6, #0]
 800439c:	422b      	tst	r3, r5
 800439e:	d04d      	beq.n	800443c <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe f916 	bl	80025d0 <HAL_GetTick>
 80043a4:	1b00      	subs	r0, r0, r4
 80043a6:	2802      	cmp	r0, #2
 80043a8:	d9f7      	bls.n	800439a <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 80043aa:	2003      	movs	r0, #3
 80043ac:	e072      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4a54      	ldr	r2, [pc, #336]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80043b0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80043b2:	4955      	ldr	r1, [pc, #340]	@ (8004508 <HAL_RCC_OscConfig+0x504>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80043b8:	e7d7      	b.n	800436a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4a51      	ldr	r2, [pc, #324]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	4951      	ldr	r1, [pc, #324]	@ (8004504 <HAL_RCC_OscConfig+0x500>)
 80043c0:	400b      	ands	r3, r1
 80043c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043c4:	f7fe f904 	bl	80025d0 <HAL_GetTick>
 80043c8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ca:	4f4d      	ldr	r7, [pc, #308]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80043cc:	2680      	movs	r6, #128	@ 0x80
 80043ce:	04b6      	lsls	r6, r6, #18
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4233      	tst	r3, r6
 80043d4:	d006      	beq.n	80043e4 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fe f8fb 	bl	80025d0 <HAL_GetTick>
 80043da:	1b40      	subs	r0, r0, r5
 80043dc:	2802      	cmp	r0, #2
 80043de:	d9f7      	bls.n	80043d0 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 80043e0:	2003      	movs	r0, #3
 80043e2:	e057      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e4:	4a46      	ldr	r2, [pc, #280]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80043e6:	68d1      	ldr	r1, [r2, #12]
 80043e8:	6a23      	ldr	r3, [r4, #32]
 80043ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80043ec:	4303      	orrs	r3, r0
 80043ee:	4847      	ldr	r0, [pc, #284]	@ (800450c <HAL_RCC_OscConfig+0x508>)
 80043f0:	4001      	ands	r1, r0
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80043fe:	0209      	lsls	r1, r1, #8
 8004400:	430b      	orrs	r3, r1
 8004402:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004404:	6811      	ldr	r1, [r2, #0]
 8004406:	2380      	movs	r3, #128	@ 0x80
 8004408:	045b      	lsls	r3, r3, #17
 800440a:	430b      	orrs	r3, r1
 800440c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800440e:	68d1      	ldr	r1, [r2, #12]
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	055b      	lsls	r3, r3, #21
 8004414:	430b      	orrs	r3, r1
 8004416:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004418:	f7fe f8da 	bl	80025d0 <HAL_GetTick>
 800441c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	4e38      	ldr	r6, [pc, #224]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 8004420:	2580      	movs	r5, #128	@ 0x80
 8004422:	04ad      	lsls	r5, r5, #18
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	422b      	tst	r3, r5
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe f8d1 	bl	80025d0 <HAL_GetTick>
 800442e:	1b00      	subs	r0, r0, r4
 8004430:	2802      	cmp	r0, #2
 8004432:	d9f7      	bls.n	8004424 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8004434:	2003      	movs	r0, #3
 8004436:	e02d      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8004438:	2000      	movs	r0, #0
 800443a:	e02b      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800443c:	4a30      	ldr	r2, [pc, #192]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 800443e:	68d3      	ldr	r3, [r2, #12]
 8004440:	4933      	ldr	r1, [pc, #204]	@ (8004510 <HAL_RCC_OscConfig+0x50c>)
 8004442:	400b      	ands	r3, r1
 8004444:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004446:	2000      	movs	r0, #0
 8004448:	e024      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444a:	2b01      	cmp	r3, #1
 800444c:	d02d      	beq.n	80044aa <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 800444e:	4b2c      	ldr	r3, [pc, #176]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 8004450:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	2303      	movs	r3, #3
 8004454:	4013      	ands	r3, r2
 8004456:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8004458:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	428b      	cmp	r3, r1
 800445c:	d11a      	bne.n	8004494 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800445e:	2370      	movs	r3, #112	@ 0x70
 8004460:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004464:	428b      	cmp	r3, r1
 8004466:	d115      	bne.n	8004494 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004468:	21fe      	movs	r1, #254	@ 0xfe
 800446a:	01c9      	lsls	r1, r1, #7
 800446c:	4011      	ands	r1, r2
 800446e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004470:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004472:	4299      	cmp	r1, r3
 8004474:	d10e      	bne.n	8004494 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004476:	23f8      	movs	r3, #248	@ 0xf8
 8004478:	039b      	lsls	r3, r3, #14
 800447a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800447e:	428b      	cmp	r3, r1
 8004480:	d108      	bne.n	8004494 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004482:	0f53      	lsrs	r3, r2, #29
 8004484:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004486:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	4193      	sbcs	r3, r2
 800448e:	b2d8      	uxtb	r0, r3
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8004492:	2001      	movs	r0, #1
}
 8004494:	b003      	add	sp, #12
 8004496:	bcc0      	pop	{r6, r7}
 8004498:	46b9      	mov	r9, r7
 800449a:	46b0      	mov	r8, r6
 800449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800449e:	2001      	movs	r0, #1
 80044a0:	e7f8      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
 80044a4:	e7f6      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7f4      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 80044aa:	2001      	movs	r0, #1
 80044ac:	e7f2      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 80044ae:	2001      	movs	r0, #1
 80044b0:	e7f0      	b.n	8004494 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4913      	ldr	r1, [pc, #76]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80044b4:	684a      	ldr	r2, [r1, #4]
 80044b6:	6963      	ldr	r3, [r4, #20]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	4816      	ldr	r0, [pc, #88]	@ (8004514 <HAL_RCC_OscConfig+0x510>)
 80044bc:	4002      	ands	r2, r0
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c2:	e60a      	b.n	80040da <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	055b      	lsls	r3, r3, #21
 80044ca:	d5f2      	bpl.n	80044b2 <HAL_RCC_OscConfig+0x4ae>
 80044cc:	68e3      	ldr	r3, [r4, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ed      	beq.n	80044ae <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	490b      	ldr	r1, [pc, #44]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80044d4:	684a      	ldr	r2, [r1, #4]
 80044d6:	6963      	ldr	r3, [r4, #20]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	480e      	ldr	r0, [pc, #56]	@ (8004514 <HAL_RCC_OscConfig+0x510>)
 80044dc:	4002      	ands	r2, r0
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e2:	e5fa      	b.n	80040da <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e4:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 80044e6:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0d3      	beq.n	8004494 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4904      	ldr	r1, [pc, #16]	@ (8004500 <HAL_RCC_OscConfig+0x4fc>)
 80044ee:	684a      	ldr	r2, [r1, #4]
 80044f0:	6963      	ldr	r3, [r4, #20]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	4807      	ldr	r0, [pc, #28]	@ (8004514 <HAL_RCC_OscConfig+0x510>)
 80044f6:	4002      	ands	r2, r0
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044fc:	e5df      	b.n	80040be <HAL_RCC_OscConfig+0xba>
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	40021000 	.word	0x40021000
 8004504:	feffffff 	.word	0xfeffffff
 8004508:	efffffff 	.word	0xefffffff
 800450c:	1fc1808c 	.word	0x1fc1808c
 8004510:	effefffc 	.word	0xeffefffc
 8004514:	ffff80ff 	.word	0xffff80ff

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800451a:	4b29      	ldr	r3, [pc, #164]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2238      	movs	r2, #56	@ 0x38
 8004520:	421a      	tst	r2, r3
 8004522:	d106      	bne.n	8004532 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004524:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	049b      	lsls	r3, r3, #18
 800452a:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800452c:	4825      	ldr	r0, [pc, #148]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0xac>)
 800452e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004530:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004532:	4b23      	ldr	r3, [pc, #140]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	2338      	movs	r3, #56	@ 0x38
 8004538:	4013      	ands	r3, r2
 800453a:	2b08      	cmp	r3, #8
 800453c:	d03a      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800453e:	4b20      	ldr	r3, [pc, #128]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	2338      	movs	r3, #56	@ 0x38
 8004544:	4013      	ands	r3, r2
 8004546:	2b10      	cmp	r3, #16
 8004548:	d014      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800454a:	4b1d      	ldr	r3, [pc, #116]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	2338      	movs	r3, #56	@ 0x38
 8004550:	4013      	ands	r3, r2
 8004552:	2b20      	cmp	r3, #32
 8004554:	d030      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004556:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2038      	movs	r0, #56	@ 0x38
 800455c:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 800455e:	3818      	subs	r0, #24
 8004560:	1e43      	subs	r3, r0, #1
 8004562:	4198      	sbcs	r0, r3
 8004564:	4240      	negs	r0, r0
 8004566:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004568:	4018      	ands	r0, r3
 800456a:	23fa      	movs	r3, #250	@ 0xfa
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	469c      	mov	ip, r3
 8004570:	4460      	add	r0, ip
 8004572:	e7dd      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004574:	4a12      	ldr	r2, [pc, #72]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004576:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004578:	68d1      	ldr	r1, [r2, #12]
 800457a:	0649      	lsls	r1, r1, #25
 800457c:	0f49      	lsrs	r1, r1, #29
 800457e:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004580:	43db      	mvns	r3, r3
    switch (pllsource)
 8004582:	079b      	lsls	r3, r3, #30
 8004584:	d00e      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004586:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004588:	68dc      	ldr	r4, [r3, #12]
 800458a:	0464      	lsls	r4, r4, #17
 800458c:	0e64      	lsrs	r4, r4, #25
 800458e:	480d      	ldr	r0, [pc, #52]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004590:	f7fb fdc0 	bl	8000114 <__udivsi3>
 8004594:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	0f49      	lsrs	r1, r1, #29
 800459c:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800459e:	f7fb fdb9 	bl	8000114 <__udivsi3>
 80045a2:	e7c5      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a4:	68d4      	ldr	r4, [r2, #12]
 80045a6:	0464      	lsls	r4, r4, #17
 80045a8:	0e64      	lsrs	r4, r4, #25
 80045aa:	4808      	ldr	r0, [pc, #32]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ac:	f7fb fdb2 	bl	8000114 <__udivsi3>
 80045b0:	4360      	muls	r0, r4
        break;
 80045b2:	e7f0      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 80045b4:	4805      	ldr	r0, [pc, #20]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80045b6:	e7bb      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80045b8:	2080      	movs	r0, #128	@ 0x80
 80045ba:	0200      	lsls	r0, r0, #8
 80045bc:	e7b8      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x18>
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	40021000 	.word	0x40021000
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	ffff8300 	.word	0xffff8300
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_ClockConfig>:
{
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	46ce      	mov	lr, r9
 80045d4:	4647      	mov	r7, r8
 80045d6:	b580      	push	{r7, lr}
 80045d8:	0004      	movs	r4, r0
 80045da:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80045dc:	2800      	cmp	r0, #0
 80045de:	d100      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x12>
 80045e0:	e0b6      	b.n	8004750 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004758 <HAL_RCC_ClockConfig+0x188>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2307      	movs	r3, #7
 80045e8:	4013      	ands	r3, r2
 80045ea:	428b      	cmp	r3, r1
 80045ec:	d321      	bcc.n	8004632 <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	079a      	lsls	r2, r3, #30
 80045f2:	d50e      	bpl.n	8004612 <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	075b      	lsls	r3, r3, #29
 80045f6:	d505      	bpl.n	8004604 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045f8:	4a58      	ldr	r2, [pc, #352]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 80045fa:	6891      	ldr	r1, [r2, #8]
 80045fc:	23e0      	movs	r3, #224	@ 0xe0
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	430b      	orrs	r3, r1
 8004602:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004604:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 8004606:	6893      	ldr	r3, [r2, #8]
 8004608:	4955      	ldr	r1, [pc, #340]	@ (8004760 <HAL_RCC_ClockConfig+0x190>)
 800460a:	400b      	ands	r3, r1
 800460c:	68a1      	ldr	r1, [r4, #8]
 800460e:	430b      	orrs	r3, r1
 8004610:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d55b      	bpl.n	80046d0 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d023      	beq.n	8004666 <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461e:	2b02      	cmp	r3, #2
 8004620:	d042      	beq.n	80046a8 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004622:	2b00      	cmp	r3, #0
 8004624:	d146      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004626:	4a4d      	ldr	r2, [pc, #308]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	0552      	lsls	r2, r2, #21
 800462c:	d420      	bmi.n	8004670 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 800462e:	2001      	movs	r0, #1
 8004630:	e070      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4a49      	ldr	r2, [pc, #292]	@ (8004758 <HAL_RCC_ClockConfig+0x188>)
 8004634:	6813      	ldr	r3, [r2, #0]
 8004636:	2107      	movs	r1, #7
 8004638:	438b      	bics	r3, r1
 800463a:	432b      	orrs	r3, r5
 800463c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800463e:	f7fd ffc7 	bl	80025d0 <HAL_GetTick>
 8004642:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004644:	4b44      	ldr	r3, [pc, #272]	@ (8004758 <HAL_RCC_ClockConfig+0x188>)
 8004646:	4698      	mov	r8, r3
 8004648:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464a:	4b46      	ldr	r3, [pc, #280]	@ (8004764 <HAL_RCC_ClockConfig+0x194>)
 800464c:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800464e:	4643      	mov	r3, r8
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	403b      	ands	r3, r7
 8004654:	42ab      	cmp	r3, r5
 8004656:	d0ca      	beq.n	80045ee <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fd ffba 	bl	80025d0 <HAL_GetTick>
 800465c:	1b80      	subs	r0, r0, r6
 800465e:	4548      	cmp	r0, r9
 8004660:	d9f5      	bls.n	800464e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004662:	2003      	movs	r0, #3
 8004664:	e056      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004666:	4a3d      	ldr	r2, [pc, #244]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	0392      	lsls	r2, r2, #14
 800466c:	d400      	bmi.n	8004670 <HAL_RCC_ClockConfig+0xa0>
 800466e:	e071      	b.n	8004754 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004670:	493a      	ldr	r1, [pc, #232]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 8004672:	688a      	ldr	r2, [r1, #8]
 8004674:	2007      	movs	r0, #7
 8004676:	4382      	bics	r2, r0
 8004678:	4313      	orrs	r3, r2
 800467a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800467c:	f7fd ffa8 	bl	80025d0 <HAL_GetTick>
 8004680:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	4b36      	ldr	r3, [pc, #216]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 8004684:	4698      	mov	r8, r3
 8004686:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	4b36      	ldr	r3, [pc, #216]	@ (8004764 <HAL_RCC_ClockConfig+0x194>)
 800468a:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468c:	4643      	mov	r3, r8
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	403a      	ands	r2, r7
 8004692:	6863      	ldr	r3, [r4, #4]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	429a      	cmp	r2, r3
 8004698:	d01a      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469a:	f7fd ff99 	bl	80025d0 <HAL_GetTick>
 800469e:	1b80      	subs	r0, r0, r6
 80046a0:	4548      	cmp	r0, r9
 80046a2:	d9f3      	bls.n	800468c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80046a4:	2003      	movs	r0, #3
 80046a6:	e035      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a8:	4a2c      	ldr	r2, [pc, #176]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	0192      	lsls	r2, r2, #6
 80046ae:	d4df      	bmi.n	8004670 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80046b0:	2001      	movs	r0, #1
 80046b2:	e02f      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b8:	4a28      	ldr	r2, [pc, #160]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 80046ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046bc:	0792      	lsls	r2, r2, #30
 80046be:	d4d7      	bmi.n	8004670 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80046c0:	2001      	movs	r0, #1
 80046c2:	e027      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046c4:	4a25      	ldr	r2, [pc, #148]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 80046c6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80046c8:	0792      	lsls	r2, r2, #30
 80046ca:	d4d1      	bmi.n	8004670 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80046cc:	2001      	movs	r0, #1
 80046ce:	e021      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b21      	ldr	r3, [pc, #132]	@ (8004758 <HAL_RCC_ClockConfig+0x188>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	2307      	movs	r3, #7
 80046d6:	4013      	ands	r3, r2
 80046d8:	42ab      	cmp	r3, r5
 80046da:	d81f      	bhi.n	800471c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	075b      	lsls	r3, r3, #29
 80046e0:	d506      	bpl.n	80046f0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046e2:	4a1e      	ldr	r2, [pc, #120]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 80046e4:	6893      	ldr	r3, [r2, #8]
 80046e6:	4920      	ldr	r1, [pc, #128]	@ (8004768 <HAL_RCC_ClockConfig+0x198>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80046f0:	f7ff ff12 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80046f4:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_RCC_ClockConfig+0x18c>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	491c      	ldr	r1, [pc, #112]	@ (800476c <HAL_RCC_ClockConfig+0x19c>)
 80046fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <HAL_RCC_ClockConfig+0x1a0>)
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	0f1b      	lsrs	r3, r3, #28
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	589b      	ldr	r3, [r3, r2]
 8004704:	221f      	movs	r2, #31
 8004706:	4013      	ands	r3, r2
 8004708:	40d8      	lsrs	r0, r3
 800470a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800470c:	4b19      	ldr	r3, [pc, #100]	@ (8004774 <HAL_RCC_ClockConfig+0x1a4>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	f7fd ff16 	bl	8002540 <HAL_InitTick>
}
 8004714:	bcc0      	pop	{r6, r7}
 8004716:	46b9      	mov	r9, r7
 8004718:	46b0      	mov	r8, r6
 800471a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471c:	4a0e      	ldr	r2, [pc, #56]	@ (8004758 <HAL_RCC_ClockConfig+0x188>)
 800471e:	6813      	ldr	r3, [r2, #0]
 8004720:	2107      	movs	r1, #7
 8004722:	438b      	bics	r3, r1
 8004724:	432b      	orrs	r3, r5
 8004726:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004728:	f7fd ff52 	bl	80025d0 <HAL_GetTick>
 800472c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800472e:	4b0a      	ldr	r3, [pc, #40]	@ (8004758 <HAL_RCC_ClockConfig+0x188>)
 8004730:	4698      	mov	r8, r3
 8004732:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_ClockConfig+0x194>)
 8004736:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004738:	4643      	mov	r3, r8
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	403b      	ands	r3, r7
 800473e:	42ab      	cmp	r3, r5
 8004740:	d0cc      	beq.n	80046dc <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004742:	f7fd ff45 	bl	80025d0 <HAL_GetTick>
 8004746:	1b80      	subs	r0, r0, r6
 8004748:	4548      	cmp	r0, r9
 800474a:	d9f5      	bls.n	8004738 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 800474c:	2003      	movs	r0, #3
 800474e:	e7e1      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004750:	2001      	movs	r0, #1
 8004752:	e7df      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004754:	2001      	movs	r0, #1
 8004756:	e7dd      	b.n	8004714 <HAL_RCC_ClockConfig+0x144>
 8004758:	40022000 	.word	0x40022000
 800475c:	40021000 	.word	0x40021000
 8004760:	fffff0ff 	.word	0xfffff0ff
 8004764:	00001388 	.word	0x00001388
 8004768:	ffff8fff 	.word	0xffff8fff
 800476c:	20000018 	.word	0x20000018
 8004770:	080071b0 	.word	0x080071b0
 8004774:	20000020 	.word	0x20000020

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	46d6      	mov	lr, sl
 800477c:	464f      	mov	r7, r9
 800477e:	4646      	mov	r6, r8
 8004780:	b5c0      	push	{r6, r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004786:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004788:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800478a:	039b      	lsls	r3, r3, #14
 800478c:	d52a      	bpl.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2200      	movs	r2, #0
 8004794:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	d40b      	bmi.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4b54      	ldr	r3, [pc, #336]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800479c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	0549      	lsls	r1, r1, #21
 80047a2:	430a      	orrs	r2, r1
 80047a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	400b      	ands	r3, r1
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047ae:	2301      	movs	r3, #1
 80047b0:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b2:	4a4f      	ldr	r2, [pc, #316]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	2380      	movs	r3, #128	@ 0x80
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047be:	f7fd ff07 	bl	80025d0 <HAL_GetTick>
 80047c2:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c4:	4f4a      	ldr	r7, [pc, #296]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80047c6:	2680      	movs	r6, #128	@ 0x80
 80047c8:	0076      	lsls	r6, r6, #1
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	4233      	tst	r3, r6
 80047ce:	d000      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80047d0:	e07a      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d2:	f7fd fefd 	bl	80025d0 <HAL_GetTick>
 80047d6:	1b40      	subs	r0, r0, r5
 80047d8:	2802      	cmp	r0, #2
 80047da:	d9f6      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 80047dc:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047de:	4653      	mov	r3, sl
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d05d      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07db      	lsls	r3, r3, #31
 80047e8:	d506      	bpl.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ea:	4a40      	ldr	r2, [pc, #256]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80047ec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80047ee:	2103      	movs	r1, #3
 80047f0:	438b      	bics	r3, r1
 80047f2:	6861      	ldr	r1, [r4, #4]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	d506      	bpl.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047fe:	4a3b      	ldr	r2, [pc, #236]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004800:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004802:	493c      	ldr	r1, [pc, #240]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004804:	400b      	ands	r3, r1
 8004806:	68a1      	ldr	r1, [r4, #8]
 8004808:	430b      	orrs	r3, r1
 800480a:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	045b      	lsls	r3, r3, #17
 8004810:	d50b      	bpl.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004812:	4a36      	ldr	r2, [pc, #216]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004814:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	6921      	ldr	r1, [r4, #16]
 800481c:	430b      	orrs	r3, r1
 800481e:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	05db      	lsls	r3, r3, #23
 8004824:	6922      	ldr	r2, [r4, #16]
 8004826:	429a      	cmp	r2, r3
 8004828:	d040      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x134>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	051b      	lsls	r3, r3, #20
 800482e:	d50b      	bpl.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004830:	4a2e      	ldr	r2, [pc, #184]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004832:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004834:	4930      	ldr	r1, [pc, #192]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004836:	400b      	ands	r3, r1
 8004838:	68e1      	ldr	r1, [r4, #12]
 800483a:	430b      	orrs	r3, r1
 800483c:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	68e2      	ldr	r2, [r4, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d038      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x142>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8004848:	b002      	add	sp, #8
 800484a:	bce0      	pop	{r5, r6, r7}
 800484c:	46ba      	mov	sl, r7
 800484e:	46b1      	mov	r9, r6
 8004850:	46a8      	mov	r8, r5
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004854:	6963      	ldr	r3, [r4, #20]
 8004856:	428b      	cmp	r3, r1
 8004858:	d03e      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800485a:	4b24      	ldr	r3, [pc, #144]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800485c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800485e:	4927      	ldr	r1, [pc, #156]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004860:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8004862:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8004864:	2080      	movs	r0, #128	@ 0x80
 8004866:	0240      	lsls	r0, r0, #9
 8004868:	4328      	orrs	r0, r5
 800486a:	65d8      	str	r0, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800486c:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800486e:	4d24      	ldr	r5, [pc, #144]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004870:	4028      	ands	r0, r5
 8004872:	65d8      	str	r0, [r3, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 8004874:	65d9      	str	r1, [r3, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004876:	07d2      	lsls	r2, r2, #31
 8004878:	d52e      	bpl.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tickstart = HAL_GetTick();
 800487a:	f7fd fea9 	bl	80025d0 <HAL_GetTick>
 800487e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004880:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004882:	4698      	mov	r8, r3
 8004884:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	4b1f      	ldr	r3, [pc, #124]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004888:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488a:	4643      	mov	r3, r8
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	421e      	tst	r6, r3
 8004890:	d122      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fd fe9d 	bl	80025d0 <HAL_GetTick>
 8004896:	1b40      	subs	r0, r0, r5
 8004898:	4548      	cmp	r0, r9
 800489a:	d9f6      	bls.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x112>
            ret = HAL_TIMEOUT;
 800489c:	2003      	movs	r0, #3
 800489e:	e79e      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a0:	4a12      	ldr	r2, [pc, #72]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048a2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80048a4:	4918      	ldr	r1, [pc, #96]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80048a6:	400b      	ands	r3, r1
 80048a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80048aa:	e79b      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048ac:	4a0f      	ldr	r2, [pc, #60]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048ae:	68d1      	ldr	r1, [r2, #12]
 80048b0:	2380      	movs	r3, #128	@ 0x80
 80048b2:	025b      	lsls	r3, r3, #9
 80048b4:	430b      	orrs	r3, r1
 80048b6:	60d3      	str	r3, [r2, #12]
 80048b8:	e7b7      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048ba:	4a0c      	ldr	r2, [pc, #48]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048bc:	68d1      	ldr	r1, [r2, #12]
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	025b      	lsls	r3, r3, #9
 80048c2:	430b      	orrs	r3, r1
 80048c4:	60d3      	str	r3, [r2, #12]
  return status;
 80048c6:	e7bf      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048c8:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048cc:	23c0      	movs	r3, #192	@ 0xc0
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	0011      	movs	r1, r2
 80048d2:	4019      	ands	r1, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048d4:	421a      	tst	r2, r3
 80048d6:	d1bd      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048da:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80048dc:	4907      	ldr	r1, [pc, #28]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048de:	400b      	ands	r3, r1
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	430b      	orrs	r3, r1
 80048e4:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048e6:	2000      	movs	r0, #0
 80048e8:	e779      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x66>
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40007000 	.word	0x40007000
 80048f4:	ffffcfff 	.word	0xffffcfff
 80048f8:	ffff3fff 	.word	0xffff3fff
 80048fc:	fffffcff 	.word	0xfffffcff
 8004900:	fffeffff 	.word	0xfffeffff
 8004904:	00001388 	.word	0x00001388
 8004908:	efffffff 	.word	0xefffffff

0800490c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004910:	6803      	ldr	r3, [r0, #0]
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <HAL_RTC_WaitForSynchro+0x30>)
 8004914:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004916:	f7fd fe5b 	bl	80025d0 <HAL_GetTick>
 800491a:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800491c:	2620      	movs	r6, #32
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800491e:	27fa      	movs	r7, #250	@ 0xfa
 8004920:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	421e      	tst	r6, r3
 8004928:	d106      	bne.n	8004938 <HAL_RTC_WaitForSynchro+0x2c>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800492a:	f7fd fe51 	bl	80025d0 <HAL_GetTick>
 800492e:	1b40      	subs	r0, r0, r5
 8004930:	42b8      	cmp	r0, r7
 8004932:	d9f6      	bls.n	8004922 <HAL_RTC_WaitForSynchro+0x16>
    {
      return HAL_TIMEOUT;
 8004934:	2003      	movs	r0, #3
 8004936:	e000      	b.n	800493a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004938:	2000      	movs	r0, #0
}
 800493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800493c:	0001005f 	.word	0x0001005f

08004940 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004942:	46c6      	mov	lr, r8
 8004944:	b500      	push	{lr}
 8004946:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004948:	6802      	ldr	r2, [r0, #0]
 800494a:	68d3      	ldr	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 800494c:	2500      	movs	r5, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800494e:	065b      	lsls	r3, r3, #25
 8004950:	d503      	bpl.n	800495a <RTC_EnterInitMode+0x1a>
      }
    }
  }

  return status;
}
 8004952:	0028      	movs	r0, r5
 8004954:	bc80      	pop	{r7}
 8004956:	46b8      	mov	r8, r7
 8004958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800495a:	68d3      	ldr	r3, [r2, #12]
 800495c:	2180      	movs	r1, #128	@ 0x80
 800495e:	430b      	orrs	r3, r1
 8004960:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004962:	f7fd fe35 	bl	80025d0 <HAL_GetTick>
 8004966:	0006      	movs	r6, r0
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004968:	2740      	movs	r7, #64	@ 0x40
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800496a:	23fa      	movs	r3, #250	@ 0xfa
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4698      	mov	r8, r3
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	421f      	tst	r7, r3
 8004976:	d1ec      	bne.n	8004952 <RTC_EnterInitMode+0x12>
 8004978:	2d03      	cmp	r5, #3
 800497a:	d0ea      	beq.n	8004952 <RTC_EnterInitMode+0x12>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800497c:	f7fd fe28 	bl	80025d0 <HAL_GetTick>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	4540      	cmp	r0, r8
 8004984:	d9f4      	bls.n	8004970 <RTC_EnterInitMode+0x30>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004986:	2329      	movs	r3, #41	@ 0x29
 8004988:	2203      	movs	r2, #3
 800498a:	54e2      	strb	r2, [r4, r3]
        status = HAL_TIMEOUT;
 800498c:	2503      	movs	r5, #3
 800498e:	e7ef      	b.n	8004970 <RTC_EnterInitMode+0x30>

08004990 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004990:	b510      	push	{r4, lr}
 8004992:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <RTC_ExitInitMode+0x4c>)
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	2180      	movs	r1, #128	@ 0x80
 800499a:	438a      	bics	r2, r1
 800499c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	069b      	lsls	r3, r3, #26
 80049a2:	d408      	bmi.n	80049b6 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049a4:	f7ff ffb2 	bl	800490c <HAL_RTC_WaitForSynchro>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d016      	beq.n	80049da <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ac:	2329      	movs	r3, #41	@ 0x29
 80049ae:	2203      	movs	r2, #3
 80049b0:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 80049b2:	2003      	movs	r0, #3
 80049b4:	e011      	b.n	80049da <RTC_ExitInitMode+0x4a>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049b6:	4a09      	ldr	r2, [pc, #36]	@ (80049dc <RTC_ExitInitMode+0x4c>)
 80049b8:	6993      	ldr	r3, [r2, #24]
 80049ba:	2120      	movs	r1, #32
 80049bc:	438b      	bics	r3, r1
 80049be:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049c0:	f7ff ffa4 	bl	800490c <HAL_RTC_WaitForSynchro>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d003      	beq.n	80049d0 <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049c8:	2329      	movs	r3, #41	@ 0x29
 80049ca:	2203      	movs	r2, #3
 80049cc:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 80049ce:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049d0:	4a02      	ldr	r2, [pc, #8]	@ (80049dc <RTC_ExitInitMode+0x4c>)
 80049d2:	6993      	ldr	r3, [r2, #24]
 80049d4:	2120      	movs	r1, #32
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	40002800 	.word	0x40002800

080049e0 <HAL_RTC_Init>:
{
 80049e0:	b510      	push	{r4, lr}
 80049e2:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 80049e4:	d054      	beq.n	8004a90 <HAL_RTC_Init+0xb0>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80049e6:	2329      	movs	r3, #41	@ 0x29
 80049e8:	5cc3      	ldrb	r3, [r0, r3]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RTC_Init+0x26>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80049ee:	2329      	movs	r3, #41	@ 0x29
 80049f0:	2202      	movs	r2, #2
 80049f2:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	68d3      	ldr	r3, [r2, #12]
 80049f8:	06db      	lsls	r3, r3, #27
 80049fa:	d50d      	bpl.n	8004a18 <HAL_RTC_Init+0x38>
      hrtc->State = HAL_RTC_STATE_READY;
 80049fc:	2329      	movs	r3, #41	@ 0x29
 80049fe:	2201      	movs	r2, #1
 8004a00:	54e2      	strb	r2, [r4, r3]
 8004a02:	2000      	movs	r0, #0
}
 8004a04:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004a06:	3328      	adds	r3, #40	@ 0x28
 8004a08:	2200      	movs	r2, #0
 8004a0a:	54c2      	strb	r2, [r0, r3]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004a0c:	2388      	movs	r3, #136	@ 0x88
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	6043      	str	r3, [r0, #4]
      HAL_RTC_MspInit(hrtc);
 8004a12:	f7fd fc99 	bl	8002348 <HAL_RTC_MspInit>
 8004a16:	e7ea      	b.n	80049ee <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a18:	23ca      	movs	r3, #202	@ 0xca
 8004a1a:	6253      	str	r3, [r2, #36]	@ 0x24
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	2253      	movs	r2, #83	@ 0x53
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8004a22:	0020      	movs	r0, r4
 8004a24:	f7ff ff8c 	bl	8004940 <RTC_EnterInitMode>
      if(status == HAL_OK)
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_RTC_Init+0x54>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	22ff      	movs	r2, #255	@ 0xff
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24
  return status;
 8004a32:	e7e7      	b.n	8004a04 <HAL_RTC_Init+0x24>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	6993      	ldr	r3, [r2, #24]
 8004a38:	4916      	ldr	r1, [pc, #88]	@ (8004a94 <HAL_RTC_Init+0xb4>)
 8004a3a:	400b      	ands	r3, r1
 8004a3c:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	6991      	ldr	r1, [r2, #24]
 8004a42:	68a3      	ldr	r3, [r4, #8]
 8004a44:	6960      	ldr	r0, [r4, #20]
 8004a46:	4303      	orrs	r3, r0
 8004a48:	69e0      	ldr	r0, [r4, #28]
 8004a4a:	4303      	orrs	r3, r0
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	6922      	ldr	r2, [r4, #16]
 8004a54:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	6911      	ldr	r1, [r2, #16]
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8004a62:	0020      	movs	r0, r4
 8004a64:	f7ff ff94 	bl	8004990 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1df      	bne.n	8004a2c <HAL_RTC_Init+0x4c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	6993      	ldr	r3, [r2, #24]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a76:	6822      	ldr	r2, [r4, #0]
 8004a78:	6991      	ldr	r1, [r2, #24]
 8004a7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004a7c:	6a20      	ldr	r0, [r4, #32]
 8004a7e:	4303      	orrs	r3, r0
 8004a80:	69a0      	ldr	r0, [r4, #24]
 8004a82:	4303      	orrs	r3, r0
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	22ff      	movs	r2, #255	@ 0xff
 8004a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8004a8e:	e7b5      	b.n	80049fc <HAL_RTC_Init+0x1c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a90:	2001      	movs	r0, #1
 8004a92:	e7b7      	b.n	8004a04 <HAL_RTC_Init+0x24>
 8004a94:	fb8fffbf 	.word	0xfb8fffbf

08004a98 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t Param = Value;

  while(Param >= 10U)
 8004a98:	2809      	cmp	r0, #9
 8004a9a:	d909      	bls.n	8004ab0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 8004a9c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8004a9e:	3301      	adds	r3, #1
    Param -= 10U;
 8004aa0:	380a      	subs	r0, #10
 8004aa2:	b2c0      	uxtb	r0, r0
  while(Param >= 10U)
 8004aa4:	2809      	cmp	r0, #9
 8004aa6:	d8fa      	bhi.n	8004a9e <RTC_ByteToBcd2+0x6>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4318      	orrs	r0, r3
 8004aac:	b2c0      	uxtb	r0, r0
}
 8004aae:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e7f9      	b.n	8004aa8 <RTC_ByteToBcd2+0x10>

08004ab4 <HAL_RTC_SetTime>:
{
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	0004      	movs	r4, r0
 8004ab8:	000e      	movs	r6, r1
 8004aba:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8004abc:	2328      	movs	r3, #40	@ 0x28
 8004abe:	5cc3      	ldrb	r3, [r0, r3]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d056      	beq.n	8004b72 <HAL_RTC_SetTime+0xbe>
 8004ac4:	2328      	movs	r3, #40	@ 0x28
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aca:	3301      	adds	r3, #1
 8004acc:	3201      	adds	r2, #1
 8004ace:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ad0:	6803      	ldr	r3, [r0, #0]
 8004ad2:	32c8      	adds	r2, #200	@ 0xc8
 8004ad4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ad6:	6803      	ldr	r3, [r0, #0]
 8004ad8:	3a77      	subs	r2, #119	@ 0x77
 8004ada:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8004adc:	f7ff ff30 	bl	8004940 <RTC_EnterInitMode>
  if(status == HAL_OK)
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d148      	bne.n	8004b76 <HAL_RTC_SetTime+0xc2>
    if(Format == RTC_FORMAT_BIN)
 8004ae4:	2d00      	cmp	r5, #0
 8004ae6:	d133      	bne.n	8004b50 <HAL_RTC_SetTime+0x9c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	065b      	lsls	r3, r3, #25
 8004aee:	d401      	bmi.n	8004af4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004af4:	7830      	ldrb	r0, [r6, #0]
 8004af6:	f7ff ffcf 	bl	8004a98 <RTC_ByteToBcd2>
 8004afa:	0007      	movs	r7, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004afc:	7870      	ldrb	r0, [r6, #1]
 8004afe:	f7ff ffcb 	bl	8004a98 <RTC_ByteToBcd2>
 8004b02:	0005      	movs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b04:	78b0      	ldrb	r0, [r6, #2]
 8004b06:	f7ff ffc7 	bl	8004a98 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b0a:	78f2      	ldrb	r2, [r6, #3]
 8004b0c:	0592      	lsls	r2, r2, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b0e:	4310      	orrs	r0, r2
 8004b10:	043f      	lsls	r7, r7, #16
 8004b12:	4338      	orrs	r0, r7
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b14:	022d      	lsls	r5, r5, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b16:	4328      	orrs	r0, r5
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_RTC_SetTime+0xd0>)
 8004b1c:	4010      	ands	r0, r2
 8004b1e:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	6993      	ldr	r3, [r2, #24]
 8004b24:	4918      	ldr	r1, [pc, #96]	@ (8004b88 <HAL_RTC_SetTime+0xd4>)
 8004b26:	400b      	ands	r3, r1
 8004b28:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	6991      	ldr	r1, [r2, #24]
 8004b2e:	68f3      	ldr	r3, [r6, #12]
 8004b30:	6930      	ldr	r0, [r6, #16]
 8004b32:	4303      	orrs	r3, r0
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6193      	str	r3, [r2, #24]
    status = RTC_ExitInitMode(hrtc);
 8004b38:	0020      	movs	r0, r4
 8004b3a:	f7ff ff29 	bl	8004990 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	22ff      	movs	r2, #255	@ 0xff
 8004b42:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d119      	bne.n	8004b7c <HAL_RTC_SetTime+0xc8>
   hrtc->State = HAL_RTC_STATE_READY;
 8004b48:	2329      	movs	r3, #41	@ 0x29
 8004b4a:	3afe      	subs	r2, #254	@ 0xfe
 8004b4c:	54e2      	strb	r2, [r4, r3]
 8004b4e:	e015      	b.n	8004b7c <HAL_RTC_SetTime+0xc8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	065b      	lsls	r3, r3, #25
 8004b56:	d401      	bmi.n	8004b5c <HAL_RTC_SetTime+0xa8>
        sTime->TimeFormat = 0x00U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b5c:	7830      	ldrb	r0, [r6, #0]
 8004b5e:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b60:	7873      	ldrb	r3, [r6, #1]
 8004b62:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b64:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b66:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b68:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b6a:	78f3      	ldrb	r3, [r6, #3]
 8004b6c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b6e:	4318      	orrs	r0, r3
 8004b70:	e7d2      	b.n	8004b18 <HAL_RTC_SetTime+0x64>
  __HAL_LOCK(hrtc);
 8004b72:	2002      	movs	r0, #2
 8004b74:	e005      	b.n	8004b82 <HAL_RTC_SetTime+0xce>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	22ff      	movs	r2, #255	@ 0xff
 8004b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8004b7c:	2328      	movs	r3, #40	@ 0x28
 8004b7e:	2200      	movs	r2, #0
 8004b80:	54e2      	strb	r2, [r4, r3]
}
 8004b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b84:	007f7f7f 	.word	0x007f7f7f
 8004b88:	fffbffff 	.word	0xfffbffff

08004b8c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004b8c:	0902      	lsrs	r2, r0, #4
 8004b8e:	0093      	lsls	r3, r2, #2
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004b94:	220f      	movs	r2, #15
 8004b96:	4010      	ands	r0, r2
 8004b98:	1818      	adds	r0, r3, r0
 8004b9a:	b2c0      	uxtb	r0, r0
}
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_RTC_GetTime>:
{
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ba4:	6803      	ldr	r3, [r0, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004baa:	6803      	ldr	r3, [r0, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	045b      	lsls	r3, r3, #17
 8004bb0:	0c5b      	lsrs	r3, r3, #17
 8004bb2:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004bb4:	6803      	ldr	r3, [r0, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	490d      	ldr	r1, [pc, #52]	@ (8004bf0 <HAL_RTC_GetTime+0x50>)
 8004bba:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004bbc:	0298      	lsls	r0, r3, #10
 8004bbe:	0e80      	lsrs	r0, r0, #26
 8004bc0:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004bc2:	0a1d      	lsrs	r5, r3, #8
 8004bc4:	b2ed      	uxtb	r5, r5
 8004bc6:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004bc8:	b2de      	uxtb	r6, r3
 8004bca:	70a6      	strb	r6, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004bcc:	0d9b      	lsrs	r3, r3, #22
 8004bce:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8004bd0:	2a00      	cmp	r2, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004bd4:	f7ff ffda 	bl	8004b8c <RTC_Bcd2ToByte>
 8004bd8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004bda:	0028      	movs	r0, r5
 8004bdc:	f7ff ffd6 	bl	8004b8c <RTC_Bcd2ToByte>
 8004be0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004be2:	0030      	movs	r0, r6
 8004be4:	f7ff ffd2 	bl	8004b8c <RTC_Bcd2ToByte>
 8004be8:	70a0      	strb	r0, [r4, #2]
}
 8004bea:	2000      	movs	r0, #0
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	007f7f7f 	.word	0x007f7f7f

08004bf4 <HAL_RTC_GetDate>:
{
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004bf8:	6803      	ldr	r3, [r0, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	490d      	ldr	r1, [pc, #52]	@ (8004c34 <HAL_RTC_GetDate+0x40>)
 8004bfe:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004c00:	0c18      	lsrs	r0, r3, #16
 8004c02:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004c04:	04dd      	lsls	r5, r3, #19
 8004c06:	0eed      	lsrs	r5, r5, #27
 8004c08:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004c0a:	b2de      	uxtb	r6, r3
 8004c0c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	0f5b      	lsrs	r3, r3, #29
 8004c12:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004c18:	f7ff ffb8 	bl	8004b8c <RTC_Bcd2ToByte>
 8004c1c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c1e:	0028      	movs	r0, r5
 8004c20:	f7ff ffb4 	bl	8004b8c <RTC_Bcd2ToByte>
 8004c24:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c26:	0030      	movs	r0, r6
 8004c28:	f7ff ffb0 	bl	8004b8c <RTC_Bcd2ToByte>
 8004c2c:	70a0      	strb	r0, [r4, #2]
}
 8004c2e:	2000      	movs	r0, #0
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	00ffff3f 	.word	0x00ffff3f

08004c38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c38:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c3a:	223d      	movs	r2, #61	@ 0x3d
 8004c3c:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 8004c3e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004c40:	2a01      	cmp	r2, #1
 8004c42:	d10e      	bne.n	8004c62 <HAL_TIM_Base_Start+0x2a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	323c      	adds	r2, #60	@ 0x3c
 8004c46:	2102      	movs	r1, #2
 8004c48:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c88 <HAL_TIM_Base_Start+0x50>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d008      	beq.n	8004c64 <HAL_TIM_Base_Start+0x2c>
 8004c52:	4a0e      	ldr	r2, [pc, #56]	@ (8004c8c <HAL_TIM_Base_Start+0x54>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d005      	beq.n	8004c64 <HAL_TIM_Base_Start+0x2c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c60:	2000      	movs	r0, #0
}
 8004c62:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	490a      	ldr	r1, [pc, #40]	@ (8004c90 <HAL_TIM_Base_Start+0x58>)
 8004c68:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	2a06      	cmp	r2, #6
 8004c6c:	d008      	beq.n	8004c80 <HAL_TIM_Base_Start+0x48>
 8004c6e:	3907      	subs	r1, #7
 8004c70:	428a      	cmp	r2, r1
 8004c72:	d007      	beq.n	8004c84 <HAL_TIM_Base_Start+0x4c>
      __HAL_TIM_ENABLE(htim);
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e7f0      	b.n	8004c62 <HAL_TIM_Base_Start+0x2a>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e7ee      	b.n	8004c62 <HAL_TIM_Base_Start+0x2a>
 8004c84:	2000      	movs	r0, #0
 8004c86:	e7ec      	b.n	8004c62 <HAL_TIM_Base_Start+0x2a>
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	00010007 	.word	0x00010007

08004c94 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c94:	6803      	ldr	r3, [r0, #0]
 8004c96:	6a19      	ldr	r1, [r3, #32]
 8004c98:	4a07      	ldr	r2, [pc, #28]	@ (8004cb8 <HAL_TIM_Base_Stop+0x24>)
 8004c9a:	4211      	tst	r1, r2
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_Base_Stop+0x1a>
 8004c9e:	6a19      	ldr	r1, [r3, #32]
 8004ca0:	4a06      	ldr	r2, [pc, #24]	@ (8004cbc <HAL_TIM_Base_Stop+0x28>)
 8004ca2:	4211      	tst	r1, r2
 8004ca4:	d103      	bne.n	8004cae <HAL_TIM_Base_Stop+0x1a>
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	438a      	bics	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004cae:	233d      	movs	r3, #61	@ 0x3d
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4770      	bx	lr
 8004cb8:	00001111 	.word	0x00001111
 8004cbc:	00000444 	.word	0x00000444

08004cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc0:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc2:	223d      	movs	r2, #61	@ 0x3d
 8004cc4:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	2a01      	cmp	r2, #1
 8004cca:	d112      	bne.n	8004cf2 <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	323c      	adds	r2, #60	@ 0x3c
 8004cce:	2102      	movs	r1, #2
 8004cd0:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	68ca      	ldr	r2, [r1, #12]
 8004cd6:	4302      	orrs	r2, r0
 8004cd8:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8004d18 <HAL_TIM_Base_Start_IT+0x58>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d008      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x34>
 8004ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8004d1c <HAL_TIM_Base_Start_IT+0x5c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d005      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	2101      	movs	r1, #1
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2000      	movs	r0, #0
}
 8004cf2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <HAL_TIM_Base_Start_IT+0x60>)
 8004cf8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	2a06      	cmp	r2, #6
 8004cfc:	d008      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x50>
 8004cfe:	3907      	subs	r1, #7
 8004d00:	428a      	cmp	r2, r1
 8004d02:	d007      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2101      	movs	r1, #1
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7f0      	b.n	8004cf2 <HAL_TIM_Base_Start_IT+0x32>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e7ee      	b.n	8004cf2 <HAL_TIM_Base_Start_IT+0x32>
 8004d14:	2000      	movs	r0, #0
 8004d16:	e7ec      	b.n	8004cf2 <HAL_TIM_Base_Start_IT+0x32>
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	00010007 	.word	0x00010007

08004d24 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d24:	6802      	ldr	r2, [r0, #0]
 8004d26:	68d3      	ldr	r3, [r2, #12]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	438b      	bics	r3, r1
 8004d2c:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d2e:	6803      	ldr	r3, [r0, #0]
 8004d30:	6a19      	ldr	r1, [r3, #32]
 8004d32:	4a08      	ldr	r2, [pc, #32]	@ (8004d54 <HAL_TIM_Base_Stop_IT+0x30>)
 8004d34:	4211      	tst	r1, r2
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_Base_Stop_IT+0x24>
 8004d38:	6a19      	ldr	r1, [r3, #32]
 8004d3a:	4a07      	ldr	r2, [pc, #28]	@ (8004d58 <HAL_TIM_Base_Stop_IT+0x34>)
 8004d3c:	4211      	tst	r1, r2
 8004d3e:	d103      	bne.n	8004d48 <HAL_TIM_Base_Stop_IT+0x24>
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	233d      	movs	r3, #61	@ 0x3d
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8004d4e:	2000      	movs	r0, #0
 8004d50:	4770      	bx	lr
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	00001111 	.word	0x00001111
 8004d58:	00000444 	.word	0x00000444

08004d5c <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d60:	4770      	bx	lr

08004d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_TIM_IRQHandler>:
{
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004d6c:	6803      	ldr	r3, [r0, #0]
 8004d6e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d70:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d72:	07aa      	lsls	r2, r5, #30
 8004d74:	d50e      	bpl.n	8004d94 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d76:	07b2      	lsls	r2, r6, #30
 8004d78:	d50c      	bpl.n	8004d94 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	4252      	negs	r2, r2
 8004d7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d80:	2301      	movs	r3, #1
 8004d82:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d84:	6803      	ldr	r3, [r0, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	079b      	lsls	r3, r3, #30
 8004d8a:	d053      	beq.n	8004e34 <HAL_TIM_IRQHandler+0xcc>
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8c:	f7ff ffe8 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d90:	2300      	movs	r3, #0
 8004d92:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d94:	076b      	lsls	r3, r5, #29
 8004d96:	d512      	bpl.n	8004dbe <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d98:	0773      	lsls	r3, r6, #29
 8004d9a:	d510      	bpl.n	8004dbe <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	2205      	movs	r2, #5
 8004da0:	4252      	negs	r2, r2
 8004da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da4:	2302      	movs	r3, #2
 8004da6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	23c0      	movs	r3, #192	@ 0xc0
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	421a      	tst	r2, r3
 8004db2:	d045      	beq.n	8004e40 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8004db4:	0020      	movs	r0, r4
 8004db6:	f7ff ffd3 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dbe:	072b      	lsls	r3, r5, #28
 8004dc0:	d510      	bpl.n	8004de4 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dc2:	0733      	lsls	r3, r6, #28
 8004dc4:	d50e      	bpl.n	8004de4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	2209      	movs	r2, #9
 8004dca:	4252      	negs	r2, r2
 8004dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	079b      	lsls	r3, r3, #30
 8004dd8:	d039      	beq.n	8004e4e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	0020      	movs	r0, r4
 8004ddc:	f7ff ffc0 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de0:	2300      	movs	r3, #0
 8004de2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004de4:	06eb      	lsls	r3, r5, #27
 8004de6:	d512      	bpl.n	8004e0e <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004de8:	06f3      	lsls	r3, r6, #27
 8004dea:	d510      	bpl.n	8004e0e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	2211      	movs	r2, #17
 8004df0:	4252      	negs	r2, r2
 8004df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df4:	2308      	movs	r3, #8
 8004df6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	69da      	ldr	r2, [r3, #28]
 8004dfc:	23c0      	movs	r3, #192	@ 0xc0
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	421a      	tst	r2, r3
 8004e02:	d02b      	beq.n	8004e5c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e04:	0020      	movs	r0, r4
 8004e06:	f7ff ffab 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e0e:	07eb      	lsls	r3, r5, #31
 8004e10:	d501      	bpl.n	8004e16 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e12:	07f3      	lsls	r3, r6, #31
 8004e14:	d429      	bmi.n	8004e6a <HAL_TIM_IRQHandler+0x102>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e16:	2382      	movs	r3, #130	@ 0x82
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	421d      	tst	r5, r3
 8004e1c:	d03c      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x130>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e1e:	0633      	lsls	r3, r6, #24
 8004e20:	d42b      	bmi.n	8004e7a <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e22:	066b      	lsls	r3, r5, #25
 8004e24:	d501      	bpl.n	8004e2a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e26:	0673      	lsls	r3, r6, #25
 8004e28:	d43b      	bmi.n	8004ea2 <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e2a:	06ad      	lsls	r5, r5, #26
 8004e2c:	d501      	bpl.n	8004e32 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e2e:	06b6      	lsls	r6, r6, #26
 8004e30:	d43f      	bmi.n	8004eb2 <HAL_TIM_IRQHandler+0x14a>
}
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e34:	f7ff ff93 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	0020      	movs	r0, r4
 8004e3a:	f7ff ff92 	bl	8004d62 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e3e:	e7a7      	b.n	8004d90 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e40:	0020      	movs	r0, r4
 8004e42:	f7ff ff8c 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e46:	0020      	movs	r0, r4
 8004e48:	f7ff ff8b 	bl	8004d62 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e4c:	e7b5      	b.n	8004dba <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f7ff ff85 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	0020      	movs	r0, r4
 8004e56:	f7ff ff84 	bl	8004d62 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e5a:	e7c1      	b.n	8004de0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5c:	0020      	movs	r0, r4
 8004e5e:	f7ff ff7e 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	0020      	movs	r0, r4
 8004e64:	f7ff ff7d 	bl	8004d62 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e68:	e7cf      	b.n	8004e0a <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	4252      	negs	r2, r2
 8004e70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e72:	0020      	movs	r0, r4
 8004e74:	f7ff ff72 	bl	8004d5c <HAL_TIM_PeriodElapsedCallback>
 8004e78:	e7cd      	b.n	8004e16 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	@ (8004ec4 <HAL_TIM_IRQHandler+0x15c>)
 8004e7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e80:	0020      	movs	r0, r4
 8004e82:	f000 f9c6 	bl	8005212 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e86:	05eb      	lsls	r3, r5, #23
 8004e88:	d5cb      	bpl.n	8004e22 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <HAL_TIM_IRQHandler+0x160>)
 8004e8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e90:	0020      	movs	r0, r4
 8004e92:	f000 f9bf 	bl	8005214 <HAL_TIMEx_Break2Callback>
 8004e96:	e7c4      	b.n	8004e22 <HAL_TIM_IRQHandler+0xba>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e98:	05eb      	lsls	r3, r5, #23
 8004e9a:	d5c2      	bpl.n	8004e22 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e9c:	0633      	lsls	r3, r6, #24
 8004e9e:	d5c0      	bpl.n	8004e22 <HAL_TIM_IRQHandler+0xba>
 8004ea0:	e7f3      	b.n	8004e8a <HAL_TIM_IRQHandler+0x122>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	2241      	movs	r2, #65	@ 0x41
 8004ea6:	4252      	negs	r2, r2
 8004ea8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004eaa:	0020      	movs	r0, r4
 8004eac:	f7ff ff5a 	bl	8004d64 <HAL_TIM_TriggerCallback>
 8004eb0:	e7bb      	b.n	8004e2a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	2221      	movs	r2, #33	@ 0x21
 8004eb6:	4252      	negs	r2, r2
 8004eb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004eba:	0020      	movs	r0, r4
 8004ebc:	f000 f9a8 	bl	8005210 <HAL_TIMEx_CommutCallback>
}
 8004ec0:	e7b7      	b.n	8004e32 <HAL_TIM_IRQHandler+0xca>
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	ffffdf7f 	.word	0xffffdf7f
 8004ec8:	fffffeff 	.word	0xfffffeff

08004ecc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ecc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ece:	4a31      	ldr	r2, [pc, #196]	@ (8004f94 <TIM_Base_SetConfig+0xc8>)
 8004ed0:	4290      	cmp	r0, r2
 8004ed2:	d015      	beq.n	8004f00 <TIM_Base_SetConfig+0x34>
 8004ed4:	4a30      	ldr	r2, [pc, #192]	@ (8004f98 <TIM_Base_SetConfig+0xcc>)
 8004ed6:	4290      	cmp	r0, r2
 8004ed8:	d012      	beq.n	8004f00 <TIM_Base_SetConfig+0x34>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eda:	4a30      	ldr	r2, [pc, #192]	@ (8004f9c <TIM_Base_SetConfig+0xd0>)
 8004edc:	4290      	cmp	r0, r2
 8004ede:	d03d      	beq.n	8004f5c <TIM_Base_SetConfig+0x90>
 8004ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa0 <TIM_Base_SetConfig+0xd4>)
 8004ee2:	4290      	cmp	r0, r2
 8004ee4:	d048      	beq.n	8004f78 <TIM_Base_SetConfig+0xac>
 8004ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <TIM_Base_SetConfig+0xd8>)
 8004ee8:	4290      	cmp	r0, r2
 8004eea:	d029      	beq.n	8004f40 <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	4393      	bics	r3, r2
 8004ef0:	694a      	ldr	r2, [r1, #20]
 8004ef2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004ef4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef6:	688b      	ldr	r3, [r1, #8]
 8004ef8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efe:	e015      	b.n	8004f2c <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f00:	2270      	movs	r2, #112	@ 0x70
 8004f02:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004f04:	684a      	ldr	r2, [r1, #4]
 8004f06:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f08:	4a27      	ldr	r2, [pc, #156]	@ (8004fa8 <TIM_Base_SetConfig+0xdc>)
 8004f0a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0c:	68ca      	ldr	r2, [r1, #12]
 8004f0e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	4393      	bics	r3, r2
 8004f14:	694a      	ldr	r2, [r1, #20]
 8004f16:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f18:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1a:	688b      	ldr	r3, [r1, #8]
 8004f1c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f1e:	680b      	ldr	r3, [r1, #0]
 8004f20:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f22:	4b1c      	ldr	r3, [pc, #112]	@ (8004f94 <TIM_Base_SetConfig+0xc8>)
 8004f24:	4298      	cmp	r0, r3
 8004f26:	d101      	bne.n	8004f2c <TIM_Base_SetConfig+0x60>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	690b      	ldr	r3, [r1, #16]
 8004f2a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f30:	6902      	ldr	r2, [r0, #16]
 8004f32:	4213      	tst	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_Base_SetConfig+0x72>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f36:	6903      	ldr	r3, [r0, #16]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	6103      	str	r3, [r0, #16]
  }
}
 8004f3e:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f40:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <TIM_Base_SetConfig+0xdc>)
 8004f42:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f44:	68ca      	ldr	r2, [r1, #12]
 8004f46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	2280      	movs	r2, #128	@ 0x80
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	694a      	ldr	r2, [r1, #20]
 8004f4e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f50:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f52:	688b      	ldr	r3, [r1, #8]
 8004f54:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f56:	680b      	ldr	r3, [r1, #0]
 8004f58:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5a:	e7e5      	b.n	8004f28 <TIM_Base_SetConfig+0x5c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5c:	4a12      	ldr	r2, [pc, #72]	@ (8004fa8 <TIM_Base_SetConfig+0xdc>)
 8004f5e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f60:	68ca      	ldr	r2, [r1, #12]
 8004f62:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f64:	2280      	movs	r2, #128	@ 0x80
 8004f66:	4393      	bics	r3, r2
 8004f68:	694a      	ldr	r2, [r1, #20]
 8004f6a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f6e:	688b      	ldr	r3, [r1, #8]
 8004f70:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f72:	680b      	ldr	r3, [r1, #0]
 8004f74:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f76:	e7d9      	b.n	8004f2c <TIM_Base_SetConfig+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f78:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa8 <TIM_Base_SetConfig+0xdc>)
 8004f7a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7c:	68ca      	ldr	r2, [r1, #12]
 8004f7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f80:	2280      	movs	r2, #128	@ 0x80
 8004f82:	4393      	bics	r3, r2
 8004f84:	694a      	ldr	r2, [r1, #20]
 8004f86:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8a:	688b      	ldr	r3, [r1, #8]
 8004f8c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f8e:	680b      	ldr	r3, [r1, #0]
 8004f90:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f92:	e7c9      	b.n	8004f28 <TIM_Base_SetConfig+0x5c>
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40002000 	.word	0x40002000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800
 8004fa8:	fffffcff 	.word	0xfffffcff

08004fac <HAL_TIM_Base_Init>:
{
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004fb0:	d02a      	beq.n	8005008 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb2:	233d      	movs	r3, #61	@ 0x3d
 8004fb4:	5cc3      	ldrb	r3, [r0, r3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fba:	253d      	movs	r5, #61	@ 0x3d
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	0021      	movs	r1, r4
 8004fc2:	c901      	ldmia	r1!, {r0}
 8004fc4:	f7ff ff82 	bl	8004ecc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	2248      	movs	r2, #72	@ 0x48
 8004fcc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fce:	3a0a      	subs	r2, #10
 8004fd0:	54a3      	strb	r3, [r4, r2]
 8004fd2:	3201      	adds	r2, #1
 8004fd4:	54a3      	strb	r3, [r4, r2]
 8004fd6:	3201      	adds	r2, #1
 8004fd8:	54a3      	strb	r3, [r4, r2]
 8004fda:	3201      	adds	r2, #1
 8004fdc:	54a3      	strb	r3, [r4, r2]
 8004fde:	3201      	adds	r2, #1
 8004fe0:	54a3      	strb	r3, [r4, r2]
 8004fe2:	3201      	adds	r2, #1
 8004fe4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	3201      	adds	r2, #1
 8004fe8:	54a3      	strb	r3, [r4, r2]
 8004fea:	3201      	adds	r2, #1
 8004fec:	54a3      	strb	r3, [r4, r2]
 8004fee:	3201      	adds	r2, #1
 8004ff0:	54a3      	strb	r3, [r4, r2]
 8004ff2:	3201      	adds	r2, #1
 8004ff4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004ff6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004ff8:	2000      	movs	r0, #0
}
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004ffc:	333c      	adds	r3, #60	@ 0x3c
 8004ffe:	2200      	movs	r2, #0
 8005000:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8005002:	f7fd f9d1 	bl	80023a8 <HAL_TIM_Base_MspInit>
 8005006:	e7d8      	b.n	8004fba <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8005008:	2001      	movs	r0, #1
 800500a:	e7f6      	b.n	8004ffa <HAL_TIM_Base_Init+0x4e>

0800500c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800500c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	4d03      	ldr	r5, [pc, #12]	@ (8005020 <TIM_ETR_SetConfig+0x14>)
 8005012:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	430a      	orrs	r2, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501c:	6083      	str	r3, [r0, #8]
}
 800501e:	bd30      	pop	{r4, r5, pc}
 8005020:	ffff00ff 	.word	0xffff00ff

08005024 <HAL_TIM_ConfigClockSource>:
{
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005028:	233c      	movs	r3, #60	@ 0x3c
 800502a:	5cc3      	ldrb	r3, [r0, r3]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d100      	bne.n	8005032 <HAL_TIM_ConfigClockSource+0xe>
 8005030:	e0ad      	b.n	800518e <HAL_TIM_ConfigClockSource+0x16a>
 8005032:	233c      	movs	r3, #60	@ 0x3c
 8005034:	2201      	movs	r2, #1
 8005036:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	3301      	adds	r3, #1
 800503a:	3201      	adds	r2, #1
 800503c:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800503e:	6802      	ldr	r2, [r0, #0]
 8005040:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005042:	4854      	ldr	r0, [pc, #336]	@ (8005194 <HAL_TIM_ConfigClockSource+0x170>)
 8005044:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005046:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005048:	680b      	ldr	r3, [r1, #0]
 800504a:	2b60      	cmp	r3, #96	@ 0x60
 800504c:	d064      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0xf4>
 800504e:	d838      	bhi.n	80050c2 <HAL_TIM_ConfigClockSource+0x9e>
 8005050:	2b40      	cmp	r3, #64	@ 0x40
 8005052:	d100      	bne.n	8005056 <HAL_TIM_ConfigClockSource+0x32>
 8005054:	e07c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x12c>
 8005056:	d816      	bhi.n	8005086 <HAL_TIM_ConfigClockSource+0x62>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d006      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x46>
 800505c:	d80f      	bhi.n	800507e <HAL_TIM_ConfigClockSource+0x5a>
 800505e:	2210      	movs	r2, #16
 8005060:	0019      	movs	r1, r3
 8005062:	4391      	bics	r1, r2
 8005064:	2001      	movs	r0, #1
 8005066:	2900      	cmp	r1, #0
 8005068:	d141      	bne.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506a:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800506c:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800506e:	484a      	ldr	r0, [pc, #296]	@ (8005198 <HAL_TIM_ConfigClockSource+0x174>)
 8005070:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005072:	4313      	orrs	r3, r2
 8005074:	2207      	movs	r2, #7
 8005076:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8005078:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800507a:	2000      	movs	r0, #0
}
 800507c:	e037      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 800507e:	2001      	movs	r0, #1
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d0f2      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x46>
 8005084:	e033      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
 8005086:	2001      	movs	r0, #1
 8005088:	2b50      	cmp	r3, #80	@ 0x50
 800508a:	d130      	bne.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508c:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800508e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005090:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005092:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005094:	6a1d      	ldr	r5, [r3, #32]
 8005096:	2601      	movs	r6, #1
 8005098:	43b5      	bics	r5, r6
 800509a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509c:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800509e:	36ef      	adds	r6, #239	@ 0xef
 80050a0:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a2:	0112      	lsls	r2, r2, #4
 80050a4:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	250a      	movs	r5, #10
 80050a8:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 80050aa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80050ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ae:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80050b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b4:	4938      	ldr	r1, [pc, #224]	@ (8005198 <HAL_TIM_ConfigClockSource+0x174>)
 80050b6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050b8:	2157      	movs	r1, #87	@ 0x57
 80050ba:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80050bc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2000      	movs	r0, #0
}
 80050c0:	e015      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 80050c2:	2280      	movs	r2, #128	@ 0x80
 80050c4:	0152      	lsls	r2, r2, #5
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d05d      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x162>
 80050ca:	2280      	movs	r2, #128	@ 0x80
 80050cc:	0192      	lsls	r2, r2, #6
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d014      	beq.n	80050fc <HAL_TIM_ConfigClockSource+0xd8>
 80050d2:	2b70      	cmp	r3, #112	@ 0x70
 80050d4:	d159      	bne.n	800518a <HAL_TIM_ConfigClockSource+0x166>
      TIM_ETR_SetConfig(htim->Instance,
 80050d6:	68cb      	ldr	r3, [r1, #12]
 80050d8:	684a      	ldr	r2, [r1, #4]
 80050da:	6889      	ldr	r1, [r1, #8]
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	f7ff ff95 	bl	800500c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e6:	2177      	movs	r1, #119	@ 0x77
 80050e8:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80050ea:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80050ee:	233d      	movs	r3, #61	@ 0x3d
 80050f0:	2201      	movs	r2, #1
 80050f2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80050f4:	3b01      	subs	r3, #1
 80050f6:	2200      	movs	r2, #0
 80050f8:	54e2      	strb	r2, [r4, r3]
}
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80050fc:	68cb      	ldr	r3, [r1, #12]
 80050fe:	684a      	ldr	r2, [r1, #4]
 8005100:	6889      	ldr	r1, [r1, #8]
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	f7ff ff82 	bl	800500c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	6891      	ldr	r1, [r2, #8]
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	430b      	orrs	r3, r1
 8005112:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2000      	movs	r0, #0
      break;
 8005116:	e7ea      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005118:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800511a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800511c:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 800511e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005120:	6a1d      	ldr	r5, [r3, #32]
 8005122:	2610      	movs	r6, #16
 8005124:	43b5      	bics	r5, r6
 8005126:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005128:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512a:	4e1c      	ldr	r6, [pc, #112]	@ (800519c <HAL_TIM_ConfigClockSource+0x178>)
 800512c:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800512e:	0309      	lsls	r1, r1, #12
 8005130:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005132:	25a0      	movs	r5, #160	@ 0xa0
 8005134:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800513c:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800513e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005140:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	4915      	ldr	r1, [pc, #84]	@ (8005198 <HAL_TIM_ConfigClockSource+0x174>)
 8005144:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005146:	2167      	movs	r1, #103	@ 0x67
 8005148:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800514a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2000      	movs	r0, #0
}
 800514e:	e7ce      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005150:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8005152:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005154:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005156:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005158:	6a1d      	ldr	r5, [r3, #32]
 800515a:	2601      	movs	r6, #1
 800515c:	43b5      	bics	r5, r6
 800515e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005160:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005162:	36ef      	adds	r6, #239	@ 0xef
 8005164:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516a:	250a      	movs	r5, #10
 800516c:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 800516e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005172:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005174:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005176:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005178:	4907      	ldr	r1, [pc, #28]	@ (8005198 <HAL_TIM_ConfigClockSource+0x174>)
 800517a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800517c:	2147      	movs	r1, #71	@ 0x47
 800517e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005180:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2000      	movs	r0, #0
}
 8005184:	e7b3      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2000      	movs	r0, #0
 8005188:	e7b1      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 800518a:	2001      	movs	r0, #1
 800518c:	e7af      	b.n	80050ee <HAL_TIM_ConfigClockSource+0xca>
  __HAL_LOCK(htim);
 800518e:	2002      	movs	r0, #2
 8005190:	e7b3      	b.n	80050fa <HAL_TIM_ConfigClockSource+0xd6>
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	ffce0088 	.word	0xffce0088
 8005198:	ffcfff8f 	.word	0xffcfff8f
 800519c:	ffff0fff 	.word	0xffff0fff

080051a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	233c      	movs	r3, #60	@ 0x3c
 80051a4:	5cc3      	ldrb	r3, [r0, r3]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d029      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80051aa:	233c      	movs	r3, #60	@ 0x3c
 80051ac:	2201      	movs	r2, #1
 80051ae:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	3301      	adds	r3, #1
 80051b2:	3201      	adds	r2, #1
 80051b4:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b6:	6802      	ldr	r2, [r0, #0]
 80051b8:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ba:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051bc:	4d11      	ldr	r5, [pc, #68]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80051be:	42aa      	cmp	r2, r5
 80051c0:	d018      	beq.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c2:	2570      	movs	r5, #112	@ 0x70
 80051c4:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c6:	680d      	ldr	r5, [r1, #0]
 80051c8:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ca:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	6803      	ldr	r3, [r0, #0]
 80051ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d002      	beq.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80051d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d104      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051da:	2280      	movs	r2, #128	@ 0x80
 80051dc:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	688a      	ldr	r2, [r1, #8]
 80051e0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	233d      	movs	r3, #61	@ 0x3d
 80051e6:	2201      	movs	r2, #1
 80051e8:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80051ea:	3b01      	subs	r3, #1
 80051ec:	2200      	movs	r2, #0
 80051ee:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80051f0:	2000      	movs	r0, #0
}
 80051f2:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f4:	4d05      	ldr	r5, [pc, #20]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80051f6:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051f8:	684d      	ldr	r5, [r1, #4]
 80051fa:	432b      	orrs	r3, r5
 80051fc:	e7e1      	b.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80051fe:	2002      	movs	r0, #2
 8005200:	e7f7      	b.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	ff0fffff 	.word	0xff0fffff

08005210 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005210:	4770      	bx	lr

08005212 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005214:	4770      	bx	lr
	...

08005218 <sniprintf>:
 8005218:	b40c      	push	{r2, r3}
 800521a:	b530      	push	{r4, r5, lr}
 800521c:	4b18      	ldr	r3, [pc, #96]	@ (8005280 <sniprintf+0x68>)
 800521e:	000c      	movs	r4, r1
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	b09d      	sub	sp, #116	@ 0x74
 8005224:	2900      	cmp	r1, #0
 8005226:	da08      	bge.n	800523a <sniprintf+0x22>
 8005228:	238b      	movs	r3, #139	@ 0x8b
 800522a:	2001      	movs	r0, #1
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	4240      	negs	r0, r0
 8005230:	b01d      	add	sp, #116	@ 0x74
 8005232:	bc30      	pop	{r4, r5}
 8005234:	bc08      	pop	{r3}
 8005236:	b002      	add	sp, #8
 8005238:	4718      	bx	r3
 800523a:	2382      	movs	r3, #130	@ 0x82
 800523c:	466a      	mov	r2, sp
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	8293      	strh	r3, [r2, #20]
 8005242:	2300      	movs	r3, #0
 8005244:	9002      	str	r0, [sp, #8]
 8005246:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005248:	9006      	str	r0, [sp, #24]
 800524a:	4299      	cmp	r1, r3
 800524c:	d000      	beq.n	8005250 <sniprintf+0x38>
 800524e:	1e4b      	subs	r3, r1, #1
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	9307      	str	r3, [sp, #28]
 8005254:	2301      	movs	r3, #1
 8005256:	466a      	mov	r2, sp
 8005258:	425b      	negs	r3, r3
 800525a:	82d3      	strh	r3, [r2, #22]
 800525c:	0028      	movs	r0, r5
 800525e:	ab21      	add	r3, sp, #132	@ 0x84
 8005260:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005262:	a902      	add	r1, sp, #8
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	f000 f8c3 	bl	80053f0 <_svfiprintf_r>
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	da01      	bge.n	8005272 <sniprintf+0x5a>
 800526e:	238b      	movs	r3, #139	@ 0x8b
 8005270:	602b      	str	r3, [r5, #0]
 8005272:	2c00      	cmp	r4, #0
 8005274:	d0dc      	beq.n	8005230 <sniprintf+0x18>
 8005276:	2200      	movs	r2, #0
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e7d8      	b.n	8005230 <sniprintf+0x18>
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	20000024 	.word	0x20000024

08005284 <siprintf>:
 8005284:	b40e      	push	{r1, r2, r3}
 8005286:	b510      	push	{r4, lr}
 8005288:	2400      	movs	r4, #0
 800528a:	490c      	ldr	r1, [pc, #48]	@ (80052bc <siprintf+0x38>)
 800528c:	b09d      	sub	sp, #116	@ 0x74
 800528e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005290:	9002      	str	r0, [sp, #8]
 8005292:	9006      	str	r0, [sp, #24]
 8005294:	9107      	str	r1, [sp, #28]
 8005296:	9104      	str	r1, [sp, #16]
 8005298:	4809      	ldr	r0, [pc, #36]	@ (80052c0 <siprintf+0x3c>)
 800529a:	490a      	ldr	r1, [pc, #40]	@ (80052c4 <siprintf+0x40>)
 800529c:	cb04      	ldmia	r3!, {r2}
 800529e:	9105      	str	r1, [sp, #20]
 80052a0:	6800      	ldr	r0, [r0, #0]
 80052a2:	a902      	add	r1, sp, #8
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80052a8:	f000 f8a2 	bl	80053f0 <_svfiprintf_r>
 80052ac:	9b02      	ldr	r3, [sp, #8]
 80052ae:	701c      	strb	r4, [r3, #0]
 80052b0:	b01d      	add	sp, #116	@ 0x74
 80052b2:	bc10      	pop	{r4}
 80052b4:	bc08      	pop	{r3}
 80052b6:	b003      	add	sp, #12
 80052b8:	4718      	bx	r3
 80052ba:	46c0      	nop			@ (mov r8, r8)
 80052bc:	7fffffff 	.word	0x7fffffff
 80052c0:	20000024 	.word	0x20000024
 80052c4:	ffff0208 	.word	0xffff0208

080052c8 <memset>:
 80052c8:	0003      	movs	r3, r0
 80052ca:	1882      	adds	r2, r0, r2
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	7019      	strb	r1, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	@ (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	20000024 	.word	0x20000024

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	2600      	movs	r6, #0
 80052e8:	4c0c      	ldr	r4, [pc, #48]	@ (800531c <__libc_init_array+0x38>)
 80052ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005320 <__libc_init_array+0x3c>)
 80052ec:	1b64      	subs	r4, r4, r5
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	2600      	movs	r6, #0
 80052f6:	f000 fc61 	bl	8005bbc <_init>
 80052fa:	4c0a      	ldr	r4, [pc, #40]	@ (8005324 <__libc_init_array+0x40>)
 80052fc:	4d0a      	ldr	r5, [pc, #40]	@ (8005328 <__libc_init_array+0x44>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	00b3      	lsls	r3, r6, #2
 800530a:	58eb      	ldr	r3, [r5, r3]
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	00b3      	lsls	r3, r6, #2
 8005314:	58eb      	ldr	r3, [r5, r3]
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	08007224 	.word	0x08007224
 8005320:	08007224 	.word	0x08007224
 8005324:	08007228 	.word	0x08007228
 8005328:	08007224 	.word	0x08007224

0800532c <__retarget_lock_acquire_recursive>:
 800532c:	4770      	bx	lr

0800532e <__retarget_lock_release_recursive>:
 800532e:	4770      	bx	lr

08005330 <__ssputs_r>:
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	688e      	ldr	r6, [r1, #8]
 8005334:	b085      	sub	sp, #20
 8005336:	001f      	movs	r7, r3
 8005338:	000c      	movs	r4, r1
 800533a:	680b      	ldr	r3, [r1, #0]
 800533c:	9002      	str	r0, [sp, #8]
 800533e:	9203      	str	r2, [sp, #12]
 8005340:	42be      	cmp	r6, r7
 8005342:	d830      	bhi.n	80053a6 <__ssputs_r+0x76>
 8005344:	210c      	movs	r1, #12
 8005346:	5e62      	ldrsh	r2, [r4, r1]
 8005348:	2190      	movs	r1, #144	@ 0x90
 800534a:	00c9      	lsls	r1, r1, #3
 800534c:	420a      	tst	r2, r1
 800534e:	d028      	beq.n	80053a2 <__ssputs_r+0x72>
 8005350:	2003      	movs	r0, #3
 8005352:	6921      	ldr	r1, [r4, #16]
 8005354:	1a5b      	subs	r3, r3, r1
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	6963      	ldr	r3, [r4, #20]
 800535a:	4343      	muls	r3, r0
 800535c:	9801      	ldr	r0, [sp, #4]
 800535e:	0fdd      	lsrs	r5, r3, #31
 8005360:	18ed      	adds	r5, r5, r3
 8005362:	1c7b      	adds	r3, r7, #1
 8005364:	181b      	adds	r3, r3, r0
 8005366:	106d      	asrs	r5, r5, #1
 8005368:	42ab      	cmp	r3, r5
 800536a:	d900      	bls.n	800536e <__ssputs_r+0x3e>
 800536c:	001d      	movs	r5, r3
 800536e:	0552      	lsls	r2, r2, #21
 8005370:	d528      	bpl.n	80053c4 <__ssputs_r+0x94>
 8005372:	0029      	movs	r1, r5
 8005374:	9802      	ldr	r0, [sp, #8]
 8005376:	f000 f95b 	bl	8005630 <_malloc_r>
 800537a:	1e06      	subs	r6, r0, #0
 800537c:	d02c      	beq.n	80053d8 <__ssputs_r+0xa8>
 800537e:	9a01      	ldr	r2, [sp, #4]
 8005380:	6921      	ldr	r1, [r4, #16]
 8005382:	f000 fbc0 	bl	8005b06 <memcpy>
 8005386:	89a2      	ldrh	r2, [r4, #12]
 8005388:	4b18      	ldr	r3, [pc, #96]	@ (80053ec <__ssputs_r+0xbc>)
 800538a:	401a      	ands	r2, r3
 800538c:	2380      	movs	r3, #128	@ 0x80
 800538e:	4313      	orrs	r3, r2
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	9b01      	ldr	r3, [sp, #4]
 8005394:	6126      	str	r6, [r4, #16]
 8005396:	18f6      	adds	r6, r6, r3
 8005398:	6026      	str	r6, [r4, #0]
 800539a:	003e      	movs	r6, r7
 800539c:	6165      	str	r5, [r4, #20]
 800539e:	1aed      	subs	r5, r5, r3
 80053a0:	60a5      	str	r5, [r4, #8]
 80053a2:	42be      	cmp	r6, r7
 80053a4:	d900      	bls.n	80053a8 <__ssputs_r+0x78>
 80053a6:	003e      	movs	r6, r7
 80053a8:	0032      	movs	r2, r6
 80053aa:	9903      	ldr	r1, [sp, #12]
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	f000 fb7b 	bl	8005aa8 <memmove>
 80053b2:	2000      	movs	r0, #0
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	1b9b      	subs	r3, r3, r6
 80053b8:	60a3      	str	r3, [r4, #8]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	199b      	adds	r3, r3, r6
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	b005      	add	sp, #20
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c4:	002a      	movs	r2, r5
 80053c6:	9802      	ldr	r0, [sp, #8]
 80053c8:	f000 fb3e 	bl	8005a48 <_realloc_r>
 80053cc:	1e06      	subs	r6, r0, #0
 80053ce:	d1e0      	bne.n	8005392 <__ssputs_r+0x62>
 80053d0:	6921      	ldr	r1, [r4, #16]
 80053d2:	9802      	ldr	r0, [sp, #8]
 80053d4:	f000 fba0 	bl	8005b18 <_free_r>
 80053d8:	230c      	movs	r3, #12
 80053da:	2001      	movs	r0, #1
 80053dc:	9a02      	ldr	r2, [sp, #8]
 80053de:	4240      	negs	r0, r0
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	89a2      	ldrh	r2, [r4, #12]
 80053e4:	3334      	adds	r3, #52	@ 0x34
 80053e6:	4313      	orrs	r3, r2
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	e7e9      	b.n	80053c0 <__ssputs_r+0x90>
 80053ec:	fffffb7f 	.word	0xfffffb7f

080053f0 <_svfiprintf_r>:
 80053f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f2:	b0a1      	sub	sp, #132	@ 0x84
 80053f4:	9003      	str	r0, [sp, #12]
 80053f6:	001d      	movs	r5, r3
 80053f8:	898b      	ldrh	r3, [r1, #12]
 80053fa:	000f      	movs	r7, r1
 80053fc:	0016      	movs	r6, r2
 80053fe:	061b      	lsls	r3, r3, #24
 8005400:	d511      	bpl.n	8005426 <_svfiprintf_r+0x36>
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10e      	bne.n	8005426 <_svfiprintf_r+0x36>
 8005408:	2140      	movs	r1, #64	@ 0x40
 800540a:	f000 f911 	bl	8005630 <_malloc_r>
 800540e:	6038      	str	r0, [r7, #0]
 8005410:	6138      	str	r0, [r7, #16]
 8005412:	2800      	cmp	r0, #0
 8005414:	d105      	bne.n	8005422 <_svfiprintf_r+0x32>
 8005416:	230c      	movs	r3, #12
 8005418:	9a03      	ldr	r2, [sp, #12]
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	2001      	movs	r0, #1
 800541e:	4240      	negs	r0, r0
 8005420:	e0cf      	b.n	80055c2 <_svfiprintf_r+0x1d2>
 8005422:	2340      	movs	r3, #64	@ 0x40
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	2300      	movs	r3, #0
 8005428:	ac08      	add	r4, sp, #32
 800542a:	6163      	str	r3, [r4, #20]
 800542c:	3320      	adds	r3, #32
 800542e:	7663      	strb	r3, [r4, #25]
 8005430:	3310      	adds	r3, #16
 8005432:	76a3      	strb	r3, [r4, #26]
 8005434:	9507      	str	r5, [sp, #28]
 8005436:	0035      	movs	r5, r6
 8005438:	782b      	ldrb	r3, [r5, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <_svfiprintf_r+0x52>
 800543e:	2b25      	cmp	r3, #37	@ 0x25
 8005440:	d148      	bne.n	80054d4 <_svfiprintf_r+0xe4>
 8005442:	1bab      	subs	r3, r5, r6
 8005444:	9305      	str	r3, [sp, #20]
 8005446:	42b5      	cmp	r5, r6
 8005448:	d00b      	beq.n	8005462 <_svfiprintf_r+0x72>
 800544a:	0032      	movs	r2, r6
 800544c:	0039      	movs	r1, r7
 800544e:	9803      	ldr	r0, [sp, #12]
 8005450:	f7ff ff6e 	bl	8005330 <__ssputs_r>
 8005454:	3001      	adds	r0, #1
 8005456:	d100      	bne.n	800545a <_svfiprintf_r+0x6a>
 8005458:	e0ae      	b.n	80055b8 <_svfiprintf_r+0x1c8>
 800545a:	6963      	ldr	r3, [r4, #20]
 800545c:	9a05      	ldr	r2, [sp, #20]
 800545e:	189b      	adds	r3, r3, r2
 8005460:	6163      	str	r3, [r4, #20]
 8005462:	782b      	ldrb	r3, [r5, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d100      	bne.n	800546a <_svfiprintf_r+0x7a>
 8005468:	e0a6      	b.n	80055b8 <_svfiprintf_r+0x1c8>
 800546a:	2201      	movs	r2, #1
 800546c:	2300      	movs	r3, #0
 800546e:	4252      	negs	r2, r2
 8005470:	6062      	str	r2, [r4, #4]
 8005472:	a904      	add	r1, sp, #16
 8005474:	3254      	adds	r2, #84	@ 0x54
 8005476:	1852      	adds	r2, r2, r1
 8005478:	1c6e      	adds	r6, r5, #1
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	60e3      	str	r3, [r4, #12]
 800547e:	60a3      	str	r3, [r4, #8]
 8005480:	7013      	strb	r3, [r2, #0]
 8005482:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005484:	4b54      	ldr	r3, [pc, #336]	@ (80055d8 <_svfiprintf_r+0x1e8>)
 8005486:	2205      	movs	r2, #5
 8005488:	0018      	movs	r0, r3
 800548a:	7831      	ldrb	r1, [r6, #0]
 800548c:	9305      	str	r3, [sp, #20]
 800548e:	f000 fb2f 	bl	8005af0 <memchr>
 8005492:	1c75      	adds	r5, r6, #1
 8005494:	2800      	cmp	r0, #0
 8005496:	d11f      	bne.n	80054d8 <_svfiprintf_r+0xe8>
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	06d3      	lsls	r3, r2, #27
 800549c:	d504      	bpl.n	80054a8 <_svfiprintf_r+0xb8>
 800549e:	2353      	movs	r3, #83	@ 0x53
 80054a0:	a904      	add	r1, sp, #16
 80054a2:	185b      	adds	r3, r3, r1
 80054a4:	2120      	movs	r1, #32
 80054a6:	7019      	strb	r1, [r3, #0]
 80054a8:	0713      	lsls	r3, r2, #28
 80054aa:	d504      	bpl.n	80054b6 <_svfiprintf_r+0xc6>
 80054ac:	2353      	movs	r3, #83	@ 0x53
 80054ae:	a904      	add	r1, sp, #16
 80054b0:	185b      	adds	r3, r3, r1
 80054b2:	212b      	movs	r1, #43	@ 0x2b
 80054b4:	7019      	strb	r1, [r3, #0]
 80054b6:	7833      	ldrb	r3, [r6, #0]
 80054b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ba:	d016      	beq.n	80054ea <_svfiprintf_r+0xfa>
 80054bc:	0035      	movs	r5, r6
 80054be:	2100      	movs	r1, #0
 80054c0:	200a      	movs	r0, #10
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	782a      	ldrb	r2, [r5, #0]
 80054c6:	1c6e      	adds	r6, r5, #1
 80054c8:	3a30      	subs	r2, #48	@ 0x30
 80054ca:	2a09      	cmp	r2, #9
 80054cc:	d950      	bls.n	8005570 <_svfiprintf_r+0x180>
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d111      	bne.n	80054f6 <_svfiprintf_r+0x106>
 80054d2:	e017      	b.n	8005504 <_svfiprintf_r+0x114>
 80054d4:	3501      	adds	r5, #1
 80054d6:	e7af      	b.n	8005438 <_svfiprintf_r+0x48>
 80054d8:	9b05      	ldr	r3, [sp, #20]
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	1ac0      	subs	r0, r0, r3
 80054de:	2301      	movs	r3, #1
 80054e0:	4083      	lsls	r3, r0
 80054e2:	4313      	orrs	r3, r2
 80054e4:	002e      	movs	r6, r5
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	e7cc      	b.n	8005484 <_svfiprintf_r+0x94>
 80054ea:	9b07      	ldr	r3, [sp, #28]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	9107      	str	r1, [sp, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	db01      	blt.n	80054fa <_svfiprintf_r+0x10a>
 80054f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054f8:	e004      	b.n	8005504 <_svfiprintf_r+0x114>
 80054fa:	425b      	negs	r3, r3
 80054fc:	60e3      	str	r3, [r4, #12]
 80054fe:	2302      	movs	r3, #2
 8005500:	4313      	orrs	r3, r2
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	782b      	ldrb	r3, [r5, #0]
 8005506:	2b2e      	cmp	r3, #46	@ 0x2e
 8005508:	d10c      	bne.n	8005524 <_svfiprintf_r+0x134>
 800550a:	786b      	ldrb	r3, [r5, #1]
 800550c:	2b2a      	cmp	r3, #42	@ 0x2a
 800550e:	d134      	bne.n	800557a <_svfiprintf_r+0x18a>
 8005510:	9b07      	ldr	r3, [sp, #28]
 8005512:	3502      	adds	r5, #2
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	9207      	str	r2, [sp, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da01      	bge.n	8005522 <_svfiprintf_r+0x132>
 800551e:	2301      	movs	r3, #1
 8005520:	425b      	negs	r3, r3
 8005522:	9309      	str	r3, [sp, #36]	@ 0x24
 8005524:	4e2d      	ldr	r6, [pc, #180]	@ (80055dc <_svfiprintf_r+0x1ec>)
 8005526:	2203      	movs	r2, #3
 8005528:	0030      	movs	r0, r6
 800552a:	7829      	ldrb	r1, [r5, #0]
 800552c:	f000 fae0 	bl	8005af0 <memchr>
 8005530:	2800      	cmp	r0, #0
 8005532:	d006      	beq.n	8005542 <_svfiprintf_r+0x152>
 8005534:	2340      	movs	r3, #64	@ 0x40
 8005536:	1b80      	subs	r0, r0, r6
 8005538:	4083      	lsls	r3, r0
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	3501      	adds	r5, #1
 800553e:	4313      	orrs	r3, r2
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	7829      	ldrb	r1, [r5, #0]
 8005544:	2206      	movs	r2, #6
 8005546:	4826      	ldr	r0, [pc, #152]	@ (80055e0 <_svfiprintf_r+0x1f0>)
 8005548:	1c6e      	adds	r6, r5, #1
 800554a:	7621      	strb	r1, [r4, #24]
 800554c:	f000 fad0 	bl	8005af0 <memchr>
 8005550:	2800      	cmp	r0, #0
 8005552:	d038      	beq.n	80055c6 <_svfiprintf_r+0x1d6>
 8005554:	4b23      	ldr	r3, [pc, #140]	@ (80055e4 <_svfiprintf_r+0x1f4>)
 8005556:	2b00      	cmp	r3, #0
 8005558:	d122      	bne.n	80055a0 <_svfiprintf_r+0x1b0>
 800555a:	2207      	movs	r2, #7
 800555c:	9b07      	ldr	r3, [sp, #28]
 800555e:	3307      	adds	r3, #7
 8005560:	4393      	bics	r3, r2
 8005562:	3308      	adds	r3, #8
 8005564:	9307      	str	r3, [sp, #28]
 8005566:	6963      	ldr	r3, [r4, #20]
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	189b      	adds	r3, r3, r2
 800556c:	6163      	str	r3, [r4, #20]
 800556e:	e762      	b.n	8005436 <_svfiprintf_r+0x46>
 8005570:	4343      	muls	r3, r0
 8005572:	0035      	movs	r5, r6
 8005574:	2101      	movs	r1, #1
 8005576:	189b      	adds	r3, r3, r2
 8005578:	e7a4      	b.n	80054c4 <_svfiprintf_r+0xd4>
 800557a:	2300      	movs	r3, #0
 800557c:	200a      	movs	r0, #10
 800557e:	0019      	movs	r1, r3
 8005580:	3501      	adds	r5, #1
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	782a      	ldrb	r2, [r5, #0]
 8005586:	1c6e      	adds	r6, r5, #1
 8005588:	3a30      	subs	r2, #48	@ 0x30
 800558a:	2a09      	cmp	r2, #9
 800558c:	d903      	bls.n	8005596 <_svfiprintf_r+0x1a6>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0c8      	beq.n	8005524 <_svfiprintf_r+0x134>
 8005592:	9109      	str	r1, [sp, #36]	@ 0x24
 8005594:	e7c6      	b.n	8005524 <_svfiprintf_r+0x134>
 8005596:	4341      	muls	r1, r0
 8005598:	0035      	movs	r5, r6
 800559a:	2301      	movs	r3, #1
 800559c:	1889      	adds	r1, r1, r2
 800559e:	e7f1      	b.n	8005584 <_svfiprintf_r+0x194>
 80055a0:	aa07      	add	r2, sp, #28
 80055a2:	9200      	str	r2, [sp, #0]
 80055a4:	0021      	movs	r1, r4
 80055a6:	003a      	movs	r2, r7
 80055a8:	4b0f      	ldr	r3, [pc, #60]	@ (80055e8 <_svfiprintf_r+0x1f8>)
 80055aa:	9803      	ldr	r0, [sp, #12]
 80055ac:	e000      	b.n	80055b0 <_svfiprintf_r+0x1c0>
 80055ae:	bf00      	nop
 80055b0:	9004      	str	r0, [sp, #16]
 80055b2:	9b04      	ldr	r3, [sp, #16]
 80055b4:	3301      	adds	r3, #1
 80055b6:	d1d6      	bne.n	8005566 <_svfiprintf_r+0x176>
 80055b8:	89bb      	ldrh	r3, [r7, #12]
 80055ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80055bc:	065b      	lsls	r3, r3, #25
 80055be:	d500      	bpl.n	80055c2 <_svfiprintf_r+0x1d2>
 80055c0:	e72c      	b.n	800541c <_svfiprintf_r+0x2c>
 80055c2:	b021      	add	sp, #132	@ 0x84
 80055c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c6:	aa07      	add	r2, sp, #28
 80055c8:	9200      	str	r2, [sp, #0]
 80055ca:	0021      	movs	r1, r4
 80055cc:	003a      	movs	r2, r7
 80055ce:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <_svfiprintf_r+0x1f8>)
 80055d0:	9803      	ldr	r0, [sp, #12]
 80055d2:	f000 f91d 	bl	8005810 <_printf_i>
 80055d6:	e7eb      	b.n	80055b0 <_svfiprintf_r+0x1c0>
 80055d8:	080071f0 	.word	0x080071f0
 80055dc:	080071f6 	.word	0x080071f6
 80055e0:	080071fa 	.word	0x080071fa
 80055e4:	00000000 	.word	0x00000000
 80055e8:	08005331 	.word	0x08005331

080055ec <sbrk_aligned>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4e0f      	ldr	r6, [pc, #60]	@ (800562c <sbrk_aligned+0x40>)
 80055f0:	000d      	movs	r5, r1
 80055f2:	6831      	ldr	r1, [r6, #0]
 80055f4:	0004      	movs	r4, r0
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d102      	bne.n	8005600 <sbrk_aligned+0x14>
 80055fa:	f000 fa67 	bl	8005acc <_sbrk_r>
 80055fe:	6030      	str	r0, [r6, #0]
 8005600:	0029      	movs	r1, r5
 8005602:	0020      	movs	r0, r4
 8005604:	f000 fa62 	bl	8005acc <_sbrk_r>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d103      	bne.n	8005614 <sbrk_aligned+0x28>
 800560c:	2501      	movs	r5, #1
 800560e:	426d      	negs	r5, r5
 8005610:	0028      	movs	r0, r5
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	2303      	movs	r3, #3
 8005616:	1cc5      	adds	r5, r0, #3
 8005618:	439d      	bics	r5, r3
 800561a:	42a8      	cmp	r0, r5
 800561c:	d0f8      	beq.n	8005610 <sbrk_aligned+0x24>
 800561e:	1a29      	subs	r1, r5, r0
 8005620:	0020      	movs	r0, r4
 8005622:	f000 fa53 	bl	8005acc <_sbrk_r>
 8005626:	3001      	adds	r0, #1
 8005628:	d1f2      	bne.n	8005610 <sbrk_aligned+0x24>
 800562a:	e7ef      	b.n	800560c <sbrk_aligned+0x20>
 800562c:	2000084c 	.word	0x2000084c

08005630 <_malloc_r>:
 8005630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005632:	2203      	movs	r2, #3
 8005634:	1ccb      	adds	r3, r1, #3
 8005636:	4393      	bics	r3, r2
 8005638:	3308      	adds	r3, #8
 800563a:	0005      	movs	r5, r0
 800563c:	001f      	movs	r7, r3
 800563e:	2b0c      	cmp	r3, #12
 8005640:	d234      	bcs.n	80056ac <_malloc_r+0x7c>
 8005642:	270c      	movs	r7, #12
 8005644:	42b9      	cmp	r1, r7
 8005646:	d833      	bhi.n	80056b0 <_malloc_r+0x80>
 8005648:	0028      	movs	r0, r5
 800564a:	f000 f9ed 	bl	8005a28 <__malloc_lock>
 800564e:	4e37      	ldr	r6, [pc, #220]	@ (800572c <_malloc_r+0xfc>)
 8005650:	6833      	ldr	r3, [r6, #0]
 8005652:	001c      	movs	r4, r3
 8005654:	2c00      	cmp	r4, #0
 8005656:	d12f      	bne.n	80056b8 <_malloc_r+0x88>
 8005658:	0039      	movs	r1, r7
 800565a:	0028      	movs	r0, r5
 800565c:	f7ff ffc6 	bl	80055ec <sbrk_aligned>
 8005660:	0004      	movs	r4, r0
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	d15f      	bne.n	8005726 <_malloc_r+0xf6>
 8005666:	6834      	ldr	r4, [r6, #0]
 8005668:	9400      	str	r4, [sp, #0]
 800566a:	9b00      	ldr	r3, [sp, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d14a      	bne.n	8005706 <_malloc_r+0xd6>
 8005670:	2c00      	cmp	r4, #0
 8005672:	d052      	beq.n	800571a <_malloc_r+0xea>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	0028      	movs	r0, r5
 8005678:	18e3      	adds	r3, r4, r3
 800567a:	9900      	ldr	r1, [sp, #0]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	f000 fa25 	bl	8005acc <_sbrk_r>
 8005682:	9b01      	ldr	r3, [sp, #4]
 8005684:	4283      	cmp	r3, r0
 8005686:	d148      	bne.n	800571a <_malloc_r+0xea>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	0028      	movs	r0, r5
 800568c:	1aff      	subs	r7, r7, r3
 800568e:	0039      	movs	r1, r7
 8005690:	f7ff ffac 	bl	80055ec <sbrk_aligned>
 8005694:	3001      	adds	r0, #1
 8005696:	d040      	beq.n	800571a <_malloc_r+0xea>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	19db      	adds	r3, r3, r7
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	6833      	ldr	r3, [r6, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d133      	bne.n	800570e <_malloc_r+0xde>
 80056a6:	9b00      	ldr	r3, [sp, #0]
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	e019      	b.n	80056e0 <_malloc_r+0xb0>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dac9      	bge.n	8005644 <_malloc_r+0x14>
 80056b0:	230c      	movs	r3, #12
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	2000      	movs	r0, #0
 80056b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056b8:	6821      	ldr	r1, [r4, #0]
 80056ba:	1bc9      	subs	r1, r1, r7
 80056bc:	d420      	bmi.n	8005700 <_malloc_r+0xd0>
 80056be:	290b      	cmp	r1, #11
 80056c0:	d90a      	bls.n	80056d8 <_malloc_r+0xa8>
 80056c2:	19e2      	adds	r2, r4, r7
 80056c4:	6027      	str	r7, [r4, #0]
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	d104      	bne.n	80056d4 <_malloc_r+0xa4>
 80056ca:	6032      	str	r2, [r6, #0]
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	6011      	str	r1, [r2, #0]
 80056d0:	6053      	str	r3, [r2, #4]
 80056d2:	e005      	b.n	80056e0 <_malloc_r+0xb0>
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	e7f9      	b.n	80056cc <_malloc_r+0x9c>
 80056d8:	6862      	ldr	r2, [r4, #4]
 80056da:	42a3      	cmp	r3, r4
 80056dc:	d10e      	bne.n	80056fc <_malloc_r+0xcc>
 80056de:	6032      	str	r2, [r6, #0]
 80056e0:	0028      	movs	r0, r5
 80056e2:	f000 f9a9 	bl	8005a38 <__malloc_unlock>
 80056e6:	0020      	movs	r0, r4
 80056e8:	2207      	movs	r2, #7
 80056ea:	300b      	adds	r0, #11
 80056ec:	1d23      	adds	r3, r4, #4
 80056ee:	4390      	bics	r0, r2
 80056f0:	1ac2      	subs	r2, r0, r3
 80056f2:	4298      	cmp	r0, r3
 80056f4:	d0df      	beq.n	80056b6 <_malloc_r+0x86>
 80056f6:	1a1b      	subs	r3, r3, r0
 80056f8:	50a3      	str	r3, [r4, r2]
 80056fa:	e7dc      	b.n	80056b6 <_malloc_r+0x86>
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	e7ef      	b.n	80056e0 <_malloc_r+0xb0>
 8005700:	0023      	movs	r3, r4
 8005702:	6864      	ldr	r4, [r4, #4]
 8005704:	e7a6      	b.n	8005654 <_malloc_r+0x24>
 8005706:	9c00      	ldr	r4, [sp, #0]
 8005708:	6863      	ldr	r3, [r4, #4]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	e7ad      	b.n	800566a <_malloc_r+0x3a>
 800570e:	001a      	movs	r2, r3
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	42a3      	cmp	r3, r4
 8005714:	d1fb      	bne.n	800570e <_malloc_r+0xde>
 8005716:	2300      	movs	r3, #0
 8005718:	e7da      	b.n	80056d0 <_malloc_r+0xa0>
 800571a:	230c      	movs	r3, #12
 800571c:	0028      	movs	r0, r5
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	f000 f98a 	bl	8005a38 <__malloc_unlock>
 8005724:	e7c6      	b.n	80056b4 <_malloc_r+0x84>
 8005726:	6007      	str	r7, [r0, #0]
 8005728:	e7da      	b.n	80056e0 <_malloc_r+0xb0>
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	20000850 	.word	0x20000850

08005730 <_printf_common>:
 8005730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005732:	0016      	movs	r6, r2
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	688a      	ldr	r2, [r1, #8]
 8005738:	690b      	ldr	r3, [r1, #16]
 800573a:	000c      	movs	r4, r1
 800573c:	9000      	str	r0, [sp, #0]
 800573e:	4293      	cmp	r3, r2
 8005740:	da00      	bge.n	8005744 <_printf_common+0x14>
 8005742:	0013      	movs	r3, r2
 8005744:	0022      	movs	r2, r4
 8005746:	6033      	str	r3, [r6, #0]
 8005748:	3243      	adds	r2, #67	@ 0x43
 800574a:	7812      	ldrb	r2, [r2, #0]
 800574c:	2a00      	cmp	r2, #0
 800574e:	d001      	beq.n	8005754 <_printf_common+0x24>
 8005750:	3301      	adds	r3, #1
 8005752:	6033      	str	r3, [r6, #0]
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	069b      	lsls	r3, r3, #26
 8005758:	d502      	bpl.n	8005760 <_printf_common+0x30>
 800575a:	6833      	ldr	r3, [r6, #0]
 800575c:	3302      	adds	r3, #2
 800575e:	6033      	str	r3, [r6, #0]
 8005760:	6822      	ldr	r2, [r4, #0]
 8005762:	2306      	movs	r3, #6
 8005764:	0015      	movs	r5, r2
 8005766:	401d      	ands	r5, r3
 8005768:	421a      	tst	r2, r3
 800576a:	d027      	beq.n	80057bc <_printf_common+0x8c>
 800576c:	0023      	movs	r3, r4
 800576e:	3343      	adds	r3, #67	@ 0x43
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	1e5a      	subs	r2, r3, #1
 8005774:	4193      	sbcs	r3, r2
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	0692      	lsls	r2, r2, #26
 800577a:	d430      	bmi.n	80057de <_printf_common+0xae>
 800577c:	0022      	movs	r2, r4
 800577e:	9901      	ldr	r1, [sp, #4]
 8005780:	9800      	ldr	r0, [sp, #0]
 8005782:	9d08      	ldr	r5, [sp, #32]
 8005784:	3243      	adds	r2, #67	@ 0x43
 8005786:	47a8      	blx	r5
 8005788:	3001      	adds	r0, #1
 800578a:	d025      	beq.n	80057d8 <_printf_common+0xa8>
 800578c:	2206      	movs	r2, #6
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	2500      	movs	r5, #0
 8005792:	4013      	ands	r3, r2
 8005794:	2b04      	cmp	r3, #4
 8005796:	d105      	bne.n	80057a4 <_printf_common+0x74>
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	68e5      	ldr	r5, [r4, #12]
 800579c:	1aed      	subs	r5, r5, r3
 800579e:	43eb      	mvns	r3, r5
 80057a0:	17db      	asrs	r3, r3, #31
 80057a2:	401d      	ands	r5, r3
 80057a4:	68a3      	ldr	r3, [r4, #8]
 80057a6:	6922      	ldr	r2, [r4, #16]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	dd01      	ble.n	80057b0 <_printf_common+0x80>
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	18ed      	adds	r5, r5, r3
 80057b0:	2600      	movs	r6, #0
 80057b2:	42b5      	cmp	r5, r6
 80057b4:	d120      	bne.n	80057f8 <_printf_common+0xc8>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e010      	b.n	80057dc <_printf_common+0xac>
 80057ba:	3501      	adds	r5, #1
 80057bc:	68e3      	ldr	r3, [r4, #12]
 80057be:	6832      	ldr	r2, [r6, #0]
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	42ab      	cmp	r3, r5
 80057c4:	ddd2      	ble.n	800576c <_printf_common+0x3c>
 80057c6:	0022      	movs	r2, r4
 80057c8:	2301      	movs	r3, #1
 80057ca:	9901      	ldr	r1, [sp, #4]
 80057cc:	9800      	ldr	r0, [sp, #0]
 80057ce:	9f08      	ldr	r7, [sp, #32]
 80057d0:	3219      	adds	r2, #25
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	d1f0      	bne.n	80057ba <_printf_common+0x8a>
 80057d8:	2001      	movs	r0, #1
 80057da:	4240      	negs	r0, r0
 80057dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057de:	2030      	movs	r0, #48	@ 0x30
 80057e0:	18e1      	adds	r1, r4, r3
 80057e2:	3143      	adds	r1, #67	@ 0x43
 80057e4:	7008      	strb	r0, [r1, #0]
 80057e6:	0021      	movs	r1, r4
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	3145      	adds	r1, #69	@ 0x45
 80057ec:	7809      	ldrb	r1, [r1, #0]
 80057ee:	18a2      	adds	r2, r4, r2
 80057f0:	3243      	adds	r2, #67	@ 0x43
 80057f2:	3302      	adds	r3, #2
 80057f4:	7011      	strb	r1, [r2, #0]
 80057f6:	e7c1      	b.n	800577c <_printf_common+0x4c>
 80057f8:	0022      	movs	r2, r4
 80057fa:	2301      	movs	r3, #1
 80057fc:	9901      	ldr	r1, [sp, #4]
 80057fe:	9800      	ldr	r0, [sp, #0]
 8005800:	9f08      	ldr	r7, [sp, #32]
 8005802:	321a      	adds	r2, #26
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	d0e6      	beq.n	80057d8 <_printf_common+0xa8>
 800580a:	3601      	adds	r6, #1
 800580c:	e7d1      	b.n	80057b2 <_printf_common+0x82>
	...

08005810 <_printf_i>:
 8005810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005812:	b08b      	sub	sp, #44	@ 0x2c
 8005814:	9206      	str	r2, [sp, #24]
 8005816:	000a      	movs	r2, r1
 8005818:	3243      	adds	r2, #67	@ 0x43
 800581a:	9307      	str	r3, [sp, #28]
 800581c:	9005      	str	r0, [sp, #20]
 800581e:	9203      	str	r2, [sp, #12]
 8005820:	7e0a      	ldrb	r2, [r1, #24]
 8005822:	000c      	movs	r4, r1
 8005824:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005826:	2a78      	cmp	r2, #120	@ 0x78
 8005828:	d809      	bhi.n	800583e <_printf_i+0x2e>
 800582a:	2a62      	cmp	r2, #98	@ 0x62
 800582c:	d80b      	bhi.n	8005846 <_printf_i+0x36>
 800582e:	2a00      	cmp	r2, #0
 8005830:	d100      	bne.n	8005834 <_printf_i+0x24>
 8005832:	e0ba      	b.n	80059aa <_printf_i+0x19a>
 8005834:	497a      	ldr	r1, [pc, #488]	@ (8005a20 <_printf_i+0x210>)
 8005836:	9104      	str	r1, [sp, #16]
 8005838:	2a58      	cmp	r2, #88	@ 0x58
 800583a:	d100      	bne.n	800583e <_printf_i+0x2e>
 800583c:	e08e      	b.n	800595c <_printf_i+0x14c>
 800583e:	0025      	movs	r5, r4
 8005840:	3542      	adds	r5, #66	@ 0x42
 8005842:	702a      	strb	r2, [r5, #0]
 8005844:	e022      	b.n	800588c <_printf_i+0x7c>
 8005846:	0010      	movs	r0, r2
 8005848:	3863      	subs	r0, #99	@ 0x63
 800584a:	2815      	cmp	r0, #21
 800584c:	d8f7      	bhi.n	800583e <_printf_i+0x2e>
 800584e:	f7fa fc57 	bl	8000100 <__gnu_thumb1_case_shi>
 8005852:	0016      	.short	0x0016
 8005854:	fff6001f 	.word	0xfff6001f
 8005858:	fff6fff6 	.word	0xfff6fff6
 800585c:	001ffff6 	.word	0x001ffff6
 8005860:	fff6fff6 	.word	0xfff6fff6
 8005864:	fff6fff6 	.word	0xfff6fff6
 8005868:	0036009f 	.word	0x0036009f
 800586c:	fff6007e 	.word	0xfff6007e
 8005870:	00b0fff6 	.word	0x00b0fff6
 8005874:	0036fff6 	.word	0x0036fff6
 8005878:	fff6fff6 	.word	0xfff6fff6
 800587c:	0082      	.short	0x0082
 800587e:	0025      	movs	r5, r4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	3542      	adds	r5, #66	@ 0x42
 8005884:	1d11      	adds	r1, r2, #4
 8005886:	6019      	str	r1, [r3, #0]
 8005888:	6813      	ldr	r3, [r2, #0]
 800588a:	702b      	strb	r3, [r5, #0]
 800588c:	2301      	movs	r3, #1
 800588e:	e09e      	b.n	80059ce <_printf_i+0x1be>
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	6809      	ldr	r1, [r1, #0]
 8005894:	1d02      	adds	r2, r0, #4
 8005896:	060d      	lsls	r5, r1, #24
 8005898:	d50b      	bpl.n	80058b2 <_printf_i+0xa2>
 800589a:	6806      	ldr	r6, [r0, #0]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	2e00      	cmp	r6, #0
 80058a0:	da03      	bge.n	80058aa <_printf_i+0x9a>
 80058a2:	232d      	movs	r3, #45	@ 0x2d
 80058a4:	9a03      	ldr	r2, [sp, #12]
 80058a6:	4276      	negs	r6, r6
 80058a8:	7013      	strb	r3, [r2, #0]
 80058aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005a20 <_printf_i+0x210>)
 80058ac:	270a      	movs	r7, #10
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	e018      	b.n	80058e4 <_printf_i+0xd4>
 80058b2:	6806      	ldr	r6, [r0, #0]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	0649      	lsls	r1, r1, #25
 80058b8:	d5f1      	bpl.n	800589e <_printf_i+0x8e>
 80058ba:	b236      	sxth	r6, r6
 80058bc:	e7ef      	b.n	800589e <_printf_i+0x8e>
 80058be:	6808      	ldr	r0, [r1, #0]
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	c940      	ldmia	r1!, {r6}
 80058c4:	0605      	lsls	r5, r0, #24
 80058c6:	d402      	bmi.n	80058ce <_printf_i+0xbe>
 80058c8:	0640      	lsls	r0, r0, #25
 80058ca:	d500      	bpl.n	80058ce <_printf_i+0xbe>
 80058cc:	b2b6      	uxth	r6, r6
 80058ce:	6019      	str	r1, [r3, #0]
 80058d0:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <_printf_i+0x210>)
 80058d2:	270a      	movs	r7, #10
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	2a6f      	cmp	r2, #111	@ 0x6f
 80058d8:	d100      	bne.n	80058dc <_printf_i+0xcc>
 80058da:	3f02      	subs	r7, #2
 80058dc:	0023      	movs	r3, r4
 80058de:	2200      	movs	r2, #0
 80058e0:	3343      	adds	r3, #67	@ 0x43
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	60a3      	str	r3, [r4, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	db06      	blt.n	80058fa <_printf_i+0xea>
 80058ec:	2104      	movs	r1, #4
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	9d03      	ldr	r5, [sp, #12]
 80058f2:	438a      	bics	r2, r1
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	4333      	orrs	r3, r6
 80058f8:	d00c      	beq.n	8005914 <_printf_i+0x104>
 80058fa:	9d03      	ldr	r5, [sp, #12]
 80058fc:	0030      	movs	r0, r6
 80058fe:	0039      	movs	r1, r7
 8005900:	f7fa fc8e 	bl	8000220 <__aeabi_uidivmod>
 8005904:	9b04      	ldr	r3, [sp, #16]
 8005906:	3d01      	subs	r5, #1
 8005908:	5c5b      	ldrb	r3, [r3, r1]
 800590a:	702b      	strb	r3, [r5, #0]
 800590c:	0033      	movs	r3, r6
 800590e:	0006      	movs	r6, r0
 8005910:	429f      	cmp	r7, r3
 8005912:	d9f3      	bls.n	80058fc <_printf_i+0xec>
 8005914:	2f08      	cmp	r7, #8
 8005916:	d109      	bne.n	800592c <_printf_i+0x11c>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	07db      	lsls	r3, r3, #31
 800591c:	d506      	bpl.n	800592c <_printf_i+0x11c>
 800591e:	6862      	ldr	r2, [r4, #4]
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	dc02      	bgt.n	800592c <_printf_i+0x11c>
 8005926:	2330      	movs	r3, #48	@ 0x30
 8005928:	3d01      	subs	r5, #1
 800592a:	702b      	strb	r3, [r5, #0]
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	1b5b      	subs	r3, r3, r5
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	9b07      	ldr	r3, [sp, #28]
 8005934:	0021      	movs	r1, r4
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	9805      	ldr	r0, [sp, #20]
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	aa09      	add	r2, sp, #36	@ 0x24
 800593e:	f7ff fef7 	bl	8005730 <_printf_common>
 8005942:	3001      	adds	r0, #1
 8005944:	d148      	bne.n	80059d8 <_printf_i+0x1c8>
 8005946:	2001      	movs	r0, #1
 8005948:	4240      	negs	r0, r0
 800594a:	b00b      	add	sp, #44	@ 0x2c
 800594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594e:	2220      	movs	r2, #32
 8005950:	6809      	ldr	r1, [r1, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	6022      	str	r2, [r4, #0]
 8005956:	2278      	movs	r2, #120	@ 0x78
 8005958:	4932      	ldr	r1, [pc, #200]	@ (8005a24 <_printf_i+0x214>)
 800595a:	9104      	str	r1, [sp, #16]
 800595c:	0021      	movs	r1, r4
 800595e:	3145      	adds	r1, #69	@ 0x45
 8005960:	700a      	strb	r2, [r1, #0]
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	c940      	ldmia	r1!, {r6}
 8005968:	0610      	lsls	r0, r2, #24
 800596a:	d402      	bmi.n	8005972 <_printf_i+0x162>
 800596c:	0650      	lsls	r0, r2, #25
 800596e:	d500      	bpl.n	8005972 <_printf_i+0x162>
 8005970:	b2b6      	uxth	r6, r6
 8005972:	6019      	str	r1, [r3, #0]
 8005974:	07d3      	lsls	r3, r2, #31
 8005976:	d502      	bpl.n	800597e <_printf_i+0x16e>
 8005978:	2320      	movs	r3, #32
 800597a:	4313      	orrs	r3, r2
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	2e00      	cmp	r6, #0
 8005980:	d001      	beq.n	8005986 <_printf_i+0x176>
 8005982:	2710      	movs	r7, #16
 8005984:	e7aa      	b.n	80058dc <_printf_i+0xcc>
 8005986:	2220      	movs	r2, #32
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	4393      	bics	r3, r2
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	e7f8      	b.n	8005982 <_printf_i+0x172>
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	680d      	ldr	r5, [r1, #0]
 8005994:	1d10      	adds	r0, r2, #4
 8005996:	6949      	ldr	r1, [r1, #20]
 8005998:	6018      	str	r0, [r3, #0]
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	062e      	lsls	r6, r5, #24
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0x194>
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e002      	b.n	80059aa <_printf_i+0x19a>
 80059a4:	066d      	lsls	r5, r5, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0x190>
 80059a8:	8019      	strh	r1, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	9d03      	ldr	r5, [sp, #12]
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	e7bf      	b.n	8005932 <_printf_i+0x122>
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	1d11      	adds	r1, r2, #4
 80059b6:	6019      	str	r1, [r3, #0]
 80059b8:	6815      	ldr	r5, [r2, #0]
 80059ba:	2100      	movs	r1, #0
 80059bc:	0028      	movs	r0, r5
 80059be:	6862      	ldr	r2, [r4, #4]
 80059c0:	f000 f896 	bl	8005af0 <memchr>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d001      	beq.n	80059cc <_printf_i+0x1bc>
 80059c8:	1b40      	subs	r0, r0, r5
 80059ca:	6060      	str	r0, [r4, #4]
 80059cc:	6863      	ldr	r3, [r4, #4]
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9a03      	ldr	r2, [sp, #12]
 80059d4:	7013      	strb	r3, [r2, #0]
 80059d6:	e7ac      	b.n	8005932 <_printf_i+0x122>
 80059d8:	002a      	movs	r2, r5
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	9906      	ldr	r1, [sp, #24]
 80059de:	9805      	ldr	r0, [sp, #20]
 80059e0:	9d07      	ldr	r5, [sp, #28]
 80059e2:	47a8      	blx	r5
 80059e4:	3001      	adds	r0, #1
 80059e6:	d0ae      	beq.n	8005946 <_printf_i+0x136>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	079b      	lsls	r3, r3, #30
 80059ec:	d415      	bmi.n	8005a1a <_printf_i+0x20a>
 80059ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f0:	68e0      	ldr	r0, [r4, #12]
 80059f2:	4298      	cmp	r0, r3
 80059f4:	daa9      	bge.n	800594a <_printf_i+0x13a>
 80059f6:	0018      	movs	r0, r3
 80059f8:	e7a7      	b.n	800594a <_printf_i+0x13a>
 80059fa:	0022      	movs	r2, r4
 80059fc:	2301      	movs	r3, #1
 80059fe:	9906      	ldr	r1, [sp, #24]
 8005a00:	9805      	ldr	r0, [sp, #20]
 8005a02:	9e07      	ldr	r6, [sp, #28]
 8005a04:	3219      	adds	r2, #25
 8005a06:	47b0      	blx	r6
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d09c      	beq.n	8005946 <_printf_i+0x136>
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dcf0      	bgt.n	80059fa <_printf_i+0x1ea>
 8005a18:	e7e9      	b.n	80059ee <_printf_i+0x1de>
 8005a1a:	2500      	movs	r5, #0
 8005a1c:	e7f7      	b.n	8005a0e <_printf_i+0x1fe>
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	08007201 	.word	0x08007201
 8005a24:	08007212 	.word	0x08007212

08005a28 <__malloc_lock>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4802      	ldr	r0, [pc, #8]	@ (8005a34 <__malloc_lock+0xc>)
 8005a2c:	f7ff fc7e 	bl	800532c <__retarget_lock_acquire_recursive>
 8005a30:	bd10      	pop	{r4, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	20000848 	.word	0x20000848

08005a38 <__malloc_unlock>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4802      	ldr	r0, [pc, #8]	@ (8005a44 <__malloc_unlock+0xc>)
 8005a3c:	f7ff fc77 	bl	800532e <__retarget_lock_release_recursive>
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	20000848 	.word	0x20000848

08005a48 <_realloc_r>:
 8005a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a4a:	0006      	movs	r6, r0
 8005a4c:	000c      	movs	r4, r1
 8005a4e:	0015      	movs	r5, r2
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d105      	bne.n	8005a60 <_realloc_r+0x18>
 8005a54:	0011      	movs	r1, r2
 8005a56:	f7ff fdeb 	bl	8005630 <_malloc_r>
 8005a5a:	0004      	movs	r4, r0
 8005a5c:	0020      	movs	r0, r4
 8005a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d103      	bne.n	8005a6c <_realloc_r+0x24>
 8005a64:	f000 f858 	bl	8005b18 <_free_r>
 8005a68:	002c      	movs	r4, r5
 8005a6a:	e7f7      	b.n	8005a5c <_realloc_r+0x14>
 8005a6c:	f000 f89e 	bl	8005bac <_malloc_usable_size_r>
 8005a70:	0007      	movs	r7, r0
 8005a72:	4285      	cmp	r5, r0
 8005a74:	d802      	bhi.n	8005a7c <_realloc_r+0x34>
 8005a76:	0843      	lsrs	r3, r0, #1
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	d3ef      	bcc.n	8005a5c <_realloc_r+0x14>
 8005a7c:	0029      	movs	r1, r5
 8005a7e:	0030      	movs	r0, r6
 8005a80:	f7ff fdd6 	bl	8005630 <_malloc_r>
 8005a84:	9001      	str	r0, [sp, #4]
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d101      	bne.n	8005a8e <_realloc_r+0x46>
 8005a8a:	9c01      	ldr	r4, [sp, #4]
 8005a8c:	e7e6      	b.n	8005a5c <_realloc_r+0x14>
 8005a8e:	002a      	movs	r2, r5
 8005a90:	42bd      	cmp	r5, r7
 8005a92:	d900      	bls.n	8005a96 <_realloc_r+0x4e>
 8005a94:	003a      	movs	r2, r7
 8005a96:	0021      	movs	r1, r4
 8005a98:	9801      	ldr	r0, [sp, #4]
 8005a9a:	f000 f834 	bl	8005b06 <memcpy>
 8005a9e:	0021      	movs	r1, r4
 8005aa0:	0030      	movs	r0, r6
 8005aa2:	f000 f839 	bl	8005b18 <_free_r>
 8005aa6:	e7f0      	b.n	8005a8a <_realloc_r+0x42>

08005aa8 <memmove>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4288      	cmp	r0, r1
 8005aac:	d902      	bls.n	8005ab4 <memmove+0xc>
 8005aae:	188b      	adds	r3, r1, r2
 8005ab0:	4298      	cmp	r0, r3
 8005ab2:	d308      	bcc.n	8005ac6 <memmove+0x1e>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d007      	beq.n	8005aca <memmove+0x22>
 8005aba:	5ccc      	ldrb	r4, [r1, r3]
 8005abc:	54c4      	strb	r4, [r0, r3]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	e7f9      	b.n	8005ab6 <memmove+0xe>
 8005ac2:	5c8b      	ldrb	r3, [r1, r2]
 8005ac4:	5483      	strb	r3, [r0, r2]
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	d2fb      	bcs.n	8005ac2 <memmove+0x1a>
 8005aca:	bd10      	pop	{r4, pc}

08005acc <_sbrk_r>:
 8005acc:	2300      	movs	r3, #0
 8005ace:	b570      	push	{r4, r5, r6, lr}
 8005ad0:	4d06      	ldr	r5, [pc, #24]	@ (8005aec <_sbrk_r+0x20>)
 8005ad2:	0004      	movs	r4, r0
 8005ad4:	0008      	movs	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fc fce2 	bl	80024a0 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d103      	bne.n	8005ae8 <_sbrk_r+0x1c>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d000      	beq.n	8005ae8 <_sbrk_r+0x1c>
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd70      	pop	{r4, r5, r6, pc}
 8005aea:	46c0      	nop			@ (mov r8, r8)
 8005aec:	20000854 	.word	0x20000854

08005af0 <memchr>:
 8005af0:	b2c9      	uxtb	r1, r1
 8005af2:	1882      	adds	r2, r0, r2
 8005af4:	4290      	cmp	r0, r2
 8005af6:	d101      	bne.n	8005afc <memchr+0xc>
 8005af8:	2000      	movs	r0, #0
 8005afa:	4770      	bx	lr
 8005afc:	7803      	ldrb	r3, [r0, #0]
 8005afe:	428b      	cmp	r3, r1
 8005b00:	d0fb      	beq.n	8005afa <memchr+0xa>
 8005b02:	3001      	adds	r0, #1
 8005b04:	e7f6      	b.n	8005af4 <memchr+0x4>

08005b06 <memcpy>:
 8005b06:	2300      	movs	r3, #0
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d100      	bne.n	8005b10 <memcpy+0xa>
 8005b0e:	bd10      	pop	{r4, pc}
 8005b10:	5ccc      	ldrb	r4, [r1, r3]
 8005b12:	54c4      	strb	r4, [r0, r3]
 8005b14:	3301      	adds	r3, #1
 8005b16:	e7f8      	b.n	8005b0a <memcpy+0x4>

08005b18 <_free_r>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	0005      	movs	r5, r0
 8005b1c:	1e0c      	subs	r4, r1, #0
 8005b1e:	d010      	beq.n	8005b42 <_free_r+0x2a>
 8005b20:	3c04      	subs	r4, #4
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da00      	bge.n	8005b2a <_free_r+0x12>
 8005b28:	18e4      	adds	r4, r4, r3
 8005b2a:	0028      	movs	r0, r5
 8005b2c:	f7ff ff7c 	bl	8005a28 <__malloc_lock>
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <_free_r+0x90>)
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <_free_r+0x2c>
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	6014      	str	r4, [r2, #0]
 8005b3c:	0028      	movs	r0, r5
 8005b3e:	f7ff ff7b 	bl	8005a38 <__malloc_unlock>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d908      	bls.n	8005b5a <_free_r+0x42>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	1821      	adds	r1, r4, r0
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	d1f3      	bne.n	8005b38 <_free_r+0x20>
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	1809      	adds	r1, r1, r0
 8005b56:	6021      	str	r1, [r4, #0]
 8005b58:	e7ee      	b.n	8005b38 <_free_r+0x20>
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <_free_r+0x4e>
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	d9f9      	bls.n	8005b5a <_free_r+0x42>
 8005b66:	6811      	ldr	r1, [r2, #0]
 8005b68:	1850      	adds	r0, r2, r1
 8005b6a:	42a0      	cmp	r0, r4
 8005b6c:	d10b      	bne.n	8005b86 <_free_r+0x6e>
 8005b6e:	6820      	ldr	r0, [r4, #0]
 8005b70:	1809      	adds	r1, r1, r0
 8005b72:	1850      	adds	r0, r2, r1
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	4283      	cmp	r3, r0
 8005b78:	d1e0      	bne.n	8005b3c <_free_r+0x24>
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	1841      	adds	r1, r0, r1
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	6053      	str	r3, [r2, #4]
 8005b84:	e7da      	b.n	8005b3c <_free_r+0x24>
 8005b86:	42a0      	cmp	r0, r4
 8005b88:	d902      	bls.n	8005b90 <_free_r+0x78>
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	e7d5      	b.n	8005b3c <_free_r+0x24>
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	1821      	adds	r1, r4, r0
 8005b94:	428b      	cmp	r3, r1
 8005b96:	d103      	bne.n	8005ba0 <_free_r+0x88>
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	1809      	adds	r1, r1, r0
 8005b9e:	6021      	str	r1, [r4, #0]
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	6054      	str	r4, [r2, #4]
 8005ba4:	e7ca      	b.n	8005b3c <_free_r+0x24>
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	20000850 	.word	0x20000850

08005bac <_malloc_usable_size_r>:
 8005bac:	1f0b      	subs	r3, r1, #4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1f18      	subs	r0, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da01      	bge.n	8005bba <_malloc_usable_size_r+0xe>
 8005bb6:	580b      	ldr	r3, [r1, r0]
 8005bb8:	18c0      	adds	r0, r0, r3
 8005bba:	4770      	bx	lr

08005bbc <_init>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr

08005bc8 <_fini>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr
