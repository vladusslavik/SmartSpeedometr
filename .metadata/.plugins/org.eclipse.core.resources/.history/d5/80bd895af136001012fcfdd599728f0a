/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "ssd1306.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//#define ADDR_CALIBR_VREF ((uint16_t*) ((uint32_t) 0x1FFF75AA))
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* USER CODE BEGIN PV */

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
ADC_ChannelConfTypeDef sConfig;

//uint8_t buf[18];
char buf[20];

//uint8_t x = 0, y = 30;

volatile uint16_t adc[2];


uint8_t sw1 = 0, sw2 = 0, sw3 = 0,  tim3 = 1, watchdog = 0;
uint8_t config = 0, accept = 0;
//uint16_t tim16 = 0;
uint8_t size = 20;
int8_t con = 0;

//float speed, smooth_speed = 0;;
uint8_t impuls = 0, first_impuls  = 0;
uint16_t duration = 3200;

uint16_t dead_zone, direct_zone;
uint16_t del = 400;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM16_Init(void);
static void MX_TIM14_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void ADC_Select_CH3();
void ADC_Select_CH5();
void Hall_Sensor();
//float vrefint();

void WriteTime();
uint16_t BatteryCharge();
void WriteBatteryCharge(uint16_t adc);

void ConfigTime();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == Sw1_Pin)
		sw1 =1 ;

	if(GPIO_Pin == Sw2_Pin)
		sw2 = 1;

	if(GPIO_Pin == Sw3_Pin)
		sw3 = 1;

}
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == Sw1_Pin)
		sw1 = 0;

	if(GPIO_Pin == Sw2_Pin)
		sw2 = 0;

	if(GPIO_Pin == Sw3_Pin)
		sw3 = 0;

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{

}
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
//if(tim3){
	//if(watchdog){
	if(tim3)
	impuls = 1;
	else
	 impuls = 0;
//
//	tim3 = 0;
//	TIM3->CNT = 0;
//	TIM3->SR &= ~TIM_SR_UIF;
//	TIM3->ARR = 29;
//
//	HAL_TIM_Base_Start_IT(&htim3);
//}
//else
//	impuls = 0;
//
//	}
//	else{
//		first_impuls = 1;
//		watchdog = 1;
//	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_ADC1_Init();
  MX_RTC_Init();
  MX_TIM16_Init();
  MX_TIM14_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
    ssd1306_FlipScreenVertically();
    ssd1306_Clear();
    ssd1306_SetColor(White);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//float vref = vrefint();


HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc, 2);

//Hall_Sensor();

dead_zone = adc[1];
direct_zone = 250;
//direct_zone = dead_zone + 400;
  while (1)
  {

	  if(sw1 && sw3){
		  HAL_TIM_Base_Start(&htim16);
		  if(TIM16->CNT >= 1500){
			  config = 1;
			  sw1 = 0;
			  sw3 = 0;
		  }
		  else
			  accept = 1;

	  }
	  else if(sw1 && sw2 && sw3)
	  		  config = 0;
	  else{
		  HAL_TIM_Base_Stop(&htim16);
		  TIM16->CNT = 0;
		  accept = 0;
	  }


	 // Hall_Sensor();
switch (config){
case(0):
WriteTime();



//adc[0] = BatteryCharge(adc[0]);

//BatteryCharge();
uint8_t battery = BatteryCharge();
WriteBatteryCharge(battery);



//duration = TIM1->CNT;
//HAL_TIM_Base_Start(&htim1);
//duration = TIM1->CNT;

//if(tim3){
//int16_t delta = dead_zone - adc[1];
//	if(abs(delta) > direct_zone){
//dead_zone = adc[1];

if((impuls  && tim3) || (duration  > 10000)){

static uint8_t  timer;

//if(impuls){
if(duration > 10000){
	HAL_TIM_Stop_Start(&htim14);
	duration = 9000;
	timer = 0;
}

else{


	if(timer){
duration = TIM14->CNT;
TIM14->CNT = 0;

	}
	else{
		TIM14->CNT = 0;
		TIM14->SR &= ~TIM_SR_UIF;
		HAL_TIM_Base_Start(&htim14);
		timer = 1;

	}


//}
	tim3 = 0;
	TIM3->CNT = 0;
	TIM3->SR &= ~TIM_SR_UIF;
	TIM3->ARR = 29;

	impuls = 0;

	//del = 0.1855f*duration + 28.86f;
	//TIM3->ARR = 0.1809f*duration + 38.19f;

	HAL_TIM_Base_Start_IT(&htim3);

	}
}

if(TIM14->CNT > duration)
 duration = TIM14->CNT;



//duration = (TIM14-CNT > duration) ? (duration = TIM14-CNT) : (duration = duration);

//}
//tim3 = 0;
//TIM3->CNT = 0;
//TIM3->SR &= ~TIM_SR_UIF;
//TIM3->ARR = 29;
////del = 0.1855f*duration + 28.86f;
////TIM3->ARR = 0.1809f*duration + 38.19f;
//
//HAL_TIM_Base_Start_IT(&htim3);
//}

//if(TIM14->CNT > duration + 1500 ){
//
//	if(duration  > 3200){
//		impuls = 0;
//		duration = 3200;
//		HAL_TIM_Base_Stop(&htim14);
//		TIM14->CNT =  0;
//	}
//	else
//		duration = duration +duration/50;
//}

if(duration < 3000){
volatile float speed = (uint8_t)size * 0.0797f; // 0.0254f*3.14f = 0.0797
speed = speed / (uint16_t)duration;
speed = speed *1000 * 3.6;
//speed = speed * 3.6f;

volatile float smooth_speed = 0.01f*(float)speed+(1.0f-0.01f)*smooth_speed;

uint16_t real_speed1 = (float)smooth_speed; // 50.5*10=505
//uint16_t real_speed2 = real_speed1 / 10; // 50
//real_speed2 = real_speed1  - real_speed2*10; // 505 - 500  = 5
//real_speed1 = real_speed1 / 10;
uint16_t real_speed2 = (uint16_t)(smooth_speed*10.0f) % 10; // 50
ssd1306_SetCursor(9, 25);
	 snprintf(buf, sizeof(buf), "%d.%dkh/h", real_speed1, real_speed2);
	 ssd1306_WriteString(buf, Font_11x18);
}
else{
	ssd1306_SetCursor(20, 25);
	snprintf(buf, sizeof(buf), "0 kh/h");
	ssd1306_WriteString(buf, Font_11x18);
}
//if(speed > 300){
//	speed++;
//}


	 break;


case(1):

if(sw1 && sw3)
	__NOP();
else if(sw3 && tim3){
	con++;
	tim3 = 0;
	TIM3->CNT = 0;
	TIM3->SR &= ~TIM_SR_UIF;
	TIM3->ARR = 300;
	HAL_TIM_Base_Start_IT(&htim3);
}
else if(sw1 && tim3){
	con--;
	tim3 = 0;
	TIM3->CNT = 0;
	TIM3->SR &= ~TIM_SR_UIF;
	TIM3->ARR = 300;
	HAL_TIM_Base_Start_IT(&htim3);
}

if(con >= 3)
	con = 0;
else if(con < 0)
	con = 2;



switch (con) {
case(0): //Config Time
		ssd1306_SetCursor(0, 0);
		sprintf(buf, "Set time");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 19);
		sprintf(buf, "Calibration");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 38);
		sprintf(buf, "Set size");
		ssd1306_WriteString(buf, Font_11x18);
//		if(accept)
//		config = 2;
		if(sw2 && tim3){
			config = 2;

			tim3 = 0;
			TIM3->CNT = 0;
			TIM3->SR &= ~TIM_SR_UIF;
			TIM3->ARR = 300;
			HAL_TIM_Base_Start_IT(&htim3);

			//HAL_Delay(200);
		}
		break;

case(1): //Config Size

		ssd1306_SetCursor(0, 0);
		sprintf(buf, "Set size");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 19);
		sprintf(buf, "Set time");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 38);
		sprintf(buf, "Calibration");
		ssd1306_WriteString(buf, Font_11x18);
		if(sw2 && tim3){
			config = 3;

			tim3 = 0;
			TIM3->CNT = 0;
			TIM3->SR &= ~TIM_SR_UIF;
			TIM3->ARR = 300;
			HAL_TIM_Base_Start_IT(&htim3);

			//HAL_Delay(200);
		}
		break;

case(2): //Config Calibration
		ssd1306_SetCursor(0, 0);
		sprintf(buf, "Calibration");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 19);
		sprintf(buf, "Set size");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 38);
		sprintf(buf, "Set time");
		ssd1306_WriteString(buf, Font_11x18);
		if(sw2 && tim3){
			config = 4;

			tim3 = 0;
			TIM3->CNT = 0;
			TIM3->SR &= ~TIM_SR_UIF;
			TIM3->ARR = 300;
			HAL_TIM_Base_Start_IT(&htim3);

			//HAL_Delay(200);
		}
		break;
}
		break;
case(2):
		ConfigTime();
		break;
case(3): //Size
		if(sw2 && tim3){
			config = 0;

			tim3 = 0;
			TIM3->CNT = 0;
			TIM3->SR &= ~TIM_SR_UIF;
			TIM3->ARR = 200;
			HAL_TIM_Base_Start_IT(&htim3);

			break;

		}
		else if(sw3 && tim3){
			size++;
			tim3 = 0;
			TIM3->CNT = 0;
			TIM3->SR &= ~TIM_SR_UIF;
			TIM3->ARR = 200;
			HAL_TIM_Base_Start_IT(&htim3);
		}

		else if(sw1){
			size--;
			tim3 = 0;
			TIM3->CNT = 0;
			TIM3->SR &= ~TIM_SR_UIF;
			TIM3->ARR = 200;
			HAL_TIM_Base_Start_IT(&htim3);
		}


		ssd1306_SetCursor(33, 0);
		sprintf(buf, "Wheel");
		ssd1306_WriteString(buf, Font_11x18);

		ssd1306_SetCursor(0, 39);
		sprintf(buf, "Size:%dinch", size);
		ssd1306_WriteString(buf, Font_11x18);


		break;
case(4): // Calibration

			if(sw2 && (con == 2) && tim3){
				//HAL_Delay(300);
				dead_zone = adc[1];
				con = 3;
				tim3 = 0;
				TIM3->CNT = 0;
				TIM3->SR &= ~TIM_SR_UIF;
				TIM3->ARR = 300;
				HAL_TIM_Base_Start_IT(&htim3);
			}
			if(con == 2){
			ssd1306_SetCursor(17, 0);
			sprintf(buf, "Set dead zone");
			ssd1306_WriteString(buf, Font_7x10);
			}
			else{
			ssd1306_SetCursor(17, 0);
			sprintf(buf, "Set direct zone");
			ssd1306_WriteString(buf, Font_7x10);
			con = 3;



			if(sw2 && tim3){
				direct_zone = adc[1];
				config = 0;
				duration = 0;

				direct_zone = (direct_zone > dead_zone)?((direct_zone - dead_zone)/3) : ((dead_zone - direct_zone)/3);
			}


			}

			ssd1306_SetCursor(6, 24);
			sprintf(buf, "%d", adc[1]);
			ssd1306_WriteString(buf, Font_11x18);
			ssd1306_SetCursor(6, 48);
			sprintf(buf, "Put middle button");
			ssd1306_WriteString(buf, Font_7x10);

		//}


		break;
}

	 ssd1306_UpdateScreen();
	 ssd1306_Clear();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
  AnalogWDGConfig.ITMode = ENABLE;
  AnalogWDGConfig.HighThreshold = 2800;
  AnalogWDGConfig.LowThreshold = 2000;
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00200105;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 15999;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 59;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 15999;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 0xFFFF;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}

/**
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
  htim16.Init.Prescaler = 15999;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 0xFFFF;
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pins : Sw3_Pin Sw2_Pin STDBY_BAT_Pin CHRG_BAT_Pin */
  GPIO_InitStruct.Pin = Sw3_Pin|Sw2_Pin|STDBY_BAT_Pin|CHRG_BAT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : Sw1_Pin */
  GPIO_InitStruct.Pin = Sw1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Sw1_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void ADC_Select_CH3(){

	 sConfig.Channel = ADC_CHANNEL_3;
	 sConfig.Rank = ADC_REGULAR_RANK_1;
	 sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	 {
	 	Error_Handler();
	 }
}
void ADC_Select_CH5(){

	 sConfig.Channel = ADC_CHANNEL_5;
	 sConfig.Rank = ADC_REGULAR_RANK_1;
	 sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	 {
	 	Error_Handler();
	 }

}

void WriteTime(){
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

		  if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
			  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Seconds < 10 && sTime.Minutes < 10)
			  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Seconds < 10 && sTime.Hours < 10)
			  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Hours < 10 && sTime.Minutes < 10)
			  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Seconds < 10)
			  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Minutes < 10)
			  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Hours < 10)
			  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
		  else
			  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  	  	ssd1306_SetCursor(28, 0);
		        ssd1306_WriteString(buf, Font_7x10);
		        //memset(buf, 0, sizeof(buf));
}

uint16_t BatteryCharge(){
	static uint16_t adc1;
	static uint8_t once_minute, access;
	//if(tim17 % 2 == 0){

//		 ADC_Select_CH3();
//		 HAL_ADC_Start(&hadc1);
//		 HAL_ADC_PollForConversion(&hadc1, 100);
//		 adc = HAL_ADC_GetValue(&hadc1);
		//


	if(access){
		adc1 = adc[0];
		//
		 if(adc1 > 2050){
		 adc1 -= 2050;
		 adc1 *= 0.175f;
		 }
		 else
		adc1 = 0;

		 once_minute = sTime.Minutes;
		 access = 0;
	}

	if(sTime.Minutes != once_minute)
			access = 1;
//	else{
//		once_minute = sTime.Minutes;
//		access = 0;
//	}
		// HAL_ADC_Stop(&hadc1);
	//tim17 = 1;
//		}
//	else{
//
//		return adc;
//	}
	if(adc1 >= 100)
	adc1 = 100;

	return adc1;
}


void WriteBatteryCharge(uint16_t adc){

	ssd1306_SetCursor(100, 0);
		 sprintf(buf, "%d", adc);
		 ssd1306_WriteString(buf, Font_7x10);
		 ssd1306_WriteChar('%', Font_7x10);
		 //memset(buf, 0, sizeof(buf));
}

void ConfigTime(){
	if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
						  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Seconds < 10 && sTime.Minutes < 10)
						  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Seconds < 10 && sTime.Hours < 10)
						  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Hours < 10 && sTime.Minutes < 10)
						  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Seconds < 10)
						  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Minutes < 10)
						  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Hours < 10)
						  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
					  else
						  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  	  	ssd1306_SetCursor(28, 0);
					        ssd1306_WriteString(buf, Font_7x10);
					      //  memset(buf, 0, sizeof(buf));

					if(accept){
					if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
					        Error_Handler();
					    accept = 0;
					    config = 0;
					}
					else{
					if(sw3 && tim3){
						if(sTime.Seconds < 60)
							sTime.Seconds++;
						else
							sTime.Seconds = 0;
						tim3 = 0;
						TIM3->CNT = 0;
						TIM3->SR &= ~TIM_SR_UIF;
						TIM3->ARR = 200;
						HAL_TIM_Base_Start_IT(&htim3);

					}
					if(sw2  && tim3){
						if(sTime.Minutes < 60)
							sTime.Minutes++;
						else
							sTime.Minutes = 0;
						tim3 = 0;
						TIM3->CNT = 0;
						TIM3->SR &= ~TIM_SR_UIF;
						TIM3->ARR = 200;
						HAL_TIM_Base_Start_IT(&htim3);
					}
					if(sw1 && tim3){
						if(sTime.Hours < 24)
							sTime.Hours++;
						else
							sTime.Hours = 0;
						tim3 = 0;
						TIM3->CNT = 0;
						TIM3->SR &= ~TIM_SR_UIF;
						TIM3->ARR = 200;
						HAL_TIM_Base_Start_IT(&htim3);
					}
					}

}

void Hall_Sensor(){
	ADC_Select_CH5();
		 HAL_ADC_Start(&hadc1);
		 //if( HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
		 adc[1] = HAL_ADC_GetValue(&hadc1);
		 HAL_ADC_Stop(&hadc1);
}
//float vrefint(){
//uint16_t vrefint = *ADDR_CALIBR_VREF;
//    HAL_ADCEx_Calibration_Start(&hadc1);
//
//	 sConfig.Channel = ADC_CHANNEL_VREFINT;
//		 sConfig.Rank = ADC_REGULAR_RANK_1;
//		 sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
//		 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//		 {
//		 	Error_Handler();
//		 }
//		 HAL_ADC_Start(&hadc1);
//		 float vref;
//		 	 if( HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
//		 	 vref = HAL_ADC_GetValue(&hadc1);
//		 	 HAL_ADC_Stop(&hadc1);
//		 	vref = (vrefint/ vref);
//		 	return vref;
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
