/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ssd1306.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ADDR_CALIBR_VREF ((uint16_t*) ((uint32_t) 0x1FFF75AA))
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

RTC_HandleTypeDef hrtc;

TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* USER CODE BEGIN PV */

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
ADC_ChannelConfTypeDef sConfig;

uint8_t buf[30];

//uint8_t x = 0, y = 30;

uint16_t adc[2];

uint8_t sw1 = 0, sw2 = 0, sw3 = 0, tim17 = 1;
uint8_t config = 0, accept = 0;
uint16_t tim16 = 0;
uint8_t size = 0;

uint16_t dead_zone, direct_zone;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM17_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */
void ADC_Select_CH3();
void ADC_Select_CH5();
//float vrefint();

void WriteTime();
uint16_t BatteryCharge(uint16_t adc0);
void WriteBatteryCharge();

void ConfigTime();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == Sw1_Pin){
		sw1 =1 ;
	}

	if(GPIO_Pin == Sw2_Pin){
		sw2 = 1;
	}

	if(GPIO_Pin == Sw3_Pin){
		sw3 = 1;
	}
}
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == Sw1_Pin){
		sw1 = 0;
	}

	if(GPIO_Pin == Sw2_Pin){
		sw2 = 0;
	}

	if(GPIO_Pin == Sw3_Pin){
		sw3 = 0;
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_ADC1_Init();
  MX_RTC_Init();
  MX_TIM17_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
    ssd1306_FlipScreenVertically();
    ssd1306_Clear();
    ssd1306_SetColor(White);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//float vref = vrefint();

HAL_TIM_Base_Start_IT(&htim17);
//uint8_t butR = 0, ButL = 0;
int8_t con = 0;
  while (1)
  {

	  if(sw1 && sw3){
		  HAL_TIM_Base_Start(&htim16);
		  if(TIM16->CNT >= 1500)
			  config = 1;
		  else
			  accept = 1;
		 // tim17 = 1;
		  HAL_Delay(200);
	  }
	  else{
		  HAL_TIM_Base_Stop(&htim16);
		  TIM16->CNT = 0;
		  accept = 0;
	  }
	  if(sw1 && sw2 && sw3)
		  config = 0;
switch (config){
case(0):
	  WriteTime();

adc[0] = BatteryCharge(adc[0]);

WriteBatteryCharge();

	 ADC_Select_CH5();
	 HAL_ADC_Start(&hadc1);
	 if( HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
	 adc[1] = HAL_ADC_GetValue(&hadc1);
	 HAL_ADC_Stop(&hadc1);


	 ssd1306_SetCursor(0, 40);
	 sprintf(buf, "%d", adc[1]);
	 ssd1306_WriteString(buf, Font_7x10);

	 break;


case(1):

if(sw1 && sw3)
	__NOP();
else if(sw3)
	con++;
else if(sw1)
	con--;

if(con >= 3)
	con = 0;
else if(con < 0)
	con = 2;
//accept = 0;
//if(tim17 > 5){
//	if(sw1 && sw3)
//		accept = 1;
//}


switch (con) {
case(0):
		ssd1306_SetCursor(0, 0);
		sprintf(buf, "Set time");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 19);
		sprintf(buf, "Calibration");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 38);
		sprintf(buf, "Set size");
		ssd1306_WriteString(buf, Font_11x18);
//		if(accept)
//		config = 2;
		if(sw2)
			config = 2;
		break;

case(1):

		ssd1306_SetCursor(0, 0);
		sprintf(buf, "Set size");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 19);
		sprintf(buf, "Set time");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 38);
		sprintf(buf, "Calibration");
		ssd1306_WriteString(buf, Font_11x18);
		if(sw2)
			config = 3;
		break;

case(2):
		ssd1306_SetCursor(0, 0);
		sprintf(buf, "Calibration");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 19);
		sprintf(buf, "Set size");
		ssd1306_WriteString(buf, Font_11x18);
		ssd1306_SetCursor(0, 38);
		sprintf(buf, "Set time");
		ssd1306_WriteString(buf, Font_11x18);
		if(sw2)
			config = 4;
		break;
}
		break;
case(2):
		ConfigTime();
		break;
case(3):
		if(sw2)
			config = 0;
		else if(sw3)
			size++;
		else if(sw1)
			size--;
		ssd1306_SetCursor(33, 0);
		sprintf(buf, "Wheel");
		ssd1306_WriteString(buf, Font_11x18);

		ssd1306_SetCursor(0, 39);
		sprintf(buf, "Size:%dinch", size);
		ssd1306_WriteString(buf, Font_11x18);
		break;
case(4):
		if(adc[1] < 300 || adc[1] > 3500  || ((adc[1] > 1400) && (adc[1] < 1600) )){
			ssd1306_SetCursor(20, 18);
			sprintf(buf, "Wire has");
			ssd1306_WriteString(buf, Font_11x18);
			ssd1306_SetCursor(27, 39);
			sprintf(buf, "broken");
			ssd1306_WriteString(buf, Font_11x18);
		}
		else{
			if(sw2 && con == 2){
				HAL_Delay(300);
				dead_zone = adc[1];
				con = 3;
			}
			if(con == 2){
			ssd1306_SetCursor(17, 0);
			sprintf(buf, "Set dead zone");
			ssd1306_WriteString(buf, Font_7x10);
			}
			else{
			ssd1306_SetCursor(17, 0);
			sprintf(buf, "Set direct zone");
			ssd1306_WriteString(buf, Font_7x10);
			if(sw2){
				direct_zone = adc[1];
				config = 0;
			}
			}
			ssd1306_SetCursor(6, 48);
			sprintf(buf, "Put middle button");
			ssd1306_WriteString(buf, Font_7x10);

		}


		break;
}

	 ssd1306_UpdateScreen();
	 ssd1306_Clear();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_3CYCLES_5;
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00503D58;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.SubSeconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
  sDate.Month = RTC_MONTH_APRIL;
  sDate.Date = 24;
  sDate.Year = 25;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
  htim16.Init.Prescaler = 15999;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 0xFFFF;
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}

/**
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
  htim17.Init.Prescaler = 3999;
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 1999;
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim17.Init.RepetitionCounter = 0;
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pins : Sw3_Pin Sw2_Pin STDBY_BAT_Pin CHRG_BAT_Pin */
  GPIO_InitStruct.Pin = Sw3_Pin|Sw2_Pin|STDBY_BAT_Pin|CHRG_BAT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : Sw1_Pin */
  GPIO_InitStruct.Pin = Sw1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Sw1_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void ADC_Select_CH3(){

	 sConfig.Channel = ADC_CHANNEL_3;
	 sConfig.Rank = ADC_REGULAR_RANK_1;
	 sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	 {
	 	Error_Handler();
	 }
}
void ADC_Select_CH5(){

	 sConfig.Channel = ADC_CHANNEL_5;
	 sConfig.Rank = ADC_REGULAR_RANK_1;
	 sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	 {
	 	Error_Handler();
	 }

}

void WriteTime(){
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

		  if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
			  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Seconds < 10 && sTime.Minutes < 10)
			  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Seconds < 10 && sTime.Hours < 10)
			  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Hours < 10 && sTime.Minutes < 10)
			  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Seconds < 10)
			  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Minutes < 10)
			  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  else if(sTime.Hours < 10)
			  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
		  else
			  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

		  	  	ssd1306_SetCursor(28, 0);
		        ssd1306_WriteString(buf, Font_7x10);
		        //memset(buf, 0, sizeof(buf));
}

uint16_t BatteryCharge(uint16_t adc0){
	uint16_t adc;
	if(tim17 % 2 == 0){

		 ADC_Select_CH3();
		 HAL_ADC_Start(&hadc1);
		 HAL_ADC_PollForConversion(&hadc1, 100);
		 adc = HAL_ADC_GetValue(&hadc1);
		 if(adc > 2050){
		 adc -= 2050;
		 adc *= 0.175f;
		 }
		 else
		adc = 0;

		 HAL_ADC_Stop(&hadc1);
	tim17 = 1;
		}
	else{
		return adc0;
	}
	return adc;
}


void WriteBatteryCharge(){
	ssd1306_SetCursor(100, 0);
		 sprintf(buf, "%d", adc[0]);
		 ssd1306_WriteString(buf, Font_7x10);
		 ssd1306_WriteChar('%', Font_7x10);
		 //memset(buf, 0, sizeof(buf));
}

void ConfigTime(){
	if(sTime.Seconds < 10 && sTime.Minutes < 10 && sTime.Hours < 10)
						  sprintf(buf, "0%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Seconds < 10 && sTime.Minutes < 10)
						  sprintf(buf, "%d:0%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Seconds < 10 && sTime.Hours < 10)
						  sprintf(buf, "0%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Hours < 10 && sTime.Minutes < 10)
						  sprintf(buf, "0%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Seconds < 10)
						  sprintf(buf, "%d:%d:0%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Minutes < 10)
						  sprintf(buf, "%d:0%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  else if(sTime.Hours < 10)
						  sprintf(buf, "0%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
					  else
						  sprintf(buf, "%d:%d:%d", sTime.Hours, sTime.Minutes, sTime.Seconds);

					  	  	ssd1306_SetCursor(28, 0);
					        ssd1306_WriteString(buf, Font_7x10);
					      //  memset(buf, 0, sizeof(buf));

					if(accept){
					if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
					        Error_Handler();
					    accept = 0;
					    config = 0;
					}
					else{
					if(sw3){
						if(sTime.Seconds < 60)
							sTime.Seconds++;
						else
							sTime.Seconds = 0;
					}
					if(sw2){
						if(sTime.Minutes < 60)
							sTime.Minutes++;
						else
							sTime.Minutes = 0;
					}
					if(sw1){
						if(sTime.Hours < 24)
							sTime.Hours++;
						else
							sTime.Hours = 0;
					}
					}

}
//float vrefint(){
//uint16_t vrefint = *ADDR_CALIBR_VREF;
//    HAL_ADCEx_Calibration_Start(&hadc1);
//
//	 sConfig.Channel = ADC_CHANNEL_VREFINT;
//		 sConfig.Rank = ADC_REGULAR_RANK_1;
//		 sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
//		 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//		 {
//		 	Error_Handler();
//		 }
//		 HAL_ADC_Start(&hadc1);
//		 float vref;
//		 	 if( HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
//		 	 vref = HAL_ADC_GetValue(&hadc1);
//		 	 HAL_ADC_Stop(&hadc1);
//		 	vref = (vrefint/ vref);
//		 	return vref;
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
